
SI4463_test_F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a618  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800a7c8  0800a7c8  0001a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed8  0800aed8  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aee0  0800aee0  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aee0  0800aee0  0001aee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aee4  0800aee4  0001aee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800aee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020404  2**0
                  CONTENTS
 10 .bss          000002dc  20000404  20000404  00020404  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e0  200006e0  00020404  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001105a  00000000  00000000  00020477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000240b  00000000  00000000  000314d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001088  00000000  00000000  000338e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce8  00000000  00000000  00034968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025ac3  00000000  00000000  00035650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012963  00000000  00000000  0005b113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e42a6  00000000  00000000  0006da76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ba8  00000000  00000000  00151d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  001578c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000404 	.word	0x20000404
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a7b0 	.word	0x0800a7b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000408 	.word	0x20000408
 80001ec:	0800a7b0 	.word	0x0800a7b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <__io_putchar>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001018:	1d39      	adds	r1, r7, #4
 800101a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101e:	2201      	movs	r2, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <__io_putchar+0x20>)
 8001022:	f002 fff2 	bl	800400a <HAL_UART_Transmit>
	return ch;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200004c0 	.word	0x200004c0

08001034 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d110      	bne.n	8001066 <HAL_GPIO_EXTI_Callback+0x32>
	{
		printf("Button interrupt !\r\n");
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_GPIO_EXTI_Callback+0x48>)
 8001046:	f005 ffc3 	bl	8006fd0 <puts>
		si4463_getInterrupts(&si4463);
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <HAL_GPIO_EXTI_Callback+0x4c>)
 800104c:	f004 f8db 	bl	8005206 <si4463_getInterrupts>
		printf("Current RSSI: %d\r\n", si4463_getCurrentRSSI(&si4463));
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001052:	f004 f880 	bl	8005156 <si4463_getCurrentRSSI>
 8001056:	4603      	mov	r3, r0
 8001058:	4619      	mov	r1, r3
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <HAL_GPIO_EXTI_Callback+0x50>)
 800105c:	f005 ff52 	bl	8006f04 <iprintf>
		irqFlag = true;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_GPIO_EXTI_Callback+0x54>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == IRQ_Pin)
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d102      	bne.n	8001072 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		irqFlag = true;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_GPIO_EXTI_Callback+0x54>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	0800a7c8 	.word	0x0800a7c8
 8001080:	20000504 	.word	0x20000504
 8001084:	0800a7dc 	.word	0x0800a7dc
 8001088:	20000588 	.word	0x20000588

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a6      	sub	sp, #152	; 0x98
 8001090:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f000 fdfb 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f915 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f000 fa33 	bl	8001504 <MX_GPIO_Init>
  MX_SPI1_Init();
 800109e:	f000 f981 	bl	80013a4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80010a2:	f000 fa05 	bl	80014b0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010a6:	f000 f9b3 	bl	8001410 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1); // us delay timer
 80010aa:	486b      	ldr	r0, [pc, #428]	; (8001258 <main+0x1cc>)
 80010ac:	f002 fc7a 	bl	80039a4 <HAL_TIM_Base_Start>

	si4463.SPI_Write = si4463_SPI_Write;
 80010b0:	4b6a      	ldr	r3, [pc, #424]	; (800125c <main+0x1d0>)
 80010b2:	4a6b      	ldr	r2, [pc, #428]	; (8001260 <main+0x1d4>)
 80010b4:	601a      	str	r2, [r3, #0]
	si4463.SPI_Read = si4463_SPI_Read;
 80010b6:	4b69      	ldr	r3, [pc, #420]	; (800125c <main+0x1d0>)
 80010b8:	4a6a      	ldr	r2, [pc, #424]	; (8001264 <main+0x1d8>)
 80010ba:	605a      	str	r2, [r3, #4]
	si4463.SPI_WriteRead = si4463_SPI_WriteRead;
 80010bc:	4b67      	ldr	r3, [pc, #412]	; (800125c <main+0x1d0>)
 80010be:	4a6a      	ldr	r2, [pc, #424]	; (8001268 <main+0x1dc>)
 80010c0:	609a      	str	r2, [r3, #8]
	si4463.SPI_CheckState = si4463_SPI_CheckState;
 80010c2:	4b66      	ldr	r3, [pc, #408]	; (800125c <main+0x1d0>)
 80010c4:	4a69      	ldr	r2, [pc, #420]	; (800126c <main+0x1e0>)
 80010c6:	60da      	str	r2, [r3, #12]
	si4463.spi_state_ready = HAL_SPI_STATE_READY;
 80010c8:	4b64      	ldr	r3, [pc, #400]	; (800125c <main+0x1d0>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	741a      	strb	r2, [r3, #16]
	si4463.DelayUs = si4463_DelayUs;
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <main+0x1d0>)
 80010d0:	4a67      	ldr	r2, [pc, #412]	; (8001270 <main+0x1e4>)
 80010d2:	615a      	str	r2, [r3, #20]
	si4463.NSEL = si4463_setNSEL;
 80010d4:	4b61      	ldr	r3, [pc, #388]	; (800125c <main+0x1d0>)
 80010d6:	4a67      	ldr	r2, [pc, #412]	; (8001274 <main+0x1e8>)
 80010d8:	619a      	str	r2, [r3, #24]
	si4463.SDN = si4463_setSDN;
 80010da:	4b60      	ldr	r3, [pc, #384]	; (800125c <main+0x1d0>)
 80010dc:	4a66      	ldr	r2, [pc, #408]	; (8001278 <main+0x1ec>)
 80010de:	61da      	str	r2, [r3, #28]
	si4463.gpios.IRQ = si4463_getIRQ;
 80010e0:	4b5e      	ldr	r3, [pc, #376]	; (800125c <main+0x1d0>)
 80010e2:	4a66      	ldr	r2, [pc, #408]	; (800127c <main+0x1f0>)
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
	si4463.gpios.GPIO1 = si4463_getGPIO1;
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <main+0x1d0>)
 80010e8:	4a65      	ldr	r2, [pc, #404]	; (8001280 <main+0x1f4>)
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
	si4463.gpios.gpio_low = GPIO_PIN_RESET;
 80010ec:	4b5b      	ldr	r3, [pc, #364]	; (800125c <main+0x1d0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	si4463.gpios.gpio_high = GPIO_PIN_SET;
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <main+0x1d0>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	//HAL_NVIC_DisableIRQ(EXTI4_IRQn);
	/* Initialize si4463 */
	int res = si4463_init(&si4463);
 80010fc:	4857      	ldr	r0, [pc, #348]	; (800125c <main+0x1d0>)
 80010fe:	f003 ffaf 	bl	8005060 <si4463_init>
 8001102:	4603      	mov	r3, r0
 8001104:	67bb      	str	r3, [r7, #120]	; 0x78
	if(res == SI4463_OK)
 8001106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <main+0x88>
		printf("Si4463 init .. ok !\r\n");
 800110c:	485d      	ldr	r0, [pc, #372]	; (8001284 <main+0x1f8>)
 800110e:	f005 ff5f 	bl	8006fd0 <puts>
 8001112:	e003      	b.n	800111c <main+0x90>
	else
		printf("Si4463 init .. fail ! error code: %d\r\n", res);
 8001114:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001116:	485c      	ldr	r0, [pc, #368]	; (8001288 <main+0x1fc>)
 8001118:	f005 fef4 	bl	8006f04 <iprintf>

	printf("Get Tx power %d \r\n", si4463_getTxPower(&si4463));
 800111c:	484f      	ldr	r0, [pc, #316]	; (800125c <main+0x1d0>)
 800111e:	f004 fc99 	bl	8005a54 <si4463_getTxPower>
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	4859      	ldr	r0, [pc, #356]	; (800128c <main+0x200>)
 8001128:	f005 feec 	bl	8006f04 <iprintf>

	res = si4463_setTxPower(&si4463, 10);
 800112c:	210a      	movs	r1, #10
 800112e:	484b      	ldr	r0, [pc, #300]	; (800125c <main+0x1d0>)
 8001130:	f004 fa19 	bl	8005566 <si4463_setTxPower>
 8001134:	4603      	mov	r3, r0
 8001136:	67bb      	str	r3, [r7, #120]	; 0x78
	if(res == SI4463_OK)
 8001138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10b      	bne.n	8001156 <main+0xca>
	{
		printf("Set Tx power .. ok !\r\n");
 800113e:	4854      	ldr	r0, [pc, #336]	; (8001290 <main+0x204>)
 8001140:	f005 ff46 	bl	8006fd0 <puts>
		printf("Get Tx power %d \r\n", si4463_getTxPower(&si4463));
 8001144:	4845      	ldr	r0, [pc, #276]	; (800125c <main+0x1d0>)
 8001146:	f004 fc85 	bl	8005a54 <si4463_getTxPower>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	484f      	ldr	r0, [pc, #316]	; (800128c <main+0x200>)
 8001150:	f005 fed8 	bl	8006f04 <iprintf>
 8001154:	e003      	b.n	800115e <main+0xd2>
	}
	else
		printf("Set Tx power .. fail ! error code: %d\r\n", res);
 8001156:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001158:	484e      	ldr	r0, [pc, #312]	; (8001294 <main+0x208>)
 800115a:	f005 fed3 	bl	8006f04 <iprintf>


	res = si4463_setFrequency(&si4463, 434500000);
 800115e:	494e      	ldr	r1, [pc, #312]	; (8001298 <main+0x20c>)
 8001160:	483e      	ldr	r0, [pc, #248]	; (800125c <main+0x1d0>)
 8001162:	f004 fadd 	bl	8005720 <si4463_setFrequency>
 8001166:	4603      	mov	r3, r0
 8001168:	67bb      	str	r3, [r7, #120]	; 0x78
	if(res == SI4463_OK)
 800116a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <main+0xec>
		printf("Set frequency .. ok !\r\n");
 8001170:	484a      	ldr	r0, [pc, #296]	; (800129c <main+0x210>)
 8001172:	f005 ff2d 	bl	8006fd0 <puts>
 8001176:	e003      	b.n	8001180 <main+0xf4>
	else
		printf("Set frequency .. fail ! error code: %d\r\n", res);
 8001178:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800117a:	4849      	ldr	r0, [pc, #292]	; (80012a0 <main+0x214>)
 800117c:	f005 fec2 	bl	8006f04 <iprintf>

	res = si4463_setTxModulation(&si4463, MOD_2FSK);
 8001180:	2102      	movs	r1, #2
 8001182:	4836      	ldr	r0, [pc, #216]	; (800125c <main+0x1d0>)
 8001184:	f004 fb3c 	bl	8005800 <si4463_setTxModulation>
 8001188:	4603      	mov	r3, r0
 800118a:	67bb      	str	r3, [r7, #120]	; 0x78

	res = si4463_setTxDataRate(&si4463, DR_1200);
 800118c:	2100      	movs	r1, #0
 800118e:	4833      	ldr	r0, [pc, #204]	; (800125c <main+0x1d0>)
 8001190:	f004 fbd4 	bl	800593c <si4463_setTxDataRate>
 8001194:	4603      	mov	r3, r0
 8001196:	67bb      	str	r3, [r7, #120]	; 0x78

	uint8_t control = RADIOLIB_AX25_CONTROL_U_UNNUMBERED_INFORMATION | RADIOLIB_AX25_CONTROL_POLL_FINAL_DISABLED | RADIOLIB_AX25_CONTROL_UNNUMBERED_FRAME;
 8001198:	2303      	movs	r3, #3
 800119a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	ax25frame_t* ax25frame = createAX25Frame("STARL", 0, "NCKU", 0, control, RADIOLIB_AX25_PID_NO_LAYER_3, (uint8_t*)"What is 'X' SATORO ?", strlen("What is 'X' SATORO ?"), 8);
 800119e:	2308      	movs	r3, #8
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	2314      	movs	r3, #20
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <main+0x218>)
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	23f0      	movs	r3, #240	; 0xf0
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	4a3c      	ldr	r2, [pc, #240]	; (80012a8 <main+0x21c>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	483c      	ldr	r0, [pc, #240]	; (80012ac <main+0x220>)
 80011bc:	f003 fa9a 	bl	80046f4 <createAX25Frame>
 80011c0:	6738      	str	r0, [r7, #112]	; 0x70
	uint16_t txLen = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	uint8_t* txData = AX25Frame_HDLC_Generator(ax25frame, &txLen);
 80011c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011cc:	4619      	mov	r1, r3
 80011ce:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80011d0:	f003 fafe 	bl	80047d0 <AX25Frame_HDLC_Generator>
 80011d4:	66f8      	str	r0, [r7, #108]	; 0x6c
//		printf("Start Rx .. ok !\r\n");
//	else
//		printf("Start Rx .. fail ! error code: %d\r\n", res);

	//HAL_NVIC_EnableIRQ(EXTI4_IRQn);
	uint8_t rxDataLen = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t rxData[100] = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2260      	movs	r2, #96	; 0x60
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 fff1 	bl	80071d0 <memset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  res = si4463_transmit(&si4463, txData, txLen, STATE_NO_CHANGE);
 80011ee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	2300      	movs	r3, #0
 80011f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <main+0x1d0>)
 80011fa:	f004 f93f 	bl	800547c <si4463_transmit>
 80011fe:	4603      	mov	r3, r0
 8001200:	67bb      	str	r3, [r7, #120]	; 0x78
	  if(res == SI4463_OK)
 8001202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11d      	bne.n	8001244 <main+0x1b8>
	  {
		  printf("Si4463 Transmit .. ok !\r\n");
 8001208:	4829      	ldr	r0, [pc, #164]	; (80012b0 <main+0x224>)
 800120a:	f005 fee1 	bl	8006fd0 <puts>
		  printf("packet: ");
 800120e:	4829      	ldr	r0, [pc, #164]	; (80012b4 <main+0x228>)
 8001210:	f005 fe78 	bl	8006f04 <iprintf>
		  for(int i = 0; i < txLen; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001218:	e00a      	b.n	8001230 <main+0x1a4>
			  printf("0x%02x ", txData[i]);
 800121a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800121c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	4824      	ldr	r0, [pc, #144]	; (80012b8 <main+0x22c>)
 8001226:	f005 fe6d 	bl	8006f04 <iprintf>
		  for(int i = 0; i < txLen; i++)
 800122a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800122c:	3301      	adds	r3, #1
 800122e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001230:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001234:	461a      	mov	r2, r3
 8001236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001238:	4293      	cmp	r3, r2
 800123a:	dbee      	blt.n	800121a <main+0x18e>
		  printf("\r\n");
 800123c:	481f      	ldr	r0, [pc, #124]	; (80012bc <main+0x230>)
 800123e:	f005 fec7 	bl	8006fd0 <puts>
 8001242:	e003      	b.n	800124c <main+0x1c0>
	  }

	  else
		  printf("Si4463 Transmit .. fail ! error code: %d\r\n", res);
 8001244:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <main+0x234>)
 8001248:	f005 fe5c 	bl	8006f04 <iprintf>

	  HAL_Delay(3000);
 800124c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001250:	f000 fd8e 	bl	8001d70 <HAL_Delay>
	  res = si4463_transmit(&si4463, txData, txLen, STATE_NO_CHANGE);
 8001254:	e7cb      	b.n	80011ee <main+0x162>
 8001256:	bf00      	nop
 8001258:	20000478 	.word	0x20000478
 800125c:	20000504 	.word	0x20000504
 8001260:	080016c1 	.word	0x080016c1
 8001264:	080016ed 	.word	0x080016ed
 8001268:	08001719 	.word	0x08001719
 800126c:	0800174d 	.word	0x0800174d
 8001270:	08001761 	.word	0x08001761
 8001274:	08001791 	.word	0x08001791
 8001278:	080017c5 	.word	0x080017c5
 800127c:	080017f9 	.word	0x080017f9
 8001280:	08001819 	.word	0x08001819
 8001284:	0800a7f0 	.word	0x0800a7f0
 8001288:	0800a808 	.word	0x0800a808
 800128c:	0800a830 	.word	0x0800a830
 8001290:	0800a844 	.word	0x0800a844
 8001294:	0800a85c 	.word	0x0800a85c
 8001298:	19e5f1a0 	.word	0x19e5f1a0
 800129c:	0800a884 	.word	0x0800a884
 80012a0:	0800a89c 	.word	0x0800a89c
 80012a4:	0800a8d8 	.word	0x0800a8d8
 80012a8:	0800a8c8 	.word	0x0800a8c8
 80012ac:	0800a8d0 	.word	0x0800a8d0
 80012b0:	0800a8f0 	.word	0x0800a8f0
 80012b4:	0800a90c 	.word	0x0800a90c
 80012b8:	0800a918 	.word	0x0800a918
 80012bc:	0800a920 	.word	0x0800a920
 80012c0:	0800a924 	.word	0x0800a924

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f005 ff7c 	bl	80071d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <SystemClock_Config+0xd8>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <SystemClock_Config+0xd8>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <SystemClock_Config+0xd8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SystemClock_Config+0xdc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <SystemClock_Config+0xdc>)
 800130e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <SystemClock_Config+0xdc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001334:	2304      	movs	r3, #4
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001338:	23b4      	movs	r3, #180	; 0xb4
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001340:	2307      	movs	r3, #7
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f001 f88d 	bl	8002468 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001354:	f000 fa70 	bl	8001838 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001358:	f001 f836 	bl	80023c8 <HAL_PWREx_EnableOverDrive>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001362:	f000 fa69 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2302      	movs	r3, #2
 800136c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001372:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2105      	movs	r1, #5
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fae7 	bl	8002958 <HAL_RCC_ClockConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001390:	f000 fa52 	bl	8001838 <Error_Handler>
  }
}
 8001394:	bf00      	nop
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_SPI1_Init+0x64>)
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <MX_SPI1_Init+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_SPI1_Init+0x64>)
 80013b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_SPI1_Init+0x64>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_SPI1_Init+0x64>)
 80013d8:	2228      	movs	r2, #40	; 0x28
 80013da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_SPI1_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <MX_SPI1_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_SPI1_Init+0x64>)
 80013f0:	220a      	movs	r2, #10
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_SPI1_Init+0x64>)
 80013f6:	f001 fccf 	bl	8002d98 <HAL_SPI_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001400:	f000 fa1a 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000420 	.word	0x20000420
 800140c:	40013000 	.word	0x40013000

08001410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_TIM1_Init+0x98>)
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <MX_TIM1_Init+0x9c>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001434:	22b3      	movs	r2, #179	; 0xb3
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_TIM1_Init+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_TIM1_Init+0x98>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_TIM1_Init+0x98>)
 800145a:	f002 fa53 	bl	8003904 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001464:	f000 f9e8 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001476:	f002 fafd 	bl	8003a74 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001480:	f000 f9da 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001492:	f002 fcf1 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800149c:	f000 f9cc 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000478 	.word	0x20000478
 80014ac:	40010000 	.word	0x40010000

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <MX_USART2_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e8:	f002 fd42 	bl	8003f70 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f000 f9a1 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200004c0 	.word	0x200004c0
 8001500:	40004400 	.word	0x40004400

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a62      	ldr	r2, [pc, #392]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b60      	ldr	r3, [pc, #384]	; (80016ac <MX_GPIO_Init+0x1a8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <MX_GPIO_Init+0x1a8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a54      	ldr	r2, [pc, #336]	; (80016ac <MX_GPIO_Init+0x1a8>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b52      	ldr	r3, [pc, #328]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a46      	ldr	r2, [pc, #280]	; (80016ac <MX_GPIO_Init+0x1a8>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b44      	ldr	r3, [pc, #272]	; (80016ac <MX_GPIO_Init+0x1a8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b40      	ldr	r3, [pc, #256]	; (80016ac <MX_GPIO_Init+0x1a8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <MX_GPIO_Init+0x1a8>)
 80015b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <MX_GPIO_Init+0x1a8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	2110      	movs	r1, #16
 80015c6:	483a      	ldr	r0, [pc, #232]	; (80016b0 <MX_GPIO_Init+0x1ac>)
 80015c8:	f000 fecc 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2120      	movs	r1, #32
 80015d0:	4837      	ldr	r0, [pc, #220]	; (80016b0 <MX_GPIO_Init+0x1ac>)
 80015d2:	f000 fec7 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80015dc:	4835      	ldr	r0, [pc, #212]	; (80016b4 <MX_GPIO_Init+0x1b0>)
 80015de:	f000 fec1 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4830      	ldr	r0, [pc, #192]	; (80016b8 <MX_GPIO_Init+0x1b4>)
 80015f8:	f000 fcf0 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80015fc:	2310      	movs	r3, #16
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001600:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4829      	ldr	r0, [pc, #164]	; (80016b8 <MX_GPIO_Init+0x1b4>)
 8001612:	f000 fce3 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : NSEL_Pin */
  GPIO_InitStruct.Pin = NSEL_Pin;
 8001616:	2310      	movs	r3, #16
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161e:	2301      	movs	r3, #1
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSEL_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4820      	ldr	r0, [pc, #128]	; (80016b0 <MX_GPIO_Init+0x1ac>)
 800162e:	f000 fcd5 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 8001632:	2320      	movs	r3, #32
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <MX_GPIO_Init+0x1ac>)
 800164a:	f000 fcc7 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4816      	ldr	r0, [pc, #88]	; (80016bc <MX_GPIO_Init+0x1b8>)
 8001662:	f000 fcbb 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001666:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_GPIO_Init+0x1b0>)
 8001680:	f000 fcac 	bl	8001fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2105      	movs	r1, #5
 8001688:	2006      	movs	r0, #6
 800168a:	f000 fc70 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800168e:	2006      	movs	r0, #6
 8001690:	f000 fc89 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	200a      	movs	r0, #10
 800169a:	f000 fc68 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800169e:	200a      	movs	r0, #10
 80016a0:	f000 fc81 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	; 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400

080016c0 <si4463_SPI_Write>:

/* USER CODE BEGIN 4 */
uint8_t si4463_SPI_Write(uint8_t* pTxData, uint8_t dataLen, uint32_t timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	460b      	mov	r3, r1
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	72fb      	strb	r3, [r7, #11]
	return HAL_SPI_Transmit(&hspi1, pTxData, dataLen, timeout);
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <si4463_SPI_Write+0x28>)
 80016d8:	f001 fbe7 	bl	8002eaa <HAL_SPI_Transmit>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000420 	.word	0x20000420

080016ec <si4463_SPI_Read>:

uint8_t si4463_SPI_Read(uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]
	return HAL_SPI_Receive(&hspi1, pRxData, dataLen, timeout);
 80016fa:	7afb      	ldrb	r3, [r7, #11]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <si4463_SPI_Read+0x28>)
 8001704:	f001 fd0d 	bl	8003122 <HAL_SPI_Receive>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000420 	.word	0x20000420

08001718 <si4463_SPI_WriteRead>:

uint8_t si4463_SPI_WriteRead(uint8_t* pTxData, uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	71fb      	strb	r3, [r7, #7]
	return HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, dataLen, timeout);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	b29a      	uxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <si4463_SPI_WriteRead+0x30>)
 8001738:	f001 fe04 	bl	8003344 <HAL_SPI_TransmitReceive>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000420 	.word	0x20000420

0800174c <si4463_SPI_CheckState>:

uint8_t si4463_SPI_CheckState(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	return HAL_SPI_GetState(&hspi1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <si4463_SPI_CheckState+0x10>)
 8001752:	f001 ff99 	bl	8003688 <HAL_SPI_GetState>
 8001756:	4603      	mov	r3, r0
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000420 	.word	0x20000420

08001760 <si4463_DelayUs>:

void si4463_DelayUs(uint32_t delay)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <si4463_DelayUs+0x2c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1)) < delay);
 8001770:	bf00      	nop
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <si4463_DelayUs+0x2c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d8f9      	bhi.n	8001772 <si4463_DelayUs+0x12>
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	20000478 	.word	0x20000478

08001790 <si4463_setNSEL>:

void si4463_setNSEL(bool val)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	if(val == true)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <si4463_setNSEL+0x1c>
		HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2110      	movs	r1, #16
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <si4463_setNSEL+0x30>)
 80017a6:	f000 fddd 	bl	8002364 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_RESET);
}
 80017aa:	e004      	b.n	80017b6 <si4463_setNSEL+0x26>
		HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2110      	movs	r1, #16
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <si4463_setNSEL+0x30>)
 80017b2:	f000 fdd7 	bl	8002364 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020800 	.word	0x40020800

080017c4 <si4463_setSDN>:

void si4463_setSDN(bool val)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	if(val == true)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <si4463_setSDN+0x1c>
		HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2120      	movs	r1, #32
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <si4463_setSDN+0x30>)
 80017da:	f000 fdc3 	bl	8002364 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
}
 80017de:	e004      	b.n	80017ea <si4463_setSDN+0x26>
		HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2120      	movs	r1, #32
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <si4463_setSDN+0x30>)
 80017e6:	f000 fdbd 	bl	8002364 <HAL_GPIO_WritePin>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40020800 	.word	0x40020800

080017f8 <si4463_getIRQ>:

bool si4463_getIRQ(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin);
 80017fc:	2110      	movs	r1, #16
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <si4463_getIRQ+0x1c>)
 8001800:	f000 fd98 	bl	8002334 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020000 	.word	0x40020000

08001818 <si4463_getGPIO1>:

bool si4463_getGPIO1(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIO1_GPIO_Port, GPIO1_Pin);
 800181c:	2101      	movs	r1, #1
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <si4463_getGPIO1+0x1c>)
 8001820:	f000 fd88 	bl	8002334 <HAL_GPIO_ReadPin>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40020400 	.word	0x40020400

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_MspInit+0x4c>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x4c>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_SPI_MspInit+0xa4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d13b      	bne.n	800192e <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_SPI_MspInit+0xa8>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_SPI_MspInit+0xa8>)
 80018c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_SPI_MspInit+0xa8>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_SPI_MspInit+0xa8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_SPI_MspInit+0xa8>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_SPI_MspInit+0xa8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ee:	2320      	movs	r3, #32
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018fe:	2305      	movs	r3, #5
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <HAL_SPI_MspInit+0xac>)
 800190a:	f000 fb67 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190e:	23c0      	movs	r3, #192	; 0xc0
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191e:	2305      	movs	r3, #5
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_SPI_MspInit+0xac>)
 800192a:	f000 fb57 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40013000 	.word	0x40013000
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_TIM_Base_MspInit+0x3c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10d      	bne.n	8001972 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_TIM_Base_MspInit+0x40>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_TIM_Base_MspInit+0x40>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_TIM_Base_MspInit+0x40>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40010000 	.word	0x40010000
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12b      	bne.n	8001a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019e2:	2360      	movs	r3, #96	; 0x60
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_MspInit+0x8c>)
 80019fe:	f000 faed 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020c00 	.word	0x40020c00

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f964 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f000 fc91 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001a7e:	2010      	movs	r0, #16
 8001a80:	f000 fc8a 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_kill>:

int _kill(int pid, int sig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aa2:	f005 fbf7 	bl	8007294 <__errno>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2216      	movs	r2, #22
 8001aaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_exit>:

void _exit (int status)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffe7 	bl	8001a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aca:	e7fe      	b.n	8001aca <_exit+0x12>

08001acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e00a      	b.n	8001af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ade:	f3af 8000 	nop.w
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	b2ca      	uxtb	r2, r1
 8001aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf0      	blt.n	8001ade <_read+0x12>
  }

  return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e009      	b.n	8001b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa75 	bl	8001010 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf1      	blt.n	8001b18 <_write+0x12>
  }
  return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_close>:

int _close(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b66:	605a      	str	r2, [r3, #4]
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_isatty>:

int _isatty(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f005 fb5c 	bl	8007294 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20030000 	.word	0x20030000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	2000058c 	.word	0x2000058c
 8001c10:	200006e0 	.word	0x200006e0

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <SystemInit+0x20>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <SystemInit+0x20>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c3e:	490e      	ldr	r1, [pc, #56]	; (8001c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c44:	e002      	b.n	8001c4c <LoopCopyDataInit>

08001c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4a:	3304      	adds	r3, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c50:	d3f9      	bcc.n	8001c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c54:	4c0b      	ldr	r4, [pc, #44]	; (8001c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c58:	e001      	b.n	8001c5e <LoopFillZerobss>

08001c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c5c:	3204      	adds	r2, #4

08001c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c60:	d3fb      	bcc.n	8001c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c62:	f7ff ffd7 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c66:	f005 fb1b 	bl	80072a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6a:	f7ff fa0f 	bl	800108c <main>
  bx  lr    
 8001c6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8001c7c:	0800aee8 	.word	0x0800aee8
  ldr r2, =_sbss
 8001c80:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8001c84:	200006e0 	.word	0x200006e0

08001c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <HAL_Init+0x40>)
 8001c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_Init+0x40>)
 8001ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_Init+0x40>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f94f 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 f808 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff fdc0 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023c00 	.word	0x40023c00

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f967 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 f92f 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000590 	.word	0x20000590

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000590 	.word	0x20000590

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <__NVIC_EnableIRQ+0x38>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff29 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff3e 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff8e 	bl	8001eac <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5d 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff31 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa2 	bl	8001f14 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e177      	b.n	80022e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8166 	bne.w	80022e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d005      	beq.n	800202e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	2b02      	cmp	r3, #2
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80c0 	beq.w	80022e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_GPIO_Init+0x324>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217e:	4a61      	ldr	r2, [pc, #388]	; (8002304 <HAL_GPIO_Init+0x328>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <HAL_GPIO_Init+0x32c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d037      	beq.n	800221a <HAL_GPIO_Init+0x23e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_GPIO_Init+0x330>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d031      	beq.n	8002216 <HAL_GPIO_Init+0x23a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a56      	ldr	r2, [pc, #344]	; (8002310 <HAL_GPIO_Init+0x334>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02b      	beq.n	8002212 <HAL_GPIO_Init+0x236>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_GPIO_Init+0x338>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d025      	beq.n	800220e <HAL_GPIO_Init+0x232>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a54      	ldr	r2, [pc, #336]	; (8002318 <HAL_GPIO_Init+0x33c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <HAL_GPIO_Init+0x22e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a53      	ldr	r2, [pc, #332]	; (800231c <HAL_GPIO_Init+0x340>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d019      	beq.n	8002206 <HAL_GPIO_Init+0x22a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_GPIO_Init+0x344>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0x226>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a51      	ldr	r2, [pc, #324]	; (8002324 <HAL_GPIO_Init+0x348>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00d      	beq.n	80021fe <HAL_GPIO_Init+0x222>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_GPIO_Init+0x34c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <HAL_GPIO_Init+0x21e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	; (800232c <HAL_GPIO_Init+0x350>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_GPIO_Init+0x21a>
 80021f2:	2309      	movs	r3, #9
 80021f4:	e012      	b.n	800221c <HAL_GPIO_Init+0x240>
 80021f6:	230a      	movs	r3, #10
 80021f8:	e010      	b.n	800221c <HAL_GPIO_Init+0x240>
 80021fa:	2308      	movs	r3, #8
 80021fc:	e00e      	b.n	800221c <HAL_GPIO_Init+0x240>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00c      	b.n	800221c <HAL_GPIO_Init+0x240>
 8002202:	2306      	movs	r3, #6
 8002204:	e00a      	b.n	800221c <HAL_GPIO_Init+0x240>
 8002206:	2305      	movs	r3, #5
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x240>
 800220a:	2304      	movs	r3, #4
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x240>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x240>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x240>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x240>
 800221a:	2300      	movs	r3, #0
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x328>)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_GPIO_Init+0x354>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a34      	ldr	r2, [pc, #208]	; (8002330 <HAL_GPIO_Init+0x354>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_GPIO_Init+0x354>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a29      	ldr	r2, [pc, #164]	; (8002330 <HAL_GPIO_Init+0x354>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_GPIO_Init+0x354>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_GPIO_Init+0x354>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_GPIO_Init+0x354>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <HAL_GPIO_Init+0x354>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	f67f ae84 	bls.w	8001ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40021000 	.word	0x40021000
 800231c:	40021400 	.word	0x40021400
 8002320:	40021800 	.word	0x40021800
 8002324:	40021c00 	.word	0x40021c00
 8002328:	40022000 	.word	0x40022000
 800232c:	40022400 	.word	0x40022400
 8002330:	40013c00 	.word	0x40013c00

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e001      	b.n	8002356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fe3c 	bl	8001034 <HAL_GPIO_EXTI_Callback>
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_PWREx_EnableOverDrive+0x90>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_PWREx_EnableOverDrive+0x90>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_PWREx_EnableOverDrive+0x90>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_PWREx_EnableOverDrive+0x94>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f4:	f7ff fcb0 	bl	8001d58 <HAL_GetTick>
 80023f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023fa:	e009      	b.n	8002410 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023fc:	f7ff fcac 	bl	8001d58 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800240a:	d901      	bls.n	8002410 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e01f      	b.n	8002450 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_PWREx_EnableOverDrive+0x98>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d1ee      	bne.n	80023fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002424:	f7ff fc98 	bl	8001d58 <HAL_GetTick>
 8002428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800242a:	e009      	b.n	8002440 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800242c:	f7ff fc94 	bl	8001d58 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800243a:	d901      	bls.n	8002440 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e007      	b.n	8002450 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_PWREx_EnableOverDrive+0x98>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800244c:	d1ee      	bne.n	800242c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	420e0040 	.word	0x420e0040
 8002460:	40007000 	.word	0x40007000
 8002464:	420e0044 	.word	0x420e0044

08002468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e267      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d075      	beq.n	8002572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	2b08      	cmp	r3, #8
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b82      	ldr	r3, [pc, #520]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b7e      	ldr	r3, [pc, #504]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e242      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b70      	ldr	r3, [pc, #448]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6f      	ldr	r2, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6c      	ldr	r2, [pc, #432]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 8002500:	4b69      	ldr	r3, [pc, #420]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a68      	ldr	r2, [pc, #416]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a65      	ldr	r2, [pc, #404]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fc1a 	bl	8001d58 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fc16 	bl	8001d58 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e207      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xc0>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fc06 	bl	8001d58 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff fc02 	bl	8001d58 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1f3      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b51      	ldr	r3, [pc, #324]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e1c7      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4937      	ldr	r1, [pc, #220]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	e03a      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b34      	ldr	r3, [pc, #208]	; (80026ac <HAL_RCC_OscConfig+0x244>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff fbbb 	bl	8001d58 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff fbb7 	bl	8001d58 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1a8      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4925      	ldr	r1, [pc, #148]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x244>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff fb9a 	bl	8001d58 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002628:	f7ff fb96 	bl	8001d58 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e187      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d036      	beq.n	80026c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_RCC_OscConfig+0x248>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7ff fb7a 	bl	8001d58 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff fb76 	bl	8001d58 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e167      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x240>)
 800267c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x200>
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_OscConfig+0x248>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb63 	bl	8001d58 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	e00e      	b.n	80026b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f7ff fb5f 	bl	8001d58 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d907      	bls.n	80026b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e150      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470000 	.word	0x42470000
 80026b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b88      	ldr	r3, [pc, #544]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ea      	bne.n	8002696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8097 	beq.w	80027fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b81      	ldr	r3, [pc, #516]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b7d      	ldr	r3, [pc, #500]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a7c      	ldr	r2, [pc, #496]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b7a      	ldr	r3, [pc, #488]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b77      	ldr	r3, [pc, #476]	; (80028dc <HAL_RCC_OscConfig+0x474>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b74      	ldr	r3, [pc, #464]	; (80028dc <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a73      	ldr	r2, [pc, #460]	; (80028dc <HAL_RCC_OscConfig+0x474>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7ff fb1f 	bl	8001d58 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff fb1b 	bl	8001d58 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e10c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x474>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x2ea>
 8002744:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x30c>
 800275a:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a5e      	ldr	r2, [pc, #376]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a5b      	ldr	r2, [pc, #364]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002774:	4b58      	ldr	r3, [pc, #352]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7ff fae0 	bl	8001d58 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7ff fadc 	bl	8001d58 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0cb      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ee      	beq.n	800279c <HAL_RCC_OscConfig+0x334>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7ff faca 	bl	8001d58 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7ff fac6 	bl	8001d58 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0b5      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ee      	bne.n	80027c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	4a38      	ldr	r2, [pc, #224]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a1 	beq.w	8002948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002806:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d05c      	beq.n	80028cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d141      	bne.n	800289e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff fa9a 	bl	8001d58 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7ff fa96 	bl	8001d58 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e087      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	491b      	ldr	r1, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x478>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7ff fa6f 	bl	8001d58 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7ff fa6b 	bl	8001d58 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e05c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x416>
 800289c:	e054      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x478>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fa58 	bl	8001d58 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7ff fa54 	bl	8001d58 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e045      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_OscConfig+0x470>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x444>
 80028ca:	e03d      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e038      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d028      	beq.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d121      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800291a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7ff f986 	bl	8001d58 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7ff f982 	bl	8001d58 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f8e6 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	0800aa94 	.word	0x0800aa94
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b094      	sub	sp, #80	; 0x50
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b30:	2300      	movs	r3, #0
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b79      	ldr	r3, [pc, #484]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80e1 	bhi.w	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e0db      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b73      	ldr	r3, [pc, #460]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b5c:	e0db      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b62:	e0d8      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	2200      	movs	r2, #0
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
 8002b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b96:	4622      	mov	r2, r4
 8002b98:	462b      	mov	r3, r5
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4621      	mov	r1, r4
 8002bb0:	1a51      	subs	r1, r2, r1
 8002bb2:	6139      	str	r1, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	018a      	lsls	r2, r1, #6
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bdc:	4659      	mov	r1, fp
 8002bde:	eb63 0901 	sbc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	462b      	mov	r3, r5
 8002c04:	eb49 0303 	adc.w	r3, r9, r3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c16:	4629      	mov	r1, r5
 8002c18:	024b      	lsls	r3, r1, #9
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c20:	4621      	mov	r1, r4
 8002c22:	024a      	lsls	r2, r1, #9
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c34:	f7fe f838 	bl	8000ca8 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c40:	e058      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0159      	lsls	r1, r3, #5
 8002c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6e:	0150      	lsls	r0, r2, #5
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4641      	mov	r1, r8
 8002c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c94:	ebb2 040a 	subs.w	r4, r2, sl
 8002c98:	eb63 050b 	sbc.w	r5, r3, fp
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb45 0303 	adc.w	r3, r5, r3
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	028b      	lsls	r3, r1, #10
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	028a      	lsls	r2, r1, #10
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	61fa      	str	r2, [r7, #28]
 8002ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce8:	f7fd ffde 	bl	8000ca8 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3750      	adds	r7, #80	; 0x50
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	0800aaa4 	.word	0x0800aaa4

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffdc 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0b5b      	lsrs	r3, r3, #13
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	0800aaa4 	.word	0x0800aaa4

08002d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07b      	b.n	8002ea2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dba:	d009      	beq.n	8002dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
 8002dc2:	e005      	b.n	8002dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fd52 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e54:	ea42 0103 	orr.w	r1, r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0104 	and.w	r1, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f003 0210 	and.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b088      	sub	sp, #32
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_SPI_Transmit+0x22>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e126      	b.n	800311a <HAL_SPI_Transmit+0x270>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed4:	f7fe ff40 	bl	8001d58 <HAL_GetTick>
 8002ed8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eee:	e10b      	b.n	8003108 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Transmit+0x52>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f00:	e102      	b.n	8003108 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2203      	movs	r2, #3
 8002f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f48:	d10f      	bne.n	8002f6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d007      	beq.n	8002f88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f90:	d14b      	bne.n	800302a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_Transmit+0xf6>
 8002f9a:	8afb      	ldrh	r3, [r7, #22]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d13e      	bne.n	800301e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fc4:	e02b      	b.n	800301e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d112      	bne.n	8002ffa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	1c9a      	adds	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ff8:	e011      	b.n	800301e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffa:	f7fe fead 	bl	8001d58 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d803      	bhi.n	8003012 <HAL_SPI_Transmit+0x168>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d102      	bne.n	8003018 <HAL_SPI_Transmit+0x16e>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800301c:	e074      	b.n	8003108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ce      	bne.n	8002fc6 <HAL_SPI_Transmit+0x11c>
 8003028:	e04c      	b.n	80030c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_SPI_Transmit+0x18e>
 8003032:	8afb      	ldrh	r3, [r7, #22]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d140      	bne.n	80030ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	7812      	ldrb	r2, [r2, #0]
 8003044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800305e:	e02c      	b.n	80030ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d113      	bne.n	8003096 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	86da      	strh	r2, [r3, #54]	; 0x36
 8003094:	e011      	b.n	80030ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003096:	f7fe fe5f 	bl	8001d58 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d803      	bhi.n	80030ae <HAL_SPI_Transmit+0x204>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_Transmit+0x20a>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030b8:	e026      	b.n	8003108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1cd      	bne.n	8003060 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fbd9 	bl	8003880 <SPI_EndRxTxTransaction>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e000      	b.n	8003108 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003118:	7ffb      	ldrb	r3, [r7, #31]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af02      	add	r7, sp, #8
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800313e:	d112      	bne.n	8003166 <HAL_SPI_Receive+0x44>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10e      	bne.n	8003166 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2204      	movs	r2, #4
 800314c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8f1 	bl	8003344 <HAL_SPI_TransmitReceive>
 8003162:	4603      	mov	r3, r0
 8003164:	e0ea      	b.n	800333c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_SPI_Receive+0x52>
 8003170:	2302      	movs	r3, #2
 8003172:	e0e3      	b.n	800333c <HAL_SPI_Receive+0x21a>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800317c:	f7fe fdec 	bl	8001d58 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003192:	e0ca      	b.n	800332a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Receive+0x7e>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a4:	e0c1      	b.n	800332a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2204      	movs	r2, #4
 80031aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ec:	d10f      	bne.n	800320e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d007      	beq.n	800322c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d162      	bne.n	80032fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003234:	e02e      	b.n	8003294 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d115      	bne.n	8003270 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f103 020c 	add.w	r2, r3, #12
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800326e:	e011      	b.n	8003294 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003270:	f7fe fd72 	bl	8001d58 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d803      	bhi.n	8003288 <HAL_SPI_Receive+0x166>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d102      	bne.n	800328e <HAL_SPI_Receive+0x16c>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003292:	e04a      	b.n	800332a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1cb      	bne.n	8003236 <HAL_SPI_Receive+0x114>
 800329e:	e031      	b.n	8003304 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d113      	bne.n	80032d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	b292      	uxth	r2, r2
 80032ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d4:	e011      	b.n	80032fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fe fd3f 	bl	8001d58 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Receive+0x1cc>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Receive+0x1d2>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032f8:	e017      	b.n	800332a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1cd      	bne.n	80032a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa53 	bl	80037b4 <SPI_EndRxTransaction>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
 8003326:	e000      	b.n	800332a <HAL_SPI_Receive+0x208>
  }

error :
 8003328:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	; 0x30
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003352:	2301      	movs	r3, #1
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_SPI_TransmitReceive+0x26>
 8003366:	2302      	movs	r3, #2
 8003368:	e18a      	b.n	8003680 <HAL_SPI_TransmitReceive+0x33c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003372:	f7fe fcf1 	bl	8001d58 <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800338c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003390:	2b01      	cmp	r3, #1
 8003392:	d00f      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x70>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339a:	d107      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x68>
 80033a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d003      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033b2:	e15b      	b.n	800366c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x82>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x82>
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033cc:	e14e      	b.n	800366c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2205      	movs	r2, #5
 80033de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	887a      	ldrh	r2, [r7, #2]
 80033f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	887a      	ldrh	r2, [r7, #2]
 800340a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d007      	beq.n	8003436 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d178      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_SPI_TransmitReceive+0x10a>
 8003448:	8b7b      	ldrh	r3, [r7, #26]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d166      	bne.n	800351c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003472:	e053      	b.n	800351c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d11b      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x176>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d016      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x176>
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d113      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d119      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x1b8>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	b292      	uxth	r2, r2
 80034de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034f8:	2301      	movs	r3, #1
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034fc:	f7fe fc2c 	bl	8001d58 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003508:	429a      	cmp	r2, r3
 800350a:	d807      	bhi.n	800351c <HAL_SPI_TransmitReceive+0x1d8>
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d003      	beq.n	800351c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800351a:	e0a7      	b.n	800366c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1a6      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x130>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1a1      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x130>
 8003530:	e07c      	b.n	800362c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x1fc>
 800353a:	8b7b      	ldrh	r3, [r7, #26]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d16b      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	330c      	adds	r3, #12
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003566:	e057      	b.n	8003618 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11c      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x26c>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x26c>
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d114      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d119      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x2ae>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d014      	beq.n	80035f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ee:	2301      	movs	r3, #1
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035f2:	f7fe fbb1 	bl	8001d58 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035fe:	429a      	cmp	r2, r3
 8003600:	d803      	bhi.n	800360a <HAL_SPI_TransmitReceive+0x2c6>
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d102      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x2cc>
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003616:	e029      	b.n	800366c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1a2      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x224>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d19d      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f925 	bl	8003880 <SPI_EndRxTxTransaction>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003648:	e010      	b.n	800366c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	e000      	b.n	800366c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800366a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800367c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003680:	4618      	mov	r0, r3
 8003682:	3730      	adds	r7, #48	; 0x30
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003696:	b2db      	uxtb	r3, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036b4:	f7fe fb50 	bl	8001d58 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036c4:	f7fe fb48 	bl	8001d58 <HAL_GetTick>
 80036c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036ca:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	0d1b      	lsrs	r3, r3, #20
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036da:	e054      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d050      	beq.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036e4:	f7fe fb38 	bl	8001d58 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d902      	bls.n	80036fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d13d      	bne.n	8003776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003712:	d111      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d004      	beq.n	8003728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d107      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003740:	d10f      	bne.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e017      	b.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3b01      	subs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d19b      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c8:	d111      	bne.n	80037ee <SPI_EndRxTransaction+0x3a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d004      	beq.n	80037de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d107      	bne.n	80037ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f6:	d12a      	bne.n	800384e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d012      	beq.n	8003828 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff ff49 	bl	80036a4 <SPI_WaitFlagStateUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02d      	beq.n	8003874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e026      	b.n	8003876 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	2101      	movs	r1, #1
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff36 	bl	80036a4 <SPI_WaitFlagStateUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01a      	beq.n	8003874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e013      	b.n	8003876 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	2101      	movs	r1, #1
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff ff23 	bl	80036a4 <SPI_WaitFlagStateUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e000      	b.n	8003876 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <SPI_EndRxTxTransaction+0x7c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <SPI_EndRxTxTransaction+0x80>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0d5b      	lsrs	r3, r3, #21
 8003898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038aa:	d112      	bne.n	80038d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2200      	movs	r2, #0
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fef4 	bl	80036a4 <SPI_WaitFlagStateUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00f      	b.n	80038f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3b01      	subs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d0f2      	beq.n	80038d2 <SPI_EndRxTxTransaction+0x52>
 80038ec:	e000      	b.n	80038f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80038ee:	bf00      	nop
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000
 8003900:	165e9f81 	.word	0x165e9f81

08003904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e041      	b.n	800399a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe f80a 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f000 f95e 	bl	8003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d001      	beq.n	80039bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e046      	b.n	8003a4a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <HAL_TIM_Base_Start+0xb4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d022      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d01d      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_TIM_Base_Start+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_TIM_Base_Start+0xbc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_TIM_Base_Start+0xc0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_TIM_Base_Start+0xc4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <HAL_TIM_Base_Start+0xc8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_Base_Start+0x70>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_TIM_Base_Start+0xcc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d010      	beq.n	8003a48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	e007      	b.n	8003a48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40001800 	.word	0x40001800

08003a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0b4      	b.n	8003bfa <HAL_TIM_ConfigClockSource+0x186>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac8:	d03e      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0xd4>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	f200 8087 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_TIM_ConfigClockSource+0x172>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ade:	d87f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d01a      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0xa6>
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d87b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d050      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x11a>
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d877      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b50      	cmp	r3, #80	; 0x50
 8003af2:	d03c      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0xfa>
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d873      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d058      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x13a>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d86f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d064      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d86b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d060      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d867      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05c      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d05a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	e062      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f000 f985 	bl	8003e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	609a      	str	r2, [r3, #8]
      break;
 8003b46:	e04f      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f000 f96e 	bl	8003e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6a:	609a      	str	r2, [r3, #8]
      break;
 8003b6c:	e03c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f8e2 	bl	8003d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2150      	movs	r1, #80	; 0x50
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f93b 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e02c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 f901 	bl	8003da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2160      	movs	r1, #96	; 0x60
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f92b 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bac:	e01c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f000 f8c2 	bl	8003d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f91b 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bcc:	e00c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f000 f912 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bde:	e003      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <TIM_Base_SetConfig+0x114>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c22:	d00f      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3d      	ldr	r2, [pc, #244]	; (8003d1c <TIM_Base_SetConfig+0x118>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3c      	ldr	r2, [pc, #240]	; (8003d20 <TIM_Base_SetConfig+0x11c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <TIM_Base_SetConfig+0x120>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <TIM_Base_SetConfig+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <TIM_Base_SetConfig+0x114>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02b      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d027      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <TIM_Base_SetConfig+0x118>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d023      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <TIM_Base_SetConfig+0x11c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01f      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	; (8003d24 <TIM_Base_SetConfig+0x120>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01b      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <TIM_Base_SetConfig+0x124>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d017      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a28      	ldr	r2, [pc, #160]	; (8003d2c <TIM_Base_SetConfig+0x128>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <TIM_Base_SetConfig+0x12c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00f      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <TIM_Base_SetConfig+0x130>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00b      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <TIM_Base_SetConfig+0x134>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a24      	ldr	r2, [pc, #144]	; (8003d3c <TIM_Base_SetConfig+0x138>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <TIM_Base_SetConfig+0x13c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <TIM_Base_SetConfig+0x114>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_Base_SetConfig+0xf8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <TIM_Base_SetConfig+0x124>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d103      	bne.n	8003d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	615a      	str	r2, [r3, #20]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	40001800 	.word	0x40001800
 8003d3c:	40001c00 	.word	0x40001c00
 8003d40:	40002000 	.word	0x40002000

08003d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 030a 	bic.w	r3, r3, #10
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	031b      	lsls	r3, r3, #12
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f043 0307 	orr.w	r3, r3, #7
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	021a      	lsls	r2, r3, #8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e05a      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d01d      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1a      	ldr	r2, [pc, #104]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40001800 	.word	0x40001800

08003f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e03f      	b.n	8004002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fcf6 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f929 	bl	800420c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08a      	sub	sp, #40	; 0x28
 800400e:	af02      	add	r7, sp, #8
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	d17c      	bne.n	8004124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_Transmit+0x2c>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e075      	b.n	8004126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x3e>
 8004044:	2302      	movs	r3, #2
 8004046:	e06e      	b.n	8004126 <HAL_UART_Transmit+0x11c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405e:	f7fd fe7b 	bl	8001d58 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d108      	bne.n	800408c <HAL_UART_Transmit+0x82>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e003      	b.n	8004094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800409c:	e02a      	b.n	80040f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f840 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e036      	b.n	8004126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3302      	adds	r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e007      	b.n	80040e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3301      	adds	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1cf      	bne.n	800409e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2140      	movs	r1, #64	; 0x40
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f810 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b090      	sub	sp, #64	; 0x40
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	e050      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d04c      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
 800414e:	f7fd fe03 	bl	8001d58 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415a:	429a      	cmp	r2, r3
 800415c:	d241      	bcs.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800417e:	637a      	str	r2, [r7, #52]	; 0x34
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041b2:	623a      	str	r2, [r7, #32]
 80041b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e00f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d09f      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3740      	adds	r7, #64	; 0x40
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b0c0      	sub	sp, #256	; 0x100
 8004212:	af00      	add	r7, sp, #0
 8004214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	68d9      	ldr	r1, [r3, #12]
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	ea40 0301 	orr.w	r3, r0, r1
 8004234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	431a      	orrs	r2, r3
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004264:	f021 010c 	bic.w	r1, r1, #12
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004272:	430b      	orrs	r3, r1
 8004274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	6999      	ldr	r1, [r3, #24]
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	ea40 0301 	orr.w	r3, r0, r1
 8004292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b8f      	ldr	r3, [pc, #572]	; (80044d8 <UART_SetConfig+0x2cc>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d005      	beq.n	80042ac <UART_SetConfig+0xa0>
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b8d      	ldr	r3, [pc, #564]	; (80044dc <UART_SetConfig+0x2d0>)
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d104      	bne.n	80042b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7fe fd60 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 80042b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042b4:	e003      	b.n	80042be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b6:	f7fe fd47 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 80042ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	f040 810c 	bne.w	80044e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	1891      	adds	r1, r2, r2
 80042e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042e6:	415b      	adcs	r3, r3
 80042e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ee:	4621      	mov	r1, r4
 80042f0:	eb12 0801 	adds.w	r8, r2, r1
 80042f4:	4629      	mov	r1, r5
 80042f6:	eb43 0901 	adc.w	r9, r3, r1
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430e:	4690      	mov	r8, r2
 8004310:	4699      	mov	r9, r3
 8004312:	4623      	mov	r3, r4
 8004314:	eb18 0303 	adds.w	r3, r8, r3
 8004318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800431c:	462b      	mov	r3, r5
 800431e:	eb49 0303 	adc.w	r3, r9, r3
 8004322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800433a:	460b      	mov	r3, r1
 800433c:	18db      	adds	r3, r3, r3
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
 8004340:	4613      	mov	r3, r2
 8004342:	eb42 0303 	adc.w	r3, r2, r3
 8004346:	657b      	str	r3, [r7, #84]	; 0x54
 8004348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800434c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004350:	f7fc fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <UART_SetConfig+0x2d4>)
 800435a:	fba3 2302 	umull	r2, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	011c      	lsls	r4, r3, #4
 8004362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800436c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	1891      	adds	r1, r2, r2
 800437a:	64b9      	str	r1, [r7, #72]	; 0x48
 800437c:	415b      	adcs	r3, r3
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004384:	4641      	mov	r1, r8
 8004386:	eb12 0a01 	adds.w	sl, r2, r1
 800438a:	4649      	mov	r1, r9
 800438c:	eb43 0b01 	adc.w	fp, r3, r1
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800439c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a4:	4692      	mov	sl, r2
 80043a6:	469b      	mov	fp, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	eb1a 0303 	adds.w	r3, sl, r3
 80043ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b2:	464b      	mov	r3, r9
 80043b4:	eb4b 0303 	adc.w	r3, fp, r3
 80043b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043d0:	460b      	mov	r3, r1
 80043d2:	18db      	adds	r3, r3, r3
 80043d4:	643b      	str	r3, [r7, #64]	; 0x40
 80043d6:	4613      	mov	r3, r2
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
 80043de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043e6:	f7fc fc5f 	bl	8000ca8 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <UART_SetConfig+0x2d4>)
 80043f2:	fba3 2301 	umull	r2, r3, r3, r1
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2264      	movs	r2, #100	; 0x64
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	1acb      	subs	r3, r1, r3
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <UART_SetConfig+0x2d4>)
 8004408:	fba3 2302 	umull	r2, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004414:	441c      	add	r4, r3
 8004416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004430:	415b      	adcs	r3, r3
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004438:	4641      	mov	r1, r8
 800443a:	1851      	adds	r1, r2, r1
 800443c:	6339      	str	r1, [r7, #48]	; 0x30
 800443e:	4649      	mov	r1, r9
 8004440:	414b      	adcs	r3, r1
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004450:	4659      	mov	r1, fp
 8004452:	00cb      	lsls	r3, r1, #3
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445a:	4651      	mov	r1, sl
 800445c:	00ca      	lsls	r2, r1, #3
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	4603      	mov	r3, r0
 8004464:	4642      	mov	r2, r8
 8004466:	189b      	adds	r3, r3, r2
 8004468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800446c:	464b      	mov	r3, r9
 800446e:	460a      	mov	r2, r1
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800448c:	460b      	mov	r3, r1
 800448e:	18db      	adds	r3, r3, r3
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
 8004492:	4613      	mov	r3, r2
 8004494:	eb42 0303 	adc.w	r3, r2, r3
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800449e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044a2:	f7fc fc01 	bl	8000ca8 <__aeabi_uldivmod>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <UART_SetConfig+0x2d4>)
 80044ac:	fba3 1302 	umull	r1, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	2164      	movs	r1, #100	; 0x64
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	3332      	adds	r3, #50	; 0x32
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <UART_SetConfig+0x2d4>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	f003 0207 	and.w	r2, r3, #7
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4422      	add	r2, r4
 80044d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044d4:	e106      	b.n	80046e4 <UART_SetConfig+0x4d8>
 80044d6:	bf00      	nop
 80044d8:	40011000 	.word	0x40011000
 80044dc:	40011400 	.word	0x40011400
 80044e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	1891      	adds	r1, r2, r2
 80044fc:	6239      	str	r1, [r7, #32]
 80044fe:	415b      	adcs	r3, r3
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004506:	4641      	mov	r1, r8
 8004508:	1854      	adds	r4, r2, r1
 800450a:	4649      	mov	r1, r9
 800450c:	eb43 0501 	adc.w	r5, r3, r1
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	00eb      	lsls	r3, r5, #3
 800451a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4643      	mov	r3, r8
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800452c:	464b      	mov	r3, r9
 800452e:	eb45 0303 	adc.w	r3, r5, r3
 8004532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004552:	4629      	mov	r1, r5
 8004554:	008b      	lsls	r3, r1, #2
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455c:	4621      	mov	r1, r4
 800455e:	008a      	lsls	r2, r1, #2
 8004560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004564:	f7fc fba0 	bl	8000ca8 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4b60      	ldr	r3, [pc, #384]	; (80046f0 <UART_SetConfig+0x4e4>)
 800456e:	fba3 2302 	umull	r2, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	011c      	lsls	r4, r3, #4
 8004576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004588:	4642      	mov	r2, r8
 800458a:	464b      	mov	r3, r9
 800458c:	1891      	adds	r1, r2, r2
 800458e:	61b9      	str	r1, [r7, #24]
 8004590:	415b      	adcs	r3, r3
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004598:	4641      	mov	r1, r8
 800459a:	1851      	adds	r1, r2, r1
 800459c:	6139      	str	r1, [r7, #16]
 800459e:	4649      	mov	r1, r9
 80045a0:	414b      	adcs	r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	00cb      	lsls	r3, r1, #3
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ba:	4651      	mov	r1, sl
 80045bc:	00ca      	lsls	r2, r1, #3
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	4642      	mov	r2, r8
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045cc:	464b      	mov	r3, r9
 80045ce:	460a      	mov	r2, r1
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045f0:	4649      	mov	r1, r9
 80045f2:	008b      	lsls	r3, r1, #2
 80045f4:	4641      	mov	r1, r8
 80045f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fa:	4641      	mov	r1, r8
 80045fc:	008a      	lsls	r2, r1, #2
 80045fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004602:	f7fc fb51 	bl	8000ca8 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4611      	mov	r1, r2
 800460c:	4b38      	ldr	r3, [pc, #224]	; (80046f0 <UART_SetConfig+0x4e4>)
 800460e:	fba3 2301 	umull	r2, r3, r3, r1
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2264      	movs	r2, #100	; 0x64
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	1acb      	subs	r3, r1, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a33      	ldr	r2, [pc, #204]	; (80046f0 <UART_SetConfig+0x4e4>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462c:	441c      	add	r4, r3
 800462e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004632:	2200      	movs	r2, #0
 8004634:	673b      	str	r3, [r7, #112]	; 0x70
 8004636:	677a      	str	r2, [r7, #116]	; 0x74
 8004638:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	1891      	adds	r1, r2, r2
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	415b      	adcs	r3, r3
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800464c:	4641      	mov	r1, r8
 800464e:	1851      	adds	r1, r2, r1
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	4649      	mov	r1, r9
 8004654:	414b      	adcs	r3, r1
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004664:	4659      	mov	r1, fp
 8004666:	00cb      	lsls	r3, r1, #3
 8004668:	4651      	mov	r1, sl
 800466a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466e:	4651      	mov	r1, sl
 8004670:	00ca      	lsls	r2, r1, #3
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	4603      	mov	r3, r0
 8004678:	4642      	mov	r2, r8
 800467a:	189b      	adds	r3, r3, r2
 800467c:	66bb      	str	r3, [r7, #104]	; 0x68
 800467e:	464b      	mov	r3, r9
 8004680:	460a      	mov	r2, r1
 8004682:	eb42 0303 	adc.w	r3, r2, r3
 8004686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	663b      	str	r3, [r7, #96]	; 0x60
 8004692:	667a      	str	r2, [r7, #100]	; 0x64
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046a0:	4649      	mov	r1, r9
 80046a2:	008b      	lsls	r3, r1, #2
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046aa:	4641      	mov	r1, r8
 80046ac:	008a      	lsls	r2, r1, #2
 80046ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046b2:	f7fc faf9 	bl	8000ca8 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <UART_SetConfig+0x4e4>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <UART_SetConfig+0x4e4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4422      	add	r2, r4
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046ea:	46bd      	mov	sp, r7
 80046ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f0:	51eb851f 	.word	0x51eb851f

080046f4 <createAX25Frame>:
uint32_t d_taps[32];
uint32_t d_tap_count;


ax25frame_t* createAX25Frame(const char* destCallsign, uint8_t destSSID, const char* srcCallsign, uint8_t srcSSID, uint8_t control, uint8_t protocolID, uint8_t* info, uint16_t infoLen, uint16_t preLen)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	461a      	mov	r2, r3
 8004700:	460b      	mov	r3, r1
 8004702:	72fb      	strb	r3, [r7, #11]
 8004704:	4613      	mov	r3, r2
 8004706:	72bb      	strb	r3, [r7, #10]
    ax25frame_t* ax25frame = (ax25frame_t*)malloc(sizeof(ax25frame_t));
 8004708:	2040      	movs	r0, #64	; 0x40
 800470a:	f001 fc07 	bl	8005f1c <malloc>
 800470e:	4603      	mov	r3, r0
 8004710:	617b      	str	r3, [r7, #20]

    // destination callsign/SSID
    memcpy(ax25frame->destCallsign, destCallsign, strlen(destCallsign));
 8004712:	697c      	ldr	r4, [r7, #20]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7fb fdbb 	bl	8000290 <strlen>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	4620      	mov	r0, r4
 8004722:	f002 fde4 	bl	80072ee <memcpy>
    ax25frame->destCallsign[strlen(destCallsign)] = '\0';
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7fb fdb2 	bl	8000290 <strlen>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]
    ax25frame->destSSID = destSSID;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	7afa      	ldrb	r2, [r7, #11]
 8004738:	71da      	strb	r2, [r3, #7]

    // source callsign/SSID
    memcpy(ax25frame->srcCallsign, srcCallsign, strlen(srcCallsign));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f103 0408 	add.w	r4, r3, #8
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fb fda5 	bl	8000290 <strlen>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4620      	mov	r0, r4
 800474e:	f002 fdce 	bl	80072ee <memcpy>
    ax25frame->srcCallsign[strlen(srcCallsign)] = '\0';
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fb fd9c 	bl	8000290 <strlen>
 8004758:	4602      	mov	r2, r0
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4413      	add	r3, r2
 800475e:	2200      	movs	r2, #0
 8004760:	721a      	strb	r2, [r3, #8]
    ax25frame->srcSSID = srcSSID;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	7aba      	ldrb	r2, [r7, #10]
 8004766:	73da      	strb	r2, [r3, #15]

    // set repeaters
    ax25frame->numRepeaters = 0;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	741a      	strb	r2, [r3, #16]
    ax25frame->repeaterCallsigns = NULL;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]
    ax25frame->repeaterSSIDs = NULL;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

    // control field
    ax25frame->control = control;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004780:	745a      	strb	r2, [r3, #17]

    // sequence numbers
    ax25frame->rcvSeqNumber = 0;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	759a      	strb	r2, [r3, #22]
    ax25frame->sendSeqNumber = 0;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	831a      	strh	r2, [r3, #24]

    // PID field
    ax25frame->protocolID = protocolID;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004794:	749a      	strb	r2, [r3, #18]

    // info field
    ax25frame->infoLen = infoLen;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800479a:	829a      	strh	r2, [r3, #20]
    if(infoLen > 0) 
 800479c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <createAX25Frame+0xcc>
    {
        ax25frame->info = (uint8_t*)malloc(infoLen*sizeof(uint8_t));
 80047a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 fbb9 	bl	8005f1c <malloc>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	61da      	str	r2, [r3, #28]
        memcpy(ax25frame->info, info, infoLen);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ba:	4618      	mov	r0, r3
 80047bc:	f002 fd97 	bl	80072ee <memcpy>
    }

    // save preamble length
    ax25frame->preambleLen = preLen;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80047c4:	879a      	strh	r2, [r3, #60]	; 0x3c

    return ax25frame;
 80047c6:	697b      	ldr	r3, [r7, #20]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}

080047d0 <AX25Frame_HDLC_Generator>:
    }
    free(ax25frame);
}

uint8_t* AX25Frame_HDLC_Generator(ax25frame_t* ax25frame, uint16_t* stuffedFrameLen)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b098      	sub	sp, #96	; 0x60
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
    // check destination callsign length (6 characters max)
    if(strlen(ax25frame->destCallsign) > RADIOLIB_AX25_MAX_CALLSIGN_LEN) {
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fd57 	bl	8000290 <strlen>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d902      	bls.n	80047ee <AX25Frame_HDLC_Generator+0x1e>
        return(RADIOLIB_ERR_INVALID_CALLSIGN);
 80047e8:	f46f 7348 	mvn.w	r3, #800	; 0x320
 80047ec:	e35c      	b.n	8004ea8 <AX25Frame_HDLC_Generator+0x6d8>
    }

    // check repeater configuration
    if(!(((ax25frame->repeaterCallsigns == NULL) && (ax25frame->repeaterSSIDs == NULL) && (ax25frame->numRepeaters == 0)) ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <AX25Frame_HDLC_Generator+0x36>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <AX25Frame_HDLC_Generator+0x36>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7c1b      	ldrb	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <AX25Frame_HDLC_Generator+0x52>
         ((ax25frame->repeaterCallsigns != NULL) && (ax25frame->repeaterSSIDs != NULL) && (ax25frame->numRepeaters != 0)))) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
    if(!(((ax25frame->repeaterCallsigns == NULL) && (ax25frame->repeaterSSIDs == NULL) && (ax25frame->numRepeaters == 0)) ||
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <AX25Frame_HDLC_Generator+0x4e>
         ((ax25frame->repeaterCallsigns != NULL) && (ax25frame->repeaterSSIDs != NULL) && (ax25frame->numRepeaters != 0)))) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <AX25Frame_HDLC_Generator+0x4e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7c1b      	ldrb	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <AX25Frame_HDLC_Generator+0x52>
      return(RADIOLIB_ERR_INVALID_NUM_REPEATERS);
 800481e:	4ba0      	ldr	r3, [pc, #640]	; (8004aa0 <AX25Frame_HDLC_Generator+0x2d0>)
 8004820:	e342      	b.n	8004ea8 <AX25Frame_HDLC_Generator+0x6d8>
    }
    for(uint16_t i = 0; i < ax25frame->numRepeaters; i++) {
 8004822:	2300      	movs	r3, #0
 8004824:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004828:	e013      	b.n	8004852 <AX25Frame_HDLC_Generator+0x82>
      if(strlen(ax25frame->repeaterCallsigns[i]) > RADIOLIB_AX25_MAX_CALLSIGN_LEN) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7fb fd29 	bl	8000290 <strlen>
 800483e:	4603      	mov	r3, r0
 8004840:	2b06      	cmp	r3, #6
 8004842:	d901      	bls.n	8004848 <AX25Frame_HDLC_Generator+0x78>
        return(RADIOLIB_ERR_INVALID_REPEATER_CALLSIGN);
 8004844:	4b97      	ldr	r3, [pc, #604]	; (8004aa4 <AX25Frame_HDLC_Generator+0x2d4>)
 8004846:	e32f      	b.n	8004ea8 <AX25Frame_HDLC_Generator+0x6d8>
    for(uint16_t i = 0; i < ax25frame->numRepeaters; i++) {
 8004848:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800484c:	3301      	adds	r3, #1
 800484e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7c1b      	ldrb	r3, [r3, #16]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800485c:	429a      	cmp	r2, r3
 800485e:	d3e4      	bcc.n	800482a <AX25Frame_HDLC_Generator+0x5a>
      }
    }

    // calculate frame length without FCS (destination address, source address, repeater addresses, control, PID, info)
    size_t frameBuffLen = ((2 + ax25frame->numRepeaters)*(RADIOLIB_AX25_MAX_CALLSIGN_LEN + 1)) + 1 + 1 + ax25frame->infoLen;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	7c1b      	ldrb	r3, [r3, #16]
 8004864:	1c9a      	adds	r2, r3, #2
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	3302      	adds	r3, #2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	8a92      	ldrh	r2, [r2, #20]
 8004872:	4413      	add	r3, r2
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
    // create frame buffer without preamble, start or stop flags
    uint8_t* frameBuff = (uint8_t*)malloc((frameBuffLen + 2)*sizeof(uint8_t));
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	3302      	adds	r3, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fb4e 	bl	8005f1c <malloc>
 8004880:	4603      	mov	r3, r0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t* frameBuffPtr = frameBuff;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	65bb      	str	r3, [r7, #88]	; 0x58

    // set destination callsign - all address field bytes are shifted by one bit to make room for HDLC address extension bit
    memset(frameBuffPtr, ' ' << 1, RADIOLIB_AX25_MAX_CALLSIGN_LEN);
 8004888:	2206      	movs	r2, #6
 800488a:	2140      	movs	r1, #64	; 0x40
 800488c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800488e:	f002 fc9f 	bl	80071d0 <memset>
    for(size_t i = 0; i < strlen(ax25frame->destCallsign); i++) 
 8004892:	2300      	movs	r3, #0
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
 8004896:	e00c      	b.n	80048b2 <AX25Frame_HDLC_Generator+0xe2>
    {
        *(frameBuffPtr + i) = ax25frame->destCallsign[i] << 1;
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489c:	4413      	add	r3, r2
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a4:	440b      	add	r3, r1
 80048a6:	0052      	lsls	r2, r2, #1
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < strlen(ax25frame->destCallsign); i++) 
 80048ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ae:	3301      	adds	r3, #1
 80048b0:	657b      	str	r3, [r7, #84]	; 0x54
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fb fceb 	bl	8000290 <strlen>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048be:	4293      	cmp	r3, r2
 80048c0:	d3ea      	bcc.n	8004898 <AX25Frame_HDLC_Generator+0xc8>
    }
    frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 80048c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c4:	3306      	adds	r3, #6
 80048c6:	65bb      	str	r3, [r7, #88]	; 0x58

    // set destination SSID
    *(frameBuffPtr++) = RADIOLIB_AX25_SSID_RESPONSE_DEST | RADIOLIB_AX25_SSID_RESERVED_BITS | (ax25frame->destSSID & 0x0F) << 1 | RADIOLIB_AX25_SSID_HDLC_EXTENSION_CONTINUE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	79db      	ldrb	r3, [r3, #7]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	f003 031e 	and.w	r3, r3, #30
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048da:	b259      	sxtb	r1, r3
 80048dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80048e2:	b2ca      	uxtb	r2, r1
 80048e4:	701a      	strb	r2, [r3, #0]

    // set source callsign - all address field bytes are shifted by one bit to make room for HDLC address extension bit
    memset(frameBuffPtr, ' ' << 1, RADIOLIB_AX25_MAX_CALLSIGN_LEN);
 80048e6:	2206      	movs	r2, #6
 80048e8:	2140      	movs	r1, #64	; 0x40
 80048ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80048ec:	f002 fc70 	bl	80071d0 <memset>
    for(size_t i = 0; i < strlen(ax25frame->srcCallsign); i++) 
 80048f0:	2300      	movs	r3, #0
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
 80048f4:	e00d      	b.n	8004912 <AX25Frame_HDLC_Generator+0x142>
    {
        *(frameBuffPtr + i) = ax25frame->srcCallsign[i] << 1;
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	4413      	add	r3, r2
 80048fc:	3308      	adds	r3, #8
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004904:	440b      	add	r3, r1
 8004906:	0052      	lsls	r2, r2, #1
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < strlen(ax25frame->srcCallsign); i++) 
 800490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490e:	3301      	adds	r3, #1
 8004910:	653b      	str	r3, [r7, #80]	; 0x50
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3308      	adds	r3, #8
 8004916:	4618      	mov	r0, r3
 8004918:	f7fb fcba 	bl	8000290 <strlen>
 800491c:	4602      	mov	r2, r0
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	4293      	cmp	r3, r2
 8004922:	d3e8      	bcc.n	80048f6 <AX25Frame_HDLC_Generator+0x126>
    }
    frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 8004924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004926:	3306      	adds	r3, #6
 8004928:	65bb      	str	r3, [r7, #88]	; 0x58

    // set source SSID
    *(frameBuffPtr++) = RADIOLIB_AX25_SSID_COMMAND_SOURCE | RADIOLIB_AX25_SSID_RESERVED_BITS | (ax25frame->srcSSID & 0x0F) << 1 | RADIOLIB_AX25_SSID_HDLC_EXTENSION_CONTINUE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7bdb      	ldrb	r3, [r3, #15]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	b25b      	sxtb	r3, r3
 8004932:	f003 031e 	and.w	r3, r3, #30
 8004936:	b25b      	sxtb	r3, r3
 8004938:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800493c:	b259      	sxtb	r1, r3
 800493e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	65ba      	str	r2, [r7, #88]	; 0x58
 8004944:	b2ca      	uxtb	r2, r1
 8004946:	701a      	strb	r2, [r3, #0]

    // set repeater callsigns
    for(uint16_t i = 0; i < ax25frame->numRepeaters; i++) 
 8004948:	2300      	movs	r3, #0
 800494a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800494e:	e043      	b.n	80049d8 <AX25Frame_HDLC_Generator+0x208>
    {
        memset(frameBuffPtr, ' ' << 1, RADIOLIB_AX25_MAX_CALLSIGN_LEN);
 8004950:	2206      	movs	r2, #6
 8004952:	2140      	movs	r1, #64	; 0x40
 8004954:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004956:	f002 fc3b 	bl	80071d0 <memset>
        for(size_t j = 0; j < strlen(ax25frame->repeaterCallsigns[i]); j++) 
 800495a:	2300      	movs	r3, #0
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
 800495e:	e012      	b.n	8004986 <AX25Frame_HDLC_Generator+0x1b6>
        {
            *(frameBuffPtr + j) = ax25frame->repeaterCallsigns[i][j] << 1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1a      	ldr	r2, [r3, #32]
 8004964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004970:	4413      	add	r3, r2
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004978:	440b      	add	r3, r1
 800497a:	0052      	lsls	r2, r2, #1
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]
        for(size_t j = 0; j < strlen(ax25frame->repeaterCallsigns[i]); j++) 
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	3301      	adds	r3, #1
 8004984:	64bb      	str	r3, [r7, #72]	; 0x48
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fb fc7b 	bl	8000290 <strlen>
 800499a:	4602      	mov	r2, r0
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	4293      	cmp	r3, r2
 80049a0:	d3de      	bcc.n	8004960 <AX25Frame_HDLC_Generator+0x190>
        }
        frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 80049a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a4:	3306      	adds	r3, #6
 80049a6:	65bb      	str	r3, [r7, #88]	; 0x58
        *(frameBuffPtr++) = RADIOLIB_AX25_SSID_HAS_NOT_BEEN_REPEATED | RADIOLIB_AX25_SSID_RESERVED_BITS | (ax25frame->repeaterSSIDs[i] & 0x0F) << 1 | RADIOLIB_AX25_SSID_HDLC_EXTENSION_CONTINUE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049b0:	4413      	add	r3, r2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	f003 031e 	and.w	r3, r3, #30
 80049bc:	b25b      	sxtb	r3, r3
 80049be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049c2:	b259      	sxtb	r1, r3
 80049c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80049ca:	b2ca      	uxtb	r2, r1
 80049cc:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < ax25frame->numRepeaters; i++) 
 80049ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049d2:	3301      	adds	r3, #1
 80049d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7c1b      	ldrb	r3, [r3, #16]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3b4      	bcc.n	8004950 <AX25Frame_HDLC_Generator+0x180>
    }
    // set HDLC extension end bit
    *(frameBuffPtr - 1) |= RADIOLIB_AX25_SSID_HDLC_EXTENSION_END;
 80049e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e8:	3b01      	subs	r3, #1
 80049ea:	781a      	ldrb	r2, [r3, #0]
 80049ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ee:	3b01      	subs	r3, #1
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

    // set sequence numbers of the frames that have it
    uint8_t controlField = ax25frame->control;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7c5b      	ldrb	r3, [r3, #17]
 80049fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if((ax25frame->control & 0x01) == 0) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7c5b      	ldrb	r3, [r3, #17]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d114      	bne.n	8004a36 <AX25Frame_HDLC_Generator+0x266>
        // information frame, set both sequence numbers
        controlField |= ax25frame->rcvSeqNumber << 5;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7d9b      	ldrb	r3, [r3, #22]
 8004a10:	015b      	lsls	r3, r3, #5
 8004a12:	b25a      	sxtb	r2, r3
 8004a14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        controlField |= ax25frame->sendSeqNumber << 1;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8b1b      	ldrh	r3, [r3, #24]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	b25a      	sxtb	r2, r3
 8004a28:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b25b      	sxtb	r3, r3
 8004a30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004a34:	e00f      	b.n	8004a56 <AX25Frame_HDLC_Generator+0x286>
    } else if((ax25frame->control & 0x02) == 0) {
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7c5b      	ldrb	r3, [r3, #17]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <AX25Frame_HDLC_Generator+0x286>
        // supervisory frame, set only receive sequence number
        controlField |= ax25frame->rcvSeqNumber << 5;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	7d9b      	ldrb	r3, [r3, #22]
 8004a46:	015b      	lsls	r3, r3, #5
 8004a48:	b25a      	sxtb	r2, r3
 8004a4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    // set control field
    *(frameBuffPtr++) = controlField;
 8004a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a5c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004a60:	701a      	strb	r2, [r3, #0]

    // set PID field of the frames that have it
    if(ax25frame->protocolID != 0x00) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7c9b      	ldrb	r3, [r3, #18]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <AX25Frame_HDLC_Generator+0x2a6>
        *(frameBuffPtr++) = ax25frame->protocolID;
 8004a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	7c92      	ldrb	r2, [r2, #18]
 8004a74:	701a      	strb	r2, [r3, #0]
    }

    // set info field of the frames that have it
    if(ax25frame->infoLen > 0) {
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8a9b      	ldrh	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <AX25Frame_HDLC_Generator+0x2ca>
        memcpy(frameBuffPtr, ax25frame->info, ax25frame->infoLen);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69d9      	ldr	r1, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8a9b      	ldrh	r3, [r3, #20]
 8004a86:	461a      	mov	r2, r3
 8004a88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004a8a:	f002 fc30 	bl	80072ee <memcpy>
        frameBuffPtr += ax25frame->infoLen;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8a9b      	ldrh	r3, [r3, #20]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a96:	4413      	add	r3, r2
 8004a98:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    // flip bit order
    for(size_t i = 0; i < frameBuffLen; i++) 
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9e:	e014      	b.n	8004aca <AX25Frame_HDLC_Generator+0x2fa>
 8004aa0:	fffffcde 	.word	0xfffffcde
 8004aa4:	fffffcdd 	.word	0xfffffcdd
    {
        frameBuff[i] = reflect(frameBuff[i], 8);
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2108      	movs	r1, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f9fc 	bl	8004eb0 <reflect>
 8004ab8:	4601      	mov	r1, r0
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abe:	4413      	add	r3, r2
 8004ac0:	b2ca      	uxtb	r2, r1
 8004ac2:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < frameBuffLen; i++) 
 8004ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3ea      	bcc.n	8004aa8 <AX25Frame_HDLC_Generator+0x2d8>
    }

    ax25frame->crc.size = 16;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    ax25frame->crc.poly = RADIOLIB_CRC_CCITT_POLY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f241 0221 	movw	r2, #4129	; 0x1021
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    ax25frame->crc.init = RADIOLIB_CRC_CCITT_INIT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
    ax25frame->crc.out = RADIOLIB_CRC_CCITT_OUT;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34
    ax25frame->crc.refIn = false;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    ax25frame->crc.refOut = false;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    uint16_t fcs = checksum(ax25frame, frameBuff, frameBuffLen);
 8004b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9fb 	bl	8004f02 <checksum>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	847b      	strh	r3, [r7, #34]	; 0x22
    *(frameBuffPtr++) = (uint8_t)((fcs >> 8) & 0xFF);
 8004b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b299      	uxth	r1, r3
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b1c:	b2ca      	uxtb	r2, r1
 8004b1e:	701a      	strb	r2, [r3, #0]
    *(frameBuffPtr++) = (uint8_t)(fcs & 0xFF);
 8004b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]

    // prepare buffer for the final frame (stuffed, with added preamble + flags and NRZI-encoded)
    // worst-case scenario: sequence of 1s, will have 120% of the original length, stuffed frame also includes both flags
    uint8_t* stuffedFrameBuff = (uint8_t*)malloc((ax25frame->preambleLen + 1 + (6*frameBuffLen)/5 + 2)*sizeof(uint8_t));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004b30:	4619      	mov	r1, r3
 8004b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b34:	4613      	mov	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4413      	add	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4bab      	ldr	r3, [pc, #684]	; (8004dec <AX25Frame_HDLC_Generator+0x61c>)
 8004b40:	fba3 2302 	umull	r2, r3, r3, r2
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	3303      	adds	r3, #3
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 f9e6 	bl	8005f1c <malloc>
 8004b50:	4603      	mov	r3, r0
 8004b52:	61fb      	str	r3, [r7, #28]

    // initialize buffer to all zeros
    memset(stuffedFrameBuff, 0x00, ax25frame->preambleLen + 1 + (6*frameBuffLen)/5 + 2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	461a      	mov	r2, r3
 8004b66:	4ba1      	ldr	r3, [pc, #644]	; (8004dec <AX25Frame_HDLC_Generator+0x61c>)
 8004b68:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	3303      	adds	r3, #3
 8004b72:	461a      	mov	r2, r3
 8004b74:	2100      	movs	r1, #0
 8004b76:	69f8      	ldr	r0, [r7, #28]
 8004b78:	f002 fb2a 	bl	80071d0 <memset>

    // stuff bits (skip preamble and both flags)
    uint16_t stuffedFrameBuffLenBits = 8*(ax25frame->preambleLen + 1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004b80:	3301      	adds	r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t count = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    for(size_t i = 0; i < frameBuffLen + 2; i++) 
 8004b8e:	2300      	movs	r3, #0
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b92:	e094      	b.n	8004cbe <AX25Frame_HDLC_Generator+0x4ee>
    {
        for(int8_t shift = 7; shift >= 0; shift--) 
 8004b94:	2307      	movs	r3, #7
 8004b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004b9a:	e088      	b.n	8004cae <AX25Frame_HDLC_Generator+0x4de>
        {
            uint16_t stuffedFrameBuffPos = stuffedFrameBuffLenBits + 7 - 2*(stuffedFrameBuffLenBits%8);
 8004b9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3307      	adds	r3, #7
 8004bb0:	81fb      	strh	r3, [r7, #14]
            if((frameBuff[i] >> shift) & 0x01) 
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	4413      	add	r3, r2
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004bc0:	fa42 f303 	asr.w	r3, r2, r3
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d04b      	beq.n	8004c64 <AX25Frame_HDLC_Generator+0x494>
            {
                // copy 1 and increment counter
                SET_BIT_IN_ARRAY(stuffedFrameBuff, stuffedFrameBuffPos);
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	08db      	lsrs	r3, r3, #3
 8004bd0:	b298      	uxth	r0, r3
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25a      	sxtb	r2, r3
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2101      	movs	r1, #1
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	4313      	orrs	r3, r2
 8004bec:	b25a      	sxtb	r2, r3
 8004bee:	4601      	mov	r1, r0
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	440b      	add	r3, r1
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
                stuffedFrameBuffLenBits++;
 8004bf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
                count++;
 8004bfe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004c02:	3301      	adds	r3, #1
 8004c04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

                // check 5 consecutive 1s
                if(count == 5) 
 8004c08:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d147      	bne.n	8004ca0 <AX25Frame_HDLC_Generator+0x4d0>
                {
                    // get the new position in stuffed frame
                    stuffedFrameBuffPos = stuffedFrameBuffLenBits + 7 - 2*(stuffedFrameBuffLenBits%8);
 8004c10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3307      	adds	r3, #7
 8004c24:	81fb      	strh	r3, [r7, #14]

                    // insert 0 and reset counter
                    CLEAR_BIT_IN_ARRAY(stuffedFrameBuff, stuffedFrameBuffPos);
 8004c26:	89fb      	ldrh	r3, [r7, #14]
 8004c28:	08db      	lsrs	r3, r3, #3
 8004c2a:	b298      	uxth	r0, r3
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b25a      	sxtb	r2, r3
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b25a      	sxtb	r2, r3
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	440b      	add	r3, r1
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
                    stuffedFrameBuffLenBits++;
 8004c56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c58:	3301      	adds	r3, #1
 8004c5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    count = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004c62:	e01d      	b.n	8004ca0 <AX25Frame_HDLC_Generator+0x4d0>
                }
            } 
            else 
            {
                // copy 0 and reset counter
                CLEAR_BIT_IN_ARRAY(stuffedFrameBuff, stuffedFrameBuffPos);
 8004c64:	89fb      	ldrh	r3, [r7, #14]
 8004c66:	08db      	lsrs	r3, r3, #3
 8004c68:	b298      	uxth	r0, r3
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b25a      	sxtb	r2, r3
 8004c74:	89fb      	ldrh	r3, [r7, #14]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	b25b      	sxtb	r3, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	4013      	ands	r3, r2
 8004c88:	b25a      	sxtb	r2, r3
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	440b      	add	r3, r1
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
                stuffedFrameBuffLenBits++;
 8004c94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c96:	3301      	adds	r3, #1
 8004c98:	87fb      	strh	r3, [r7, #62]	; 0x3e
                count = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        for(int8_t shift = 7; shift >= 0; shift--) 
 8004ca0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004cae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f6bf af72 	bge.w	8004b9c <AX25Frame_HDLC_Generator+0x3cc>
    for(size_t i = 0; i < frameBuffLen + 2; i++) 
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	3301      	adds	r3, #1
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	f4ff af65 	bcc.w	8004b94 <AX25Frame_HDLC_Generator+0x3c4>
            }
        }
    }

    // deallocate memory
    free(frameBuff);
 8004cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ccc:	f001 f92e 	bl	8005f2c <free>

    // set preamble bytes and start flag field
    for(uint16_t i = 0; i < ax25frame->preambleLen + 1; i++) 
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cd4:	e007      	b.n	8004ce6 <AX25Frame_HDLC_Generator+0x516>
        stuffedFrameBuff[i] = RADIOLIB_AX25_FLAG;
 8004cd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	227e      	movs	r2, #126	; 0x7e
 8004cde:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < ax25frame->preambleLen + 1; i++) 
 8004ce0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004cea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d9f2      	bls.n	8004cd6 <AX25Frame_HDLC_Generator+0x506>

    // get stuffed frame length in bytes
    size_t stuffedFrameBuffLen = stuffedFrameBuffLenBits/8 + 1;
 8004cf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cf2:	08db      	lsrs	r3, r3, #3
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t trailingLen = stuffedFrameBuffLenBits % 8;
 8004cfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	76fb      	strb	r3, [r7, #27]

    // set end flag field (may be split into two bytes due to misalignment caused by extra stuffing bits)
    if(trailingLen != 0) 
 8004d04:	7efb      	ldrb	r3, [r7, #27]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d022      	beq.n	8004d50 <AX25Frame_HDLC_Generator+0x580>
    {
        stuffedFrameBuffLen++;
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
        stuffedFrameBuff[stuffedFrameBuffLen - 2] |= RADIOLIB_AX25_FLAG >> trailingLen;
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	3b02      	subs	r3, #2
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b25a      	sxtb	r2, r3
 8004d1c:	7efb      	ldrb	r3, [r7, #27]
 8004d1e:	217e      	movs	r1, #126	; 0x7e
 8004d20:	fa41 f303 	asr.w	r3, r1, r3
 8004d24:	b25b      	sxtb	r3, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	b259      	sxtb	r1, r3
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	b2ca      	uxtb	r2, r1
 8004d34:	701a      	strb	r2, [r3, #0]
        stuffedFrameBuff[stuffedFrameBuffLen - 1] = RADIOLIB_AX25_FLAG << (8 - trailingLen);
 8004d36:	7efb      	ldrb	r3, [r7, #27]
 8004d38:	f1c3 0308 	rsb	r3, r3, #8
 8004d3c:	227e      	movs	r2, #126	; 0x7e
 8004d3e:	fa02 f103 	lsl.w	r1, r2, r3
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	3b01      	subs	r3, #1
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	b2ca      	uxtb	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e005      	b.n	8004d5c <AX25Frame_HDLC_Generator+0x58c>
    } 
    else 
    {
        stuffedFrameBuff[stuffedFrameBuffLen - 1] = RADIOLIB_AX25_FLAG;
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	3b01      	subs	r3, #1
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	227e      	movs	r2, #126	; 0x7e
 8004d5a:	701a      	strb	r2, [r3, #0]
    }

    // convert to NRZI
	for(size_t i = ax25frame->preambleLen + 1; i < stuffedFrameBuffLen*8; i++) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004d60:	3301      	adds	r3, #1
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d64:	e095      	b.n	8004e92 <AX25Frame_HDLC_Generator+0x6c2>
		size_t currBitPos = i + 7 - 2*(i%8);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	3307      	adds	r3, #7
 8004d74:	617b      	str	r3, [r7, #20]
		size_t prevBitPos = (i - 1) + 7 - 2*((i - 1)%8);
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	3306      	adds	r3, #6
 8004d86:	613b      	str	r3, [r7, #16]
		// Serial.print(prevBitPos);
		// Serial.print(" ");
		if(TEST_BIT_IN_ARRAY(stuffedFrameBuff, currBitPos)) {
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	08db      	lsrs	r3, r3, #3
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	fa42 f303 	asr.w	r3, r2, r3
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03a      	beq.n	8004e1c <AX25Frame_HDLC_Generator+0x64c>
			// bit is 1, no change, copy previous bit
			if(TEST_BIT_IN_ARRAY(stuffedFrameBuff, prevBitPos)) {
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	fa42 f303 	asr.w	r3, r2, r3
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <AX25Frame_HDLC_Generator+0x620>
				SET_BIT_IN_ARRAY(stuffedFrameBuff, currBitPos);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	08db      	lsrs	r3, r3, #3
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	441a      	add	r2, r3
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	b251      	sxtb	r1, r2
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	f002 0207 	and.w	r2, r2, #7
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	fa00 f202 	lsl.w	r2, r0, r2
 8004ddc:	b252      	sxtb	r2, r2
 8004dde:	430a      	orrs	r2, r1
 8004de0:	b251      	sxtb	r1, r2
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	b2ca      	uxtb	r2, r1
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e04f      	b.n	8004e8c <AX25Frame_HDLC_Generator+0x6bc>
 8004dec:	cccccccd 	.word	0xcccccccd
			} else {
				CLEAR_BIT_IN_ARRAY(stuffedFrameBuff, currBitPos);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	441a      	add	r2, r3
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	b251      	sxtb	r1, r2
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	f002 0207 	and.w	r2, r2, #7
 8004e02:	2001      	movs	r0, #1
 8004e04:	fa00 f202 	lsl.w	r2, r0, r2
 8004e08:	b252      	sxtb	r2, r2
 8004e0a:	43d2      	mvns	r2, r2
 8004e0c:	b252      	sxtb	r2, r2
 8004e0e:	400a      	ands	r2, r1
 8004e10:	b251      	sxtb	r1, r2
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	b2ca      	uxtb	r2, r1
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e037      	b.n	8004e8c <AX25Frame_HDLC_Generator+0x6bc>
			}
		} else {
			// bit is 0, transition, copy inversion of the previous bit
			if(TEST_BIT_IN_ARRAY(stuffedFrameBuff, prevBitPos)) {
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	fa42 f303 	asr.w	r3, r2, r3
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d015      	beq.n	8004e66 <AX25Frame_HDLC_Generator+0x696>
				CLEAR_BIT_IN_ARRAY(stuffedFrameBuff, currBitPos);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	08db      	lsrs	r3, r3, #3
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	441a      	add	r2, r3
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	b251      	sxtb	r1, r2
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	f002 0207 	and.w	r2, r2, #7
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e52:	b252      	sxtb	r2, r2
 8004e54:	43d2      	mvns	r2, r2
 8004e56:	b252      	sxtb	r2, r2
 8004e58:	400a      	ands	r2, r1
 8004e5a:	b251      	sxtb	r1, r2
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	b2ca      	uxtb	r2, r1
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e012      	b.n	8004e8c <AX25Frame_HDLC_Generator+0x6bc>
			} else {
				SET_BIT_IN_ARRAY(stuffedFrameBuff, currBitPos);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	08db      	lsrs	r3, r3, #3
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	441a      	add	r2, r3
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	b251      	sxtb	r1, r2
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	f002 0207 	and.w	r2, r2, #7
 8004e78:	2001      	movs	r0, #1
 8004e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e7e:	b252      	sxtb	r2, r2
 8004e80:	430a      	orrs	r2, r1
 8004e82:	b251      	sxtb	r1, r2
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	b2ca      	uxtb	r2, r1
 8004e8a:	701a      	strb	r2, [r3, #0]
	for(size_t i = ax25frame->preambleLen + 1; i < stuffedFrameBuffLen*8; i++) {
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	3301      	adds	r3, #1
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	f4ff af64 	bcc.w	8004d66 <AX25Frame_HDLC_Generator+0x596>
			}
		}
	}

    *stuffedFrameLen = stuffedFrameBuffLen;
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	801a      	strh	r2, [r3, #0]
    return stuffedFrameBuff;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3760      	adds	r7, #96	; 0x60
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <reflect>:

uint32_t reflect(uint32_t in, uint8_t bits) {
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  uint32_t res = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  for(uint8_t i = 0; i < bits; i++) {
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	72fb      	strb	r3, [r7, #11]
 8004ec4:	e012      	b.n	8004eec <reflect+0x3c>
    res |= (((in & ((uint32_t)1 << i)) >> i) << (bits - i - 1));
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	401a      	ands	r2, r3
 8004ed0:	7afb      	ldrb	r3, [r7, #11]
 8004ed2:	40da      	lsrs	r2, r3
 8004ed4:	78f9      	ldrb	r1, [r7, #3]
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	1acb      	subs	r3, r1, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  for(uint8_t i = 0; i < bits; i++) {
 8004ee6:	7afb      	ldrb	r3, [r7, #11]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	72fb      	strb	r3, [r7, #11]
 8004eec:	7afa      	ldrb	r2, [r7, #11]
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3e8      	bcc.n	8004ec6 <reflect+0x16>
  }
  return(res);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <checksum>:

uint32_t checksum(ax25frame_t* ax25frame, uint8_t* buff, size_t len) {
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b088      	sub	sp, #32
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
  uint32_t crc = ax25frame->crc.init;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	61fb      	str	r3, [r7, #28]
  size_t pos = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61bb      	str	r3, [r7, #24]
  for(size_t i = 0; i < 8*len; i++) {
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e039      	b.n	8004f92 <checksum+0x90>
    if(i % 8 == 0) {
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11a      	bne.n	8004f5e <checksum+0x5c>
      uint32_t in = buff[pos++];
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	61ba      	str	r2, [r7, #24]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	613b      	str	r3, [r7, #16]
      if(ax25frame->crc.refIn) {
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <checksum+0x48>
        in = reflect(in, 8);
 8004f40:	2108      	movs	r1, #8
 8004f42:	6938      	ldr	r0, [r7, #16]
 8004f44:	f7ff ffb4 	bl	8004eb0 <reflect>
 8004f48:	6138      	str	r0, [r7, #16]
      }
      crc ^= (in << (ax25frame->crc.size - 8));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f50:	3b08      	subs	r3, #8
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	4053      	eors	r3, r2
 8004f5c:	61fb      	str	r3, [r7, #28]
    }

    if(crc & ((uint32_t)1 << (ax25frame->crc.size - 1))) {
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <checksum+0x84>
      crc <<= (uint32_t)1;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
      crc ^= ax25frame->crc.poly;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	4053      	eors	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e002      	b.n	8004f8c <checksum+0x8a>
    } else {
      crc <<= (uint32_t)1;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
  for(size_t i = 0; i < 8*len; i++) {
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d3c0      	bcc.n	8004f1e <checksum+0x1c>
    }
  }

  crc ^= ax25frame->crc.out;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	4053      	eors	r3, r2
 8004fa4:	61fb      	str	r3, [r7, #28]
  if(ax25frame->crc.refOut) {
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <checksum+0xbe>
    crc = reflect(crc, ax25frame->crc.size);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	69f8      	ldr	r0, [r7, #28]
 8004fba:	f7ff ff79 	bl	8004eb0 <reflect>
 8004fbe:	61f8      	str	r0, [r7, #28]
  }
  crc &= (uint32_t)0xFFFFFFFF >> (32 - ax25frame->crc.size);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fc6:	f1c3 0320 	rsb	r3, r3, #32
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61fb      	str	r3, [r7, #28]
  return(crc);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <si4463_powerOnReset>:
uint8_t FSK_2400_RX[] = RADIO_CONFIGURATION_FSK_2400_RX;
uint8_t FSK_1200_TX[] = RADIO_CONFIGURATION_FSK_1200_TX;
uint8_t FSK_1200_RX[] = RADIO_CONFIGURATION_FSK_1200_RX;

int8_t si4463_powerOnReset(si4463_t* si4463)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
    si4463->SDN(true);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2001      	movs	r0, #1
 8004ff0:	4798      	blx	r3
    si4463->DelayUs(10);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	200a      	movs	r0, #10
 8004ff8:	4798      	blx	r3
    si4463->SDN(false);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	2000      	movs	r0, #0
 8005000:	4798      	blx	r3

    // Wait for POR (Power on reset) on GPIO1. The delay threshold is 10 ms.
    int count = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
    while(si4463->gpios.GPIO1() == si4463->gpios.gpio_low)
 8005006:	e00f      	b.n	8005028 <si4463_powerOnReset+0x46>
    {
        if(count < 10000)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f242 720f 	movw	r2, #9999	; 0x270f
 800500e:	4293      	cmp	r3, r2
 8005010:	dc07      	bgt.n	8005022 <si4463_powerOnReset+0x40>
        {
            count++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
            si4463->DelayUs(1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	2001      	movs	r0, #1
 800501e:	4798      	blx	r3
 8005020:	e002      	b.n	8005028 <si4463_powerOnReset+0x46>
        }
        else
            return SI4463_INIT_TIMEOUT;
 8005022:	f06f 0313 	mvn.w	r3, #19
 8005026:	e016      	b.n	8005056 <si4463_powerOnReset+0x74>
    while(si4463->gpios.GPIO1() == si4463->gpios.gpio_low)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	4798      	blx	r3
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005038:	429a      	cmp	r2, r3
 800503a:	d0e5      	beq.n	8005008 <si4463_powerOnReset+0x26>
    }
    // This first SPI transaction has to take less than 4ms (NSEL LOW time).
    // If it cannot be guaranteed, send a shorter command (e.g. NOP) first,
    // check CTS, then send POWER_UP or patch.
    if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fd4d 	bl	8005adc <si4463_waitforCTS>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <si4463_powerOnReset+0x6c>
 8005048:	f06f 0314 	mvn.w	r3, #20
 800504c:	e003      	b.n	8005056 <si4463_powerOnReset+0x74>
    return si4463_checkNop(si4463);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f838 	bl	80050c4 <si4463_checkNop>
 8005054:	4603      	mov	r3, r0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <si4463_init>:

int8_t si4463_init(si4463_t* si4463)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
    int res = si4463_powerOnReset(si4463);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ffba 	bl	8004fe2 <si4463_powerOnReset>
 800506e:	4603      	mov	r3, r0
 8005070:	60fb      	str	r3, [r7, #12]
    if(res != SI4463_OK) return res;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <si4463_init+0x1e>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	b25b      	sxtb	r3, r3
 800507c:	e01c      	b.n	80050b8 <si4463_init+0x58>
    // Start to configurate the radio
    res = si4463_configArray(si4463, SI4463_CONFIGURATION_DATA);
 800507e:	4910      	ldr	r1, [pc, #64]	; (80050c0 <si4463_init+0x60>)
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fe1b 	bl	8005cbc <si4463_configArray>
 8005086:	4603      	mov	r3, r0
 8005088:	60fb      	str	r3, [r7, #12]
    if(res != SI4463_OK) return res;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <si4463_init+0x36>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	b25b      	sxtb	r3, r3
 8005094:	e010      	b.n	80050b8 <si4463_init+0x58>

    si4463->settings.txDataRate = DR_9600;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2203      	movs	r2, #3
 800509a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    si4463->settings.rxDataRate = DR_9600;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2203      	movs	r2, #3
 80050a2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
    si4463->settings.txMod = MOD_2GFSK;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2203      	movs	r2, #3
 80050aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    si4463->settings.rxMod = MOD_2GFSK;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2203      	movs	r2, #3
 80050b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    return SI4463_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	2000000c 	.word	0x2000000c

080050c4 <si4463_checkNop>:

int8_t si4463_checkNop(si4463_t* si4463)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
    uint8_t cmd = NOP;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]

    if(!si4463_sendCommand(si4463, &cmd, 1)) return SI4463_ERR_WRITE_REG;
 80050d0:	f107 030f 	add.w	r3, r7, #15
 80050d4:	2201      	movs	r2, #1
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fcd9 	bl	8005a90 <si4463_sendCommand>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <si4463_checkNop+0x26>
 80050e4:	f06f 030a 	mvn.w	r3, #10
 80050e8:	e009      	b.n	80050fe <si4463_checkNop+0x3a>
	if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fcf6 	bl	8005adc <si4463_waitforCTS>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <si4463_checkNop+0x38>
 80050f6:	f06f 0314 	mvn.w	r3, #20
 80050fa:	e000      	b.n	80050fe <si4463_checkNop+0x3a>

	return SI4463_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <si4463_getTxFifoInfo>:
			rxbuff[0], rxbuff[1], rxbuff[2], rxbuff[3], rxbuff[4], rxbuff[5]);
    return SI4463_OK;
}

int16_t si4463_getTxFifoInfo(si4463_t* si4463)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = {FIFO_INFO, 0x00};
 800510e:	2315      	movs	r3, #21
 8005110:	81bb      	strh	r3, [r7, #12]
    uint8_t rxbuff[2] = {0};
 8005112:	2300      	movs	r3, #0
 8005114:	813b      	strh	r3, [r7, #8]
    if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 8005116:	f107 030c 	add.w	r3, r7, #12
 800511a:	2202      	movs	r2, #2
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fcb6 	bl	8005a90 <si4463_sendCommand>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <si4463_getTxFifoInfo+0x2a>
 800512a:	f06f 030a 	mvn.w	r3, #10
 800512e:	e00e      	b.n	800514e <si4463_getTxFifoInfo+0x48>
    if(!si4463_getResponse(si4463, rxbuff, 2)) return SI4463_ERR_READ_REG;
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	2202      	movs	r2, #2
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fcff 	bl	8005b3c <si4463_getResponse>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <si4463_getTxFifoInfo+0x44>
 8005144:	f06f 0309 	mvn.w	r3, #9
 8005148:	e001      	b.n	800514e <si4463_getTxFifoInfo+0x48>

    return rxbuff[1];
 800514a:	7a7b      	ldrb	r3, [r7, #9]
 800514c:	b21b      	sxth	r3, r3
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <si4463_getCurrentRSSI>:

    return rxbuff[0];
}

int16_t si4463_getCurrentRSSI(si4463_t* si4463)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = {GET_MODEM_STATUS, 0x00};
 800515e:	2322      	movs	r3, #34	; 0x22
 8005160:	82bb      	strh	r3, [r7, #20]
	uint8_t rxbuff[8] = {0};
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
	if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 800516a:	f107 0314 	add.w	r3, r7, #20
 800516e:	2202      	movs	r2, #2
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fc8c 	bl	8005a90 <si4463_sendCommand>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <si4463_getCurrentRSSI+0x2e>
 800517e:	f06f 030a 	mvn.w	r3, #10
 8005182:	e013      	b.n	80051ac <si4463_getCurrentRSSI+0x56>
	if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 8005184:	f107 030c 	add.w	r3, r7, #12
 8005188:	2208      	movs	r2, #8
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fcd5 	bl	8005b3c <si4463_getResponse>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <si4463_getCurrentRSSI+0x48>
 8005198:	f06f 0309 	mvn.w	r3, #9
 800519c:	e006      	b.n	80051ac <si4463_getCurrentRSSI+0x56>

	return rxbuff[2]/2-120;
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b78      	subs	r3, #120	; 0x78
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b21b      	sxth	r3, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <si4463_clearInterrupts>:

    return SI4463_OK;
}

int8_t si4463_clearInterrupts(si4463_t* si4463)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4] = {GET_INT_STATUS, 0x00, 0x00, 0x00};
 80051bc:	2320      	movs	r3, #32
 80051be:	617b      	str	r3, [r7, #20]
    uint8_t rxbuff[8] = {0};
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
    if(!si4463_sendCommand(si4463, cmd, 4)) return SI4463_ERR_WRITE_REG;
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	2204      	movs	r2, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fc5d 	bl	8005a90 <si4463_sendCommand>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <si4463_clearInterrupts+0x2e>
 80051dc:	f06f 030a 	mvn.w	r3, #10
 80051e0:	e00d      	b.n	80051fe <si4463_clearInterrupts+0x4a>
    if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	2208      	movs	r2, #8
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fca6 	bl	8005b3c <si4463_getResponse>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <si4463_clearInterrupts+0x48>
 80051f6:	f06f 0309 	mvn.w	r3, #9
 80051fa:	e000      	b.n	80051fe <si4463_clearInterrupts+0x4a>

    return SI4463_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <si4463_getInterrupts>:

int8_t si4463_getInterrupts(si4463_t* si4463)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b086      	sub	sp, #24
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4] = {GET_INT_STATUS, 0xFF, 0xFF, 0xFF};
 800520e:	f06f 03df 	mvn.w	r3, #223	; 0xdf
 8005212:	613b      	str	r3, [r7, #16]
    uint8_t rxbuff[8] = {0};
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
    if(!si4463_sendCommand(si4463, cmd, 4)) return SI4463_ERR_WRITE_REG;
 800521c:	f107 0310 	add.w	r3, r7, #16
 8005220:	2204      	movs	r2, #4
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fc33 	bl	8005a90 <si4463_sendCommand>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <si4463_getInterrupts+0x30>
 8005230:	f06f 030a 	mvn.w	r3, #10
 8005234:	e11e      	b.n	8005474 <si4463_getInterrupts+0x26e>
    if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	2208      	movs	r2, #8
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc7c 	bl	8005b3c <si4463_getResponse>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <si4463_getInterrupts+0x4a>
 800524a:	f06f 0309 	mvn.w	r3, #9
 800524e:	e111      	b.n	8005474 <si4463_getInterrupts+0x26e>

    /* Get pend bytes */
    uint8_t phPend = rxbuff[2];
 8005250:	7abb      	ldrb	r3, [r7, #10]
 8005252:	75fb      	strb	r3, [r7, #23]
    uint8_t modemPend = rxbuff[4];
 8005254:	7b3b      	ldrb	r3, [r7, #12]
 8005256:	75bb      	strb	r3, [r7, #22]
    uint8_t chipPend = rxbuff[6];
 8005258:	7bbb      	ldrb	r3, [r7, #14]
 800525a:	757b      	strb	r3, [r7, #21]

    si4463->interrupts.filterMatch = (phPend >> 7) & 0x1;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	09db      	lsrs	r3, r3, #7
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2da      	uxtb	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f883 2020 	strb.w	r2, [r3, #32]
    si4463->interrupts.filterMiss = (phPend >> 6) & 0x1;
 8005276:	7dfb      	ldrb	r3, [r7, #23]
 8005278:	099b      	lsrs	r3, r3, #6
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2da      	uxtb	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    si4463->interrupts.packetSent = (phPend >> 5) & 0x1;
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    si4463->interrupts.packetRx = (phPend >> 4) & 0x1;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    si4463->interrupts.crcError = (phPend >> 3) & 0x1;
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf14      	ite	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	2300      	moveq	r3, #0
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    si4463->interrupts.txFifoAlmostEmpty = (phPend >> 1) & 0x1;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    si4463->interrupts.rxFifoAlmostFull = phPend & 0x1;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf14      	ite	ne
 8005302:	2301      	movne	r3, #1
 8005304:	2300      	moveq	r3, #0
 8005306:	b2da      	uxtb	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    si4463->interrupts.postambleDetect = (modemPend >> 6) & 0x1;
 800530e:	7dbb      	ldrb	r3, [r7, #22]
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2da      	uxtb	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    si4463->interrupts.invalidSync = (modemPend >> 5) & 0x1;
 8005328:	7dbb      	ldrb	r3, [r7, #22]
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2da      	uxtb	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    si4463->interrupts.rssiJump = (modemPend >> 4) & 0x1;
 8005342:	7dbb      	ldrb	r3, [r7, #22]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2da      	uxtb	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    si4463->interrupts.rssi = (modemPend >> 3) & 0x1;
 800535c:	7dbb      	ldrb	r3, [r7, #22]
 800535e:	08db      	lsrs	r3, r3, #3
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2da      	uxtb	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    si4463->interrupts.invalidPreamble = (modemPend >> 2) & 0x1;
 8005376:	7dbb      	ldrb	r3, [r7, #22]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2da      	uxtb	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    si4463->interrupts.preambleDetect = (modemPend >> 1) & 0x1;
 8005390:	7dbb      	ldrb	r3, [r7, #22]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    si4463->interrupts.packetSent = modemPend & 0x1;
 80053aa:	7dbb      	ldrb	r3, [r7, #22]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    si4463->interrupts.cal = (chipPend >> 6) & 0x1;
 80053c0:	7d7b      	ldrb	r3, [r7, #21]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    si4463->interrupts.fifoUnderflowOverflowError = (chipPend >> 5) & 0x1;
 80053da:	7d7b      	ldrb	r3, [r7, #21]
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    si4463->interrupts.stateChange = (chipPend >> 4) & 0x1;
 80053f4:	7d7b      	ldrb	r3, [r7, #21]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf14      	ite	ne
 8005402:	2301      	movne	r3, #1
 8005404:	2300      	moveq	r3, #0
 8005406:	b2da      	uxtb	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    si4463->interrupts.cmdError = (chipPend >> 3) & 0x1;
 800540e:	7d7b      	ldrb	r3, [r7, #21]
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    si4463->interrupts.chipReady = (chipPend >> 2) & 0x1;
 8005428:	7d7b      	ldrb	r3, [r7, #21]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2da      	uxtb	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    si4463->interrupts.lowBatt = (chipPend >> 1) & 0x1;
 8005442:	7d7b      	ldrb	r3, [r7, #21]
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2da      	uxtb	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    si4463->interrupts.wut = chipPend & 0x1;
 800545c:	7d7b      	ldrb	r3, [r7, #21]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2da      	uxtb	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return SI4463_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <si4463_transmit>:

    return SI4463_OK;
}

int8_t si4463_transmit(si4463_t* si4463, uint8_t* txData, uint8_t txDataLen, si4463_state nextState)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4611      	mov	r1, r2
 8005488:	461a      	mov	r2, r3
 800548a:	460b      	mov	r3, r1
 800548c:	71fb      	strb	r3, [r7, #7]
 800548e:	4613      	mov	r3, r2
 8005490:	71bb      	strb	r3, [r7, #6]
    int8_t result = si4463_txInterrupt(si4463);
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fd26 	bl	8005ee4 <si4463_txInterrupt>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]
    if(result != SI4463_OK) return result;
 800549c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <si4463_transmit+0x2e>
 80054a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054a8:	e059      	b.n	800555e <si4463_transmit+0xe2>
    result = si4463_clearInterrupts(si4463);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fe82 	bl	80051b4 <si4463_clearInterrupts>
 80054b0:	4603      	mov	r3, r0
 80054b2:	75fb      	strb	r3, [r7, #23]
    if(result != SI4463_OK) return result;
 80054b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <si4463_transmit+0x46>
 80054bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054c0:	e04d      	b.n	800555e <si4463_transmit+0xe2>
    result = si4463_getTxFifoInfo(si4463);
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fe1f 	bl	8005106 <si4463_getTxFifoInfo>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]
    if(result >= txDataLen)
 80054cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	db3a      	blt.n	800554c <si4463_transmit+0xd0>
    {
        result = si4463_writeTxFiFo(si4463, txData, txDataLen);
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	461a      	mov	r2, r3
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fb75 	bl	8005bcc <si4463_writeTxFiFo>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]
        if(result != SI4463_OK) return result;
 80054e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <si4463_transmit+0x78>
 80054ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054f2:	e034      	b.n	800555e <si4463_transmit+0xe2>
        result = si4463_startTx(si4463, txDataLen, nextState);
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	79ba      	ldrb	r2, [r7, #6]
 80054fa:	4619      	mov	r1, r3
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fba6 	bl	8005c4e <si4463_startTx>
 8005502:	4603      	mov	r3, r0
 8005504:	75fb      	strb	r3, [r7, #23]
        if(result != SI4463_OK) return result;
 8005506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <si4463_transmit+0x98>
 800550e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005512:	e024      	b.n	800555e <si4463_transmit+0xe2>
        int counter = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
        // Check if IRQ pin is pulled down
        while(counter < SI4463_TRANSMIT_TIMEOUT)
 8005518:	e013      	b.n	8005542 <si4463_transmit+0xc6>
        {
            if(si4463->gpios.IRQ() == si4463->gpios.gpio_low) return SI4463_OK;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	4798      	blx	r3
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800552a:	429a      	cmp	r2, r3
 800552c:	d101      	bne.n	8005532 <si4463_transmit+0xb6>
 800552e:	2300      	movs	r3, #0
 8005530:	e015      	b.n	800555e <si4463_transmit+0xe2>
            si4463->DelayUs(1000);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800553a:	4798      	blx	r3
            counter++;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3301      	adds	r3, #1
 8005540:	613b      	str	r3, [r7, #16]
        while(counter < SI4463_TRANSMIT_TIMEOUT)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005548:	dbe7      	blt.n	800551a <si4463_transmit+0x9e>
 800554a:	e006      	b.n	800555a <si4463_transmit+0xde>
        }
    }
    else if(result >= 0)
 800554c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005550:	2b00      	cmp	r3, #0
 8005552:	db02      	blt.n	800555a <si4463_transmit+0xde>
        return SI4463_ERR_OVER_TX_FIFO;
 8005554:	f06f 031e 	mvn.w	r3, #30
 8005558:	e001      	b.n	800555e <si4463_transmit+0xe2>

    return result;
 800555a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <si4463_setTxPower>:
	if(!si4463_readRxDataBuff(si4463, rxData, rxDataLen)) return SI4463_ERR_READ_RXBUFF;
	return si4463_clearRxFifo(si4463);
}

int8_t si4463_setTxPower(si4463_t* si4463, uint8_t power)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
    // Range: 0-127
    if(power > 127 || power < 5) return SI4463_ERR_BAD_PARAM;
 8005572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005576:	2b00      	cmp	r3, #0
 8005578:	db02      	blt.n	8005580 <si4463_setTxPower+0x1a>
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d802      	bhi.n	8005586 <si4463_setTxPower+0x20>
 8005580:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8005584:	e037      	b.n	80055f6 <si4463_setTxPower+0x90>
    uint8_t cmd = power;
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	72fb      	strb	r3, [r7, #11]

    int res = si4463_setProperties(si4463, &cmd, 1, PROP_PA_PWR_LVL);
 800558a:	f107 010b 	add.w	r1, r7, #11
 800558e:	f242 2301 	movw	r3, #8705	; 0x2201
 8005592:	2201      	movs	r2, #1
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fbf9 	bl	8005d8c <si4463_setProperties>
 800559a:	4603      	mov	r3, r0
 800559c:	60fb      	str	r3, [r7, #12]
    if(res == SI4463_OK)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d126      	bne.n	80055f2 <si4463_setTxPower+0x8c>
    {
        if(power >= 80)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	2b4f      	cmp	r3, #79	; 0x4f
 80055a8:	d904      	bls.n	80055b4 <si4463_setTxPower+0x4e>
            si4463->settings.power = PWR_20_dBm;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2204      	movs	r2, #4
 80055ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80055b2:	e01e      	b.n	80055f2 <si4463_setTxPower+0x8c>
        else if(power >= 25)
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	2b18      	cmp	r3, #24
 80055b8:	d904      	bls.n	80055c4 <si4463_setTxPower+0x5e>
            si4463->settings.power = PWR_14_dBm;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2203      	movs	r2, #3
 80055be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80055c2:	e016      	b.n	80055f2 <si4463_setTxPower+0x8c>
        else if(power >= 17)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d904      	bls.n	80055d4 <si4463_setTxPower+0x6e>
            si4463->settings.power = PWR_10_dBm;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80055d2:	e00e      	b.n	80055f2 <si4463_setTxPower+0x8c>
        else if(power >= 9)
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d904      	bls.n	80055e4 <si4463_setTxPower+0x7e>
            si4463->settings.power = PWR_4_dBm;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80055e2:	e006      	b.n	80055f2 <si4463_setTxPower+0x8c>
        else if(power >= 5)
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d903      	bls.n	80055f2 <si4463_setTxPower+0x8c>
            si4463->settings.power = PWR_0_dBm;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    }
    return res;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	b25b      	sxtb	r3, r3
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <si4463_getFreqConfig>:
    }
    return res;
}

int8_t si4463_getFreqConfig(si4463_t* si4463)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_FREQ_CONTROL_INTE;
 8005608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800560c:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff[4] = {0};
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]

    int res = si4463_getProperties(si4463, rxbuff, 4, propNum);
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	f107 010c 	add.w	r1, r7, #12
 8005618:	2204      	movs	r2, #4
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fc0a 	bl	8005e34 <si4463_getProperties>
 8005620:	4603      	mov	r3, r0
 8005622:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10f      	bne.n	800564a <si4463_getFreqConfig+0x4a>
    {
        si4463->freq.freq_inte = rxbuff[0];
 800562a:	7b3a      	ldrb	r2, [r7, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        si4463->freq.freq_frac = ((0x0F & rxbuff[1]) << 16) | (rxbuff[2] << 8) | rxbuff[3];
 8005632:	7b7b      	ldrb	r3, [r7, #13]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	4313      	orrs	r3, r2
 8005640:	7bfa      	ldrb	r2, [r7, #15]
 8005642:	4313      	orrs	r3, r2
 8005644:	461a      	mov	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	669a      	str	r2, [r3, #104]	; 0x68
    }
    propNum = PROP_MODEM_CLKGEN_BAND;
 800564a:	f242 0351 	movw	r3, #8273	; 0x2051
 800564e:	82fb      	strh	r3, [r7, #22]
    memset(rxbuff, '\0', 4);
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	2204      	movs	r2, #4
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f001 fdb9 	bl	80071d0 <memset>
    res = si4463_getProperties(si4463, rxbuff, 1, propNum);
 800565e:	8afb      	ldrh	r3, [r7, #22]
 8005660:	f107 010c 	add.w	r1, r7, #12
 8005664:	2201      	movs	r2, #1
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbe4 	bl	8005e34 <si4463_getProperties>
 800566c:	4603      	mov	r3, r0
 800566e:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d14e      	bne.n	8005714 <si4463_getFreqConfig+0x114>
    {
        // ENUM_1 or ENUM 0
        if(0x08 & rxbuff[0])
 8005676:	7b3b      	ldrb	r3, [r7, #12]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <si4463_getFreqConfig+0x8c>
            si4463->freq.n_presc = 2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800568a:	e003      	b.n	8005694 <si4463_getFreqConfig+0x94>
        else
            si4463->freq.n_presc = 4;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2204      	movs	r2, #4
 8005690:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        switch(0x07 & rxbuff[0])
 8005694:	7b3b      	ldrb	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b07      	cmp	r3, #7
 800569c:	d83a      	bhi.n	8005714 <si4463_getFreqConfig+0x114>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <si4463_getFreqConfig+0xa4>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056c5 	.word	0x080056c5
 80056a8:	080056cf 	.word	0x080056cf
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	080056e3 	.word	0x080056e3
 80056b4:	080056ed 	.word	0x080056ed
 80056b8:	080056f7 	.word	0x080056f7
 80056bc:	08005701 	.word	0x08005701
 80056c0:	0800570b 	.word	0x0800570b
        {
            case FVCO_DIV_4:
                si4463->freq.outdiv = 4;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2204      	movs	r2, #4
 80056c8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 80056cc:	e022      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_6:
                si4463->freq.outdiv = 6;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2206      	movs	r2, #6
 80056d2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 80056d6:	e01d      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_8:
                si4463->freq.outdiv = 8;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2208      	movs	r2, #8
 80056dc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 80056e0:	e018      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_12:
                si4463->freq.outdiv = 12;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	220c      	movs	r2, #12
 80056e6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 80056ea:	e013      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_16:
                si4463->freq.outdiv = 16;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2210      	movs	r2, #16
 80056f0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 80056f4:	e00e      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_24:
                si4463->freq.outdiv = 24;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2218      	movs	r2, #24
 80056fa:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 80056fe:	e009      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_24_2:
                si4463->freq.outdiv = 24;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2218      	movs	r2, #24
 8005704:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 8005708:	e004      	b.n	8005714 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_24_3:
                si4463->freq.outdiv = 24;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2218      	movs	r2, #24
 800570e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                break;
 8005712:	bf00      	nop
        }
    }

    return res;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	b25b      	sxtb	r3, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <si4463_setFrequency>:

int8_t si4463_setFrequency(si4463_t* si4463, uint32_t freq)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
    int res = si4463_getFreqConfig(si4463);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff ff68 	bl	8005600 <si4463_getFreqConfig>
 8005730:	4603      	mov	r3, r0
 8005732:	617b      	str	r3, [r7, #20]
    if(res == SI4463_OK)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d155      	bne.n	80057e6 <si4463_setFrequency+0xc6>
    {
        uint8_t cmd[3] = {0};
 800573a:	4b2e      	ldr	r3, [pc, #184]	; (80057f4 <si4463_setFrequency+0xd4>)
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	813b      	strh	r3, [r7, #8]
 8005740:	2300      	movs	r3, #0
 8005742:	72bb      	strb	r3, [r7, #10]
        float temp = (float)freq / ((si4463->freq.n_presc * (float)RADIO_CONFIGURATION_DATA_RADIO_XO_FREQ)/ si4463->freq.outdiv);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800575c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057f8 <si4463_setFrequency+0xd8>
 8005760:	ee27 6a87 	vmul.f32	s12, s15, s14
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005772:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8005776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577a:	edc7 7a04 	vstr	s15, [r7, #16]
        uint32_t fc_frac = (temp - si4463->freq.freq_inte)*pow(2, 19);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800578c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005794:	ee17 0a90 	vmov	r0, s15
 8005798:	f7fa fee6 	bl	8000568 <__aeabi_f2d>
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <si4463_setFrequency+0xdc>)
 80057a2:	f7fa ff39 	bl	8000618 <__aeabi_dmul>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	f7fb fa0b 	bl	8000bc8 <__aeabi_d2uiz>
 80057b2:	4603      	mov	r3, r0
 80057b4:	60fb      	str	r3, [r7, #12]
        cmd[0] = 0x0F & (fc_frac >> 16);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	723b      	strb	r3, [r7, #8]
        cmd[1] = 0xFF & fc_frac >> 8;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	727b      	strb	r3, [r7, #9]
        cmd[2] = 0xFF & fc_frac;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	72bb      	strb	r3, [r7, #10]
        return si4463_setProperties(si4463, cmd, 3, PROP_FREQ_CONTROL_FRAC);
 80057d2:	f107 0108 	add.w	r1, r7, #8
 80057d6:	f244 0301 	movw	r3, #16385	; 0x4001
 80057da:	2203      	movs	r2, #3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fad5 	bl	8005d8c <si4463_setProperties>
 80057e2:	4603      	mov	r3, r0
 80057e4:	e001      	b.n	80057ea <si4463_setFrequency+0xca>
    }
    else
        return res;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	b25b      	sxtb	r3, r3
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	0800a9ac 	.word	0x0800a9ac
 80057f8:	4be4e1c0 	.word	0x4be4e1c0
 80057fc:	41200000 	.word	0x41200000

08005800 <si4463_setTxModulation>:

int8_t si4463_setTxModulation(si4463_t* si4463, si4463_mod_type mod)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
    int res = SI4463_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
    switch (si4463->settings.txDataRate)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005816:	2b03      	cmp	r3, #3
 8005818:	d86a      	bhi.n	80058f0 <si4463_setTxModulation+0xf0>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <si4463_setTxModulation+0x20>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	080058c1 	.word	0x080058c1
 8005824:	08005891 	.word	0x08005891
 8005828:	08005861 	.word	0x08005861
 800582c:	08005831 	.word	0x08005831
    {
    case DR_9600:
        if(mod == MOD_2GFSK)
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d106      	bne.n	8005844 <si4463_setTxModulation+0x44>
            res = si4463_configArray(si4463, GMSK_9600_TX);
 8005836:	4938      	ldr	r1, [pc, #224]	; (8005918 <si4463_setTxModulation+0x118>)
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa3f 	bl	8005cbc <si4463_configArray>
 800583e:	4603      	mov	r3, r0
 8005840:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_9600_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8005842:	e05b      	b.n	80058fc <si4463_setTxModulation+0xfc>
        else if(mod == MOD_2FSK)
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d106      	bne.n	8005858 <si4463_setTxModulation+0x58>
            res = si4463_configArray(si4463, FSK_9600_TX);
 800584a:	4934      	ldr	r1, [pc, #208]	; (800591c <si4463_setTxModulation+0x11c>)
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fa35 	bl	8005cbc <si4463_configArray>
 8005852:	4603      	mov	r3, r0
 8005854:	60fb      	str	r3, [r7, #12]
        break;
 8005856:	e051      	b.n	80058fc <si4463_setTxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 8005858:	f06f 0332 	mvn.w	r3, #50	; 0x32
 800585c:	60fb      	str	r3, [r7, #12]
        break;
 800585e:	e04d      	b.n	80058fc <si4463_setTxModulation+0xfc>
    case DR_4800:
        if(mod == MOD_2GFSK)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d106      	bne.n	8005874 <si4463_setTxModulation+0x74>
            res = si4463_configArray(si4463, GMSK_4800_TX);
 8005866:	492e      	ldr	r1, [pc, #184]	; (8005920 <si4463_setTxModulation+0x120>)
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fa27 	bl	8005cbc <si4463_configArray>
 800586e:	4603      	mov	r3, r0
 8005870:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_4800_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8005872:	e043      	b.n	80058fc <si4463_setTxModulation+0xfc>
        else if(mod == MOD_2FSK)
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d106      	bne.n	8005888 <si4463_setTxModulation+0x88>
            res = si4463_configArray(si4463, FSK_4800_TX);
 800587a:	492a      	ldr	r1, [pc, #168]	; (8005924 <si4463_setTxModulation+0x124>)
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa1d 	bl	8005cbc <si4463_configArray>
 8005882:	4603      	mov	r3, r0
 8005884:	60fb      	str	r3, [r7, #12]
        break;
 8005886:	e039      	b.n	80058fc <si4463_setTxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 8005888:	f06f 0332 	mvn.w	r3, #50	; 0x32
 800588c:	60fb      	str	r3, [r7, #12]
        break;
 800588e:	e035      	b.n	80058fc <si4463_setTxModulation+0xfc>
    case DR_2400:
        if(mod == MOD_2GFSK)
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d106      	bne.n	80058a4 <si4463_setTxModulation+0xa4>
            res = si4463_configArray(si4463, GMSK_2400_TX);
 8005896:	4924      	ldr	r1, [pc, #144]	; (8005928 <si4463_setTxModulation+0x128>)
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fa0f 	bl	8005cbc <si4463_configArray>
 800589e:	4603      	mov	r3, r0
 80058a0:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_2400_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 80058a2:	e02b      	b.n	80058fc <si4463_setTxModulation+0xfc>
        else if(mod == MOD_2FSK)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d106      	bne.n	80058b8 <si4463_setTxModulation+0xb8>
            res = si4463_configArray(si4463, FSK_2400_TX);
 80058aa:	4920      	ldr	r1, [pc, #128]	; (800592c <si4463_setTxModulation+0x12c>)
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa05 	bl	8005cbc <si4463_configArray>
 80058b2:	4603      	mov	r3, r0
 80058b4:	60fb      	str	r3, [r7, #12]
        break;
 80058b6:	e021      	b.n	80058fc <si4463_setTxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 80058b8:	f06f 0332 	mvn.w	r3, #50	; 0x32
 80058bc:	60fb      	str	r3, [r7, #12]
        break;
 80058be:	e01d      	b.n	80058fc <si4463_setTxModulation+0xfc>
    case DR_1200:
        if(mod == MOD_2GFSK)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d106      	bne.n	80058d4 <si4463_setTxModulation+0xd4>
            res = si4463_configArray(si4463, GMSK_1200_TX);
 80058c6:	491a      	ldr	r1, [pc, #104]	; (8005930 <si4463_setTxModulation+0x130>)
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f9f7 	bl	8005cbc <si4463_configArray>
 80058ce:	4603      	mov	r3, r0
 80058d0:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_1200_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 80058d2:	e013      	b.n	80058fc <si4463_setTxModulation+0xfc>
        else if(mod == MOD_2FSK)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d106      	bne.n	80058e8 <si4463_setTxModulation+0xe8>
            res = si4463_configArray(si4463, FSK_1200_TX);
 80058da:	4916      	ldr	r1, [pc, #88]	; (8005934 <si4463_setTxModulation+0x134>)
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f9ed 	bl	8005cbc <si4463_configArray>
 80058e2:	4603      	mov	r3, r0
 80058e4:	60fb      	str	r3, [r7, #12]
        break;
 80058e6:	e009      	b.n	80058fc <si4463_setTxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 80058e8:	f06f 0332 	mvn.w	r3, #50	; 0x32
 80058ec:	60fb      	str	r3, [r7, #12]
        break;
 80058ee:	e005      	b.n	80058fc <si4463_setTxModulation+0xfc>
    default:
        DEBUG_PRINTF("Invalid Tx data rate ! \r\n");
 80058f0:	4811      	ldr	r0, [pc, #68]	; (8005938 <si4463_setTxModulation+0x138>)
 80058f2:	f001 fb6d 	bl	8006fd0 <puts>
        res = SI4463_ERR_BAD_PARAM;
 80058f6:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80058fa:	60fb      	str	r3, [r7, #12]
    }
    if(res == SI4463_OK)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <si4463_setTxModulation+0x10a>
        si4463->settings.txMod = mod;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    return res;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	b25b      	sxtb	r3, r3
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2000017c 	.word	0x2000017c
 800591c:	200001dc 	.word	0x200001dc
 8005920:	20000194 	.word	0x20000194
 8005924:	200001f4 	.word	0x200001f4
 8005928:	200001ac 	.word	0x200001ac
 800592c:	2000020c 	.word	0x2000020c
 8005930:	200001c4 	.word	0x200001c4
 8005934:	20000224 	.word	0x20000224
 8005938:	0800a9b0 	.word	0x0800a9b0

0800593c <si4463_setTxDataRate>:
        si4463->settings.rxMod = mod;
    return res;
}

int8_t si4463_setTxDataRate(si4463_t* si4463, si4463_data_rate dataRate)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
    int res = SI4463_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
    switch (si4463->settings.txMod)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005952:	2b02      	cmp	r3, #2
 8005954:	d02d      	beq.n	80059b2 <si4463_setTxDataRate+0x76>
 8005956:	2b03      	cmp	r3, #3
 8005958:	d157      	bne.n	8005a0a <si4463_setTxDataRate+0xce>
    {
    case MOD_2GFSK:
        if(dataRate == DR_9600)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d106      	bne.n	800596e <si4463_setTxDataRate+0x32>
            res = si4463_configArray(si4463, GMSK_9600_TX);
 8005960:	4933      	ldr	r1, [pc, #204]	; (8005a30 <si4463_setTxDataRate+0xf4>)
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9aa 	bl	8005cbc <si4463_configArray>
 8005968:	4603      	mov	r3, r0
 800596a:	60fb      	str	r3, [r7, #12]
            res = si4463_configArray(si4463, GMSK_2400_TX);
        else if(dataRate == DR_1200)
            res = si4463_configArray(si4463, GMSK_1200_TX);
        else
            res = SI4463_ERR_INVALID_DR;
        break;
 800596c:	e053      	b.n	8005a16 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_4800)
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d106      	bne.n	8005982 <si4463_setTxDataRate+0x46>
            res = si4463_configArray(si4463, GMSK_4800_TX);
 8005974:	492f      	ldr	r1, [pc, #188]	; (8005a34 <si4463_setTxDataRate+0xf8>)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9a0 	bl	8005cbc <si4463_configArray>
 800597c:	4603      	mov	r3, r0
 800597e:	60fb      	str	r3, [r7, #12]
        break;
 8005980:	e049      	b.n	8005a16 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_2400)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d106      	bne.n	8005996 <si4463_setTxDataRate+0x5a>
            res = si4463_configArray(si4463, GMSK_2400_TX);
 8005988:	492b      	ldr	r1, [pc, #172]	; (8005a38 <si4463_setTxDataRate+0xfc>)
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f996 	bl	8005cbc <si4463_configArray>
 8005990:	4603      	mov	r3, r0
 8005992:	60fb      	str	r3, [r7, #12]
        break;
 8005994:	e03f      	b.n	8005a16 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_1200)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <si4463_setTxDataRate+0x6e>
            res = si4463_configArray(si4463, GMSK_1200_TX);
 800599c:	4927      	ldr	r1, [pc, #156]	; (8005a3c <si4463_setTxDataRate+0x100>)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f98c 	bl	8005cbc <si4463_configArray>
 80059a4:	4603      	mov	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]
        break;
 80059a8:	e035      	b.n	8005a16 <si4463_setTxDataRate+0xda>
            res = SI4463_ERR_INVALID_DR;
 80059aa:	f06f 0333 	mvn.w	r3, #51	; 0x33
 80059ae:	60fb      	str	r3, [r7, #12]
        break;
 80059b0:	e031      	b.n	8005a16 <si4463_setTxDataRate+0xda>
    case MOD_2FSK:
        if(dataRate == DR_9600)
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d106      	bne.n	80059c6 <si4463_setTxDataRate+0x8a>
            res = si4463_configArray(si4463, FSK_9600_TX);
 80059b8:	4921      	ldr	r1, [pc, #132]	; (8005a40 <si4463_setTxDataRate+0x104>)
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f97e 	bl	8005cbc <si4463_configArray>
 80059c0:	4603      	mov	r3, r0
 80059c2:	60fb      	str	r3, [r7, #12]
            res = si4463_configArray(si4463, FSK_2400_TX);
        else if(dataRate == DR_1200)
            res = si4463_configArray(si4463, FSK_1200_TX);
        else
            res = SI4463_ERR_INVALID_DR;
        break;
 80059c4:	e027      	b.n	8005a16 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_4800)
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d106      	bne.n	80059da <si4463_setTxDataRate+0x9e>
            res = si4463_configArray(si4463, FSK_4800_TX);
 80059cc:	491d      	ldr	r1, [pc, #116]	; (8005a44 <si4463_setTxDataRate+0x108>)
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f974 	bl	8005cbc <si4463_configArray>
 80059d4:	4603      	mov	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]
        break;
 80059d8:	e01d      	b.n	8005a16 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_2400)
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d106      	bne.n	80059ee <si4463_setTxDataRate+0xb2>
            res = si4463_configArray(si4463, FSK_2400_TX);
 80059e0:	4919      	ldr	r1, [pc, #100]	; (8005a48 <si4463_setTxDataRate+0x10c>)
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f96a 	bl	8005cbc <si4463_configArray>
 80059e8:	4603      	mov	r3, r0
 80059ea:	60fb      	str	r3, [r7, #12]
        break;
 80059ec:	e013      	b.n	8005a16 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_1200)
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <si4463_setTxDataRate+0xc6>
            res = si4463_configArray(si4463, FSK_1200_TX);
 80059f4:	4915      	ldr	r1, [pc, #84]	; (8005a4c <si4463_setTxDataRate+0x110>)
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f960 	bl	8005cbc <si4463_configArray>
 80059fc:	4603      	mov	r3, r0
 80059fe:	60fb      	str	r3, [r7, #12]
        break;
 8005a00:	e009      	b.n	8005a16 <si4463_setTxDataRate+0xda>
            res = SI4463_ERR_INVALID_DR;
 8005a02:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8005a06:	60fb      	str	r3, [r7, #12]
        break;
 8005a08:	e005      	b.n	8005a16 <si4463_setTxDataRate+0xda>
    default:
        DEBUG_PRINTF("Invalid Tx modulation ! \r\n");
 8005a0a:	4811      	ldr	r0, [pc, #68]	; (8005a50 <si4463_setTxDataRate+0x114>)
 8005a0c:	f001 fae0 	bl	8006fd0 <puts>
        res = SI4463_ERR_BAD_PARAM;
 8005a10:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8005a14:	60fb      	str	r3, [r7, #12]
    }
    if(res == SI4463_OK)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <si4463_setTxDataRate+0xe8>
        si4463->settings.txDataRate = dataRate;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    return res;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	b25b      	sxtb	r3, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	2000017c 	.word	0x2000017c
 8005a34:	20000194 	.word	0x20000194
 8005a38:	200001ac 	.word	0x200001ac
 8005a3c:	200001c4 	.word	0x200001c4
 8005a40:	200001dc 	.word	0x200001dc
 8005a44:	200001f4 	.word	0x200001f4
 8005a48:	2000020c 	.word	0x2000020c
 8005a4c:	20000224 	.word	0x20000224
 8005a50:	0800a9e8 	.word	0x0800a9e8

08005a54 <si4463_getTxPower>:
        si4463->settings.rxDataRate = dataRate;
    return res;
}

int8_t si4463_getTxPower(si4463_t* si4463)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_PA_PWR_LVL;
 8005a5c:	f242 2301 	movw	r3, #8705	; 0x2201
 8005a60:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
    int res = si4463_getProperties(si4463, &rxbuff, 1, propNum);
 8005a66:	8afb      	ldrh	r3, [r7, #22]
 8005a68:	f107 010f 	add.w	r1, r7, #15
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9e0 	bl	8005e34 <si4463_getProperties>
 8005a74:	4603      	mov	r3, r0
 8005a76:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <si4463_getTxPower+0x30>
        return rxbuff;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	b25b      	sxtb	r3, r3
 8005a82:	e001      	b.n	8005a88 <si4463_getTxPower+0x34>
    else
        return res;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	b25b      	sxtb	r3, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <si4463_sendCommand>:

int8_t si4463_sendCommand(si4463_t* si4463, uint8_t* cmdData, uint8_t cmdLen)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]
    si4463->NSEL(false);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	4798      	blx	r3
    si4463->SPI_Write(cmdData, cmdLen, SI4463_SPI_TIMEOUT);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	79f9      	ldrb	r1, [r7, #7]
 8005aac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ab0:	68b8      	ldr	r0, [r7, #8]
 8005ab2:	4798      	blx	r3
    si4463->NSEL(true);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2001      	movs	r0, #1
 8005aba:	4798      	blx	r3
    if(si4463->SPI_CheckState() != si4463->spi_state_ready)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4798      	blx	r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	7c1b      	ldrb	r3, [r3, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d001      	beq.n	8005ad2 <si4463_sendCommand+0x42>
        return 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <si4463_sendCommand+0x44>
    else
        return 1;
 8005ad2:	2301      	movs	r3, #1
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <si4463_waitforCTS>:

int8_t si4463_waitforCTS(si4463_t* si4463)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    uint8_t output_address[2] = {0};
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	81bb      	strh	r3, [r7, #12]
    uint8_t ctsValue[2] = {0};
 8005ae8:	2300      	movs	r3, #0
 8005aea:	813b      	strh	r3, [r7, #8]
    uint16_t errCnt = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	81fb      	strh	r3, [r7, #14]

    while(ctsValue[1] != 0xFF)
 8005af0:	e01c      	b.n	8005b2c <si4463_waitforCTS+0x50>
    {
        if(++errCnt > MAX_CTS_RETRY)
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	3301      	adds	r3, #1
 8005af6:	81fb      	strh	r3, [r7, #14]
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005afe:	d901      	bls.n	8005b04 <si4463_waitforCTS+0x28>
            return 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e017      	b.n	8005b34 <si4463_waitforCTS+0x58>
        output_address[0] = READ_CMD_BUFFER;
 8005b04:	2344      	movs	r3, #68	; 0x44
 8005b06:	733b      	strb	r3, [r7, #12]
        si4463->NSEL(false);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	4798      	blx	r3
        si4463->SPI_WriteRead(&output_address[0], &ctsValue[0], 2, SI4463_SPI_TIMEOUT);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689c      	ldr	r4, [r3, #8]
 8005b14:	f107 0108 	add.w	r1, r7, #8
 8005b18:	f107 000c 	add.w	r0, r7, #12
 8005b1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b20:	2202      	movs	r2, #2
 8005b22:	47a0      	blx	r4
        si4463->NSEL(true);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2001      	movs	r0, #1
 8005b2a:	4798      	blx	r3
    while(ctsValue[1] != 0xFF)
 8005b2c:	7a7b      	ldrb	r3, [r7, #9]
 8005b2e:	2bff      	cmp	r3, #255	; 0xff
 8005b30:	d1df      	bne.n	8005af2 <si4463_waitforCTS+0x16>
    }
    return 1;
 8005b32:	2301      	movs	r3, #1
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd90      	pop	{r4, r7, pc}

08005b3c <si4463_getResponse>:

int8_t si4463_getResponse(si4463_t* si4463, uint8_t* respData, uint8_t respLen)
{
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
	uint8_t output_address[2] = {0};
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	82bb      	strh	r3, [r7, #20]
	uint8_t ctsValue[2] = {0};
 8005b4e:	2300      	movs	r3, #0
 8005b50:	823b      	strh	r3, [r7, #16]
	uint16_t errCnt = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	82fb      	strh	r3, [r7, #22]

	while(ctsValue[1] != 0xFF)
 8005b56:	e026      	b.n	8005ba6 <si4463_getResponse+0x6a>
	{
		if(++errCnt > MAX_CTS_RETRY)
 8005b58:	8afb      	ldrh	r3, [r7, #22]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	82fb      	strh	r3, [r7, #22]
 8005b5e:	8afb      	ldrh	r3, [r7, #22]
 8005b60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b64:	d901      	bls.n	8005b6a <si4463_getResponse+0x2e>
			return 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e02c      	b.n	8005bc4 <si4463_getResponse+0x88>
		output_address[0] = READ_CMD_BUFFER;
 8005b6a:	2344      	movs	r3, #68	; 0x44
 8005b6c:	753b      	strb	r3, [r7, #20]
		si4463->NSEL(false);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	2000      	movs	r0, #0
 8005b74:	4798      	blx	r3
		si4463->SPI_WriteRead(&output_address[0], &ctsValue[0], 2, SI4463_SPI_TIMEOUT);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689c      	ldr	r4, [r3, #8]
 8005b7a:	f107 0110 	add.w	r1, r7, #16
 8005b7e:	f107 0014 	add.w	r0, r7, #20
 8005b82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b86:	2202      	movs	r2, #2
 8005b88:	47a0      	blx	r4
		if(ctsValue[1] == 0xFF)
 8005b8a:	7c7b      	ldrb	r3, [r7, #17]
 8005b8c:	2bff      	cmp	r3, #255	; 0xff
 8005b8e:	d106      	bne.n	8005b9e <si4463_getResponse+0x62>
			si4463->SPI_Read(respData, respLen, SI4463_SPI_TIMEOUT);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	79f9      	ldrb	r1, [r7, #7]
 8005b96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005b9a:	68b8      	ldr	r0, [r7, #8]
 8005b9c:	4798      	blx	r3
		si4463->NSEL(true);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	4798      	blx	r3
	while(ctsValue[1] != 0xFF)
 8005ba6:	7c7b      	ldrb	r3, [r7, #17]
 8005ba8:	2bff      	cmp	r3, #255	; 0xff
 8005baa:	d1d5      	bne.n	8005b58 <si4463_getResponse+0x1c>
	}
    if(si4463->SPI_CheckState() != si4463->spi_state_ready)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4798      	blx	r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	7c1b      	ldrb	r3, [r3, #16]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d001      	beq.n	8005bc2 <si4463_getResponse+0x86>
        return 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <si4463_getResponse+0x88>
    else
        return 1;
 8005bc2:	2301      	movs	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd90      	pop	{r4, r7, pc}

08005bcc <si4463_writeTxFiFo>:

int8_t si4463_writeTxFiFo(si4463_t* si4463, uint8_t* txFifoData, uint8_t txFifoLen)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	71fb      	strb	r3, [r7, #7]
    int res = SI4463_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
    uint8_t* cmd = (uint8_t*)malloc((txFifoLen + 1)*sizeof(uint8_t));
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	3301      	adds	r3, #1
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f99a 	bl	8005f1c <malloc>
 8005be8:	4603      	mov	r3, r0
 8005bea:	613b      	str	r3, [r7, #16]
    memset(cmd, '\0', txFifoLen + 1);
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6938      	ldr	r0, [r7, #16]
 8005bf6:	f001 faeb 	bl	80071d0 <memset>
    cmd[0] = WRITE_TX_FIFO;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2266      	movs	r2, #102	; 0x66
 8005bfe:	701a      	strb	r2, [r3, #0]
    memcpy(&cmd[1], txFifoData, txFifoLen);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	3301      	adds	r3, #1
 8005c04:	79fa      	ldrb	r2, [r7, #7]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fb70 	bl	80072ee <memcpy>
    if(!si4463_sendCommand(si4463, cmd, txFifoLen + 1)) res = SI4463_ERR_WRITE_REG;
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	3301      	adds	r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	6939      	ldr	r1, [r7, #16]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff ff39 	bl	8005a90 <si4463_sendCommand>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <si4463_writeTxFiFo+0x5e>
 8005c24:	f06f 030a 	mvn.w	r3, #10
 8005c28:	617b      	str	r3, [r7, #20]
    if(!si4463_waitforCTS(si4463)) res = SI4463_CTS_TIMEOUT;
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff ff56 	bl	8005adc <si4463_waitforCTS>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <si4463_writeTxFiFo+0x70>
 8005c36:	f06f 0314 	mvn.w	r3, #20
 8005c3a:	617b      	str	r3, [r7, #20]

    free(cmd);
 8005c3c:	6938      	ldr	r0, [r7, #16]
 8005c3e:	f000 f975 	bl	8005f2c <free>
    return res;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	b25b      	sxtb	r3, r3
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <si4463_startTx>:

int8_t si4463_startTx(si4463_t* si4463, uint16_t dataLen, si4463_state nextState)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	807b      	strh	r3, [r7, #2]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	707b      	strb	r3, [r7, #1]
    uint8_t cmd[5] = {START_TX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 
 8005c5e:	2331      	movs	r3, #49	; 0x31
 8005c60:	723b      	strb	r3, [r7, #8]
 8005c62:	2300      	movs	r3, #0
 8005c64:	727b      	strb	r3, [r7, #9]
            (nextState << 4), ((dataLen >> 8) & 0x001F), (dataLen & 0x00FF)};
 8005c66:	787b      	ldrb	r3, [r7, #1]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	b2db      	uxtb	r3, r3
    uint8_t cmd[5] = {START_TX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 
 8005c6c:	72bb      	strb	r3, [r7, #10]
            (nextState << 4), ((dataLen >> 8) & 0x001F), (dataLen & 0x00FF)};
 8005c6e:	887b      	ldrh	r3, [r7, #2]
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	b2db      	uxtb	r3, r3
    uint8_t cmd[5] = {START_TX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 
 8005c7c:	72fb      	strb	r3, [r7, #11]
 8005c7e:	887b      	ldrh	r3, [r7, #2]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	733b      	strb	r3, [r7, #12]
    if(!si4463_sendCommand(si4463, cmd, sizeof(cmd))) return SI4463_ERR_WRITE_REG;
 8005c84:	f107 0308 	add.w	r3, r7, #8
 8005c88:	2205      	movs	r2, #5
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff feff 	bl	8005a90 <si4463_sendCommand>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <si4463_startTx+0x50>
 8005c98:	f06f 030a 	mvn.w	r3, #10
 8005c9c:	e009      	b.n	8005cb2 <si4463_startTx+0x64>
    if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff1c 	bl	8005adc <si4463_waitforCTS>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <si4463_startTx+0x62>
 8005caa:	f06f 0314 	mvn.w	r3, #20
 8005cae:	e000      	b.n	8005cb2 <si4463_startTx+0x64>

    return SI4463_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <si4463_configArray>:
	else
		return 1;
}

int8_t si4463_configArray(si4463_t* si4463, uint8_t* configArray)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0, currentNum = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	81fb      	strh	r3, [r7, #14]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	81bb      	strh	r3, [r7, #12]
    uint16_t propertyNum = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	817b      	strh	r3, [r7, #10]
    while(configArray[index])
 8005cd2:	e04b      	b.n	8005d6c <si4463_configArray+0xb0>
    {
        currentNum = configArray[index];
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	81bb      	strh	r3, [r7, #12]
        if(!si4463_sendCommand(si4463, &configArray[index + 1], currentNum))
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	89ba      	ldrh	r2, [r7, #12]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fecf 	bl	8005a90 <si4463_sendCommand>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <si4463_configArray+0x42>
            return SI4463_ERR_WRITE_REG;
 8005cf8:	f06f 030a 	mvn.w	r3, #10
 8005cfc:	e03d      	b.n	8005d7a <si4463_configArray+0xbe>
        if(!si4463_waitforCTS(si4463))
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff feec 	bl	8005adc <si4463_waitforCTS>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <si4463_configArray+0x54>
            return SI4463_CTS_TIMEOUT;
 8005d0a:	f06f 0314 	mvn.w	r3, #20
 8005d0e:	e034      	b.n	8005d7a <si4463_configArray+0xbe>
        if(configArray[index + 1] == 0x11)
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	3301      	adds	r3, #1
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	4413      	add	r3, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b11      	cmp	r3, #17
 8005d1c:	d115      	bne.n	8005d4a <si4463_configArray+0x8e>
        {
            propertyNum = (configArray[index + 2] << 8) | configArray[index + 4];
 8005d1e:	89fb      	ldrh	r3, [r7, #14]
 8005d20:	3302      	adds	r3, #2
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	89fb      	ldrh	r3, [r7, #14]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	440b      	add	r3, r1
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b21b      	sxth	r3, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	817b      	strh	r3, [r7, #10]
            DEBUG_PRINTF("Property number: 0x%04x\r\n", propertyNum);
 8005d3e:	897b      	ldrh	r3, [r7, #10]
 8005d40:	4619      	mov	r1, r3
 8005d42:	4810      	ldr	r0, [pc, #64]	; (8005d84 <si4463_configArray+0xc8>)
 8005d44:	f001 f8de 	bl	8006f04 <iprintf>
 8005d48:	e00a      	b.n	8005d60 <si4463_configArray+0xa4>
        }
		else
		{
            propertyNum = configArray[index + 1];
 8005d4a:	89fb      	ldrh	r3, [r7, #14]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	817b      	strh	r3, [r7, #10]
            DEBUG_PRINTF("Command number: 0x%02x\r\n", propertyNum);
 8005d56:	897b      	ldrh	r3, [r7, #10]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	480b      	ldr	r0, [pc, #44]	; (8005d88 <si4463_configArray+0xcc>)
 8005d5c:	f001 f8d2 	bl	8006f04 <iprintf>
        }
		index = index + currentNum + 1;
 8005d60:	89fa      	ldrh	r2, [r7, #14]
 8005d62:	89bb      	ldrh	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3301      	adds	r3, #1
 8005d6a:	81fb      	strh	r3, [r7, #14]
    while(configArray[index])
 8005d6c:	89fb      	ldrh	r3, [r7, #14]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	4413      	add	r3, r2
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1ad      	bne.n	8005cd4 <si4463_configArray+0x18>
    }
    return SI4463_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	0800aa20 	.word	0x0800aa20
 8005d88:	0800aa3c 	.word	0x0800aa3c

08005d8c <si4463_setProperties>:

int8_t si4463_setProperties(si4463_t* si4463, uint8_t* setData, uint8_t setDataLen, uint16_t propNum)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4611      	mov	r1, r2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	71fb      	strb	r3, [r7, #7]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80bb      	strh	r3, [r7, #4]
    uint8_t res = SI4463_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]
    uint8_t* cmd = (uint8_t*)malloc((setDataLen + 4)*sizeof(uint8_t));
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f8b6 	bl	8005f1c <malloc>
 8005db0:	4603      	mov	r3, r0
 8005db2:	613b      	str	r3, [r7, #16]
    memset(cmd, '\0', setDataLen + 4);
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	3304      	adds	r3, #4
 8005db8:	461a      	mov	r2, r3
 8005dba:	2100      	movs	r1, #0
 8005dbc:	6938      	ldr	r0, [r7, #16]
 8005dbe:	f001 fa07 	bl	80071d0 <memset>
    cmd[0] = SET_PROPERTY;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2211      	movs	r2, #17
 8005dc6:	701a      	strb	r2, [r3, #0]
    cmd[1] = (uint8_t)(propNum >> 8);
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
    cmd[2] = setDataLen;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3302      	adds	r3, #2
 8005dda:	79fa      	ldrb	r2, [r7, #7]
 8005ddc:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t)(propNum & 0x00FF);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	3303      	adds	r3, #3
 8005de2:	88ba      	ldrh	r2, [r7, #4]
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
    memcpy(&cmd[4], setData, setDataLen);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	3304      	adds	r3, #4
 8005dec:	79fa      	ldrb	r2, [r7, #7]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fa7c 	bl	80072ee <memcpy>
    if(!si4463_sendCommand(si4463, cmd, setDataLen + 4)) res = SI4463_ERR_WRITE_REG;
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6939      	ldr	r1, [r7, #16]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff fe45 	bl	8005a90 <si4463_sendCommand>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <si4463_setProperties+0x84>
 8005e0c:	23f5      	movs	r3, #245	; 0xf5
 8005e0e:	75fb      	strb	r3, [r7, #23]
    if(!si4463_waitforCTS(si4463)) res = SI4463_CTS_TIMEOUT;
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff fe63 	bl	8005adc <si4463_waitforCTS>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <si4463_setProperties+0x94>
 8005e1c:	23eb      	movs	r3, #235	; 0xeb
 8005e1e:	75fb      	strb	r3, [r7, #23]

    free(cmd);
 8005e20:	6938      	ldr	r0, [r7, #16]
 8005e22:	f000 f883 	bl	8005f2c <free>
    return res;
 8005e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <si4463_getProperties>:

int8_t si4463_getProperties(si4463_t* si4463, uint8_t* getData, uint8_t getDataLen, uint16_t propNum)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	71fb      	strb	r3, [r7, #7]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80bb      	strh	r3, [r7, #4]
    uint8_t cmd[4] = {GET_PROPERTY, (uint8_t)(propNum >> 8), getDataLen, (uint8_t)(propNum & 0x00FF)};
 8005e4a:	2312      	movs	r3, #18
 8005e4c:	743b      	strb	r3, [r7, #16]
 8005e4e:	88bb      	ldrh	r3, [r7, #4]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	747b      	strb	r3, [r7, #17]
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	74bb      	strb	r3, [r7, #18]
 8005e5c:	88bb      	ldrh	r3, [r7, #4]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	74fb      	strb	r3, [r7, #19]
    if(!si4463_sendCommand(si4463, cmd, 4)) return SI4463_ERR_WRITE_REG;
 8005e62:	f107 0310 	add.w	r3, r7, #16
 8005e66:	2204      	movs	r2, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff fe10 	bl	8005a90 <si4463_sendCommand>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <si4463_getProperties+0x48>
 8005e76:	f06f 030a 	mvn.w	r3, #10
 8005e7a:	e027      	b.n	8005ecc <si4463_getProperties+0x98>
    if(!si4463_getResponse(si4463, getData, getDataLen)) return SI4463_ERR_READ_REG;
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff fe5a 	bl	8005b3c <si4463_getResponse>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <si4463_getProperties+0x60>
 8005e8e:	f06f 0309 	mvn.w	r3, #9
 8005e92:	e01b      	b.n	8005ecc <si4463_getProperties+0x98>

    DEBUG_PRINTF("--------------------------\r\n");
 8005e94:	480f      	ldr	r0, [pc, #60]	; (8005ed4 <si4463_getProperties+0xa0>)
 8005e96:	f001 f89b 	bl	8006fd0 <puts>
		DEBUG_PRINTF("Get property data: ");
 8005e9a:	480f      	ldr	r0, [pc, #60]	; (8005ed8 <si4463_getProperties+0xa4>)
 8005e9c:	f001 f832 	bl	8006f04 <iprintf>
		for(int i = 0; i < getDataLen;i++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e00a      	b.n	8005ebc <si4463_getProperties+0x88>
		{
			DEBUG_PRINTF("0x%02x ", getData[i]);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	480a      	ldr	r0, [pc, #40]	; (8005edc <si4463_getProperties+0xa8>)
 8005eb2:	f001 f827 	bl	8006f04 <iprintf>
		for(int i = 0; i < getDataLen;i++)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	dbf0      	blt.n	8005ea6 <si4463_getProperties+0x72>
		}
    DEBUG_PRINTF("\r\n");
 8005ec4:	4806      	ldr	r0, [pc, #24]	; (8005ee0 <si4463_getProperties+0xac>)
 8005ec6:	f001 f883 	bl	8006fd0 <puts>

    return SI4463_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	0800aa58 	.word	0x0800aa58
 8005ed8:	0800aa74 	.word	0x0800aa74
 8005edc:	0800aa88 	.word	0x0800aa88
 8005ee0:	0800aa90 	.word	0x0800aa90

08005ee4 <si4463_txInterrupt>:

int8_t si4463_txInterrupt(si4463_t* si4463)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	uint8_t buff[4] = {0};
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
	buff[0] = PH_INT_STATUS_EN;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	733b      	strb	r3, [r7, #12]
	buff[1] = PACKET_SENT_EN;
 8005ef4:	2320      	movs	r3, #32
 8005ef6:	737b      	strb	r3, [r7, #13]
	buff[2] = 0x00;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73bb      	strb	r3, [r7, #14]
	buff[3] = CHIP_READY_EN;
 8005efc:	2304      	movs	r3, #4
 8005efe:	73fb      	strb	r3, [r7, #15]
	return si4463_setProperties(si4463, buff, 4, PROP_INT_CTL_ENABLE);
 8005f00:	f107 010c 	add.w	r1, r7, #12
 8005f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f08:	2204      	movs	r2, #4
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ff3e 	bl	8005d8c <si4463_setProperties>
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <malloc>:
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <malloc+0xc>)
 8005f1e:	4601      	mov	r1, r0
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f000 b82b 	b.w	8005f7c <_malloc_r>
 8005f26:	bf00      	nop
 8005f28:	20000294 	.word	0x20000294

08005f2c <free>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <free+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f002 b86b 	b.w	800800c <_free_r>
 8005f36:	bf00      	nop
 8005f38:	20000294 	.word	0x20000294

08005f3c <sbrk_aligned>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4e0e      	ldr	r6, [pc, #56]	; (8005f78 <sbrk_aligned+0x3c>)
 8005f40:	460c      	mov	r4, r1
 8005f42:	6831      	ldr	r1, [r6, #0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	b911      	cbnz	r1, 8005f4e <sbrk_aligned+0x12>
 8005f48:	f001 f982 	bl	8007250 <_sbrk_r>
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f001 f97d 	bl	8007250 <_sbrk_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d00a      	beq.n	8005f70 <sbrk_aligned+0x34>
 8005f5a:	1cc4      	adds	r4, r0, #3
 8005f5c:	f024 0403 	bic.w	r4, r4, #3
 8005f60:	42a0      	cmp	r0, r4
 8005f62:	d007      	beq.n	8005f74 <sbrk_aligned+0x38>
 8005f64:	1a21      	subs	r1, r4, r0
 8005f66:	4628      	mov	r0, r5
 8005f68:	f001 f972 	bl	8007250 <_sbrk_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d101      	bne.n	8005f74 <sbrk_aligned+0x38>
 8005f70:	f04f 34ff 	mov.w	r4, #4294967295
 8005f74:	4620      	mov	r0, r4
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	20000598 	.word	0x20000598

08005f7c <_malloc_r>:
 8005f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f80:	1ccd      	adds	r5, r1, #3
 8005f82:	f025 0503 	bic.w	r5, r5, #3
 8005f86:	3508      	adds	r5, #8
 8005f88:	2d0c      	cmp	r5, #12
 8005f8a:	bf38      	it	cc
 8005f8c:	250c      	movcc	r5, #12
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	4607      	mov	r7, r0
 8005f92:	db01      	blt.n	8005f98 <_malloc_r+0x1c>
 8005f94:	42a9      	cmp	r1, r5
 8005f96:	d905      	bls.n	8005fa4 <_malloc_r+0x28>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006078 <_malloc_r+0xfc>
 8005fa8:	f000 f868 	bl	800607c <__malloc_lock>
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	461c      	mov	r4, r3
 8005fb2:	bb5c      	cbnz	r4, 800600c <_malloc_r+0x90>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7ff ffc0 	bl	8005f3c <sbrk_aligned>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	d155      	bne.n	800606e <_malloc_r+0xf2>
 8005fc2:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc6:	4626      	mov	r6, r4
 8005fc8:	2e00      	cmp	r6, #0
 8005fca:	d145      	bne.n	8006058 <_malloc_r+0xdc>
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d048      	beq.n	8006062 <_malloc_r+0xe6>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	eb04 0903 	add.w	r9, r4, r3
 8005fda:	f001 f939 	bl	8007250 <_sbrk_r>
 8005fde:	4581      	cmp	r9, r0
 8005fe0:	d13f      	bne.n	8006062 <_malloc_r+0xe6>
 8005fe2:	6821      	ldr	r1, [r4, #0]
 8005fe4:	1a6d      	subs	r5, r5, r1
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ffa7 	bl	8005f3c <sbrk_aligned>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d037      	beq.n	8006062 <_malloc_r+0xe6>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	442b      	add	r3, r5
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d038      	beq.n	8006072 <_malloc_r+0xf6>
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	42a2      	cmp	r2, r4
 8006004:	d12b      	bne.n	800605e <_malloc_r+0xe2>
 8006006:	2200      	movs	r2, #0
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	e00f      	b.n	800602c <_malloc_r+0xb0>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	1b52      	subs	r2, r2, r5
 8006010:	d41f      	bmi.n	8006052 <_malloc_r+0xd6>
 8006012:	2a0b      	cmp	r2, #11
 8006014:	d917      	bls.n	8006046 <_malloc_r+0xca>
 8006016:	1961      	adds	r1, r4, r5
 8006018:	42a3      	cmp	r3, r4
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	6059      	strne	r1, [r3, #4]
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	bf08      	it	eq
 8006024:	f8c8 1000 	streq.w	r1, [r8]
 8006028:	5162      	str	r2, [r4, r5]
 800602a:	604b      	str	r3, [r1, #4]
 800602c:	4638      	mov	r0, r7
 800602e:	f104 060b 	add.w	r6, r4, #11
 8006032:	f000 f829 	bl	8006088 <__malloc_unlock>
 8006036:	f026 0607 	bic.w	r6, r6, #7
 800603a:	1d23      	adds	r3, r4, #4
 800603c:	1af2      	subs	r2, r6, r3
 800603e:	d0ae      	beq.n	8005f9e <_malloc_r+0x22>
 8006040:	1b9b      	subs	r3, r3, r6
 8006042:	50a3      	str	r3, [r4, r2]
 8006044:	e7ab      	b.n	8005f9e <_malloc_r+0x22>
 8006046:	42a3      	cmp	r3, r4
 8006048:	6862      	ldr	r2, [r4, #4]
 800604a:	d1dd      	bne.n	8006008 <_malloc_r+0x8c>
 800604c:	f8c8 2000 	str.w	r2, [r8]
 8006050:	e7ec      	b.n	800602c <_malloc_r+0xb0>
 8006052:	4623      	mov	r3, r4
 8006054:	6864      	ldr	r4, [r4, #4]
 8006056:	e7ac      	b.n	8005fb2 <_malloc_r+0x36>
 8006058:	4634      	mov	r4, r6
 800605a:	6876      	ldr	r6, [r6, #4]
 800605c:	e7b4      	b.n	8005fc8 <_malloc_r+0x4c>
 800605e:	4613      	mov	r3, r2
 8006060:	e7cc      	b.n	8005ffc <_malloc_r+0x80>
 8006062:	230c      	movs	r3, #12
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	4638      	mov	r0, r7
 8006068:	f000 f80e 	bl	8006088 <__malloc_unlock>
 800606c:	e797      	b.n	8005f9e <_malloc_r+0x22>
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	e7dc      	b.n	800602c <_malloc_r+0xb0>
 8006072:	605b      	str	r3, [r3, #4]
 8006074:	deff      	udf	#255	; 0xff
 8006076:	bf00      	nop
 8006078:	20000594 	.word	0x20000594

0800607c <__malloc_lock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_lock+0x8>)
 800607e:	f001 b934 	b.w	80072ea <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	200006dc 	.word	0x200006dc

08006088 <__malloc_unlock>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__malloc_unlock+0x8>)
 800608a:	f001 b92f 	b.w	80072ec <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	200006dc 	.word	0x200006dc

08006094 <__cvt>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	ec55 4b10 	vmov	r4, r5, d0
 800609c:	2d00      	cmp	r5, #0
 800609e:	460e      	mov	r6, r1
 80060a0:	4619      	mov	r1, r3
 80060a2:	462b      	mov	r3, r5
 80060a4:	bfbb      	ittet	lt
 80060a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060aa:	461d      	movlt	r5, r3
 80060ac:	2300      	movge	r3, #0
 80060ae:	232d      	movlt	r3, #45	; 0x2d
 80060b0:	700b      	strb	r3, [r1, #0]
 80060b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060b8:	4691      	mov	r9, r2
 80060ba:	f023 0820 	bic.w	r8, r3, #32
 80060be:	bfbc      	itt	lt
 80060c0:	4622      	movlt	r2, r4
 80060c2:	4614      	movlt	r4, r2
 80060c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060c8:	d005      	beq.n	80060d6 <__cvt+0x42>
 80060ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060ce:	d100      	bne.n	80060d2 <__cvt+0x3e>
 80060d0:	3601      	adds	r6, #1
 80060d2:	2102      	movs	r1, #2
 80060d4:	e000      	b.n	80060d8 <__cvt+0x44>
 80060d6:	2103      	movs	r1, #3
 80060d8:	ab03      	add	r3, sp, #12
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	ab02      	add	r3, sp, #8
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	ec45 4b10 	vmov	d0, r4, r5
 80060e4:	4653      	mov	r3, sl
 80060e6:	4632      	mov	r2, r6
 80060e8:	f001 f99e 	bl	8007428 <_dtoa_r>
 80060ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060f0:	4607      	mov	r7, r0
 80060f2:	d102      	bne.n	80060fa <__cvt+0x66>
 80060f4:	f019 0f01 	tst.w	r9, #1
 80060f8:	d022      	beq.n	8006140 <__cvt+0xac>
 80060fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060fe:	eb07 0906 	add.w	r9, r7, r6
 8006102:	d110      	bne.n	8006126 <__cvt+0x92>
 8006104:	783b      	ldrb	r3, [r7, #0]
 8006106:	2b30      	cmp	r3, #48	; 0x30
 8006108:	d10a      	bne.n	8006120 <__cvt+0x8c>
 800610a:	2200      	movs	r2, #0
 800610c:	2300      	movs	r3, #0
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa fce9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006116:	b918      	cbnz	r0, 8006120 <__cvt+0x8c>
 8006118:	f1c6 0601 	rsb	r6, r6, #1
 800611c:	f8ca 6000 	str.w	r6, [sl]
 8006120:	f8da 3000 	ldr.w	r3, [sl]
 8006124:	4499      	add	r9, r3
 8006126:	2200      	movs	r2, #0
 8006128:	2300      	movs	r3, #0
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa fcdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8006132:	b108      	cbz	r0, 8006138 <__cvt+0xa4>
 8006134:	f8cd 900c 	str.w	r9, [sp, #12]
 8006138:	2230      	movs	r2, #48	; 0x30
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	454b      	cmp	r3, r9
 800613e:	d307      	bcc.n	8006150 <__cvt+0xbc>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006144:	1bdb      	subs	r3, r3, r7
 8006146:	4638      	mov	r0, r7
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	b004      	add	sp, #16
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	9103      	str	r1, [sp, #12]
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e7f0      	b.n	800613a <__cvt+0xa6>

08006158 <__exponent>:
 8006158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800615a:	4603      	mov	r3, r0
 800615c:	2900      	cmp	r1, #0
 800615e:	bfb8      	it	lt
 8006160:	4249      	neglt	r1, r1
 8006162:	f803 2b02 	strb.w	r2, [r3], #2
 8006166:	bfb4      	ite	lt
 8006168:	222d      	movlt	r2, #45	; 0x2d
 800616a:	222b      	movge	r2, #43	; 0x2b
 800616c:	2909      	cmp	r1, #9
 800616e:	7042      	strb	r2, [r0, #1]
 8006170:	dd2a      	ble.n	80061c8 <__exponent+0x70>
 8006172:	f10d 0207 	add.w	r2, sp, #7
 8006176:	4617      	mov	r7, r2
 8006178:	260a      	movs	r6, #10
 800617a:	4694      	mov	ip, r2
 800617c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006180:	fb06 1415 	mls	r4, r6, r5, r1
 8006184:	3430      	adds	r4, #48	; 0x30
 8006186:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800618a:	460c      	mov	r4, r1
 800618c:	2c63      	cmp	r4, #99	; 0x63
 800618e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006192:	4629      	mov	r1, r5
 8006194:	dcf1      	bgt.n	800617a <__exponent+0x22>
 8006196:	3130      	adds	r1, #48	; 0x30
 8006198:	f1ac 0402 	sub.w	r4, ip, #2
 800619c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80061a0:	1c41      	adds	r1, r0, #1
 80061a2:	4622      	mov	r2, r4
 80061a4:	42ba      	cmp	r2, r7
 80061a6:	d30a      	bcc.n	80061be <__exponent+0x66>
 80061a8:	f10d 0209 	add.w	r2, sp, #9
 80061ac:	eba2 020c 	sub.w	r2, r2, ip
 80061b0:	42bc      	cmp	r4, r7
 80061b2:	bf88      	it	hi
 80061b4:	2200      	movhi	r2, #0
 80061b6:	4413      	add	r3, r2
 80061b8:	1a18      	subs	r0, r3, r0
 80061ba:	b003      	add	sp, #12
 80061bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80061c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80061c6:	e7ed      	b.n	80061a4 <__exponent+0x4c>
 80061c8:	2330      	movs	r3, #48	; 0x30
 80061ca:	3130      	adds	r1, #48	; 0x30
 80061cc:	7083      	strb	r3, [r0, #2]
 80061ce:	70c1      	strb	r1, [r0, #3]
 80061d0:	1d03      	adds	r3, r0, #4
 80061d2:	e7f1      	b.n	80061b8 <__exponent+0x60>

080061d4 <_printf_float>:
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	ed2d 8b02 	vpush	{d8}
 80061dc:	b08d      	sub	sp, #52	; 0x34
 80061de:	460c      	mov	r4, r1
 80061e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80061e4:	4616      	mov	r6, r2
 80061e6:	461f      	mov	r7, r3
 80061e8:	4605      	mov	r5, r0
 80061ea:	f000 fff9 	bl	80071e0 <_localeconv_r>
 80061ee:	f8d0 a000 	ldr.w	sl, [r0]
 80061f2:	4650      	mov	r0, sl
 80061f4:	f7fa f84c 	bl	8000290 <strlen>
 80061f8:	2300      	movs	r3, #0
 80061fa:	930a      	str	r3, [sp, #40]	; 0x28
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	f8d8 3000 	ldr.w	r3, [r8]
 8006204:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006208:	3307      	adds	r3, #7
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	f103 0208 	add.w	r2, r3, #8
 8006212:	f8c8 2000 	str.w	r2, [r8]
 8006216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800621a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	f8cd 8018 	str.w	r8, [sp, #24]
 8006224:	ee08 0a10 	vmov	s16, r0
 8006228:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800622c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006230:	4b9e      	ldr	r3, [pc, #632]	; (80064ac <_printf_float+0x2d8>)
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	f7fa fc89 	bl	8000b4c <__aeabi_dcmpun>
 800623a:	bb88      	cbnz	r0, 80062a0 <_printf_float+0xcc>
 800623c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006240:	4b9a      	ldr	r3, [pc, #616]	; (80064ac <_printf_float+0x2d8>)
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	f7fa fc63 	bl	8000b10 <__aeabi_dcmple>
 800624a:	bb48      	cbnz	r0, 80062a0 <_printf_float+0xcc>
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	4640      	mov	r0, r8
 8006252:	4649      	mov	r1, r9
 8006254:	f7fa fc52 	bl	8000afc <__aeabi_dcmplt>
 8006258:	b110      	cbz	r0, 8006260 <_printf_float+0x8c>
 800625a:	232d      	movs	r3, #45	; 0x2d
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006260:	4a93      	ldr	r2, [pc, #588]	; (80064b0 <_printf_float+0x2dc>)
 8006262:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <_printf_float+0x2e0>)
 8006264:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006268:	bf94      	ite	ls
 800626a:	4690      	movls	r8, r2
 800626c:	4698      	movhi	r8, r3
 800626e:	2303      	movs	r3, #3
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	9b05      	ldr	r3, [sp, #20]
 8006274:	f023 0304 	bic.w	r3, r3, #4
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	9700      	str	r7, [sp, #0]
 8006280:	4633      	mov	r3, r6
 8006282:	aa0b      	add	r2, sp, #44	; 0x2c
 8006284:	4621      	mov	r1, r4
 8006286:	4628      	mov	r0, r5
 8006288:	f000 f9da 	bl	8006640 <_printf_common>
 800628c:	3001      	adds	r0, #1
 800628e:	f040 8090 	bne.w	80063b2 <_printf_float+0x1de>
 8006292:	f04f 30ff 	mov.w	r0, #4294967295
 8006296:	b00d      	add	sp, #52	; 0x34
 8006298:	ecbd 8b02 	vpop	{d8}
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa fc50 	bl	8000b4c <__aeabi_dcmpun>
 80062ac:	b140      	cbz	r0, 80062c0 <_printf_float+0xec>
 80062ae:	464b      	mov	r3, r9
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bfbc      	itt	lt
 80062b4:	232d      	movlt	r3, #45	; 0x2d
 80062b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ba:	4a7f      	ldr	r2, [pc, #508]	; (80064b8 <_printf_float+0x2e4>)
 80062bc:	4b7f      	ldr	r3, [pc, #508]	; (80064bc <_printf_float+0x2e8>)
 80062be:	e7d1      	b.n	8006264 <_printf_float+0x90>
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062c6:	9206      	str	r2, [sp, #24]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	d13f      	bne.n	800634c <_printf_float+0x178>
 80062cc:	2306      	movs	r3, #6
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	6861      	ldr	r1, [r4, #4]
 80062d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062d8:	2300      	movs	r3, #0
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	ab0a      	add	r3, sp, #40	; 0x28
 80062de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80062e2:	ab09      	add	r3, sp, #36	; 0x24
 80062e4:	ec49 8b10 	vmov	d0, r8, r9
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff fecf 	bl	8006094 <__cvt>
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062fa:	2b47      	cmp	r3, #71	; 0x47
 80062fc:	4680      	mov	r8, r0
 80062fe:	d108      	bne.n	8006312 <_printf_float+0x13e>
 8006300:	1cc8      	adds	r0, r1, #3
 8006302:	db02      	blt.n	800630a <_printf_float+0x136>
 8006304:	6863      	ldr	r3, [r4, #4]
 8006306:	4299      	cmp	r1, r3
 8006308:	dd41      	ble.n	800638e <_printf_float+0x1ba>
 800630a:	f1ab 0302 	sub.w	r3, fp, #2
 800630e:	fa5f fb83 	uxtb.w	fp, r3
 8006312:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006316:	d820      	bhi.n	800635a <_printf_float+0x186>
 8006318:	3901      	subs	r1, #1
 800631a:	465a      	mov	r2, fp
 800631c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006320:	9109      	str	r1, [sp, #36]	; 0x24
 8006322:	f7ff ff19 	bl	8006158 <__exponent>
 8006326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006328:	1813      	adds	r3, r2, r0
 800632a:	2a01      	cmp	r2, #1
 800632c:	4681      	mov	r9, r0
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	dc02      	bgt.n	8006338 <_printf_float+0x164>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	07d2      	lsls	r2, r2, #31
 8006336:	d501      	bpl.n	800633c <_printf_float+0x168>
 8006338:	3301      	adds	r3, #1
 800633a:	6123      	str	r3, [r4, #16]
 800633c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006340:	2b00      	cmp	r3, #0
 8006342:	d09c      	beq.n	800627e <_printf_float+0xaa>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634a:	e798      	b.n	800627e <_printf_float+0xaa>
 800634c:	9a06      	ldr	r2, [sp, #24]
 800634e:	2a47      	cmp	r2, #71	; 0x47
 8006350:	d1be      	bne.n	80062d0 <_printf_float+0xfc>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1bc      	bne.n	80062d0 <_printf_float+0xfc>
 8006356:	2301      	movs	r3, #1
 8006358:	e7b9      	b.n	80062ce <_printf_float+0xfa>
 800635a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800635e:	d118      	bne.n	8006392 <_printf_float+0x1be>
 8006360:	2900      	cmp	r1, #0
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	dd0b      	ble.n	800637e <_printf_float+0x1aa>
 8006366:	6121      	str	r1, [r4, #16]
 8006368:	b913      	cbnz	r3, 8006370 <_printf_float+0x19c>
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d502      	bpl.n	8006376 <_printf_float+0x1a2>
 8006370:	3301      	adds	r3, #1
 8006372:	440b      	add	r3, r1
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	65a1      	str	r1, [r4, #88]	; 0x58
 8006378:	f04f 0900 	mov.w	r9, #0
 800637c:	e7de      	b.n	800633c <_printf_float+0x168>
 800637e:	b913      	cbnz	r3, 8006386 <_printf_float+0x1b2>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	07d2      	lsls	r2, r2, #31
 8006384:	d501      	bpl.n	800638a <_printf_float+0x1b6>
 8006386:	3302      	adds	r3, #2
 8006388:	e7f4      	b.n	8006374 <_printf_float+0x1a0>
 800638a:	2301      	movs	r3, #1
 800638c:	e7f2      	b.n	8006374 <_printf_float+0x1a0>
 800638e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006394:	4299      	cmp	r1, r3
 8006396:	db05      	blt.n	80063a4 <_printf_float+0x1d0>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	6121      	str	r1, [r4, #16]
 800639c:	07d8      	lsls	r0, r3, #31
 800639e:	d5ea      	bpl.n	8006376 <_printf_float+0x1a2>
 80063a0:	1c4b      	adds	r3, r1, #1
 80063a2:	e7e7      	b.n	8006374 <_printf_float+0x1a0>
 80063a4:	2900      	cmp	r1, #0
 80063a6:	bfd4      	ite	le
 80063a8:	f1c1 0202 	rsble	r2, r1, #2
 80063ac:	2201      	movgt	r2, #1
 80063ae:	4413      	add	r3, r2
 80063b0:	e7e0      	b.n	8006374 <_printf_float+0x1a0>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	055a      	lsls	r2, r3, #21
 80063b6:	d407      	bmi.n	80063c8 <_printf_float+0x1f4>
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	4642      	mov	r2, r8
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	d12c      	bne.n	8006420 <_printf_float+0x24c>
 80063c6:	e764      	b.n	8006292 <_printf_float+0xbe>
 80063c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063cc:	f240 80e0 	bls.w	8006590 <_printf_float+0x3bc>
 80063d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f7fa fb86 	bl	8000ae8 <__aeabi_dcmpeq>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d034      	beq.n	800644a <_printf_float+0x276>
 80063e0:	4a37      	ldr	r2, [pc, #220]	; (80064c0 <_printf_float+0x2ec>)
 80063e2:	2301      	movs	r3, #1
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af51 	beq.w	8006292 <_printf_float+0xbe>
 80063f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063f4:	429a      	cmp	r2, r3
 80063f6:	db02      	blt.n	80063fe <_printf_float+0x22a>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07d8      	lsls	r0, r3, #31
 80063fc:	d510      	bpl.n	8006420 <_printf_float+0x24c>
 80063fe:	ee18 3a10 	vmov	r3, s16
 8006402:	4652      	mov	r2, sl
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f af41 	beq.w	8006292 <_printf_float+0xbe>
 8006410:	f04f 0800 	mov.w	r8, #0
 8006414:	f104 091a 	add.w	r9, r4, #26
 8006418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641a:	3b01      	subs	r3, #1
 800641c:	4543      	cmp	r3, r8
 800641e:	dc09      	bgt.n	8006434 <_printf_float+0x260>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	079b      	lsls	r3, r3, #30
 8006424:	f100 8107 	bmi.w	8006636 <_printf_float+0x462>
 8006428:	68e0      	ldr	r0, [r4, #12]
 800642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642c:	4298      	cmp	r0, r3
 800642e:	bfb8      	it	lt
 8006430:	4618      	movlt	r0, r3
 8006432:	e730      	b.n	8006296 <_printf_float+0xc2>
 8006434:	2301      	movs	r3, #1
 8006436:	464a      	mov	r2, r9
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af27 	beq.w	8006292 <_printf_float+0xbe>
 8006444:	f108 0801 	add.w	r8, r8, #1
 8006448:	e7e6      	b.n	8006418 <_printf_float+0x244>
 800644a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	dc39      	bgt.n	80064c4 <_printf_float+0x2f0>
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <_printf_float+0x2ec>)
 8006452:	2301      	movs	r3, #1
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f af19 	beq.w	8006292 <_printf_float+0xbe>
 8006460:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006464:	4313      	orrs	r3, r2
 8006466:	d102      	bne.n	800646e <_printf_float+0x29a>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07d9      	lsls	r1, r3, #31
 800646c:	d5d8      	bpl.n	8006420 <_printf_float+0x24c>
 800646e:	ee18 3a10 	vmov	r3, s16
 8006472:	4652      	mov	r2, sl
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af09 	beq.w	8006292 <_printf_float+0xbe>
 8006480:	f04f 0900 	mov.w	r9, #0
 8006484:	f104 0a1a 	add.w	sl, r4, #26
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	425b      	negs	r3, r3
 800648c:	454b      	cmp	r3, r9
 800648e:	dc01      	bgt.n	8006494 <_printf_float+0x2c0>
 8006490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006492:	e792      	b.n	80063ba <_printf_float+0x1e6>
 8006494:	2301      	movs	r3, #1
 8006496:	4652      	mov	r2, sl
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f aef7 	beq.w	8006292 <_printf_float+0xbe>
 80064a4:	f109 0901 	add.w	r9, r9, #1
 80064a8:	e7ee      	b.n	8006488 <_printf_float+0x2b4>
 80064aa:	bf00      	nop
 80064ac:	7fefffff 	.word	0x7fefffff
 80064b0:	0800aaac 	.word	0x0800aaac
 80064b4:	0800aab0 	.word	0x0800aab0
 80064b8:	0800aab4 	.word	0x0800aab4
 80064bc:	0800aab8 	.word	0x0800aab8
 80064c0:	0800aabc 	.word	0x0800aabc
 80064c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c8:	429a      	cmp	r2, r3
 80064ca:	bfa8      	it	ge
 80064cc:	461a      	movge	r2, r3
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	4691      	mov	r9, r2
 80064d2:	dc37      	bgt.n	8006544 <_printf_float+0x370>
 80064d4:	f04f 0b00 	mov.w	fp, #0
 80064d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064dc:	f104 021a 	add.w	r2, r4, #26
 80064e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	eba3 0309 	sub.w	r3, r3, r9
 80064e8:	455b      	cmp	r3, fp
 80064ea:	dc33      	bgt.n	8006554 <_printf_float+0x380>
 80064ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f0:	429a      	cmp	r2, r3
 80064f2:	db3b      	blt.n	800656c <_printf_float+0x398>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	07da      	lsls	r2, r3, #31
 80064f8:	d438      	bmi.n	800656c <_printf_float+0x398>
 80064fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80064fe:	eba2 0903 	sub.w	r9, r2, r3
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	4591      	cmp	r9, r2
 8006508:	bfa8      	it	ge
 800650a:	4691      	movge	r9, r2
 800650c:	f1b9 0f00 	cmp.w	r9, #0
 8006510:	dc35      	bgt.n	800657e <_printf_float+0x3aa>
 8006512:	f04f 0800 	mov.w	r8, #0
 8006516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800651a:	f104 0a1a 	add.w	sl, r4, #26
 800651e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	eba3 0309 	sub.w	r3, r3, r9
 8006528:	4543      	cmp	r3, r8
 800652a:	f77f af79 	ble.w	8006420 <_printf_float+0x24c>
 800652e:	2301      	movs	r3, #1
 8006530:	4652      	mov	r2, sl
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f aeaa 	beq.w	8006292 <_printf_float+0xbe>
 800653e:	f108 0801 	add.w	r8, r8, #1
 8006542:	e7ec      	b.n	800651e <_printf_float+0x34a>
 8006544:	4613      	mov	r3, r2
 8006546:	4631      	mov	r1, r6
 8006548:	4642      	mov	r2, r8
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	d1c0      	bne.n	80064d4 <_printf_float+0x300>
 8006552:	e69e      	b.n	8006292 <_printf_float+0xbe>
 8006554:	2301      	movs	r3, #1
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	9205      	str	r2, [sp, #20]
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f ae97 	beq.w	8006292 <_printf_float+0xbe>
 8006564:	9a05      	ldr	r2, [sp, #20]
 8006566:	f10b 0b01 	add.w	fp, fp, #1
 800656a:	e7b9      	b.n	80064e0 <_printf_float+0x30c>
 800656c:	ee18 3a10 	vmov	r3, s16
 8006570:	4652      	mov	r2, sl
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	d1be      	bne.n	80064fa <_printf_float+0x326>
 800657c:	e689      	b.n	8006292 <_printf_float+0xbe>
 800657e:	9a05      	ldr	r2, [sp, #20]
 8006580:	464b      	mov	r3, r9
 8006582:	4442      	add	r2, r8
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	d1c1      	bne.n	8006512 <_printf_float+0x33e>
 800658e:	e680      	b.n	8006292 <_printf_float+0xbe>
 8006590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006592:	2a01      	cmp	r2, #1
 8006594:	dc01      	bgt.n	800659a <_printf_float+0x3c6>
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	d53a      	bpl.n	8006610 <_printf_float+0x43c>
 800659a:	2301      	movs	r3, #1
 800659c:	4642      	mov	r2, r8
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	f43f ae74 	beq.w	8006292 <_printf_float+0xbe>
 80065aa:	ee18 3a10 	vmov	r3, s16
 80065ae:	4652      	mov	r2, sl
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	f43f ae6b 	beq.w	8006292 <_printf_float+0xbe>
 80065bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80065c8:	f7fa fa8e 	bl	8000ae8 <__aeabi_dcmpeq>
 80065cc:	b9d8      	cbnz	r0, 8006606 <_printf_float+0x432>
 80065ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80065d2:	f108 0201 	add.w	r2, r8, #1
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	d10e      	bne.n	80065fe <_printf_float+0x42a>
 80065e0:	e657      	b.n	8006292 <_printf_float+0xbe>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4652      	mov	r2, sl
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f ae50 	beq.w	8006292 <_printf_float+0xbe>
 80065f2:	f108 0801 	add.w	r8, r8, #1
 80065f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f8:	3b01      	subs	r3, #1
 80065fa:	4543      	cmp	r3, r8
 80065fc:	dcf1      	bgt.n	80065e2 <_printf_float+0x40e>
 80065fe:	464b      	mov	r3, r9
 8006600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006604:	e6da      	b.n	80063bc <_printf_float+0x1e8>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 0a1a 	add.w	sl, r4, #26
 800660e:	e7f2      	b.n	80065f6 <_printf_float+0x422>
 8006610:	2301      	movs	r3, #1
 8006612:	4642      	mov	r2, r8
 8006614:	e7df      	b.n	80065d6 <_printf_float+0x402>
 8006616:	2301      	movs	r3, #1
 8006618:	464a      	mov	r2, r9
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f ae36 	beq.w	8006292 <_printf_float+0xbe>
 8006626:	f108 0801 	add.w	r8, r8, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	4543      	cmp	r3, r8
 8006632:	dcf0      	bgt.n	8006616 <_printf_float+0x442>
 8006634:	e6f8      	b.n	8006428 <_printf_float+0x254>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	f104 0919 	add.w	r9, r4, #25
 800663e:	e7f4      	b.n	800662a <_printf_float+0x456>

08006640 <_printf_common>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	4616      	mov	r6, r2
 8006646:	4699      	mov	r9, r3
 8006648:	688a      	ldr	r2, [r1, #8]
 800664a:	690b      	ldr	r3, [r1, #16]
 800664c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006650:	4293      	cmp	r3, r2
 8006652:	bfb8      	it	lt
 8006654:	4613      	movlt	r3, r2
 8006656:	6033      	str	r3, [r6, #0]
 8006658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800665c:	4607      	mov	r7, r0
 800665e:	460c      	mov	r4, r1
 8006660:	b10a      	cbz	r2, 8006666 <_printf_common+0x26>
 8006662:	3301      	adds	r3, #1
 8006664:	6033      	str	r3, [r6, #0]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	0699      	lsls	r1, r3, #26
 800666a:	bf42      	ittt	mi
 800666c:	6833      	ldrmi	r3, [r6, #0]
 800666e:	3302      	addmi	r3, #2
 8006670:	6033      	strmi	r3, [r6, #0]
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	f015 0506 	ands.w	r5, r5, #6
 8006678:	d106      	bne.n	8006688 <_printf_common+0x48>
 800667a:	f104 0a19 	add.w	sl, r4, #25
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	6832      	ldr	r2, [r6, #0]
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	42ab      	cmp	r3, r5
 8006686:	dc26      	bgt.n	80066d6 <_printf_common+0x96>
 8006688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800668c:	1e13      	subs	r3, r2, #0
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	bf18      	it	ne
 8006692:	2301      	movne	r3, #1
 8006694:	0692      	lsls	r2, r2, #26
 8006696:	d42b      	bmi.n	80066f0 <_printf_common+0xb0>
 8006698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800669c:	4649      	mov	r1, r9
 800669e:	4638      	mov	r0, r7
 80066a0:	47c0      	blx	r8
 80066a2:	3001      	adds	r0, #1
 80066a4:	d01e      	beq.n	80066e4 <_printf_common+0xa4>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	6922      	ldr	r2, [r4, #16]
 80066aa:	f003 0306 	and.w	r3, r3, #6
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	bf02      	ittt	eq
 80066b2:	68e5      	ldreq	r5, [r4, #12]
 80066b4:	6833      	ldreq	r3, [r6, #0]
 80066b6:	1aed      	subeq	r5, r5, r3
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	bf0c      	ite	eq
 80066bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c0:	2500      	movne	r5, #0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bfc4      	itt	gt
 80066c6:	1a9b      	subgt	r3, r3, r2
 80066c8:	18ed      	addgt	r5, r5, r3
 80066ca:	2600      	movs	r6, #0
 80066cc:	341a      	adds	r4, #26
 80066ce:	42b5      	cmp	r5, r6
 80066d0:	d11a      	bne.n	8006708 <_printf_common+0xc8>
 80066d2:	2000      	movs	r0, #0
 80066d4:	e008      	b.n	80066e8 <_printf_common+0xa8>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4652      	mov	r2, sl
 80066da:	4649      	mov	r1, r9
 80066dc:	4638      	mov	r0, r7
 80066de:	47c0      	blx	r8
 80066e0:	3001      	adds	r0, #1
 80066e2:	d103      	bne.n	80066ec <_printf_common+0xac>
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ec:	3501      	adds	r5, #1
 80066ee:	e7c6      	b.n	800667e <_printf_common+0x3e>
 80066f0:	18e1      	adds	r1, r4, r3
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	2030      	movs	r0, #48	; 0x30
 80066f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066fa:	4422      	add	r2, r4
 80066fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006704:	3302      	adds	r3, #2
 8006706:	e7c7      	b.n	8006698 <_printf_common+0x58>
 8006708:	2301      	movs	r3, #1
 800670a:	4622      	mov	r2, r4
 800670c:	4649      	mov	r1, r9
 800670e:	4638      	mov	r0, r7
 8006710:	47c0      	blx	r8
 8006712:	3001      	adds	r0, #1
 8006714:	d0e6      	beq.n	80066e4 <_printf_common+0xa4>
 8006716:	3601      	adds	r6, #1
 8006718:	e7d9      	b.n	80066ce <_printf_common+0x8e>
	...

0800671c <_printf_i>:
 800671c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	7e0f      	ldrb	r7, [r1, #24]
 8006722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006724:	2f78      	cmp	r7, #120	; 0x78
 8006726:	4691      	mov	r9, r2
 8006728:	4680      	mov	r8, r0
 800672a:	460c      	mov	r4, r1
 800672c:	469a      	mov	sl, r3
 800672e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006732:	d807      	bhi.n	8006744 <_printf_i+0x28>
 8006734:	2f62      	cmp	r7, #98	; 0x62
 8006736:	d80a      	bhi.n	800674e <_printf_i+0x32>
 8006738:	2f00      	cmp	r7, #0
 800673a:	f000 80d4 	beq.w	80068e6 <_printf_i+0x1ca>
 800673e:	2f58      	cmp	r7, #88	; 0x58
 8006740:	f000 80c0 	beq.w	80068c4 <_printf_i+0x1a8>
 8006744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800674c:	e03a      	b.n	80067c4 <_printf_i+0xa8>
 800674e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006752:	2b15      	cmp	r3, #21
 8006754:	d8f6      	bhi.n	8006744 <_printf_i+0x28>
 8006756:	a101      	add	r1, pc, #4	; (adr r1, 800675c <_printf_i+0x40>)
 8006758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800675c:	080067b5 	.word	0x080067b5
 8006760:	080067c9 	.word	0x080067c9
 8006764:	08006745 	.word	0x08006745
 8006768:	08006745 	.word	0x08006745
 800676c:	08006745 	.word	0x08006745
 8006770:	08006745 	.word	0x08006745
 8006774:	080067c9 	.word	0x080067c9
 8006778:	08006745 	.word	0x08006745
 800677c:	08006745 	.word	0x08006745
 8006780:	08006745 	.word	0x08006745
 8006784:	08006745 	.word	0x08006745
 8006788:	080068cd 	.word	0x080068cd
 800678c:	080067f5 	.word	0x080067f5
 8006790:	08006887 	.word	0x08006887
 8006794:	08006745 	.word	0x08006745
 8006798:	08006745 	.word	0x08006745
 800679c:	080068ef 	.word	0x080068ef
 80067a0:	08006745 	.word	0x08006745
 80067a4:	080067f5 	.word	0x080067f5
 80067a8:	08006745 	.word	0x08006745
 80067ac:	08006745 	.word	0x08006745
 80067b0:	0800688f 	.word	0x0800688f
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	1d1a      	adds	r2, r3, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	602a      	str	r2, [r5, #0]
 80067bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c4:	2301      	movs	r3, #1
 80067c6:	e09f      	b.n	8006908 <_printf_i+0x1ec>
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	0607      	lsls	r7, r0, #24
 80067ce:	f103 0104 	add.w	r1, r3, #4
 80067d2:	6029      	str	r1, [r5, #0]
 80067d4:	d501      	bpl.n	80067da <_printf_i+0xbe>
 80067d6:	681e      	ldr	r6, [r3, #0]
 80067d8:	e003      	b.n	80067e2 <_printf_i+0xc6>
 80067da:	0646      	lsls	r6, r0, #25
 80067dc:	d5fb      	bpl.n	80067d6 <_printf_i+0xba>
 80067de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	da03      	bge.n	80067ee <_printf_i+0xd2>
 80067e6:	232d      	movs	r3, #45	; 0x2d
 80067e8:	4276      	negs	r6, r6
 80067ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ee:	485a      	ldr	r0, [pc, #360]	; (8006958 <_printf_i+0x23c>)
 80067f0:	230a      	movs	r3, #10
 80067f2:	e012      	b.n	800681a <_printf_i+0xfe>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1d19      	adds	r1, r3, #4
 80067fa:	6029      	str	r1, [r5, #0]
 80067fc:	0605      	lsls	r5, r0, #24
 80067fe:	d501      	bpl.n	8006804 <_printf_i+0xe8>
 8006800:	681e      	ldr	r6, [r3, #0]
 8006802:	e002      	b.n	800680a <_printf_i+0xee>
 8006804:	0641      	lsls	r1, r0, #25
 8006806:	d5fb      	bpl.n	8006800 <_printf_i+0xe4>
 8006808:	881e      	ldrh	r6, [r3, #0]
 800680a:	4853      	ldr	r0, [pc, #332]	; (8006958 <_printf_i+0x23c>)
 800680c:	2f6f      	cmp	r7, #111	; 0x6f
 800680e:	bf0c      	ite	eq
 8006810:	2308      	moveq	r3, #8
 8006812:	230a      	movne	r3, #10
 8006814:	2100      	movs	r1, #0
 8006816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800681a:	6865      	ldr	r5, [r4, #4]
 800681c:	60a5      	str	r5, [r4, #8]
 800681e:	2d00      	cmp	r5, #0
 8006820:	bfa2      	ittt	ge
 8006822:	6821      	ldrge	r1, [r4, #0]
 8006824:	f021 0104 	bicge.w	r1, r1, #4
 8006828:	6021      	strge	r1, [r4, #0]
 800682a:	b90e      	cbnz	r6, 8006830 <_printf_i+0x114>
 800682c:	2d00      	cmp	r5, #0
 800682e:	d04b      	beq.n	80068c8 <_printf_i+0x1ac>
 8006830:	4615      	mov	r5, r2
 8006832:	fbb6 f1f3 	udiv	r1, r6, r3
 8006836:	fb03 6711 	mls	r7, r3, r1, r6
 800683a:	5dc7      	ldrb	r7, [r0, r7]
 800683c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006840:	4637      	mov	r7, r6
 8006842:	42bb      	cmp	r3, r7
 8006844:	460e      	mov	r6, r1
 8006846:	d9f4      	bls.n	8006832 <_printf_i+0x116>
 8006848:	2b08      	cmp	r3, #8
 800684a:	d10b      	bne.n	8006864 <_printf_i+0x148>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	07de      	lsls	r6, r3, #31
 8006850:	d508      	bpl.n	8006864 <_printf_i+0x148>
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	6861      	ldr	r1, [r4, #4]
 8006856:	4299      	cmp	r1, r3
 8006858:	bfde      	ittt	le
 800685a:	2330      	movle	r3, #48	; 0x30
 800685c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006864:	1b52      	subs	r2, r2, r5
 8006866:	6122      	str	r2, [r4, #16]
 8006868:	f8cd a000 	str.w	sl, [sp]
 800686c:	464b      	mov	r3, r9
 800686e:	aa03      	add	r2, sp, #12
 8006870:	4621      	mov	r1, r4
 8006872:	4640      	mov	r0, r8
 8006874:	f7ff fee4 	bl	8006640 <_printf_common>
 8006878:	3001      	adds	r0, #1
 800687a:	d14a      	bne.n	8006912 <_printf_i+0x1f6>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	b004      	add	sp, #16
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f043 0320 	orr.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	4833      	ldr	r0, [pc, #204]	; (800695c <_printf_i+0x240>)
 8006890:	2778      	movs	r7, #120	; 0x78
 8006892:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6829      	ldr	r1, [r5, #0]
 800689a:	061f      	lsls	r7, r3, #24
 800689c:	f851 6b04 	ldr.w	r6, [r1], #4
 80068a0:	d402      	bmi.n	80068a8 <_printf_i+0x18c>
 80068a2:	065f      	lsls	r7, r3, #25
 80068a4:	bf48      	it	mi
 80068a6:	b2b6      	uxthmi	r6, r6
 80068a8:	07df      	lsls	r7, r3, #31
 80068aa:	bf48      	it	mi
 80068ac:	f043 0320 	orrmi.w	r3, r3, #32
 80068b0:	6029      	str	r1, [r5, #0]
 80068b2:	bf48      	it	mi
 80068b4:	6023      	strmi	r3, [r4, #0]
 80068b6:	b91e      	cbnz	r6, 80068c0 <_printf_i+0x1a4>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	2310      	movs	r3, #16
 80068c2:	e7a7      	b.n	8006814 <_printf_i+0xf8>
 80068c4:	4824      	ldr	r0, [pc, #144]	; (8006958 <_printf_i+0x23c>)
 80068c6:	e7e4      	b.n	8006892 <_printf_i+0x176>
 80068c8:	4615      	mov	r5, r2
 80068ca:	e7bd      	b.n	8006848 <_printf_i+0x12c>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	6826      	ldr	r6, [r4, #0]
 80068d0:	6961      	ldr	r1, [r4, #20]
 80068d2:	1d18      	adds	r0, r3, #4
 80068d4:	6028      	str	r0, [r5, #0]
 80068d6:	0635      	lsls	r5, r6, #24
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	d501      	bpl.n	80068e0 <_printf_i+0x1c4>
 80068dc:	6019      	str	r1, [r3, #0]
 80068de:	e002      	b.n	80068e6 <_printf_i+0x1ca>
 80068e0:	0670      	lsls	r0, r6, #25
 80068e2:	d5fb      	bpl.n	80068dc <_printf_i+0x1c0>
 80068e4:	8019      	strh	r1, [r3, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	4615      	mov	r5, r2
 80068ec:	e7bc      	b.n	8006868 <_printf_i+0x14c>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	602a      	str	r2, [r5, #0]
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	2100      	movs	r1, #0
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7f9 fc78 	bl	80001f0 <memchr>
 8006900:	b108      	cbz	r0, 8006906 <_printf_i+0x1ea>
 8006902:	1b40      	subs	r0, r0, r5
 8006904:	6060      	str	r0, [r4, #4]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	2300      	movs	r3, #0
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006910:	e7aa      	b.n	8006868 <_printf_i+0x14c>
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	462a      	mov	r2, r5
 8006916:	4649      	mov	r1, r9
 8006918:	4640      	mov	r0, r8
 800691a:	47d0      	blx	sl
 800691c:	3001      	adds	r0, #1
 800691e:	d0ad      	beq.n	800687c <_printf_i+0x160>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	079b      	lsls	r3, r3, #30
 8006924:	d413      	bmi.n	800694e <_printf_i+0x232>
 8006926:	68e0      	ldr	r0, [r4, #12]
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	4298      	cmp	r0, r3
 800692c:	bfb8      	it	lt
 800692e:	4618      	movlt	r0, r3
 8006930:	e7a6      	b.n	8006880 <_printf_i+0x164>
 8006932:	2301      	movs	r3, #1
 8006934:	4632      	mov	r2, r6
 8006936:	4649      	mov	r1, r9
 8006938:	4640      	mov	r0, r8
 800693a:	47d0      	blx	sl
 800693c:	3001      	adds	r0, #1
 800693e:	d09d      	beq.n	800687c <_printf_i+0x160>
 8006940:	3501      	adds	r5, #1
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	9903      	ldr	r1, [sp, #12]
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	42ab      	cmp	r3, r5
 800694a:	dcf2      	bgt.n	8006932 <_printf_i+0x216>
 800694c:	e7eb      	b.n	8006926 <_printf_i+0x20a>
 800694e:	2500      	movs	r5, #0
 8006950:	f104 0619 	add.w	r6, r4, #25
 8006954:	e7f5      	b.n	8006942 <_printf_i+0x226>
 8006956:	bf00      	nop
 8006958:	0800aabe 	.word	0x0800aabe
 800695c:	0800aacf 	.word	0x0800aacf

08006960 <_scanf_float>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b087      	sub	sp, #28
 8006966:	4617      	mov	r7, r2
 8006968:	9303      	str	r3, [sp, #12]
 800696a:	688b      	ldr	r3, [r1, #8]
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006972:	bf83      	ittte	hi
 8006974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006978:	195b      	addhi	r3, r3, r5
 800697a:	9302      	strhi	r3, [sp, #8]
 800697c:	2300      	movls	r3, #0
 800697e:	bf86      	itte	hi
 8006980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006984:	608b      	strhi	r3, [r1, #8]
 8006986:	9302      	strls	r3, [sp, #8]
 8006988:	680b      	ldr	r3, [r1, #0]
 800698a:	468b      	mov	fp, r1
 800698c:	2500      	movs	r5, #0
 800698e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006992:	f84b 3b1c 	str.w	r3, [fp], #28
 8006996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800699a:	4680      	mov	r8, r0
 800699c:	460c      	mov	r4, r1
 800699e:	465e      	mov	r6, fp
 80069a0:	46aa      	mov	sl, r5
 80069a2:	46a9      	mov	r9, r5
 80069a4:	9501      	str	r5, [sp, #4]
 80069a6:	68a2      	ldr	r2, [r4, #8]
 80069a8:	b152      	cbz	r2, 80069c0 <_scanf_float+0x60>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b4e      	cmp	r3, #78	; 0x4e
 80069b0:	d864      	bhi.n	8006a7c <_scanf_float+0x11c>
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d83c      	bhi.n	8006a30 <_scanf_float+0xd0>
 80069b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80069ba:	b2c8      	uxtb	r0, r1
 80069bc:	280e      	cmp	r0, #14
 80069be:	d93a      	bls.n	8006a36 <_scanf_float+0xd6>
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	d003      	beq.n	80069ce <_scanf_float+0x6e>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d2:	f1ba 0f01 	cmp.w	sl, #1
 80069d6:	f200 8113 	bhi.w	8006c00 <_scanf_float+0x2a0>
 80069da:	455e      	cmp	r6, fp
 80069dc:	f200 8105 	bhi.w	8006bea <_scanf_float+0x28a>
 80069e0:	2501      	movs	r5, #1
 80069e2:	4628      	mov	r0, r5
 80069e4:	b007      	add	sp, #28
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069ee:	2a0d      	cmp	r2, #13
 80069f0:	d8e6      	bhi.n	80069c0 <_scanf_float+0x60>
 80069f2:	a101      	add	r1, pc, #4	; (adr r1, 80069f8 <_scanf_float+0x98>)
 80069f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069f8:	08006b37 	.word	0x08006b37
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	080069c1 	.word	0x080069c1
 8006a08:	08006b97 	.word	0x08006b97
 8006a0c:	08006b6f 	.word	0x08006b6f
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b45 	.word	0x08006b45
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	080069c1 	.word	0x080069c1
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006afd 	.word	0x08006afd
 8006a30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a34:	e7db      	b.n	80069ee <_scanf_float+0x8e>
 8006a36:	290e      	cmp	r1, #14
 8006a38:	d8c2      	bhi.n	80069c0 <_scanf_float+0x60>
 8006a3a:	a001      	add	r0, pc, #4	; (adr r0, 8006a40 <_scanf_float+0xe0>)
 8006a3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a40:	08006aef 	.word	0x08006aef
 8006a44:	080069c1 	.word	0x080069c1
 8006a48:	08006aef 	.word	0x08006aef
 8006a4c:	08006b83 	.word	0x08006b83
 8006a50:	080069c1 	.word	0x080069c1
 8006a54:	08006a9d 	.word	0x08006a9d
 8006a58:	08006ad9 	.word	0x08006ad9
 8006a5c:	08006ad9 	.word	0x08006ad9
 8006a60:	08006ad9 	.word	0x08006ad9
 8006a64:	08006ad9 	.word	0x08006ad9
 8006a68:	08006ad9 	.word	0x08006ad9
 8006a6c:	08006ad9 	.word	0x08006ad9
 8006a70:	08006ad9 	.word	0x08006ad9
 8006a74:	08006ad9 	.word	0x08006ad9
 8006a78:	08006ad9 	.word	0x08006ad9
 8006a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8006a7e:	d809      	bhi.n	8006a94 <_scanf_float+0x134>
 8006a80:	2b60      	cmp	r3, #96	; 0x60
 8006a82:	d8b2      	bhi.n	80069ea <_scanf_float+0x8a>
 8006a84:	2b54      	cmp	r3, #84	; 0x54
 8006a86:	d077      	beq.n	8006b78 <_scanf_float+0x218>
 8006a88:	2b59      	cmp	r3, #89	; 0x59
 8006a8a:	d199      	bne.n	80069c0 <_scanf_float+0x60>
 8006a8c:	2d07      	cmp	r5, #7
 8006a8e:	d197      	bne.n	80069c0 <_scanf_float+0x60>
 8006a90:	2508      	movs	r5, #8
 8006a92:	e029      	b.n	8006ae8 <_scanf_float+0x188>
 8006a94:	2b74      	cmp	r3, #116	; 0x74
 8006a96:	d06f      	beq.n	8006b78 <_scanf_float+0x218>
 8006a98:	2b79      	cmp	r3, #121	; 0x79
 8006a9a:	e7f6      	b.n	8006a8a <_scanf_float+0x12a>
 8006a9c:	6821      	ldr	r1, [r4, #0]
 8006a9e:	05c8      	lsls	r0, r1, #23
 8006aa0:	d51a      	bpl.n	8006ad8 <_scanf_float+0x178>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006aa8:	6021      	str	r1, [r4, #0]
 8006aaa:	f109 0901 	add.w	r9, r9, #1
 8006aae:	b11b      	cbz	r3, 8006ab8 <_scanf_float+0x158>
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	60a2      	str	r2, [r4, #8]
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	f340 8084 	ble.w	8006bd8 <_scanf_float+0x278>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	e766      	b.n	80069a6 <_scanf_float+0x46>
 8006ad8:	eb1a 0f05 	cmn.w	sl, r5
 8006adc:	f47f af70 	bne.w	80069c0 <_scanf_float+0x60>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	f806 3b01 	strb.w	r3, [r6], #1
 8006aec:	e7e4      	b.n	8006ab8 <_scanf_float+0x158>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	0610      	lsls	r0, r2, #24
 8006af2:	f57f af65 	bpl.w	80069c0 <_scanf_float+0x60>
 8006af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006afa:	e7f4      	b.n	8006ae6 <_scanf_float+0x186>
 8006afc:	f1ba 0f00 	cmp.w	sl, #0
 8006b00:	d10e      	bne.n	8006b20 <_scanf_float+0x1c0>
 8006b02:	f1b9 0f00 	cmp.w	r9, #0
 8006b06:	d10e      	bne.n	8006b26 <_scanf_float+0x1c6>
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b12:	d108      	bne.n	8006b26 <_scanf_float+0x1c6>
 8006b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	f04f 0a01 	mov.w	sl, #1
 8006b1e:	e7e3      	b.n	8006ae8 <_scanf_float+0x188>
 8006b20:	f1ba 0f02 	cmp.w	sl, #2
 8006b24:	d055      	beq.n	8006bd2 <_scanf_float+0x272>
 8006b26:	2d01      	cmp	r5, #1
 8006b28:	d002      	beq.n	8006b30 <_scanf_float+0x1d0>
 8006b2a:	2d04      	cmp	r5, #4
 8006b2c:	f47f af48 	bne.w	80069c0 <_scanf_float+0x60>
 8006b30:	3501      	adds	r5, #1
 8006b32:	b2ed      	uxtb	r5, r5
 8006b34:	e7d8      	b.n	8006ae8 <_scanf_float+0x188>
 8006b36:	f1ba 0f01 	cmp.w	sl, #1
 8006b3a:	f47f af41 	bne.w	80069c0 <_scanf_float+0x60>
 8006b3e:	f04f 0a02 	mov.w	sl, #2
 8006b42:	e7d1      	b.n	8006ae8 <_scanf_float+0x188>
 8006b44:	b97d      	cbnz	r5, 8006b66 <_scanf_float+0x206>
 8006b46:	f1b9 0f00 	cmp.w	r9, #0
 8006b4a:	f47f af3c 	bne.w	80069c6 <_scanf_float+0x66>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b58:	f47f af39 	bne.w	80069ce <_scanf_float+0x6e>
 8006b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	2501      	movs	r5, #1
 8006b64:	e7c0      	b.n	8006ae8 <_scanf_float+0x188>
 8006b66:	2d03      	cmp	r5, #3
 8006b68:	d0e2      	beq.n	8006b30 <_scanf_float+0x1d0>
 8006b6a:	2d05      	cmp	r5, #5
 8006b6c:	e7de      	b.n	8006b2c <_scanf_float+0x1cc>
 8006b6e:	2d02      	cmp	r5, #2
 8006b70:	f47f af26 	bne.w	80069c0 <_scanf_float+0x60>
 8006b74:	2503      	movs	r5, #3
 8006b76:	e7b7      	b.n	8006ae8 <_scanf_float+0x188>
 8006b78:	2d06      	cmp	r5, #6
 8006b7a:	f47f af21 	bne.w	80069c0 <_scanf_float+0x60>
 8006b7e:	2507      	movs	r5, #7
 8006b80:	e7b2      	b.n	8006ae8 <_scanf_float+0x188>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	0591      	lsls	r1, r2, #22
 8006b86:	f57f af1b 	bpl.w	80069c0 <_scanf_float+0x60>
 8006b8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b94:	e7a8      	b.n	8006ae8 <_scanf_float+0x188>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ba0:	d006      	beq.n	8006bb0 <_scanf_float+0x250>
 8006ba2:	0550      	lsls	r0, r2, #21
 8006ba4:	f57f af0c 	bpl.w	80069c0 <_scanf_float+0x60>
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	f43f af0f 	beq.w	80069ce <_scanf_float+0x6e>
 8006bb0:	0591      	lsls	r1, r2, #22
 8006bb2:	bf58      	it	pl
 8006bb4:	9901      	ldrpl	r1, [sp, #4]
 8006bb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bba:	bf58      	it	pl
 8006bbc:	eba9 0101 	subpl.w	r1, r9, r1
 8006bc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006bc4:	bf58      	it	pl
 8006bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	f04f 0900 	mov.w	r9, #0
 8006bd0:	e78a      	b.n	8006ae8 <_scanf_float+0x188>
 8006bd2:	f04f 0a03 	mov.w	sl, #3
 8006bd6:	e787      	b.n	8006ae8 <_scanf_float+0x188>
 8006bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4640      	mov	r0, r8
 8006be0:	4798      	blx	r3
 8006be2:	2800      	cmp	r0, #0
 8006be4:	f43f aedf 	beq.w	80069a6 <_scanf_float+0x46>
 8006be8:	e6ea      	b.n	80069c0 <_scanf_float+0x60>
 8006bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4798      	blx	r3
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	e6ec      	b.n	80069da <_scanf_float+0x7a>
 8006c00:	1e6b      	subs	r3, r5, #1
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d825      	bhi.n	8006c52 <_scanf_float+0x2f2>
 8006c06:	2d02      	cmp	r5, #2
 8006c08:	d836      	bhi.n	8006c78 <_scanf_float+0x318>
 8006c0a:	455e      	cmp	r6, fp
 8006c0c:	f67f aee8 	bls.w	80069e0 <_scanf_float+0x80>
 8006c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c18:	463a      	mov	r2, r7
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	4798      	blx	r3
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	e7f1      	b.n	8006c0a <_scanf_float+0x2aa>
 8006c26:	9802      	ldr	r0, [sp, #8]
 8006c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	463a      	mov	r2, r7
 8006c34:	4640      	mov	r0, r8
 8006c36:	4798      	blx	r3
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c42:	fa5f fa8a 	uxtb.w	sl, sl
 8006c46:	f1ba 0f02 	cmp.w	sl, #2
 8006c4a:	d1ec      	bne.n	8006c26 <_scanf_float+0x2c6>
 8006c4c:	3d03      	subs	r5, #3
 8006c4e:	b2ed      	uxtb	r5, r5
 8006c50:	1b76      	subs	r6, r6, r5
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	05da      	lsls	r2, r3, #23
 8006c56:	d52f      	bpl.n	8006cb8 <_scanf_float+0x358>
 8006c58:	055b      	lsls	r3, r3, #21
 8006c5a:	d510      	bpl.n	8006c7e <_scanf_float+0x31e>
 8006c5c:	455e      	cmp	r6, fp
 8006c5e:	f67f aebf 	bls.w	80069e0 <_scanf_float+0x80>
 8006c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4798      	blx	r3
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	e7f1      	b.n	8006c5c <_scanf_float+0x2fc>
 8006c78:	46aa      	mov	sl, r5
 8006c7a:	9602      	str	r6, [sp, #8]
 8006c7c:	e7df      	b.n	8006c3e <_scanf_float+0x2de>
 8006c7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	2965      	cmp	r1, #101	; 0x65
 8006c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	d00c      	beq.n	8006cac <_scanf_float+0x34c>
 8006c92:	2945      	cmp	r1, #69	; 0x45
 8006c94:	d00a      	beq.n	8006cac <_scanf_float+0x34c>
 8006c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4798      	blx	r3
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	1eb5      	subs	r5, r6, #2
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4798      	blx	r3
 8006cb6:	462e      	mov	r6, r5
 8006cb8:	6825      	ldr	r5, [r4, #0]
 8006cba:	f015 0510 	ands.w	r5, r5, #16
 8006cbe:	d158      	bne.n	8006d72 <_scanf_float+0x412>
 8006cc0:	7035      	strb	r5, [r6, #0]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ccc:	d11c      	bne.n	8006d08 <_scanf_float+0x3a8>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	454b      	cmp	r3, r9
 8006cd2:	eba3 0209 	sub.w	r2, r3, r9
 8006cd6:	d124      	bne.n	8006d22 <_scanf_float+0x3c2>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4659      	mov	r1, fp
 8006cdc:	4640      	mov	r0, r8
 8006cde:	f002 fc9b 	bl	8009618 <_strtod_r>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	6821      	ldr	r1, [r4, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f011 0f02 	tst.w	r1, #2
 8006cec:	ec57 6b10 	vmov	r6, r7, d0
 8006cf0:	f103 0204 	add.w	r2, r3, #4
 8006cf4:	d020      	beq.n	8006d38 <_scanf_float+0x3d8>
 8006cf6:	9903      	ldr	r1, [sp, #12]
 8006cf8:	600a      	str	r2, [r1, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	e9c3 6700 	strd	r6, r7, [r3]
 8006d00:	68e3      	ldr	r3, [r4, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60e3      	str	r3, [r4, #12]
 8006d06:	e66c      	b.n	80069e2 <_scanf_float+0x82>
 8006d08:	9b04      	ldr	r3, [sp, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0e4      	beq.n	8006cd8 <_scanf_float+0x378>
 8006d0e:	9905      	ldr	r1, [sp, #20]
 8006d10:	230a      	movs	r3, #10
 8006d12:	462a      	mov	r2, r5
 8006d14:	3101      	adds	r1, #1
 8006d16:	4640      	mov	r0, r8
 8006d18:	f002 fd06 	bl	8009728 <_strtol_r>
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	9e05      	ldr	r6, [sp, #20]
 8006d20:	1ac2      	subs	r2, r0, r3
 8006d22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d26:	429e      	cmp	r6, r3
 8006d28:	bf28      	it	cs
 8006d2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d2e:	4912      	ldr	r1, [pc, #72]	; (8006d78 <_scanf_float+0x418>)
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f955 	bl	8006fe0 <siprintf>
 8006d36:	e7cf      	b.n	8006cd8 <_scanf_float+0x378>
 8006d38:	f011 0f04 	tst.w	r1, #4
 8006d3c:	9903      	ldr	r1, [sp, #12]
 8006d3e:	600a      	str	r2, [r1, #0]
 8006d40:	d1db      	bne.n	8006cfa <_scanf_float+0x39a>
 8006d42:	f8d3 8000 	ldr.w	r8, [r3]
 8006d46:	ee10 2a10 	vmov	r2, s0
 8006d4a:	ee10 0a10 	vmov	r0, s0
 8006d4e:	463b      	mov	r3, r7
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 fefb 	bl	8000b4c <__aeabi_dcmpun>
 8006d56:	b128      	cbz	r0, 8006d64 <_scanf_float+0x404>
 8006d58:	4808      	ldr	r0, [pc, #32]	; (8006d7c <_scanf_float+0x41c>)
 8006d5a:	f000 fad7 	bl	800730c <nanf>
 8006d5e:	ed88 0a00 	vstr	s0, [r8]
 8006d62:	e7cd      	b.n	8006d00 <_scanf_float+0x3a0>
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7f9 ff4e 	bl	8000c08 <__aeabi_d2f>
 8006d6c:	f8c8 0000 	str.w	r0, [r8]
 8006d70:	e7c6      	b.n	8006d00 <_scanf_float+0x3a0>
 8006d72:	2500      	movs	r5, #0
 8006d74:	e635      	b.n	80069e2 <_scanf_float+0x82>
 8006d76:	bf00      	nop
 8006d78:	0800aae0 	.word	0x0800aae0
 8006d7c:	0800ae75 	.word	0x0800ae75

08006d80 <std>:
 8006d80:	2300      	movs	r3, #0
 8006d82:	b510      	push	{r4, lr}
 8006d84:	4604      	mov	r4, r0
 8006d86:	e9c0 3300 	strd	r3, r3, [r0]
 8006d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d8e:	6083      	str	r3, [r0, #8]
 8006d90:	8181      	strh	r1, [r0, #12]
 8006d92:	6643      	str	r3, [r0, #100]	; 0x64
 8006d94:	81c2      	strh	r2, [r0, #14]
 8006d96:	6183      	str	r3, [r0, #24]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	305c      	adds	r0, #92	; 0x5c
 8006d9e:	f000 fa17 	bl	80071d0 <memset>
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <std+0x58>)
 8006da4:	6263      	str	r3, [r4, #36]	; 0x24
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <std+0x5c>)
 8006da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <std+0x60>)
 8006dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <std+0x64>)
 8006db0:	6323      	str	r3, [r4, #48]	; 0x30
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <std+0x68>)
 8006db4:	6224      	str	r4, [r4, #32]
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d006      	beq.n	8006dc8 <std+0x48>
 8006dba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006dbe:	4294      	cmp	r4, r2
 8006dc0:	d002      	beq.n	8006dc8 <std+0x48>
 8006dc2:	33d0      	adds	r3, #208	; 0xd0
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	d105      	bne.n	8006dd4 <std+0x54>
 8006dc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd0:	f000 ba8a 	b.w	80072e8 <__retarget_lock_init_recursive>
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08007021 	.word	0x08007021
 8006ddc:	08007043 	.word	0x08007043
 8006de0:	0800707b 	.word	0x0800707b
 8006de4:	0800709f 	.word	0x0800709f
 8006de8:	2000059c 	.word	0x2000059c

08006dec <stdio_exit_handler>:
 8006dec:	4a02      	ldr	r2, [pc, #8]	; (8006df8 <stdio_exit_handler+0xc>)
 8006dee:	4903      	ldr	r1, [pc, #12]	; (8006dfc <stdio_exit_handler+0x10>)
 8006df0:	4803      	ldr	r0, [pc, #12]	; (8006e00 <stdio_exit_handler+0x14>)
 8006df2:	f000 b869 	b.w	8006ec8 <_fwalk_sglue>
 8006df6:	bf00      	nop
 8006df8:	2000023c 	.word	0x2000023c
 8006dfc:	08009d71 	.word	0x08009d71
 8006e00:	20000248 	.word	0x20000248

08006e04 <cleanup_stdio>:
 8006e04:	6841      	ldr	r1, [r0, #4]
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <cleanup_stdio+0x34>)
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	d001      	beq.n	8006e14 <cleanup_stdio+0x10>
 8006e10:	f002 ffae 	bl	8009d70 <_fflush_r>
 8006e14:	68a1      	ldr	r1, [r4, #8]
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <cleanup_stdio+0x38>)
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	d002      	beq.n	8006e22 <cleanup_stdio+0x1e>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f002 ffa7 	bl	8009d70 <_fflush_r>
 8006e22:	68e1      	ldr	r1, [r4, #12]
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <cleanup_stdio+0x3c>)
 8006e26:	4299      	cmp	r1, r3
 8006e28:	d004      	beq.n	8006e34 <cleanup_stdio+0x30>
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e30:	f002 bf9e 	b.w	8009d70 <_fflush_r>
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	bf00      	nop
 8006e38:	2000059c 	.word	0x2000059c
 8006e3c:	20000604 	.word	0x20000604
 8006e40:	2000066c 	.word	0x2000066c

08006e44 <global_stdio_init.part.0>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <global_stdio_init.part.0+0x30>)
 8006e48:	4c0b      	ldr	r4, [pc, #44]	; (8006e78 <global_stdio_init.part.0+0x34>)
 8006e4a:	4a0c      	ldr	r2, [pc, #48]	; (8006e7c <global_stdio_init.part.0+0x38>)
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	2200      	movs	r2, #0
 8006e52:	2104      	movs	r1, #4
 8006e54:	f7ff ff94 	bl	8006d80 <std>
 8006e58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	2109      	movs	r1, #9
 8006e60:	f7ff ff8e 	bl	8006d80 <std>
 8006e64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e68:	2202      	movs	r2, #2
 8006e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6e:	2112      	movs	r1, #18
 8006e70:	f7ff bf86 	b.w	8006d80 <std>
 8006e74:	200006d4 	.word	0x200006d4
 8006e78:	2000059c 	.word	0x2000059c
 8006e7c:	08006ded 	.word	0x08006ded

08006e80 <__sfp_lock_acquire>:
 8006e80:	4801      	ldr	r0, [pc, #4]	; (8006e88 <__sfp_lock_acquire+0x8>)
 8006e82:	f000 ba32 	b.w	80072ea <__retarget_lock_acquire_recursive>
 8006e86:	bf00      	nop
 8006e88:	200006dd 	.word	0x200006dd

08006e8c <__sfp_lock_release>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	; (8006e94 <__sfp_lock_release+0x8>)
 8006e8e:	f000 ba2d 	b.w	80072ec <__retarget_lock_release_recursive>
 8006e92:	bf00      	nop
 8006e94:	200006dd 	.word	0x200006dd

08006e98 <__sinit>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	f7ff fff0 	bl	8006e80 <__sfp_lock_acquire>
 8006ea0:	6a23      	ldr	r3, [r4, #32]
 8006ea2:	b11b      	cbz	r3, 8006eac <__sinit+0x14>
 8006ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea8:	f7ff bff0 	b.w	8006e8c <__sfp_lock_release>
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <__sinit+0x28>)
 8006eae:	6223      	str	r3, [r4, #32]
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <__sinit+0x2c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f5      	bne.n	8006ea4 <__sinit+0xc>
 8006eb8:	f7ff ffc4 	bl	8006e44 <global_stdio_init.part.0>
 8006ebc:	e7f2      	b.n	8006ea4 <__sinit+0xc>
 8006ebe:	bf00      	nop
 8006ec0:	08006e05 	.word	0x08006e05
 8006ec4:	200006d4 	.word	0x200006d4

08006ec8 <_fwalk_sglue>:
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	4607      	mov	r7, r0
 8006ece:	4688      	mov	r8, r1
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ed8:	f1b9 0901 	subs.w	r9, r9, #1
 8006edc:	d505      	bpl.n	8006eea <_fwalk_sglue+0x22>
 8006ede:	6824      	ldr	r4, [r4, #0]
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	d1f7      	bne.n	8006ed4 <_fwalk_sglue+0xc>
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d907      	bls.n	8006f00 <_fwalk_sglue+0x38>
 8006ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	d003      	beq.n	8006f00 <_fwalk_sglue+0x38>
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4638      	mov	r0, r7
 8006efc:	47c0      	blx	r8
 8006efe:	4306      	orrs	r6, r0
 8006f00:	3568      	adds	r5, #104	; 0x68
 8006f02:	e7e9      	b.n	8006ed8 <_fwalk_sglue+0x10>

08006f04 <iprintf>:
 8006f04:	b40f      	push	{r0, r1, r2, r3}
 8006f06:	b507      	push	{r0, r1, r2, lr}
 8006f08:	4906      	ldr	r1, [pc, #24]	; (8006f24 <iprintf+0x20>)
 8006f0a:	ab04      	add	r3, sp, #16
 8006f0c:	6808      	ldr	r0, [r1, #0]
 8006f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f12:	6881      	ldr	r1, [r0, #8]
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	f002 fd8b 	bl	8009a30 <_vfiprintf_r>
 8006f1a:	b003      	add	sp, #12
 8006f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f20:	b004      	add	sp, #16
 8006f22:	4770      	bx	lr
 8006f24:	20000294 	.word	0x20000294

08006f28 <_puts_r>:
 8006f28:	6a03      	ldr	r3, [r0, #32]
 8006f2a:	b570      	push	{r4, r5, r6, lr}
 8006f2c:	6884      	ldr	r4, [r0, #8]
 8006f2e:	4605      	mov	r5, r0
 8006f30:	460e      	mov	r6, r1
 8006f32:	b90b      	cbnz	r3, 8006f38 <_puts_r+0x10>
 8006f34:	f7ff ffb0 	bl	8006e98 <__sinit>
 8006f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d405      	bmi.n	8006f4a <_puts_r+0x22>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	0598      	lsls	r0, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_puts_r+0x22>
 8006f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f46:	f000 f9d0 	bl	80072ea <__retarget_lock_acquire_recursive>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	0719      	lsls	r1, r3, #28
 8006f4e:	d513      	bpl.n	8006f78 <_puts_r+0x50>
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	b18b      	cbz	r3, 8006f78 <_puts_r+0x50>
 8006f54:	3e01      	subs	r6, #1
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	b9e9      	cbnz	r1, 8006f9e <_puts_r+0x76>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da2e      	bge.n	8006fc4 <_puts_r+0x9c>
 8006f66:	4622      	mov	r2, r4
 8006f68:	210a      	movs	r1, #10
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f89b 	bl	80070a6 <__swbuf_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d007      	beq.n	8006f84 <_puts_r+0x5c>
 8006f74:	250a      	movs	r5, #10
 8006f76:	e007      	b.n	8006f88 <_puts_r+0x60>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 f8d0 	bl	8007120 <__swsetup_r>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d0e7      	beq.n	8006f54 <_puts_r+0x2c>
 8006f84:	f04f 35ff 	mov.w	r5, #4294967295
 8006f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8a:	07da      	lsls	r2, r3, #31
 8006f8c:	d405      	bmi.n	8006f9a <_puts_r+0x72>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	059b      	lsls	r3, r3, #22
 8006f92:	d402      	bmi.n	8006f9a <_puts_r+0x72>
 8006f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f96:	f000 f9a9 	bl	80072ec <__retarget_lock_release_recursive>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	bd70      	pop	{r4, r5, r6, pc}
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da04      	bge.n	8006fac <_puts_r+0x84>
 8006fa2:	69a2      	ldr	r2, [r4, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	dc06      	bgt.n	8006fb6 <_puts_r+0x8e>
 8006fa8:	290a      	cmp	r1, #10
 8006faa:	d004      	beq.n	8006fb6 <_puts_r+0x8e>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	6022      	str	r2, [r4, #0]
 8006fb2:	7019      	strb	r1, [r3, #0]
 8006fb4:	e7cf      	b.n	8006f56 <_puts_r+0x2e>
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f000 f874 	bl	80070a6 <__swbuf_r>
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d1c9      	bne.n	8006f56 <_puts_r+0x2e>
 8006fc2:	e7df      	b.n	8006f84 <_puts_r+0x5c>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	250a      	movs	r5, #10
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	6022      	str	r2, [r4, #0]
 8006fcc:	701d      	strb	r5, [r3, #0]
 8006fce:	e7db      	b.n	8006f88 <_puts_r+0x60>

08006fd0 <puts>:
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <puts+0xc>)
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	f7ff bfa7 	b.w	8006f28 <_puts_r>
 8006fda:	bf00      	nop
 8006fdc:	20000294 	.word	0x20000294

08006fe0 <siprintf>:
 8006fe0:	b40e      	push	{r1, r2, r3}
 8006fe2:	b500      	push	{lr}
 8006fe4:	b09c      	sub	sp, #112	; 0x70
 8006fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe8:	9002      	str	r0, [sp, #8]
 8006fea:	9006      	str	r0, [sp, #24]
 8006fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ff0:	4809      	ldr	r0, [pc, #36]	; (8007018 <siprintf+0x38>)
 8006ff2:	9107      	str	r1, [sp, #28]
 8006ff4:	9104      	str	r1, [sp, #16]
 8006ff6:	4909      	ldr	r1, [pc, #36]	; (800701c <siprintf+0x3c>)
 8006ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffc:	9105      	str	r1, [sp, #20]
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	a902      	add	r1, sp, #8
 8007004:	f002 fbec 	bl	80097e0 <_svfiprintf_r>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	b01c      	add	sp, #112	; 0x70
 8007010:	f85d eb04 	ldr.w	lr, [sp], #4
 8007014:	b003      	add	sp, #12
 8007016:	4770      	bx	lr
 8007018:	20000294 	.word	0x20000294
 800701c:	ffff0208 	.word	0xffff0208

08007020 <__sread>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	f000 f900 	bl	800722c <_read_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	bfab      	itete	ge
 8007030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007032:	89a3      	ldrhlt	r3, [r4, #12]
 8007034:	181b      	addge	r3, r3, r0
 8007036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800703a:	bfac      	ite	ge
 800703c:	6563      	strge	r3, [r4, #84]	; 0x54
 800703e:	81a3      	strhlt	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__swrite>:
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	461f      	mov	r7, r3
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	05db      	lsls	r3, r3, #23
 800704c:	4605      	mov	r5, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d505      	bpl.n	8007060 <__swrite+0x1e>
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2302      	movs	r3, #2
 800705a:	2200      	movs	r2, #0
 800705c:	f000 f8d4 	bl	8007208 <_lseek_r>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	4632      	mov	r2, r6
 800706e:	463b      	mov	r3, r7
 8007070:	4628      	mov	r0, r5
 8007072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	f000 b8fb 	b.w	8007270 <_write_r>

0800707a <__sseek>:
 800707a:	b510      	push	{r4, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 f8c1 	bl	8007208 <_lseek_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	bf15      	itete	ne
 800708c:	6560      	strne	r0, [r4, #84]	; 0x54
 800708e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007096:	81a3      	strheq	r3, [r4, #12]
 8007098:	bf18      	it	ne
 800709a:	81a3      	strhne	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__sclose>:
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 b8a1 	b.w	80071e8 <_close_r>

080070a6 <__swbuf_r>:
 80070a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a8:	460e      	mov	r6, r1
 80070aa:	4614      	mov	r4, r2
 80070ac:	4605      	mov	r5, r0
 80070ae:	b118      	cbz	r0, 80070b8 <__swbuf_r+0x12>
 80070b0:	6a03      	ldr	r3, [r0, #32]
 80070b2:	b90b      	cbnz	r3, 80070b8 <__swbuf_r+0x12>
 80070b4:	f7ff fef0 	bl	8006e98 <__sinit>
 80070b8:	69a3      	ldr	r3, [r4, #24]
 80070ba:	60a3      	str	r3, [r4, #8]
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	071a      	lsls	r2, r3, #28
 80070c0:	d525      	bpl.n	800710e <__swbuf_r+0x68>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	b31b      	cbz	r3, 800710e <__swbuf_r+0x68>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	6922      	ldr	r2, [r4, #16]
 80070ca:	1a98      	subs	r0, r3, r2
 80070cc:	6963      	ldr	r3, [r4, #20]
 80070ce:	b2f6      	uxtb	r6, r6
 80070d0:	4283      	cmp	r3, r0
 80070d2:	4637      	mov	r7, r6
 80070d4:	dc04      	bgt.n	80070e0 <__swbuf_r+0x3a>
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	f002 fe49 	bl	8009d70 <_fflush_r>
 80070de:	b9e0      	cbnz	r0, 800711a <__swbuf_r+0x74>
 80070e0:	68a3      	ldr	r3, [r4, #8]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	60a3      	str	r3, [r4, #8]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	701e      	strb	r6, [r3, #0]
 80070ee:	6962      	ldr	r2, [r4, #20]
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d004      	beq.n	8007100 <__swbuf_r+0x5a>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d506      	bpl.n	800710a <__swbuf_r+0x64>
 80070fc:	2e0a      	cmp	r6, #10
 80070fe:	d104      	bne.n	800710a <__swbuf_r+0x64>
 8007100:	4621      	mov	r1, r4
 8007102:	4628      	mov	r0, r5
 8007104:	f002 fe34 	bl	8009d70 <_fflush_r>
 8007108:	b938      	cbnz	r0, 800711a <__swbuf_r+0x74>
 800710a:	4638      	mov	r0, r7
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 f805 	bl	8007120 <__swsetup_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	d0d5      	beq.n	80070c6 <__swbuf_r+0x20>
 800711a:	f04f 37ff 	mov.w	r7, #4294967295
 800711e:	e7f4      	b.n	800710a <__swbuf_r+0x64>

08007120 <__swsetup_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4b2a      	ldr	r3, [pc, #168]	; (80071cc <__swsetup_r+0xac>)
 8007124:	4605      	mov	r5, r0
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	460c      	mov	r4, r1
 800712a:	b118      	cbz	r0, 8007134 <__swsetup_r+0x14>
 800712c:	6a03      	ldr	r3, [r0, #32]
 800712e:	b90b      	cbnz	r3, 8007134 <__swsetup_r+0x14>
 8007130:	f7ff feb2 	bl	8006e98 <__sinit>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800713a:	0718      	lsls	r0, r3, #28
 800713c:	d422      	bmi.n	8007184 <__swsetup_r+0x64>
 800713e:	06d9      	lsls	r1, r3, #27
 8007140:	d407      	bmi.n	8007152 <__swsetup_r+0x32>
 8007142:	2309      	movs	r3, #9
 8007144:	602b      	str	r3, [r5, #0]
 8007146:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e034      	b.n	80071bc <__swsetup_r+0x9c>
 8007152:	0758      	lsls	r0, r3, #29
 8007154:	d512      	bpl.n	800717c <__swsetup_r+0x5c>
 8007156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007158:	b141      	cbz	r1, 800716c <__swsetup_r+0x4c>
 800715a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800715e:	4299      	cmp	r1, r3
 8007160:	d002      	beq.n	8007168 <__swsetup_r+0x48>
 8007162:	4628      	mov	r0, r5
 8007164:	f000 ff52 	bl	800800c <_free_r>
 8007168:	2300      	movs	r3, #0
 800716a:	6363      	str	r3, [r4, #52]	; 0x34
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	2300      	movs	r3, #0
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f043 0308 	orr.w	r3, r3, #8
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	b94b      	cbnz	r3, 800719c <__swsetup_r+0x7c>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800718e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007192:	d003      	beq.n	800719c <__swsetup_r+0x7c>
 8007194:	4621      	mov	r1, r4
 8007196:	4628      	mov	r0, r5
 8007198:	f002 fe38 	bl	8009e0c <__smakebuf_r>
 800719c:	89a0      	ldrh	r0, [r4, #12]
 800719e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a2:	f010 0301 	ands.w	r3, r0, #1
 80071a6:	d00a      	beq.n	80071be <__swsetup_r+0x9e>
 80071a8:	2300      	movs	r3, #0
 80071aa:	60a3      	str	r3, [r4, #8]
 80071ac:	6963      	ldr	r3, [r4, #20]
 80071ae:	425b      	negs	r3, r3
 80071b0:	61a3      	str	r3, [r4, #24]
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	b943      	cbnz	r3, 80071c8 <__swsetup_r+0xa8>
 80071b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071ba:	d1c4      	bne.n	8007146 <__swsetup_r+0x26>
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	0781      	lsls	r1, r0, #30
 80071c0:	bf58      	it	pl
 80071c2:	6963      	ldrpl	r3, [r4, #20]
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	e7f4      	b.n	80071b2 <__swsetup_r+0x92>
 80071c8:	2000      	movs	r0, #0
 80071ca:	e7f7      	b.n	80071bc <__swsetup_r+0x9c>
 80071cc:	20000294 	.word	0x20000294

080071d0 <memset>:
 80071d0:	4402      	add	r2, r0
 80071d2:	4603      	mov	r3, r0
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d100      	bne.n	80071da <memset+0xa>
 80071d8:	4770      	bx	lr
 80071da:	f803 1b01 	strb.w	r1, [r3], #1
 80071de:	e7f9      	b.n	80071d4 <memset+0x4>

080071e0 <_localeconv_r>:
 80071e0:	4800      	ldr	r0, [pc, #0]	; (80071e4 <_localeconv_r+0x4>)
 80071e2:	4770      	bx	lr
 80071e4:	20000388 	.word	0x20000388

080071e8 <_close_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d06      	ldr	r5, [pc, #24]	; (8007204 <_close_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7fa fca3 	bl	8001b3e <_close>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_close_r+0x1a>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_close_r+0x1a>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200006d8 	.word	0x200006d8

08007208 <_lseek_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	; (8007228 <_lseek_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fcb8 	bl	8001b8c <_lseek>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_lseek_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_lseek_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200006d8 	.word	0x200006d8

0800722c <_read_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4d07      	ldr	r5, [pc, #28]	; (800724c <_read_r+0x20>)
 8007230:	4604      	mov	r4, r0
 8007232:	4608      	mov	r0, r1
 8007234:	4611      	mov	r1, r2
 8007236:	2200      	movs	r2, #0
 8007238:	602a      	str	r2, [r5, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	f7fa fc46 	bl	8001acc <_read>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_read_r+0x1e>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_read_r+0x1e>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	200006d8 	.word	0x200006d8

08007250 <_sbrk_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d06      	ldr	r5, [pc, #24]	; (800726c <_sbrk_r+0x1c>)
 8007254:	2300      	movs	r3, #0
 8007256:	4604      	mov	r4, r0
 8007258:	4608      	mov	r0, r1
 800725a:	602b      	str	r3, [r5, #0]
 800725c:	f7fa fca4 	bl	8001ba8 <_sbrk>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_sbrk_r+0x1a>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_sbrk_r+0x1a>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	200006d8 	.word	0x200006d8

08007270 <_write_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d07      	ldr	r5, [pc, #28]	; (8007290 <_write_r+0x20>)
 8007274:	4604      	mov	r4, r0
 8007276:	4608      	mov	r0, r1
 8007278:	4611      	mov	r1, r2
 800727a:	2200      	movs	r2, #0
 800727c:	602a      	str	r2, [r5, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	f7fa fc41 	bl	8001b06 <_write>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_write_r+0x1e>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_write_r+0x1e>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	200006d8 	.word	0x200006d8

08007294 <__errno>:
 8007294:	4b01      	ldr	r3, [pc, #4]	; (800729c <__errno+0x8>)
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	20000294 	.word	0x20000294

080072a0 <__libc_init_array>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	4d0d      	ldr	r5, [pc, #52]	; (80072d8 <__libc_init_array+0x38>)
 80072a4:	4c0d      	ldr	r4, [pc, #52]	; (80072dc <__libc_init_array+0x3c>)
 80072a6:	1b64      	subs	r4, r4, r5
 80072a8:	10a4      	asrs	r4, r4, #2
 80072aa:	2600      	movs	r6, #0
 80072ac:	42a6      	cmp	r6, r4
 80072ae:	d109      	bne.n	80072c4 <__libc_init_array+0x24>
 80072b0:	4d0b      	ldr	r5, [pc, #44]	; (80072e0 <__libc_init_array+0x40>)
 80072b2:	4c0c      	ldr	r4, [pc, #48]	; (80072e4 <__libc_init_array+0x44>)
 80072b4:	f003 fa7c 	bl	800a7b0 <_init>
 80072b8:	1b64      	subs	r4, r4, r5
 80072ba:	10a4      	asrs	r4, r4, #2
 80072bc:	2600      	movs	r6, #0
 80072be:	42a6      	cmp	r6, r4
 80072c0:	d105      	bne.n	80072ce <__libc_init_array+0x2e>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c8:	4798      	blx	r3
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7ee      	b.n	80072ac <__libc_init_array+0xc>
 80072ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d2:	4798      	blx	r3
 80072d4:	3601      	adds	r6, #1
 80072d6:	e7f2      	b.n	80072be <__libc_init_array+0x1e>
 80072d8:	0800aee0 	.word	0x0800aee0
 80072dc:	0800aee0 	.word	0x0800aee0
 80072e0:	0800aee0 	.word	0x0800aee0
 80072e4:	0800aee4 	.word	0x0800aee4

080072e8 <__retarget_lock_init_recursive>:
 80072e8:	4770      	bx	lr

080072ea <__retarget_lock_acquire_recursive>:
 80072ea:	4770      	bx	lr

080072ec <__retarget_lock_release_recursive>:
 80072ec:	4770      	bx	lr

080072ee <memcpy>:
 80072ee:	440a      	add	r2, r1
 80072f0:	4291      	cmp	r1, r2
 80072f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f6:	d100      	bne.n	80072fa <memcpy+0xc>
 80072f8:	4770      	bx	lr
 80072fa:	b510      	push	{r4, lr}
 80072fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007304:	4291      	cmp	r1, r2
 8007306:	d1f9      	bne.n	80072fc <memcpy+0xe>
 8007308:	bd10      	pop	{r4, pc}
	...

0800730c <nanf>:
 800730c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007314 <nanf+0x8>
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	7fc00000 	.word	0x7fc00000

08007318 <quorem>:
 8007318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	6903      	ldr	r3, [r0, #16]
 800731e:	690c      	ldr	r4, [r1, #16]
 8007320:	42a3      	cmp	r3, r4
 8007322:	4607      	mov	r7, r0
 8007324:	db7e      	blt.n	8007424 <quorem+0x10c>
 8007326:	3c01      	subs	r4, #1
 8007328:	f101 0814 	add.w	r8, r1, #20
 800732c:	f100 0514 	add.w	r5, r0, #20
 8007330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800733a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800733e:	3301      	adds	r3, #1
 8007340:	429a      	cmp	r2, r3
 8007342:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007346:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800734a:	fbb2 f6f3 	udiv	r6, r2, r3
 800734e:	d331      	bcc.n	80073b4 <quorem+0x9c>
 8007350:	f04f 0e00 	mov.w	lr, #0
 8007354:	4640      	mov	r0, r8
 8007356:	46ac      	mov	ip, r5
 8007358:	46f2      	mov	sl, lr
 800735a:	f850 2b04 	ldr.w	r2, [r0], #4
 800735e:	b293      	uxth	r3, r2
 8007360:	fb06 e303 	mla	r3, r6, r3, lr
 8007364:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007368:	0c1a      	lsrs	r2, r3, #16
 800736a:	b29b      	uxth	r3, r3
 800736c:	ebaa 0303 	sub.w	r3, sl, r3
 8007370:	f8dc a000 	ldr.w	sl, [ip]
 8007374:	fa13 f38a 	uxtah	r3, r3, sl
 8007378:	fb06 220e 	mla	r2, r6, lr, r2
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	9b00      	ldr	r3, [sp, #0]
 8007380:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007384:	b292      	uxth	r2, r2
 8007386:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800738a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800738e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007392:	4581      	cmp	r9, r0
 8007394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007398:	f84c 3b04 	str.w	r3, [ip], #4
 800739c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073a0:	d2db      	bcs.n	800735a <quorem+0x42>
 80073a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80073a6:	b92b      	cbnz	r3, 80073b4 <quorem+0x9c>
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	3b04      	subs	r3, #4
 80073ac:	429d      	cmp	r5, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	d32c      	bcc.n	800740c <quorem+0xf4>
 80073b2:	613c      	str	r4, [r7, #16]
 80073b4:	4638      	mov	r0, r7
 80073b6:	f001 f93b 	bl	8008630 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	db22      	blt.n	8007404 <quorem+0xec>
 80073be:	3601      	adds	r6, #1
 80073c0:	4629      	mov	r1, r5
 80073c2:	2000      	movs	r0, #0
 80073c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80073c8:	f8d1 c000 	ldr.w	ip, [r1]
 80073cc:	b293      	uxth	r3, r2
 80073ce:	1ac3      	subs	r3, r0, r3
 80073d0:	0c12      	lsrs	r2, r2, #16
 80073d2:	fa13 f38c 	uxtah	r3, r3, ip
 80073d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073e4:	45c1      	cmp	r9, r8
 80073e6:	f841 3b04 	str.w	r3, [r1], #4
 80073ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073ee:	d2e9      	bcs.n	80073c4 <quorem+0xac>
 80073f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073f8:	b922      	cbnz	r2, 8007404 <quorem+0xec>
 80073fa:	3b04      	subs	r3, #4
 80073fc:	429d      	cmp	r5, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	d30a      	bcc.n	8007418 <quorem+0x100>
 8007402:	613c      	str	r4, [r7, #16]
 8007404:	4630      	mov	r0, r6
 8007406:	b003      	add	sp, #12
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	3b04      	subs	r3, #4
 8007410:	2a00      	cmp	r2, #0
 8007412:	d1ce      	bne.n	80073b2 <quorem+0x9a>
 8007414:	3c01      	subs	r4, #1
 8007416:	e7c9      	b.n	80073ac <quorem+0x94>
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	3b04      	subs	r3, #4
 800741c:	2a00      	cmp	r2, #0
 800741e:	d1f0      	bne.n	8007402 <quorem+0xea>
 8007420:	3c01      	subs	r4, #1
 8007422:	e7eb      	b.n	80073fc <quorem+0xe4>
 8007424:	2000      	movs	r0, #0
 8007426:	e7ee      	b.n	8007406 <quorem+0xee>

08007428 <_dtoa_r>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	ed2d 8b04 	vpush	{d8-d9}
 8007430:	69c5      	ldr	r5, [r0, #28]
 8007432:	b093      	sub	sp, #76	; 0x4c
 8007434:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007438:	ec57 6b10 	vmov	r6, r7, d0
 800743c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007440:	9107      	str	r1, [sp, #28]
 8007442:	4604      	mov	r4, r0
 8007444:	920a      	str	r2, [sp, #40]	; 0x28
 8007446:	930d      	str	r3, [sp, #52]	; 0x34
 8007448:	b975      	cbnz	r5, 8007468 <_dtoa_r+0x40>
 800744a:	2010      	movs	r0, #16
 800744c:	f7fe fd66 	bl	8005f1c <malloc>
 8007450:	4602      	mov	r2, r0
 8007452:	61e0      	str	r0, [r4, #28]
 8007454:	b920      	cbnz	r0, 8007460 <_dtoa_r+0x38>
 8007456:	4bae      	ldr	r3, [pc, #696]	; (8007710 <_dtoa_r+0x2e8>)
 8007458:	21ef      	movs	r1, #239	; 0xef
 800745a:	48ae      	ldr	r0, [pc, #696]	; (8007714 <_dtoa_r+0x2ec>)
 800745c:	f002 fd68 	bl	8009f30 <__assert_func>
 8007460:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007464:	6005      	str	r5, [r0, #0]
 8007466:	60c5      	str	r5, [r0, #12]
 8007468:	69e3      	ldr	r3, [r4, #28]
 800746a:	6819      	ldr	r1, [r3, #0]
 800746c:	b151      	cbz	r1, 8007484 <_dtoa_r+0x5c>
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	604a      	str	r2, [r1, #4]
 8007472:	2301      	movs	r3, #1
 8007474:	4093      	lsls	r3, r2
 8007476:	608b      	str	r3, [r1, #8]
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fe53 	bl	8008124 <_Bfree>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	1e3b      	subs	r3, r7, #0
 8007486:	bfbb      	ittet	lt
 8007488:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800748c:	9303      	strlt	r3, [sp, #12]
 800748e:	2300      	movge	r3, #0
 8007490:	2201      	movlt	r2, #1
 8007492:	bfac      	ite	ge
 8007494:	f8c8 3000 	strge.w	r3, [r8]
 8007498:	f8c8 2000 	strlt.w	r2, [r8]
 800749c:	4b9e      	ldr	r3, [pc, #632]	; (8007718 <_dtoa_r+0x2f0>)
 800749e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074a2:	ea33 0308 	bics.w	r3, r3, r8
 80074a6:	d11b      	bne.n	80074e0 <_dtoa_r+0xb8>
 80074a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80074b4:	4333      	orrs	r3, r6
 80074b6:	f000 8593 	beq.w	8007fe0 <_dtoa_r+0xbb8>
 80074ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074bc:	b963      	cbnz	r3, 80074d8 <_dtoa_r+0xb0>
 80074be:	4b97      	ldr	r3, [pc, #604]	; (800771c <_dtoa_r+0x2f4>)
 80074c0:	e027      	b.n	8007512 <_dtoa_r+0xea>
 80074c2:	4b97      	ldr	r3, [pc, #604]	; (8007720 <_dtoa_r+0x2f8>)
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	9800      	ldr	r0, [sp, #0]
 80074ce:	b013      	add	sp, #76	; 0x4c
 80074d0:	ecbd 8b04 	vpop	{d8-d9}
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	4b90      	ldr	r3, [pc, #576]	; (800771c <_dtoa_r+0x2f4>)
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	3303      	adds	r3, #3
 80074de:	e7f3      	b.n	80074c8 <_dtoa_r+0xa0>
 80074e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074e4:	2200      	movs	r2, #0
 80074e6:	ec51 0b17 	vmov	r0, r1, d7
 80074ea:	eeb0 8a47 	vmov.f32	s16, s14
 80074ee:	eef0 8a67 	vmov.f32	s17, s15
 80074f2:	2300      	movs	r3, #0
 80074f4:	f7f9 faf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80074f8:	4681      	mov	r9, r0
 80074fa:	b160      	cbz	r0, 8007516 <_dtoa_r+0xee>
 80074fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074fe:	2301      	movs	r3, #1
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8568 	beq.w	8007fda <_dtoa_r+0xbb2>
 800750a:	4b86      	ldr	r3, [pc, #536]	; (8007724 <_dtoa_r+0x2fc>)
 800750c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	e7da      	b.n	80074cc <_dtoa_r+0xa4>
 8007516:	aa10      	add	r2, sp, #64	; 0x40
 8007518:	a911      	add	r1, sp, #68	; 0x44
 800751a:	4620      	mov	r0, r4
 800751c:	eeb0 0a48 	vmov.f32	s0, s16
 8007520:	eef0 0a68 	vmov.f32	s1, s17
 8007524:	f001 f99a 	bl	800885c <__d2b>
 8007528:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800752c:	4682      	mov	sl, r0
 800752e:	2d00      	cmp	r5, #0
 8007530:	d07f      	beq.n	8007632 <_dtoa_r+0x20a>
 8007532:	ee18 3a90 	vmov	r3, s17
 8007536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800753a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800753e:	ec51 0b18 	vmov	r0, r1, d8
 8007542:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800754a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800754e:	4619      	mov	r1, r3
 8007550:	2200      	movs	r2, #0
 8007552:	4b75      	ldr	r3, [pc, #468]	; (8007728 <_dtoa_r+0x300>)
 8007554:	f7f8 fea8 	bl	80002a8 <__aeabi_dsub>
 8007558:	a367      	add	r3, pc, #412	; (adr r3, 80076f8 <_dtoa_r+0x2d0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f9 f85b 	bl	8000618 <__aeabi_dmul>
 8007562:	a367      	add	r3, pc, #412	; (adr r3, 8007700 <_dtoa_r+0x2d8>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f8 fea0 	bl	80002ac <__adddf3>
 800756c:	4606      	mov	r6, r0
 800756e:	4628      	mov	r0, r5
 8007570:	460f      	mov	r7, r1
 8007572:	f7f8 ffe7 	bl	8000544 <__aeabi_i2d>
 8007576:	a364      	add	r3, pc, #400	; (adr r3, 8007708 <_dtoa_r+0x2e0>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f9 f84c 	bl	8000618 <__aeabi_dmul>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	f7f8 fe90 	bl	80002ac <__adddf3>
 800758c:	4606      	mov	r6, r0
 800758e:	460f      	mov	r7, r1
 8007590:	f7f9 faf2 	bl	8000b78 <__aeabi_d2iz>
 8007594:	2200      	movs	r2, #0
 8007596:	4683      	mov	fp, r0
 8007598:	2300      	movs	r3, #0
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f9 faad 	bl	8000afc <__aeabi_dcmplt>
 80075a2:	b148      	cbz	r0, 80075b8 <_dtoa_r+0x190>
 80075a4:	4658      	mov	r0, fp
 80075a6:	f7f8 ffcd 	bl	8000544 <__aeabi_i2d>
 80075aa:	4632      	mov	r2, r6
 80075ac:	463b      	mov	r3, r7
 80075ae:	f7f9 fa9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80075b2:	b908      	cbnz	r0, 80075b8 <_dtoa_r+0x190>
 80075b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075b8:	f1bb 0f16 	cmp.w	fp, #22
 80075bc:	d857      	bhi.n	800766e <_dtoa_r+0x246>
 80075be:	4b5b      	ldr	r3, [pc, #364]	; (800772c <_dtoa_r+0x304>)
 80075c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	ec51 0b18 	vmov	r0, r1, d8
 80075cc:	f7f9 fa96 	bl	8000afc <__aeabi_dcmplt>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d04e      	beq.n	8007672 <_dtoa_r+0x24a>
 80075d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075d8:	2300      	movs	r3, #0
 80075da:	930c      	str	r3, [sp, #48]	; 0x30
 80075dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075de:	1b5b      	subs	r3, r3, r5
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	bf45      	ittet	mi
 80075e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80075e8:	9305      	strmi	r3, [sp, #20]
 80075ea:	2300      	movpl	r3, #0
 80075ec:	2300      	movmi	r3, #0
 80075ee:	9206      	str	r2, [sp, #24]
 80075f0:	bf54      	ite	pl
 80075f2:	9305      	strpl	r3, [sp, #20]
 80075f4:	9306      	strmi	r3, [sp, #24]
 80075f6:	f1bb 0f00 	cmp.w	fp, #0
 80075fa:	db3c      	blt.n	8007676 <_dtoa_r+0x24e>
 80075fc:	9b06      	ldr	r3, [sp, #24]
 80075fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007602:	445b      	add	r3, fp
 8007604:	9306      	str	r3, [sp, #24]
 8007606:	2300      	movs	r3, #0
 8007608:	9308      	str	r3, [sp, #32]
 800760a:	9b07      	ldr	r3, [sp, #28]
 800760c:	2b09      	cmp	r3, #9
 800760e:	d868      	bhi.n	80076e2 <_dtoa_r+0x2ba>
 8007610:	2b05      	cmp	r3, #5
 8007612:	bfc4      	itt	gt
 8007614:	3b04      	subgt	r3, #4
 8007616:	9307      	strgt	r3, [sp, #28]
 8007618:	9b07      	ldr	r3, [sp, #28]
 800761a:	f1a3 0302 	sub.w	r3, r3, #2
 800761e:	bfcc      	ite	gt
 8007620:	2500      	movgt	r5, #0
 8007622:	2501      	movle	r5, #1
 8007624:	2b03      	cmp	r3, #3
 8007626:	f200 8085 	bhi.w	8007734 <_dtoa_r+0x30c>
 800762a:	e8df f003 	tbb	[pc, r3]
 800762e:	3b2e      	.short	0x3b2e
 8007630:	5839      	.short	0x5839
 8007632:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007636:	441d      	add	r5, r3
 8007638:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800763c:	2b20      	cmp	r3, #32
 800763e:	bfc1      	itttt	gt
 8007640:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007644:	fa08 f803 	lslgt.w	r8, r8, r3
 8007648:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800764c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007650:	bfd6      	itet	le
 8007652:	f1c3 0320 	rsble	r3, r3, #32
 8007656:	ea48 0003 	orrgt.w	r0, r8, r3
 800765a:	fa06 f003 	lslle.w	r0, r6, r3
 800765e:	f7f8 ff61 	bl	8000524 <__aeabi_ui2d>
 8007662:	2201      	movs	r2, #1
 8007664:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007668:	3d01      	subs	r5, #1
 800766a:	920e      	str	r2, [sp, #56]	; 0x38
 800766c:	e76f      	b.n	800754e <_dtoa_r+0x126>
 800766e:	2301      	movs	r3, #1
 8007670:	e7b3      	b.n	80075da <_dtoa_r+0x1b2>
 8007672:	900c      	str	r0, [sp, #48]	; 0x30
 8007674:	e7b2      	b.n	80075dc <_dtoa_r+0x1b4>
 8007676:	9b05      	ldr	r3, [sp, #20]
 8007678:	eba3 030b 	sub.w	r3, r3, fp
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	f1cb 0300 	rsb	r3, fp, #0
 8007682:	9308      	str	r3, [sp, #32]
 8007684:	2300      	movs	r3, #0
 8007686:	930b      	str	r3, [sp, #44]	; 0x2c
 8007688:	e7bf      	b.n	800760a <_dtoa_r+0x1e2>
 800768a:	2300      	movs	r3, #0
 800768c:	9309      	str	r3, [sp, #36]	; 0x24
 800768e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007690:	2b00      	cmp	r3, #0
 8007692:	dc52      	bgt.n	800773a <_dtoa_r+0x312>
 8007694:	2301      	movs	r3, #1
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	461a      	mov	r2, r3
 800769c:	920a      	str	r2, [sp, #40]	; 0x28
 800769e:	e00b      	b.n	80076b8 <_dtoa_r+0x290>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f3      	b.n	800768c <_dtoa_r+0x264>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9309      	str	r3, [sp, #36]	; 0x24
 80076a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076aa:	445b      	add	r3, fp
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	3301      	adds	r3, #1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	bfb8      	it	lt
 80076b6:	2301      	movlt	r3, #1
 80076b8:	69e0      	ldr	r0, [r4, #28]
 80076ba:	2100      	movs	r1, #0
 80076bc:	2204      	movs	r2, #4
 80076be:	f102 0614 	add.w	r6, r2, #20
 80076c2:	429e      	cmp	r6, r3
 80076c4:	d93d      	bls.n	8007742 <_dtoa_r+0x31a>
 80076c6:	6041      	str	r1, [r0, #4]
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fceb 	bl	80080a4 <_Balloc>
 80076ce:	9000      	str	r0, [sp, #0]
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d139      	bne.n	8007748 <_dtoa_r+0x320>
 80076d4:	4b16      	ldr	r3, [pc, #88]	; (8007730 <_dtoa_r+0x308>)
 80076d6:	4602      	mov	r2, r0
 80076d8:	f240 11af 	movw	r1, #431	; 0x1af
 80076dc:	e6bd      	b.n	800745a <_dtoa_r+0x32>
 80076de:	2301      	movs	r3, #1
 80076e0:	e7e1      	b.n	80076a6 <_dtoa_r+0x27e>
 80076e2:	2501      	movs	r5, #1
 80076e4:	2300      	movs	r3, #0
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	9509      	str	r5, [sp, #36]	; 0x24
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	2200      	movs	r2, #0
 80076f4:	2312      	movs	r3, #18
 80076f6:	e7d1      	b.n	800769c <_dtoa_r+0x274>
 80076f8:	636f4361 	.word	0x636f4361
 80076fc:	3fd287a7 	.word	0x3fd287a7
 8007700:	8b60c8b3 	.word	0x8b60c8b3
 8007704:	3fc68a28 	.word	0x3fc68a28
 8007708:	509f79fb 	.word	0x509f79fb
 800770c:	3fd34413 	.word	0x3fd34413
 8007710:	0800aaf2 	.word	0x0800aaf2
 8007714:	0800ab09 	.word	0x0800ab09
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	0800aaee 	.word	0x0800aaee
 8007720:	0800aae5 	.word	0x0800aae5
 8007724:	0800aabd 	.word	0x0800aabd
 8007728:	3ff80000 	.word	0x3ff80000
 800772c:	0800abf8 	.word	0x0800abf8
 8007730:	0800ab61 	.word	0x0800ab61
 8007734:	2301      	movs	r3, #1
 8007736:	9309      	str	r3, [sp, #36]	; 0x24
 8007738:	e7d7      	b.n	80076ea <_dtoa_r+0x2c2>
 800773a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	9304      	str	r3, [sp, #16]
 8007740:	e7ba      	b.n	80076b8 <_dtoa_r+0x290>
 8007742:	3101      	adds	r1, #1
 8007744:	0052      	lsls	r2, r2, #1
 8007746:	e7ba      	b.n	80076be <_dtoa_r+0x296>
 8007748:	69e3      	ldr	r3, [r4, #28]
 800774a:	9a00      	ldr	r2, [sp, #0]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	2b0e      	cmp	r3, #14
 8007752:	f200 80a8 	bhi.w	80078a6 <_dtoa_r+0x47e>
 8007756:	2d00      	cmp	r5, #0
 8007758:	f000 80a5 	beq.w	80078a6 <_dtoa_r+0x47e>
 800775c:	f1bb 0f00 	cmp.w	fp, #0
 8007760:	dd38      	ble.n	80077d4 <_dtoa_r+0x3ac>
 8007762:	4bc0      	ldr	r3, [pc, #768]	; (8007a64 <_dtoa_r+0x63c>)
 8007764:	f00b 020f 	and.w	r2, fp, #15
 8007768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800776c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007770:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007774:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007778:	d019      	beq.n	80077ae <_dtoa_r+0x386>
 800777a:	4bbb      	ldr	r3, [pc, #748]	; (8007a68 <_dtoa_r+0x640>)
 800777c:	ec51 0b18 	vmov	r0, r1, d8
 8007780:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007784:	f7f9 f872 	bl	800086c <__aeabi_ddiv>
 8007788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778c:	f008 080f 	and.w	r8, r8, #15
 8007790:	2503      	movs	r5, #3
 8007792:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007a68 <_dtoa_r+0x640>
 8007796:	f1b8 0f00 	cmp.w	r8, #0
 800779a:	d10a      	bne.n	80077b2 <_dtoa_r+0x38a>
 800779c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	f7f9 f862 	bl	800086c <__aeabi_ddiv>
 80077a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ac:	e02b      	b.n	8007806 <_dtoa_r+0x3de>
 80077ae:	2502      	movs	r5, #2
 80077b0:	e7ef      	b.n	8007792 <_dtoa_r+0x36a>
 80077b2:	f018 0f01 	tst.w	r8, #1
 80077b6:	d008      	beq.n	80077ca <_dtoa_r+0x3a2>
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077c0:	f7f8 ff2a 	bl	8000618 <__aeabi_dmul>
 80077c4:	3501      	adds	r5, #1
 80077c6:	4606      	mov	r6, r0
 80077c8:	460f      	mov	r7, r1
 80077ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077ce:	f109 0908 	add.w	r9, r9, #8
 80077d2:	e7e0      	b.n	8007796 <_dtoa_r+0x36e>
 80077d4:	f000 809f 	beq.w	8007916 <_dtoa_r+0x4ee>
 80077d8:	f1cb 0600 	rsb	r6, fp, #0
 80077dc:	4ba1      	ldr	r3, [pc, #644]	; (8007a64 <_dtoa_r+0x63c>)
 80077de:	4fa2      	ldr	r7, [pc, #648]	; (8007a68 <_dtoa_r+0x640>)
 80077e0:	f006 020f 	and.w	r2, r6, #15
 80077e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	ec51 0b18 	vmov	r0, r1, d8
 80077f0:	f7f8 ff12 	bl	8000618 <__aeabi_dmul>
 80077f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077f8:	1136      	asrs	r6, r6, #4
 80077fa:	2300      	movs	r3, #0
 80077fc:	2502      	movs	r5, #2
 80077fe:	2e00      	cmp	r6, #0
 8007800:	d17e      	bne.n	8007900 <_dtoa_r+0x4d8>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1d0      	bne.n	80077a8 <_dtoa_r+0x380>
 8007806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007808:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8084 	beq.w	800791a <_dtoa_r+0x4f2>
 8007812:	4b96      	ldr	r3, [pc, #600]	; (8007a6c <_dtoa_r+0x644>)
 8007814:	2200      	movs	r2, #0
 8007816:	4640      	mov	r0, r8
 8007818:	4649      	mov	r1, r9
 800781a:	f7f9 f96f 	bl	8000afc <__aeabi_dcmplt>
 800781e:	2800      	cmp	r0, #0
 8007820:	d07b      	beq.n	800791a <_dtoa_r+0x4f2>
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d078      	beq.n	800791a <_dtoa_r+0x4f2>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dd39      	ble.n	80078a2 <_dtoa_r+0x47a>
 800782e:	4b90      	ldr	r3, [pc, #576]	; (8007a70 <_dtoa_r+0x648>)
 8007830:	2200      	movs	r2, #0
 8007832:	4640      	mov	r0, r8
 8007834:	4649      	mov	r1, r9
 8007836:	f7f8 feef 	bl	8000618 <__aeabi_dmul>
 800783a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800783e:	9e01      	ldr	r6, [sp, #4]
 8007840:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007844:	3501      	adds	r5, #1
 8007846:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800784a:	4628      	mov	r0, r5
 800784c:	f7f8 fe7a 	bl	8000544 <__aeabi_i2d>
 8007850:	4642      	mov	r2, r8
 8007852:	464b      	mov	r3, r9
 8007854:	f7f8 fee0 	bl	8000618 <__aeabi_dmul>
 8007858:	4b86      	ldr	r3, [pc, #536]	; (8007a74 <_dtoa_r+0x64c>)
 800785a:	2200      	movs	r2, #0
 800785c:	f7f8 fd26 	bl	80002ac <__adddf3>
 8007860:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	2e00      	cmp	r6, #0
 800786c:	d158      	bne.n	8007920 <_dtoa_r+0x4f8>
 800786e:	4b82      	ldr	r3, [pc, #520]	; (8007a78 <_dtoa_r+0x650>)
 8007870:	2200      	movs	r2, #0
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f8 fd17 	bl	80002a8 <__aeabi_dsub>
 800787a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800787e:	4680      	mov	r8, r0
 8007880:	4689      	mov	r9, r1
 8007882:	f7f9 f959 	bl	8000b38 <__aeabi_dcmpgt>
 8007886:	2800      	cmp	r0, #0
 8007888:	f040 8296 	bne.w	8007db8 <_dtoa_r+0x990>
 800788c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007890:	4640      	mov	r0, r8
 8007892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007896:	4649      	mov	r1, r9
 8007898:	f7f9 f930 	bl	8000afc <__aeabi_dcmplt>
 800789c:	2800      	cmp	r0, #0
 800789e:	f040 8289 	bne.w	8007db4 <_dtoa_r+0x98c>
 80078a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f2c0 814e 	blt.w	8007b4a <_dtoa_r+0x722>
 80078ae:	f1bb 0f0e 	cmp.w	fp, #14
 80078b2:	f300 814a 	bgt.w	8007b4a <_dtoa_r+0x722>
 80078b6:	4b6b      	ldr	r3, [pc, #428]	; (8007a64 <_dtoa_r+0x63c>)
 80078b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f280 80dc 	bge.w	8007a80 <_dtoa_r+0x658>
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f300 80d8 	bgt.w	8007a80 <_dtoa_r+0x658>
 80078d0:	f040 826f 	bne.w	8007db2 <_dtoa_r+0x98a>
 80078d4:	4b68      	ldr	r3, [pc, #416]	; (8007a78 <_dtoa_r+0x650>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f8 fe9c 	bl	8000618 <__aeabi_dmul>
 80078e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078e4:	f7f9 f91e 	bl	8000b24 <__aeabi_dcmpge>
 80078e8:	9e04      	ldr	r6, [sp, #16]
 80078ea:	4637      	mov	r7, r6
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f040 8245 	bne.w	8007d7c <_dtoa_r+0x954>
 80078f2:	9d00      	ldr	r5, [sp, #0]
 80078f4:	2331      	movs	r3, #49	; 0x31
 80078f6:	f805 3b01 	strb.w	r3, [r5], #1
 80078fa:	f10b 0b01 	add.w	fp, fp, #1
 80078fe:	e241      	b.n	8007d84 <_dtoa_r+0x95c>
 8007900:	07f2      	lsls	r2, r6, #31
 8007902:	d505      	bpl.n	8007910 <_dtoa_r+0x4e8>
 8007904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007908:	f7f8 fe86 	bl	8000618 <__aeabi_dmul>
 800790c:	3501      	adds	r5, #1
 800790e:	2301      	movs	r3, #1
 8007910:	1076      	asrs	r6, r6, #1
 8007912:	3708      	adds	r7, #8
 8007914:	e773      	b.n	80077fe <_dtoa_r+0x3d6>
 8007916:	2502      	movs	r5, #2
 8007918:	e775      	b.n	8007806 <_dtoa_r+0x3de>
 800791a:	9e04      	ldr	r6, [sp, #16]
 800791c:	465f      	mov	r7, fp
 800791e:	e792      	b.n	8007846 <_dtoa_r+0x41e>
 8007920:	9900      	ldr	r1, [sp, #0]
 8007922:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <_dtoa_r+0x63c>)
 8007924:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007928:	4431      	add	r1, r6
 800792a:	9102      	str	r1, [sp, #8]
 800792c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800792e:	eeb0 9a47 	vmov.f32	s18, s14
 8007932:	eef0 9a67 	vmov.f32	s19, s15
 8007936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800793a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800793e:	2900      	cmp	r1, #0
 8007940:	d044      	beq.n	80079cc <_dtoa_r+0x5a4>
 8007942:	494e      	ldr	r1, [pc, #312]	; (8007a7c <_dtoa_r+0x654>)
 8007944:	2000      	movs	r0, #0
 8007946:	f7f8 ff91 	bl	800086c <__aeabi_ddiv>
 800794a:	ec53 2b19 	vmov	r2, r3, d9
 800794e:	f7f8 fcab 	bl	80002a8 <__aeabi_dsub>
 8007952:	9d00      	ldr	r5, [sp, #0]
 8007954:	ec41 0b19 	vmov	d9, r0, r1
 8007958:	4649      	mov	r1, r9
 800795a:	4640      	mov	r0, r8
 800795c:	f7f9 f90c 	bl	8000b78 <__aeabi_d2iz>
 8007960:	4606      	mov	r6, r0
 8007962:	f7f8 fdef 	bl	8000544 <__aeabi_i2d>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4640      	mov	r0, r8
 800796c:	4649      	mov	r1, r9
 800796e:	f7f8 fc9b 	bl	80002a8 <__aeabi_dsub>
 8007972:	3630      	adds	r6, #48	; 0x30
 8007974:	f805 6b01 	strb.w	r6, [r5], #1
 8007978:	ec53 2b19 	vmov	r2, r3, d9
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	f7f9 f8bc 	bl	8000afc <__aeabi_dcmplt>
 8007984:	2800      	cmp	r0, #0
 8007986:	d164      	bne.n	8007a52 <_dtoa_r+0x62a>
 8007988:	4642      	mov	r2, r8
 800798a:	464b      	mov	r3, r9
 800798c:	4937      	ldr	r1, [pc, #220]	; (8007a6c <_dtoa_r+0x644>)
 800798e:	2000      	movs	r0, #0
 8007990:	f7f8 fc8a 	bl	80002a8 <__aeabi_dsub>
 8007994:	ec53 2b19 	vmov	r2, r3, d9
 8007998:	f7f9 f8b0 	bl	8000afc <__aeabi_dcmplt>
 800799c:	2800      	cmp	r0, #0
 800799e:	f040 80b6 	bne.w	8007b0e <_dtoa_r+0x6e6>
 80079a2:	9b02      	ldr	r3, [sp, #8]
 80079a4:	429d      	cmp	r5, r3
 80079a6:	f43f af7c 	beq.w	80078a2 <_dtoa_r+0x47a>
 80079aa:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <_dtoa_r+0x648>)
 80079ac:	ec51 0b19 	vmov	r0, r1, d9
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7f8 fe31 	bl	8000618 <__aeabi_dmul>
 80079b6:	4b2e      	ldr	r3, [pc, #184]	; (8007a70 <_dtoa_r+0x648>)
 80079b8:	ec41 0b19 	vmov	d9, r0, r1
 80079bc:	2200      	movs	r2, #0
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f8 fe29 	bl	8000618 <__aeabi_dmul>
 80079c6:	4680      	mov	r8, r0
 80079c8:	4689      	mov	r9, r1
 80079ca:	e7c5      	b.n	8007958 <_dtoa_r+0x530>
 80079cc:	ec51 0b17 	vmov	r0, r1, d7
 80079d0:	f7f8 fe22 	bl	8000618 <__aeabi_dmul>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	9d00      	ldr	r5, [sp, #0]
 80079d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079da:	ec41 0b19 	vmov	d9, r0, r1
 80079de:	4649      	mov	r1, r9
 80079e0:	4640      	mov	r0, r8
 80079e2:	f7f9 f8c9 	bl	8000b78 <__aeabi_d2iz>
 80079e6:	4606      	mov	r6, r0
 80079e8:	f7f8 fdac 	bl	8000544 <__aeabi_i2d>
 80079ec:	3630      	adds	r6, #48	; 0x30
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	f7f8 fc57 	bl	80002a8 <__aeabi_dsub>
 80079fa:	f805 6b01 	strb.w	r6, [r5], #1
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	429d      	cmp	r5, r3
 8007a02:	4680      	mov	r8, r0
 8007a04:	4689      	mov	r9, r1
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	d124      	bne.n	8007a56 <_dtoa_r+0x62e>
 8007a0c:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <_dtoa_r+0x654>)
 8007a0e:	ec51 0b19 	vmov	r0, r1, d9
 8007a12:	f7f8 fc4b 	bl	80002ac <__adddf3>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f9 f88b 	bl	8000b38 <__aeabi_dcmpgt>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d173      	bne.n	8007b0e <_dtoa_r+0x6e6>
 8007a26:	ec53 2b19 	vmov	r2, r3, d9
 8007a2a:	4914      	ldr	r1, [pc, #80]	; (8007a7c <_dtoa_r+0x654>)
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7f8 fc3b 	bl	80002a8 <__aeabi_dsub>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4640      	mov	r0, r8
 8007a38:	4649      	mov	r1, r9
 8007a3a:	f7f9 f85f 	bl	8000afc <__aeabi_dcmplt>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f af2f 	beq.w	80078a2 <_dtoa_r+0x47a>
 8007a44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a46:	1e6b      	subs	r3, r5, #1
 8007a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a4e:	2b30      	cmp	r3, #48	; 0x30
 8007a50:	d0f8      	beq.n	8007a44 <_dtoa_r+0x61c>
 8007a52:	46bb      	mov	fp, r7
 8007a54:	e04a      	b.n	8007aec <_dtoa_r+0x6c4>
 8007a56:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <_dtoa_r+0x648>)
 8007a58:	f7f8 fdde 	bl	8000618 <__aeabi_dmul>
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	e7bd      	b.n	80079de <_dtoa_r+0x5b6>
 8007a62:	bf00      	nop
 8007a64:	0800abf8 	.word	0x0800abf8
 8007a68:	0800abd0 	.word	0x0800abd0
 8007a6c:	3ff00000 	.word	0x3ff00000
 8007a70:	40240000 	.word	0x40240000
 8007a74:	401c0000 	.word	0x401c0000
 8007a78:	40140000 	.word	0x40140000
 8007a7c:	3fe00000 	.word	0x3fe00000
 8007a80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a84:	9d00      	ldr	r5, [sp, #0]
 8007a86:	4642      	mov	r2, r8
 8007a88:	464b      	mov	r3, r9
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 feed 	bl	800086c <__aeabi_ddiv>
 8007a92:	f7f9 f871 	bl	8000b78 <__aeabi_d2iz>
 8007a96:	9001      	str	r0, [sp, #4]
 8007a98:	f7f8 fd54 	bl	8000544 <__aeabi_i2d>
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	f7f8 fdba 	bl	8000618 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f8 fbfc 	bl	80002a8 <__aeabi_dsub>
 8007ab0:	9e01      	ldr	r6, [sp, #4]
 8007ab2:	9f04      	ldr	r7, [sp, #16]
 8007ab4:	3630      	adds	r6, #48	; 0x30
 8007ab6:	f805 6b01 	strb.w	r6, [r5], #1
 8007aba:	9e00      	ldr	r6, [sp, #0]
 8007abc:	1bae      	subs	r6, r5, r6
 8007abe:	42b7      	cmp	r7, r6
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	d134      	bne.n	8007b30 <_dtoa_r+0x708>
 8007ac6:	f7f8 fbf1 	bl	80002ac <__adddf3>
 8007aca:	4642      	mov	r2, r8
 8007acc:	464b      	mov	r3, r9
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	f7f9 f831 	bl	8000b38 <__aeabi_dcmpgt>
 8007ad6:	b9c8      	cbnz	r0, 8007b0c <_dtoa_r+0x6e4>
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f9 f802 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ae4:	b110      	cbz	r0, 8007aec <_dtoa_r+0x6c4>
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	07db      	lsls	r3, r3, #31
 8007aea:	d40f      	bmi.n	8007b0c <_dtoa_r+0x6e4>
 8007aec:	4651      	mov	r1, sl
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fb18 	bl	8008124 <_Bfree>
 8007af4:	2300      	movs	r3, #0
 8007af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007af8:	702b      	strb	r3, [r5, #0]
 8007afa:	f10b 0301 	add.w	r3, fp, #1
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f43f ace2 	beq.w	80074cc <_dtoa_r+0xa4>
 8007b08:	601d      	str	r5, [r3, #0]
 8007b0a:	e4df      	b.n	80074cc <_dtoa_r+0xa4>
 8007b0c:	465f      	mov	r7, fp
 8007b0e:	462b      	mov	r3, r5
 8007b10:	461d      	mov	r5, r3
 8007b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b16:	2a39      	cmp	r2, #57	; 0x39
 8007b18:	d106      	bne.n	8007b28 <_dtoa_r+0x700>
 8007b1a:	9a00      	ldr	r2, [sp, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d1f7      	bne.n	8007b10 <_dtoa_r+0x6e8>
 8007b20:	9900      	ldr	r1, [sp, #0]
 8007b22:	2230      	movs	r2, #48	; 0x30
 8007b24:	3701      	adds	r7, #1
 8007b26:	700a      	strb	r2, [r1, #0]
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e790      	b.n	8007a52 <_dtoa_r+0x62a>
 8007b30:	4ba3      	ldr	r3, [pc, #652]	; (8007dc0 <_dtoa_r+0x998>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fd70 	bl	8000618 <__aeabi_dmul>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	f7f8 ffd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d09e      	beq.n	8007a86 <_dtoa_r+0x65e>
 8007b48:	e7d0      	b.n	8007aec <_dtoa_r+0x6c4>
 8007b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	f000 80ca 	beq.w	8007ce6 <_dtoa_r+0x8be>
 8007b52:	9a07      	ldr	r2, [sp, #28]
 8007b54:	2a01      	cmp	r2, #1
 8007b56:	f300 80ad 	bgt.w	8007cb4 <_dtoa_r+0x88c>
 8007b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b5c:	2a00      	cmp	r2, #0
 8007b5e:	f000 80a5 	beq.w	8007cac <_dtoa_r+0x884>
 8007b62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b66:	9e08      	ldr	r6, [sp, #32]
 8007b68:	9d05      	ldr	r5, [sp, #20]
 8007b6a:	9a05      	ldr	r2, [sp, #20]
 8007b6c:	441a      	add	r2, r3
 8007b6e:	9205      	str	r2, [sp, #20]
 8007b70:	9a06      	ldr	r2, [sp, #24]
 8007b72:	2101      	movs	r1, #1
 8007b74:	441a      	add	r2, r3
 8007b76:	4620      	mov	r0, r4
 8007b78:	9206      	str	r2, [sp, #24]
 8007b7a:	f000 fbd3 	bl	8008324 <__i2b>
 8007b7e:	4607      	mov	r7, r0
 8007b80:	b165      	cbz	r5, 8007b9c <_dtoa_r+0x774>
 8007b82:	9b06      	ldr	r3, [sp, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dd09      	ble.n	8007b9c <_dtoa_r+0x774>
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	9a05      	ldr	r2, [sp, #20]
 8007b8c:	bfa8      	it	ge
 8007b8e:	462b      	movge	r3, r5
 8007b90:	1ad2      	subs	r2, r2, r3
 8007b92:	9205      	str	r2, [sp, #20]
 8007b94:	9a06      	ldr	r2, [sp, #24]
 8007b96:	1aed      	subs	r5, r5, r3
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	9306      	str	r3, [sp, #24]
 8007b9c:	9b08      	ldr	r3, [sp, #32]
 8007b9e:	b1f3      	cbz	r3, 8007bde <_dtoa_r+0x7b6>
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80a3 	beq.w	8007cee <_dtoa_r+0x8c6>
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	dd10      	ble.n	8007bce <_dtoa_r+0x7a6>
 8007bac:	4639      	mov	r1, r7
 8007bae:	4632      	mov	r2, r6
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fc77 	bl	80084a4 <__pow5mult>
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	4601      	mov	r1, r0
 8007bba:	4607      	mov	r7, r0
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fbc7 	bl	8008350 <__multiply>
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 faac 	bl	8008124 <_Bfree>
 8007bcc:	46c2      	mov	sl, r8
 8007bce:	9b08      	ldr	r3, [sp, #32]
 8007bd0:	1b9a      	subs	r2, r3, r6
 8007bd2:	d004      	beq.n	8007bde <_dtoa_r+0x7b6>
 8007bd4:	4651      	mov	r1, sl
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 fc64 	bl	80084a4 <__pow5mult>
 8007bdc:	4682      	mov	sl, r0
 8007bde:	2101      	movs	r1, #1
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fb9f 	bl	8008324 <__i2b>
 8007be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	4606      	mov	r6, r0
 8007bec:	f340 8081 	ble.w	8007cf2 <_dtoa_r+0x8ca>
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fc55 	bl	80084a4 <__pow5mult>
 8007bfa:	9b07      	ldr	r3, [sp, #28]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	4606      	mov	r6, r0
 8007c00:	dd7a      	ble.n	8007cf8 <_dtoa_r+0x8d0>
 8007c02:	f04f 0800 	mov.w	r8, #0
 8007c06:	6933      	ldr	r3, [r6, #16]
 8007c08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c0c:	6918      	ldr	r0, [r3, #16]
 8007c0e:	f000 fb3b 	bl	8008288 <__hi0bits>
 8007c12:	f1c0 0020 	rsb	r0, r0, #32
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	4418      	add	r0, r3
 8007c1a:	f010 001f 	ands.w	r0, r0, #31
 8007c1e:	f000 8094 	beq.w	8007d4a <_dtoa_r+0x922>
 8007c22:	f1c0 0320 	rsb	r3, r0, #32
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	f340 8085 	ble.w	8007d36 <_dtoa_r+0x90e>
 8007c2c:	9b05      	ldr	r3, [sp, #20]
 8007c2e:	f1c0 001c 	rsb	r0, r0, #28
 8007c32:	4403      	add	r3, r0
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	4403      	add	r3, r0
 8007c3a:	4405      	add	r5, r0
 8007c3c:	9306      	str	r3, [sp, #24]
 8007c3e:	9b05      	ldr	r3, [sp, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dd05      	ble.n	8007c50 <_dtoa_r+0x828>
 8007c44:	4651      	mov	r1, sl
 8007c46:	461a      	mov	r2, r3
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fc85 	bl	8008558 <__lshift>
 8007c4e:	4682      	mov	sl, r0
 8007c50:	9b06      	ldr	r3, [sp, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dd05      	ble.n	8007c62 <_dtoa_r+0x83a>
 8007c56:	4631      	mov	r1, r6
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fc7c 	bl	8008558 <__lshift>
 8007c60:	4606      	mov	r6, r0
 8007c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d072      	beq.n	8007d4e <_dtoa_r+0x926>
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	f000 fce0 	bl	8008630 <__mcmp>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	da6c      	bge.n	8007d4e <_dtoa_r+0x926>
 8007c74:	2300      	movs	r3, #0
 8007c76:	4651      	mov	r1, sl
 8007c78:	220a      	movs	r2, #10
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 fa74 	bl	8008168 <__multadd>
 8007c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c86:	4682      	mov	sl, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 81b0 	beq.w	8007fee <_dtoa_r+0xbc6>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4639      	mov	r1, r7
 8007c92:	220a      	movs	r2, #10
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fa67 	bl	8008168 <__multadd>
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	f300 8096 	bgt.w	8007dd0 <_dtoa_r+0x9a8>
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	dc59      	bgt.n	8007d5e <_dtoa_r+0x936>
 8007caa:	e091      	b.n	8007dd0 <_dtoa_r+0x9a8>
 8007cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cb2:	e758      	b.n	8007b66 <_dtoa_r+0x73e>
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	1e5e      	subs	r6, r3, #1
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	42b3      	cmp	r3, r6
 8007cbc:	bfbf      	itttt	lt
 8007cbe:	9b08      	ldrlt	r3, [sp, #32]
 8007cc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007cc2:	9608      	strlt	r6, [sp, #32]
 8007cc4:	1af3      	sublt	r3, r6, r3
 8007cc6:	bfb4      	ite	lt
 8007cc8:	18d2      	addlt	r2, r2, r3
 8007cca:	1b9e      	subge	r6, r3, r6
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	bfbc      	itt	lt
 8007cd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007cd2:	2600      	movlt	r6, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfb7      	itett	lt
 8007cd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007cdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007ce0:	1a9d      	sublt	r5, r3, r2
 8007ce2:	2300      	movlt	r3, #0
 8007ce4:	e741      	b.n	8007b6a <_dtoa_r+0x742>
 8007ce6:	9e08      	ldr	r6, [sp, #32]
 8007ce8:	9d05      	ldr	r5, [sp, #20]
 8007cea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cec:	e748      	b.n	8007b80 <_dtoa_r+0x758>
 8007cee:	9a08      	ldr	r2, [sp, #32]
 8007cf0:	e770      	b.n	8007bd4 <_dtoa_r+0x7ac>
 8007cf2:	9b07      	ldr	r3, [sp, #28]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	dc19      	bgt.n	8007d2c <_dtoa_r+0x904>
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	b9bb      	cbnz	r3, 8007d2c <_dtoa_r+0x904>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d02:	b99b      	cbnz	r3, 8007d2c <_dtoa_r+0x904>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d0a:	0d1b      	lsrs	r3, r3, #20
 8007d0c:	051b      	lsls	r3, r3, #20
 8007d0e:	b183      	cbz	r3, 8007d32 <_dtoa_r+0x90a>
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	3301      	adds	r3, #1
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	f04f 0801 	mov.w	r8, #1
 8007d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f af6f 	bne.w	8007c06 <_dtoa_r+0x7de>
 8007d28:	2001      	movs	r0, #1
 8007d2a:	e774      	b.n	8007c16 <_dtoa_r+0x7ee>
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	e7f6      	b.n	8007d20 <_dtoa_r+0x8f8>
 8007d32:	4698      	mov	r8, r3
 8007d34:	e7f4      	b.n	8007d20 <_dtoa_r+0x8f8>
 8007d36:	d082      	beq.n	8007c3e <_dtoa_r+0x816>
 8007d38:	9a05      	ldr	r2, [sp, #20]
 8007d3a:	331c      	adds	r3, #28
 8007d3c:	441a      	add	r2, r3
 8007d3e:	9205      	str	r2, [sp, #20]
 8007d40:	9a06      	ldr	r2, [sp, #24]
 8007d42:	441a      	add	r2, r3
 8007d44:	441d      	add	r5, r3
 8007d46:	9206      	str	r2, [sp, #24]
 8007d48:	e779      	b.n	8007c3e <_dtoa_r+0x816>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	e7f4      	b.n	8007d38 <_dtoa_r+0x910>
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc37      	bgt.n	8007dc4 <_dtoa_r+0x99c>
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	dd34      	ble.n	8007dc4 <_dtoa_r+0x99c>
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	b963      	cbnz	r3, 8007d7c <_dtoa_r+0x954>
 8007d62:	4631      	mov	r1, r6
 8007d64:	2205      	movs	r2, #5
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 f9fe 	bl	8008168 <__multadd>
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4606      	mov	r6, r0
 8007d70:	4650      	mov	r0, sl
 8007d72:	f000 fc5d 	bl	8008630 <__mcmp>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f73f adbb 	bgt.w	80078f2 <_dtoa_r+0x4ca>
 8007d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d7e:	9d00      	ldr	r5, [sp, #0]
 8007d80:	ea6f 0b03 	mvn.w	fp, r3
 8007d84:	f04f 0800 	mov.w	r8, #0
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f9ca 	bl	8008124 <_Bfree>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	f43f aeab 	beq.w	8007aec <_dtoa_r+0x6c4>
 8007d96:	f1b8 0f00 	cmp.w	r8, #0
 8007d9a:	d005      	beq.n	8007da8 <_dtoa_r+0x980>
 8007d9c:	45b8      	cmp	r8, r7
 8007d9e:	d003      	beq.n	8007da8 <_dtoa_r+0x980>
 8007da0:	4641      	mov	r1, r8
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f9be 	bl	8008124 <_Bfree>
 8007da8:	4639      	mov	r1, r7
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f9ba 	bl	8008124 <_Bfree>
 8007db0:	e69c      	b.n	8007aec <_dtoa_r+0x6c4>
 8007db2:	2600      	movs	r6, #0
 8007db4:	4637      	mov	r7, r6
 8007db6:	e7e1      	b.n	8007d7c <_dtoa_r+0x954>
 8007db8:	46bb      	mov	fp, r7
 8007dba:	4637      	mov	r7, r6
 8007dbc:	e599      	b.n	80078f2 <_dtoa_r+0x4ca>
 8007dbe:	bf00      	nop
 8007dc0:	40240000 	.word	0x40240000
 8007dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80c8 	beq.w	8007f5c <_dtoa_r+0xb34>
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	dd05      	ble.n	8007de0 <_dtoa_r+0x9b8>
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fbbd 	bl	8008558 <__lshift>
 8007dde:	4607      	mov	r7, r0
 8007de0:	f1b8 0f00 	cmp.w	r8, #0
 8007de4:	d05b      	beq.n	8007e9e <_dtoa_r+0xa76>
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 f95b 	bl	80080a4 <_Balloc>
 8007dee:	4605      	mov	r5, r0
 8007df0:	b928      	cbnz	r0, 8007dfe <_dtoa_r+0x9d6>
 8007df2:	4b83      	ldr	r3, [pc, #524]	; (8008000 <_dtoa_r+0xbd8>)
 8007df4:	4602      	mov	r2, r0
 8007df6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007dfa:	f7ff bb2e 	b.w	800745a <_dtoa_r+0x32>
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	3202      	adds	r2, #2
 8007e02:	0092      	lsls	r2, r2, #2
 8007e04:	f107 010c 	add.w	r1, r7, #12
 8007e08:	300c      	adds	r0, #12
 8007e0a:	f7ff fa70 	bl	80072ee <memcpy>
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4629      	mov	r1, r5
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fba0 	bl	8008558 <__lshift>
 8007e18:	9b00      	ldr	r3, [sp, #0]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e22:	4413      	add	r3, r2
 8007e24:	9308      	str	r3, [sp, #32]
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	46b8      	mov	r8, r7
 8007e2e:	9306      	str	r3, [sp, #24]
 8007e30:	4607      	mov	r7, r0
 8007e32:	9b04      	ldr	r3, [sp, #16]
 8007e34:	4631      	mov	r1, r6
 8007e36:	3b01      	subs	r3, #1
 8007e38:	4650      	mov	r0, sl
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	f7ff fa6c 	bl	8007318 <quorem>
 8007e40:	4641      	mov	r1, r8
 8007e42:	9002      	str	r0, [sp, #8]
 8007e44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e48:	4650      	mov	r0, sl
 8007e4a:	f000 fbf1 	bl	8008630 <__mcmp>
 8007e4e:	463a      	mov	r2, r7
 8007e50:	9005      	str	r0, [sp, #20]
 8007e52:	4631      	mov	r1, r6
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 fc07 	bl	8008668 <__mdiff>
 8007e5a:	68c2      	ldr	r2, [r0, #12]
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	bb02      	cbnz	r2, 8007ea2 <_dtoa_r+0xa7a>
 8007e60:	4601      	mov	r1, r0
 8007e62:	4650      	mov	r0, sl
 8007e64:	f000 fbe4 	bl	8008630 <__mcmp>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e70:	f000 f958 	bl	8008124 <_Bfree>
 8007e74:	9b07      	ldr	r3, [sp, #28]
 8007e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e78:	9d04      	ldr	r5, [sp, #16]
 8007e7a:	ea43 0102 	orr.w	r1, r3, r2
 8007e7e:	9b06      	ldr	r3, [sp, #24]
 8007e80:	4319      	orrs	r1, r3
 8007e82:	d110      	bne.n	8007ea6 <_dtoa_r+0xa7e>
 8007e84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e88:	d029      	beq.n	8007ede <_dtoa_r+0xab6>
 8007e8a:	9b05      	ldr	r3, [sp, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dd02      	ble.n	8007e96 <_dtoa_r+0xa6e>
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	f883 9000 	strb.w	r9, [r3]
 8007e9c:	e774      	b.n	8007d88 <_dtoa_r+0x960>
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	e7ba      	b.n	8007e18 <_dtoa_r+0x9f0>
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	e7e1      	b.n	8007e6a <_dtoa_r+0xa42>
 8007ea6:	9b05      	ldr	r3, [sp, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	db04      	blt.n	8007eb6 <_dtoa_r+0xa8e>
 8007eac:	9907      	ldr	r1, [sp, #28]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	9906      	ldr	r1, [sp, #24]
 8007eb2:	430b      	orrs	r3, r1
 8007eb4:	d120      	bne.n	8007ef8 <_dtoa_r+0xad0>
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	dded      	ble.n	8007e96 <_dtoa_r+0xa6e>
 8007eba:	4651      	mov	r1, sl
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 fb4a 	bl	8008558 <__lshift>
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4682      	mov	sl, r0
 8007ec8:	f000 fbb2 	bl	8008630 <__mcmp>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	dc03      	bgt.n	8007ed8 <_dtoa_r+0xab0>
 8007ed0:	d1e1      	bne.n	8007e96 <_dtoa_r+0xa6e>
 8007ed2:	f019 0f01 	tst.w	r9, #1
 8007ed6:	d0de      	beq.n	8007e96 <_dtoa_r+0xa6e>
 8007ed8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007edc:	d1d8      	bne.n	8007e90 <_dtoa_r+0xa68>
 8007ede:	9a01      	ldr	r2, [sp, #4]
 8007ee0:	2339      	movs	r3, #57	; 0x39
 8007ee2:	7013      	strb	r3, [r2, #0]
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eee:	2a39      	cmp	r2, #57	; 0x39
 8007ef0:	d06c      	beq.n	8007fcc <_dtoa_r+0xba4>
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e747      	b.n	8007d88 <_dtoa_r+0x960>
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	dd07      	ble.n	8007f0c <_dtoa_r+0xae4>
 8007efc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f00:	d0ed      	beq.n	8007ede <_dtoa_r+0xab6>
 8007f02:	9a01      	ldr	r2, [sp, #4]
 8007f04:	f109 0301 	add.w	r3, r9, #1
 8007f08:	7013      	strb	r3, [r2, #0]
 8007f0a:	e73d      	b.n	8007d88 <_dtoa_r+0x960>
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	9a08      	ldr	r2, [sp, #32]
 8007f10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d043      	beq.n	8007fa0 <_dtoa_r+0xb78>
 8007f18:	4651      	mov	r1, sl
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	220a      	movs	r2, #10
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 f922 	bl	8008168 <__multadd>
 8007f24:	45b8      	cmp	r8, r7
 8007f26:	4682      	mov	sl, r0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	f04f 020a 	mov.w	r2, #10
 8007f30:	4641      	mov	r1, r8
 8007f32:	4620      	mov	r0, r4
 8007f34:	d107      	bne.n	8007f46 <_dtoa_r+0xb1e>
 8007f36:	f000 f917 	bl	8008168 <__multadd>
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	3301      	adds	r3, #1
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	e775      	b.n	8007e32 <_dtoa_r+0xa0a>
 8007f46:	f000 f90f 	bl	8008168 <__multadd>
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	220a      	movs	r2, #10
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f908 	bl	8008168 <__multadd>
 8007f58:	4607      	mov	r7, r0
 8007f5a:	e7f0      	b.n	8007f3e <_dtoa_r+0xb16>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9d00      	ldr	r5, [sp, #0]
 8007f62:	4631      	mov	r1, r6
 8007f64:	4650      	mov	r0, sl
 8007f66:	f7ff f9d7 	bl	8007318 <quorem>
 8007f6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f6e:	9b00      	ldr	r3, [sp, #0]
 8007f70:	f805 9b01 	strb.w	r9, [r5], #1
 8007f74:	1aea      	subs	r2, r5, r3
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	dd07      	ble.n	8007f8c <_dtoa_r+0xb64>
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	2300      	movs	r3, #0
 8007f80:	220a      	movs	r2, #10
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 f8f0 	bl	8008168 <__multadd>
 8007f88:	4682      	mov	sl, r0
 8007f8a:	e7ea      	b.n	8007f62 <_dtoa_r+0xb3a>
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfc8      	it	gt
 8007f92:	461d      	movgt	r5, r3
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	bfd8      	it	le
 8007f98:	2501      	movle	r5, #1
 8007f9a:	441d      	add	r5, r3
 8007f9c:	f04f 0800 	mov.w	r8, #0
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fad7 	bl	8008558 <__lshift>
 8007faa:	4631      	mov	r1, r6
 8007fac:	4682      	mov	sl, r0
 8007fae:	f000 fb3f 	bl	8008630 <__mcmp>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	dc96      	bgt.n	8007ee4 <_dtoa_r+0xabc>
 8007fb6:	d102      	bne.n	8007fbe <_dtoa_r+0xb96>
 8007fb8:	f019 0f01 	tst.w	r9, #1
 8007fbc:	d192      	bne.n	8007ee4 <_dtoa_r+0xabc>
 8007fbe:	462b      	mov	r3, r5
 8007fc0:	461d      	mov	r5, r3
 8007fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fc6:	2a30      	cmp	r2, #48	; 0x30
 8007fc8:	d0fa      	beq.n	8007fc0 <_dtoa_r+0xb98>
 8007fca:	e6dd      	b.n	8007d88 <_dtoa_r+0x960>
 8007fcc:	9a00      	ldr	r2, [sp, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d189      	bne.n	8007ee6 <_dtoa_r+0xabe>
 8007fd2:	f10b 0b01 	add.w	fp, fp, #1
 8007fd6:	2331      	movs	r3, #49	; 0x31
 8007fd8:	e796      	b.n	8007f08 <_dtoa_r+0xae0>
 8007fda:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <_dtoa_r+0xbdc>)
 8007fdc:	f7ff ba99 	b.w	8007512 <_dtoa_r+0xea>
 8007fe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f47f aa6d 	bne.w	80074c2 <_dtoa_r+0x9a>
 8007fe8:	4b07      	ldr	r3, [pc, #28]	; (8008008 <_dtoa_r+0xbe0>)
 8007fea:	f7ff ba92 	b.w	8007512 <_dtoa_r+0xea>
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dcb5      	bgt.n	8007f60 <_dtoa_r+0xb38>
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	f73f aeb1 	bgt.w	8007d5e <_dtoa_r+0x936>
 8007ffc:	e7b0      	b.n	8007f60 <_dtoa_r+0xb38>
 8007ffe:	bf00      	nop
 8008000:	0800ab61 	.word	0x0800ab61
 8008004:	0800aabc 	.word	0x0800aabc
 8008008:	0800aae5 	.word	0x0800aae5

0800800c <_free_r>:
 800800c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800800e:	2900      	cmp	r1, #0
 8008010:	d044      	beq.n	800809c <_free_r+0x90>
 8008012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008016:	9001      	str	r0, [sp, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f1a1 0404 	sub.w	r4, r1, #4
 800801e:	bfb8      	it	lt
 8008020:	18e4      	addlt	r4, r4, r3
 8008022:	f7fe f82b 	bl	800607c <__malloc_lock>
 8008026:	4a1e      	ldr	r2, [pc, #120]	; (80080a0 <_free_r+0x94>)
 8008028:	9801      	ldr	r0, [sp, #4]
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	b933      	cbnz	r3, 800803c <_free_r+0x30>
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	6014      	str	r4, [r2, #0]
 8008032:	b003      	add	sp, #12
 8008034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008038:	f7fe b826 	b.w	8006088 <__malloc_unlock>
 800803c:	42a3      	cmp	r3, r4
 800803e:	d908      	bls.n	8008052 <_free_r+0x46>
 8008040:	6825      	ldr	r5, [r4, #0]
 8008042:	1961      	adds	r1, r4, r5
 8008044:	428b      	cmp	r3, r1
 8008046:	bf01      	itttt	eq
 8008048:	6819      	ldreq	r1, [r3, #0]
 800804a:	685b      	ldreq	r3, [r3, #4]
 800804c:	1949      	addeq	r1, r1, r5
 800804e:	6021      	streq	r1, [r4, #0]
 8008050:	e7ed      	b.n	800802e <_free_r+0x22>
 8008052:	461a      	mov	r2, r3
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	b10b      	cbz	r3, 800805c <_free_r+0x50>
 8008058:	42a3      	cmp	r3, r4
 800805a:	d9fa      	bls.n	8008052 <_free_r+0x46>
 800805c:	6811      	ldr	r1, [r2, #0]
 800805e:	1855      	adds	r5, r2, r1
 8008060:	42a5      	cmp	r5, r4
 8008062:	d10b      	bne.n	800807c <_free_r+0x70>
 8008064:	6824      	ldr	r4, [r4, #0]
 8008066:	4421      	add	r1, r4
 8008068:	1854      	adds	r4, r2, r1
 800806a:	42a3      	cmp	r3, r4
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	d1e0      	bne.n	8008032 <_free_r+0x26>
 8008070:	681c      	ldr	r4, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	6053      	str	r3, [r2, #4]
 8008076:	440c      	add	r4, r1
 8008078:	6014      	str	r4, [r2, #0]
 800807a:	e7da      	b.n	8008032 <_free_r+0x26>
 800807c:	d902      	bls.n	8008084 <_free_r+0x78>
 800807e:	230c      	movs	r3, #12
 8008080:	6003      	str	r3, [r0, #0]
 8008082:	e7d6      	b.n	8008032 <_free_r+0x26>
 8008084:	6825      	ldr	r5, [r4, #0]
 8008086:	1961      	adds	r1, r4, r5
 8008088:	428b      	cmp	r3, r1
 800808a:	bf04      	itt	eq
 800808c:	6819      	ldreq	r1, [r3, #0]
 800808e:	685b      	ldreq	r3, [r3, #4]
 8008090:	6063      	str	r3, [r4, #4]
 8008092:	bf04      	itt	eq
 8008094:	1949      	addeq	r1, r1, r5
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	6054      	str	r4, [r2, #4]
 800809a:	e7ca      	b.n	8008032 <_free_r+0x26>
 800809c:	b003      	add	sp, #12
 800809e:	bd30      	pop	{r4, r5, pc}
 80080a0:	20000594 	.word	0x20000594

080080a4 <_Balloc>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	69c6      	ldr	r6, [r0, #28]
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	b976      	cbnz	r6, 80080cc <_Balloc+0x28>
 80080ae:	2010      	movs	r0, #16
 80080b0:	f7fd ff34 	bl	8005f1c <malloc>
 80080b4:	4602      	mov	r2, r0
 80080b6:	61e0      	str	r0, [r4, #28]
 80080b8:	b920      	cbnz	r0, 80080c4 <_Balloc+0x20>
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <_Balloc+0x78>)
 80080bc:	4818      	ldr	r0, [pc, #96]	; (8008120 <_Balloc+0x7c>)
 80080be:	216b      	movs	r1, #107	; 0x6b
 80080c0:	f001 ff36 	bl	8009f30 <__assert_func>
 80080c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c8:	6006      	str	r6, [r0, #0]
 80080ca:	60c6      	str	r6, [r0, #12]
 80080cc:	69e6      	ldr	r6, [r4, #28]
 80080ce:	68f3      	ldr	r3, [r6, #12]
 80080d0:	b183      	cbz	r3, 80080f4 <_Balloc+0x50>
 80080d2:	69e3      	ldr	r3, [r4, #28]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080da:	b9b8      	cbnz	r0, 800810c <_Balloc+0x68>
 80080dc:	2101      	movs	r1, #1
 80080de:	fa01 f605 	lsl.w	r6, r1, r5
 80080e2:	1d72      	adds	r2, r6, #5
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	4620      	mov	r0, r4
 80080e8:	f001 ff40 	bl	8009f6c <_calloc_r>
 80080ec:	b160      	cbz	r0, 8008108 <_Balloc+0x64>
 80080ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080f2:	e00e      	b.n	8008112 <_Balloc+0x6e>
 80080f4:	2221      	movs	r2, #33	; 0x21
 80080f6:	2104      	movs	r1, #4
 80080f8:	4620      	mov	r0, r4
 80080fa:	f001 ff37 	bl	8009f6c <_calloc_r>
 80080fe:	69e3      	ldr	r3, [r4, #28]
 8008100:	60f0      	str	r0, [r6, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e4      	bne.n	80080d2 <_Balloc+0x2e>
 8008108:	2000      	movs	r0, #0
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	6802      	ldr	r2, [r0, #0]
 800810e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008112:	2300      	movs	r3, #0
 8008114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008118:	e7f7      	b.n	800810a <_Balloc+0x66>
 800811a:	bf00      	nop
 800811c:	0800aaf2 	.word	0x0800aaf2
 8008120:	0800ab72 	.word	0x0800ab72

08008124 <_Bfree>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	69c6      	ldr	r6, [r0, #28]
 8008128:	4605      	mov	r5, r0
 800812a:	460c      	mov	r4, r1
 800812c:	b976      	cbnz	r6, 800814c <_Bfree+0x28>
 800812e:	2010      	movs	r0, #16
 8008130:	f7fd fef4 	bl	8005f1c <malloc>
 8008134:	4602      	mov	r2, r0
 8008136:	61e8      	str	r0, [r5, #28]
 8008138:	b920      	cbnz	r0, 8008144 <_Bfree+0x20>
 800813a:	4b09      	ldr	r3, [pc, #36]	; (8008160 <_Bfree+0x3c>)
 800813c:	4809      	ldr	r0, [pc, #36]	; (8008164 <_Bfree+0x40>)
 800813e:	218f      	movs	r1, #143	; 0x8f
 8008140:	f001 fef6 	bl	8009f30 <__assert_func>
 8008144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008148:	6006      	str	r6, [r0, #0]
 800814a:	60c6      	str	r6, [r0, #12]
 800814c:	b13c      	cbz	r4, 800815e <_Bfree+0x3a>
 800814e:	69eb      	ldr	r3, [r5, #28]
 8008150:	6862      	ldr	r2, [r4, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008158:	6021      	str	r1, [r4, #0]
 800815a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	0800aaf2 	.word	0x0800aaf2
 8008164:	0800ab72 	.word	0x0800ab72

08008168 <__multadd>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	690d      	ldr	r5, [r1, #16]
 800816e:	4607      	mov	r7, r0
 8008170:	460c      	mov	r4, r1
 8008172:	461e      	mov	r6, r3
 8008174:	f101 0c14 	add.w	ip, r1, #20
 8008178:	2000      	movs	r0, #0
 800817a:	f8dc 3000 	ldr.w	r3, [ip]
 800817e:	b299      	uxth	r1, r3
 8008180:	fb02 6101 	mla	r1, r2, r1, r6
 8008184:	0c1e      	lsrs	r6, r3, #16
 8008186:	0c0b      	lsrs	r3, r1, #16
 8008188:	fb02 3306 	mla	r3, r2, r6, r3
 800818c:	b289      	uxth	r1, r1
 800818e:	3001      	adds	r0, #1
 8008190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008194:	4285      	cmp	r5, r0
 8008196:	f84c 1b04 	str.w	r1, [ip], #4
 800819a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800819e:	dcec      	bgt.n	800817a <__multadd+0x12>
 80081a0:	b30e      	cbz	r6, 80081e6 <__multadd+0x7e>
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	42ab      	cmp	r3, r5
 80081a6:	dc19      	bgt.n	80081dc <__multadd+0x74>
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4638      	mov	r0, r7
 80081ac:	3101      	adds	r1, #1
 80081ae:	f7ff ff79 	bl	80080a4 <_Balloc>
 80081b2:	4680      	mov	r8, r0
 80081b4:	b928      	cbnz	r0, 80081c2 <__multadd+0x5a>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <__multadd+0x84>)
 80081ba:	480d      	ldr	r0, [pc, #52]	; (80081f0 <__multadd+0x88>)
 80081bc:	21ba      	movs	r1, #186	; 0xba
 80081be:	f001 feb7 	bl	8009f30 <__assert_func>
 80081c2:	6922      	ldr	r2, [r4, #16]
 80081c4:	3202      	adds	r2, #2
 80081c6:	f104 010c 	add.w	r1, r4, #12
 80081ca:	0092      	lsls	r2, r2, #2
 80081cc:	300c      	adds	r0, #12
 80081ce:	f7ff f88e 	bl	80072ee <memcpy>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4638      	mov	r0, r7
 80081d6:	f7ff ffa5 	bl	8008124 <_Bfree>
 80081da:	4644      	mov	r4, r8
 80081dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081e0:	3501      	adds	r5, #1
 80081e2:	615e      	str	r6, [r3, #20]
 80081e4:	6125      	str	r5, [r4, #16]
 80081e6:	4620      	mov	r0, r4
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	0800ab61 	.word	0x0800ab61
 80081f0:	0800ab72 	.word	0x0800ab72

080081f4 <__s2b>:
 80081f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	4615      	mov	r5, r2
 80081fc:	461f      	mov	r7, r3
 80081fe:	2209      	movs	r2, #9
 8008200:	3308      	adds	r3, #8
 8008202:	4606      	mov	r6, r0
 8008204:	fb93 f3f2 	sdiv	r3, r3, r2
 8008208:	2100      	movs	r1, #0
 800820a:	2201      	movs	r2, #1
 800820c:	429a      	cmp	r2, r3
 800820e:	db09      	blt.n	8008224 <__s2b+0x30>
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff ff47 	bl	80080a4 <_Balloc>
 8008216:	b940      	cbnz	r0, 800822a <__s2b+0x36>
 8008218:	4602      	mov	r2, r0
 800821a:	4b19      	ldr	r3, [pc, #100]	; (8008280 <__s2b+0x8c>)
 800821c:	4819      	ldr	r0, [pc, #100]	; (8008284 <__s2b+0x90>)
 800821e:	21d3      	movs	r1, #211	; 0xd3
 8008220:	f001 fe86 	bl	8009f30 <__assert_func>
 8008224:	0052      	lsls	r2, r2, #1
 8008226:	3101      	adds	r1, #1
 8008228:	e7f0      	b.n	800820c <__s2b+0x18>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	6143      	str	r3, [r0, #20]
 800822e:	2d09      	cmp	r5, #9
 8008230:	f04f 0301 	mov.w	r3, #1
 8008234:	6103      	str	r3, [r0, #16]
 8008236:	dd16      	ble.n	8008266 <__s2b+0x72>
 8008238:	f104 0909 	add.w	r9, r4, #9
 800823c:	46c8      	mov	r8, r9
 800823e:	442c      	add	r4, r5
 8008240:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008244:	4601      	mov	r1, r0
 8008246:	3b30      	subs	r3, #48	; 0x30
 8008248:	220a      	movs	r2, #10
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff ff8c 	bl	8008168 <__multadd>
 8008250:	45a0      	cmp	r8, r4
 8008252:	d1f5      	bne.n	8008240 <__s2b+0x4c>
 8008254:	f1a5 0408 	sub.w	r4, r5, #8
 8008258:	444c      	add	r4, r9
 800825a:	1b2d      	subs	r5, r5, r4
 800825c:	1963      	adds	r3, r4, r5
 800825e:	42bb      	cmp	r3, r7
 8008260:	db04      	blt.n	800826c <__s2b+0x78>
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	340a      	adds	r4, #10
 8008268:	2509      	movs	r5, #9
 800826a:	e7f6      	b.n	800825a <__s2b+0x66>
 800826c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008270:	4601      	mov	r1, r0
 8008272:	3b30      	subs	r3, #48	; 0x30
 8008274:	220a      	movs	r2, #10
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ff76 	bl	8008168 <__multadd>
 800827c:	e7ee      	b.n	800825c <__s2b+0x68>
 800827e:	bf00      	nop
 8008280:	0800ab61 	.word	0x0800ab61
 8008284:	0800ab72 	.word	0x0800ab72

08008288 <__hi0bits>:
 8008288:	0c03      	lsrs	r3, r0, #16
 800828a:	041b      	lsls	r3, r3, #16
 800828c:	b9d3      	cbnz	r3, 80082c4 <__hi0bits+0x3c>
 800828e:	0400      	lsls	r0, r0, #16
 8008290:	2310      	movs	r3, #16
 8008292:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008296:	bf04      	itt	eq
 8008298:	0200      	lsleq	r0, r0, #8
 800829a:	3308      	addeq	r3, #8
 800829c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082a0:	bf04      	itt	eq
 80082a2:	0100      	lsleq	r0, r0, #4
 80082a4:	3304      	addeq	r3, #4
 80082a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082aa:	bf04      	itt	eq
 80082ac:	0080      	lsleq	r0, r0, #2
 80082ae:	3302      	addeq	r3, #2
 80082b0:	2800      	cmp	r0, #0
 80082b2:	db05      	blt.n	80082c0 <__hi0bits+0x38>
 80082b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082b8:	f103 0301 	add.w	r3, r3, #1
 80082bc:	bf08      	it	eq
 80082be:	2320      	moveq	r3, #32
 80082c0:	4618      	mov	r0, r3
 80082c2:	4770      	bx	lr
 80082c4:	2300      	movs	r3, #0
 80082c6:	e7e4      	b.n	8008292 <__hi0bits+0xa>

080082c8 <__lo0bits>:
 80082c8:	6803      	ldr	r3, [r0, #0]
 80082ca:	f013 0207 	ands.w	r2, r3, #7
 80082ce:	d00c      	beq.n	80082ea <__lo0bits+0x22>
 80082d0:	07d9      	lsls	r1, r3, #31
 80082d2:	d422      	bmi.n	800831a <__lo0bits+0x52>
 80082d4:	079a      	lsls	r2, r3, #30
 80082d6:	bf49      	itett	mi
 80082d8:	085b      	lsrmi	r3, r3, #1
 80082da:	089b      	lsrpl	r3, r3, #2
 80082dc:	6003      	strmi	r3, [r0, #0]
 80082de:	2201      	movmi	r2, #1
 80082e0:	bf5c      	itt	pl
 80082e2:	6003      	strpl	r3, [r0, #0]
 80082e4:	2202      	movpl	r2, #2
 80082e6:	4610      	mov	r0, r2
 80082e8:	4770      	bx	lr
 80082ea:	b299      	uxth	r1, r3
 80082ec:	b909      	cbnz	r1, 80082f2 <__lo0bits+0x2a>
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	2210      	movs	r2, #16
 80082f2:	b2d9      	uxtb	r1, r3
 80082f4:	b909      	cbnz	r1, 80082fa <__lo0bits+0x32>
 80082f6:	3208      	adds	r2, #8
 80082f8:	0a1b      	lsrs	r3, r3, #8
 80082fa:	0719      	lsls	r1, r3, #28
 80082fc:	bf04      	itt	eq
 80082fe:	091b      	lsreq	r3, r3, #4
 8008300:	3204      	addeq	r2, #4
 8008302:	0799      	lsls	r1, r3, #30
 8008304:	bf04      	itt	eq
 8008306:	089b      	lsreq	r3, r3, #2
 8008308:	3202      	addeq	r2, #2
 800830a:	07d9      	lsls	r1, r3, #31
 800830c:	d403      	bmi.n	8008316 <__lo0bits+0x4e>
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	f102 0201 	add.w	r2, r2, #1
 8008314:	d003      	beq.n	800831e <__lo0bits+0x56>
 8008316:	6003      	str	r3, [r0, #0]
 8008318:	e7e5      	b.n	80082e6 <__lo0bits+0x1e>
 800831a:	2200      	movs	r2, #0
 800831c:	e7e3      	b.n	80082e6 <__lo0bits+0x1e>
 800831e:	2220      	movs	r2, #32
 8008320:	e7e1      	b.n	80082e6 <__lo0bits+0x1e>
	...

08008324 <__i2b>:
 8008324:	b510      	push	{r4, lr}
 8008326:	460c      	mov	r4, r1
 8008328:	2101      	movs	r1, #1
 800832a:	f7ff febb 	bl	80080a4 <_Balloc>
 800832e:	4602      	mov	r2, r0
 8008330:	b928      	cbnz	r0, 800833e <__i2b+0x1a>
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <__i2b+0x24>)
 8008334:	4805      	ldr	r0, [pc, #20]	; (800834c <__i2b+0x28>)
 8008336:	f240 1145 	movw	r1, #325	; 0x145
 800833a:	f001 fdf9 	bl	8009f30 <__assert_func>
 800833e:	2301      	movs	r3, #1
 8008340:	6144      	str	r4, [r0, #20]
 8008342:	6103      	str	r3, [r0, #16]
 8008344:	bd10      	pop	{r4, pc}
 8008346:	bf00      	nop
 8008348:	0800ab61 	.word	0x0800ab61
 800834c:	0800ab72 	.word	0x0800ab72

08008350 <__multiply>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	4691      	mov	r9, r2
 8008356:	690a      	ldr	r2, [r1, #16]
 8008358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	bfb8      	it	lt
 8008360:	460b      	movlt	r3, r1
 8008362:	460c      	mov	r4, r1
 8008364:	bfbc      	itt	lt
 8008366:	464c      	movlt	r4, r9
 8008368:	4699      	movlt	r9, r3
 800836a:	6927      	ldr	r7, [r4, #16]
 800836c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008370:	68a3      	ldr	r3, [r4, #8]
 8008372:	6861      	ldr	r1, [r4, #4]
 8008374:	eb07 060a 	add.w	r6, r7, sl
 8008378:	42b3      	cmp	r3, r6
 800837a:	b085      	sub	sp, #20
 800837c:	bfb8      	it	lt
 800837e:	3101      	addlt	r1, #1
 8008380:	f7ff fe90 	bl	80080a4 <_Balloc>
 8008384:	b930      	cbnz	r0, 8008394 <__multiply+0x44>
 8008386:	4602      	mov	r2, r0
 8008388:	4b44      	ldr	r3, [pc, #272]	; (800849c <__multiply+0x14c>)
 800838a:	4845      	ldr	r0, [pc, #276]	; (80084a0 <__multiply+0x150>)
 800838c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008390:	f001 fdce 	bl	8009f30 <__assert_func>
 8008394:	f100 0514 	add.w	r5, r0, #20
 8008398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800839c:	462b      	mov	r3, r5
 800839e:	2200      	movs	r2, #0
 80083a0:	4543      	cmp	r3, r8
 80083a2:	d321      	bcc.n	80083e8 <__multiply+0x98>
 80083a4:	f104 0314 	add.w	r3, r4, #20
 80083a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083ac:	f109 0314 	add.w	r3, r9, #20
 80083b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083b4:	9202      	str	r2, [sp, #8]
 80083b6:	1b3a      	subs	r2, r7, r4
 80083b8:	3a15      	subs	r2, #21
 80083ba:	f022 0203 	bic.w	r2, r2, #3
 80083be:	3204      	adds	r2, #4
 80083c0:	f104 0115 	add.w	r1, r4, #21
 80083c4:	428f      	cmp	r7, r1
 80083c6:	bf38      	it	cc
 80083c8:	2204      	movcc	r2, #4
 80083ca:	9201      	str	r2, [sp, #4]
 80083cc:	9a02      	ldr	r2, [sp, #8]
 80083ce:	9303      	str	r3, [sp, #12]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d80c      	bhi.n	80083ee <__multiply+0x9e>
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dd03      	ble.n	80083e0 <__multiply+0x90>
 80083d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d05b      	beq.n	8008498 <__multiply+0x148>
 80083e0:	6106      	str	r6, [r0, #16]
 80083e2:	b005      	add	sp, #20
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	f843 2b04 	str.w	r2, [r3], #4
 80083ec:	e7d8      	b.n	80083a0 <__multiply+0x50>
 80083ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80083f2:	f1ba 0f00 	cmp.w	sl, #0
 80083f6:	d024      	beq.n	8008442 <__multiply+0xf2>
 80083f8:	f104 0e14 	add.w	lr, r4, #20
 80083fc:	46a9      	mov	r9, r5
 80083fe:	f04f 0c00 	mov.w	ip, #0
 8008402:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008406:	f8d9 1000 	ldr.w	r1, [r9]
 800840a:	fa1f fb82 	uxth.w	fp, r2
 800840e:	b289      	uxth	r1, r1
 8008410:	fb0a 110b 	mla	r1, sl, fp, r1
 8008414:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008418:	f8d9 2000 	ldr.w	r2, [r9]
 800841c:	4461      	add	r1, ip
 800841e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008422:	fb0a c20b 	mla	r2, sl, fp, ip
 8008426:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800842a:	b289      	uxth	r1, r1
 800842c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008430:	4577      	cmp	r7, lr
 8008432:	f849 1b04 	str.w	r1, [r9], #4
 8008436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800843a:	d8e2      	bhi.n	8008402 <__multiply+0xb2>
 800843c:	9a01      	ldr	r2, [sp, #4]
 800843e:	f845 c002 	str.w	ip, [r5, r2]
 8008442:	9a03      	ldr	r2, [sp, #12]
 8008444:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008448:	3304      	adds	r3, #4
 800844a:	f1b9 0f00 	cmp.w	r9, #0
 800844e:	d021      	beq.n	8008494 <__multiply+0x144>
 8008450:	6829      	ldr	r1, [r5, #0]
 8008452:	f104 0c14 	add.w	ip, r4, #20
 8008456:	46ae      	mov	lr, r5
 8008458:	f04f 0a00 	mov.w	sl, #0
 800845c:	f8bc b000 	ldrh.w	fp, [ip]
 8008460:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008464:	fb09 220b 	mla	r2, r9, fp, r2
 8008468:	4452      	add	r2, sl
 800846a:	b289      	uxth	r1, r1
 800846c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008470:	f84e 1b04 	str.w	r1, [lr], #4
 8008474:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008478:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800847c:	f8be 1000 	ldrh.w	r1, [lr]
 8008480:	fb09 110a 	mla	r1, r9, sl, r1
 8008484:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008488:	4567      	cmp	r7, ip
 800848a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800848e:	d8e5      	bhi.n	800845c <__multiply+0x10c>
 8008490:	9a01      	ldr	r2, [sp, #4]
 8008492:	50a9      	str	r1, [r5, r2]
 8008494:	3504      	adds	r5, #4
 8008496:	e799      	b.n	80083cc <__multiply+0x7c>
 8008498:	3e01      	subs	r6, #1
 800849a:	e79b      	b.n	80083d4 <__multiply+0x84>
 800849c:	0800ab61 	.word	0x0800ab61
 80084a0:	0800ab72 	.word	0x0800ab72

080084a4 <__pow5mult>:
 80084a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a8:	4615      	mov	r5, r2
 80084aa:	f012 0203 	ands.w	r2, r2, #3
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	d007      	beq.n	80084c4 <__pow5mult+0x20>
 80084b4:	4c25      	ldr	r4, [pc, #148]	; (800854c <__pow5mult+0xa8>)
 80084b6:	3a01      	subs	r2, #1
 80084b8:	2300      	movs	r3, #0
 80084ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084be:	f7ff fe53 	bl	8008168 <__multadd>
 80084c2:	4607      	mov	r7, r0
 80084c4:	10ad      	asrs	r5, r5, #2
 80084c6:	d03d      	beq.n	8008544 <__pow5mult+0xa0>
 80084c8:	69f4      	ldr	r4, [r6, #28]
 80084ca:	b97c      	cbnz	r4, 80084ec <__pow5mult+0x48>
 80084cc:	2010      	movs	r0, #16
 80084ce:	f7fd fd25 	bl	8005f1c <malloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	61f0      	str	r0, [r6, #28]
 80084d6:	b928      	cbnz	r0, 80084e4 <__pow5mult+0x40>
 80084d8:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <__pow5mult+0xac>)
 80084da:	481e      	ldr	r0, [pc, #120]	; (8008554 <__pow5mult+0xb0>)
 80084dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80084e0:	f001 fd26 	bl	8009f30 <__assert_func>
 80084e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084e8:	6004      	str	r4, [r0, #0]
 80084ea:	60c4      	str	r4, [r0, #12]
 80084ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80084f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084f4:	b94c      	cbnz	r4, 800850a <__pow5mult+0x66>
 80084f6:	f240 2171 	movw	r1, #625	; 0x271
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7ff ff12 	bl	8008324 <__i2b>
 8008500:	2300      	movs	r3, #0
 8008502:	f8c8 0008 	str.w	r0, [r8, #8]
 8008506:	4604      	mov	r4, r0
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	f04f 0900 	mov.w	r9, #0
 800850e:	07eb      	lsls	r3, r5, #31
 8008510:	d50a      	bpl.n	8008528 <__pow5mult+0x84>
 8008512:	4639      	mov	r1, r7
 8008514:	4622      	mov	r2, r4
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff1a 	bl	8008350 <__multiply>
 800851c:	4639      	mov	r1, r7
 800851e:	4680      	mov	r8, r0
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff fdff 	bl	8008124 <_Bfree>
 8008526:	4647      	mov	r7, r8
 8008528:	106d      	asrs	r5, r5, #1
 800852a:	d00b      	beq.n	8008544 <__pow5mult+0xa0>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	b938      	cbnz	r0, 8008540 <__pow5mult+0x9c>
 8008530:	4622      	mov	r2, r4
 8008532:	4621      	mov	r1, r4
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff ff0b 	bl	8008350 <__multiply>
 800853a:	6020      	str	r0, [r4, #0]
 800853c:	f8c0 9000 	str.w	r9, [r0]
 8008540:	4604      	mov	r4, r0
 8008542:	e7e4      	b.n	800850e <__pow5mult+0x6a>
 8008544:	4638      	mov	r0, r7
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	bf00      	nop
 800854c:	0800acc0 	.word	0x0800acc0
 8008550:	0800aaf2 	.word	0x0800aaf2
 8008554:	0800ab72 	.word	0x0800ab72

08008558 <__lshift>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	460c      	mov	r4, r1
 800855e:	6849      	ldr	r1, [r1, #4]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	4607      	mov	r7, r0
 800856a:	4691      	mov	r9, r2
 800856c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008570:	f108 0601 	add.w	r6, r8, #1
 8008574:	42b3      	cmp	r3, r6
 8008576:	db0b      	blt.n	8008590 <__lshift+0x38>
 8008578:	4638      	mov	r0, r7
 800857a:	f7ff fd93 	bl	80080a4 <_Balloc>
 800857e:	4605      	mov	r5, r0
 8008580:	b948      	cbnz	r0, 8008596 <__lshift+0x3e>
 8008582:	4602      	mov	r2, r0
 8008584:	4b28      	ldr	r3, [pc, #160]	; (8008628 <__lshift+0xd0>)
 8008586:	4829      	ldr	r0, [pc, #164]	; (800862c <__lshift+0xd4>)
 8008588:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800858c:	f001 fcd0 	bl	8009f30 <__assert_func>
 8008590:	3101      	adds	r1, #1
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	e7ee      	b.n	8008574 <__lshift+0x1c>
 8008596:	2300      	movs	r3, #0
 8008598:	f100 0114 	add.w	r1, r0, #20
 800859c:	f100 0210 	add.w	r2, r0, #16
 80085a0:	4618      	mov	r0, r3
 80085a2:	4553      	cmp	r3, sl
 80085a4:	db33      	blt.n	800860e <__lshift+0xb6>
 80085a6:	6920      	ldr	r0, [r4, #16]
 80085a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085ac:	f104 0314 	add.w	r3, r4, #20
 80085b0:	f019 091f 	ands.w	r9, r9, #31
 80085b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085bc:	d02b      	beq.n	8008616 <__lshift+0xbe>
 80085be:	f1c9 0e20 	rsb	lr, r9, #32
 80085c2:	468a      	mov	sl, r1
 80085c4:	2200      	movs	r2, #0
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	fa00 f009 	lsl.w	r0, r0, r9
 80085cc:	4310      	orrs	r0, r2
 80085ce:	f84a 0b04 	str.w	r0, [sl], #4
 80085d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d6:	459c      	cmp	ip, r3
 80085d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085dc:	d8f3      	bhi.n	80085c6 <__lshift+0x6e>
 80085de:	ebac 0304 	sub.w	r3, ip, r4
 80085e2:	3b15      	subs	r3, #21
 80085e4:	f023 0303 	bic.w	r3, r3, #3
 80085e8:	3304      	adds	r3, #4
 80085ea:	f104 0015 	add.w	r0, r4, #21
 80085ee:	4584      	cmp	ip, r0
 80085f0:	bf38      	it	cc
 80085f2:	2304      	movcc	r3, #4
 80085f4:	50ca      	str	r2, [r1, r3]
 80085f6:	b10a      	cbz	r2, 80085fc <__lshift+0xa4>
 80085f8:	f108 0602 	add.w	r6, r8, #2
 80085fc:	3e01      	subs	r6, #1
 80085fe:	4638      	mov	r0, r7
 8008600:	612e      	str	r6, [r5, #16]
 8008602:	4621      	mov	r1, r4
 8008604:	f7ff fd8e 	bl	8008124 <_Bfree>
 8008608:	4628      	mov	r0, r5
 800860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008612:	3301      	adds	r3, #1
 8008614:	e7c5      	b.n	80085a2 <__lshift+0x4a>
 8008616:	3904      	subs	r1, #4
 8008618:	f853 2b04 	ldr.w	r2, [r3], #4
 800861c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008620:	459c      	cmp	ip, r3
 8008622:	d8f9      	bhi.n	8008618 <__lshift+0xc0>
 8008624:	e7ea      	b.n	80085fc <__lshift+0xa4>
 8008626:	bf00      	nop
 8008628:	0800ab61 	.word	0x0800ab61
 800862c:	0800ab72 	.word	0x0800ab72

08008630 <__mcmp>:
 8008630:	b530      	push	{r4, r5, lr}
 8008632:	6902      	ldr	r2, [r0, #16]
 8008634:	690c      	ldr	r4, [r1, #16]
 8008636:	1b12      	subs	r2, r2, r4
 8008638:	d10e      	bne.n	8008658 <__mcmp+0x28>
 800863a:	f100 0314 	add.w	r3, r0, #20
 800863e:	3114      	adds	r1, #20
 8008640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800864c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008650:	42a5      	cmp	r5, r4
 8008652:	d003      	beq.n	800865c <__mcmp+0x2c>
 8008654:	d305      	bcc.n	8008662 <__mcmp+0x32>
 8008656:	2201      	movs	r2, #1
 8008658:	4610      	mov	r0, r2
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	4283      	cmp	r3, r0
 800865e:	d3f3      	bcc.n	8008648 <__mcmp+0x18>
 8008660:	e7fa      	b.n	8008658 <__mcmp+0x28>
 8008662:	f04f 32ff 	mov.w	r2, #4294967295
 8008666:	e7f7      	b.n	8008658 <__mcmp+0x28>

08008668 <__mdiff>:
 8008668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	4606      	mov	r6, r0
 8008670:	4611      	mov	r1, r2
 8008672:	4620      	mov	r0, r4
 8008674:	4690      	mov	r8, r2
 8008676:	f7ff ffdb 	bl	8008630 <__mcmp>
 800867a:	1e05      	subs	r5, r0, #0
 800867c:	d110      	bne.n	80086a0 <__mdiff+0x38>
 800867e:	4629      	mov	r1, r5
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff fd0f 	bl	80080a4 <_Balloc>
 8008686:	b930      	cbnz	r0, 8008696 <__mdiff+0x2e>
 8008688:	4b3a      	ldr	r3, [pc, #232]	; (8008774 <__mdiff+0x10c>)
 800868a:	4602      	mov	r2, r0
 800868c:	f240 2137 	movw	r1, #567	; 0x237
 8008690:	4839      	ldr	r0, [pc, #228]	; (8008778 <__mdiff+0x110>)
 8008692:	f001 fc4d 	bl	8009f30 <__assert_func>
 8008696:	2301      	movs	r3, #1
 8008698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800869c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	bfa4      	itt	ge
 80086a2:	4643      	movge	r3, r8
 80086a4:	46a0      	movge	r8, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086ac:	bfa6      	itte	ge
 80086ae:	461c      	movge	r4, r3
 80086b0:	2500      	movge	r5, #0
 80086b2:	2501      	movlt	r5, #1
 80086b4:	f7ff fcf6 	bl	80080a4 <_Balloc>
 80086b8:	b920      	cbnz	r0, 80086c4 <__mdiff+0x5c>
 80086ba:	4b2e      	ldr	r3, [pc, #184]	; (8008774 <__mdiff+0x10c>)
 80086bc:	4602      	mov	r2, r0
 80086be:	f240 2145 	movw	r1, #581	; 0x245
 80086c2:	e7e5      	b.n	8008690 <__mdiff+0x28>
 80086c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086c8:	6926      	ldr	r6, [r4, #16]
 80086ca:	60c5      	str	r5, [r0, #12]
 80086cc:	f104 0914 	add.w	r9, r4, #20
 80086d0:	f108 0514 	add.w	r5, r8, #20
 80086d4:	f100 0e14 	add.w	lr, r0, #20
 80086d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086e0:	f108 0210 	add.w	r2, r8, #16
 80086e4:	46f2      	mov	sl, lr
 80086e6:	2100      	movs	r1, #0
 80086e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80086ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086f0:	fa11 f88b 	uxtah	r8, r1, fp
 80086f4:	b299      	uxth	r1, r3
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	eba8 0801 	sub.w	r8, r8, r1
 80086fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008700:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008704:	fa1f f888 	uxth.w	r8, r8
 8008708:	1419      	asrs	r1, r3, #16
 800870a:	454e      	cmp	r6, r9
 800870c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008710:	f84a 3b04 	str.w	r3, [sl], #4
 8008714:	d8e8      	bhi.n	80086e8 <__mdiff+0x80>
 8008716:	1b33      	subs	r3, r6, r4
 8008718:	3b15      	subs	r3, #21
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	3304      	adds	r3, #4
 8008720:	3415      	adds	r4, #21
 8008722:	42a6      	cmp	r6, r4
 8008724:	bf38      	it	cc
 8008726:	2304      	movcc	r3, #4
 8008728:	441d      	add	r5, r3
 800872a:	4473      	add	r3, lr
 800872c:	469e      	mov	lr, r3
 800872e:	462e      	mov	r6, r5
 8008730:	4566      	cmp	r6, ip
 8008732:	d30e      	bcc.n	8008752 <__mdiff+0xea>
 8008734:	f10c 0203 	add.w	r2, ip, #3
 8008738:	1b52      	subs	r2, r2, r5
 800873a:	f022 0203 	bic.w	r2, r2, #3
 800873e:	3d03      	subs	r5, #3
 8008740:	45ac      	cmp	ip, r5
 8008742:	bf38      	it	cc
 8008744:	2200      	movcc	r2, #0
 8008746:	4413      	add	r3, r2
 8008748:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800874c:	b17a      	cbz	r2, 800876e <__mdiff+0x106>
 800874e:	6107      	str	r7, [r0, #16]
 8008750:	e7a4      	b.n	800869c <__mdiff+0x34>
 8008752:	f856 8b04 	ldr.w	r8, [r6], #4
 8008756:	fa11 f288 	uxtah	r2, r1, r8
 800875a:	1414      	asrs	r4, r2, #16
 800875c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008760:	b292      	uxth	r2, r2
 8008762:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008766:	f84e 2b04 	str.w	r2, [lr], #4
 800876a:	1421      	asrs	r1, r4, #16
 800876c:	e7e0      	b.n	8008730 <__mdiff+0xc8>
 800876e:	3f01      	subs	r7, #1
 8008770:	e7ea      	b.n	8008748 <__mdiff+0xe0>
 8008772:	bf00      	nop
 8008774:	0800ab61 	.word	0x0800ab61
 8008778:	0800ab72 	.word	0x0800ab72

0800877c <__ulp>:
 800877c:	b082      	sub	sp, #8
 800877e:	ed8d 0b00 	vstr	d0, [sp]
 8008782:	9a01      	ldr	r2, [sp, #4]
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <__ulp+0x48>)
 8008786:	4013      	ands	r3, r2
 8008788:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800878c:	2b00      	cmp	r3, #0
 800878e:	dc08      	bgt.n	80087a2 <__ulp+0x26>
 8008790:	425b      	negs	r3, r3
 8008792:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008796:	ea4f 5223 	mov.w	r2, r3, asr #20
 800879a:	da04      	bge.n	80087a6 <__ulp+0x2a>
 800879c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80087a0:	4113      	asrs	r3, r2
 80087a2:	2200      	movs	r2, #0
 80087a4:	e008      	b.n	80087b8 <__ulp+0x3c>
 80087a6:	f1a2 0314 	sub.w	r3, r2, #20
 80087aa:	2b1e      	cmp	r3, #30
 80087ac:	bfda      	itte	le
 80087ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80087b2:	40da      	lsrle	r2, r3
 80087b4:	2201      	movgt	r2, #1
 80087b6:	2300      	movs	r3, #0
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	ec41 0b10 	vmov	d0, r0, r1
 80087c0:	b002      	add	sp, #8
 80087c2:	4770      	bx	lr
 80087c4:	7ff00000 	.word	0x7ff00000

080087c8 <__b2d>:
 80087c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087cc:	6906      	ldr	r6, [r0, #16]
 80087ce:	f100 0814 	add.w	r8, r0, #20
 80087d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80087d6:	1f37      	subs	r7, r6, #4
 80087d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087dc:	4610      	mov	r0, r2
 80087de:	f7ff fd53 	bl	8008288 <__hi0bits>
 80087e2:	f1c0 0320 	rsb	r3, r0, #32
 80087e6:	280a      	cmp	r0, #10
 80087e8:	600b      	str	r3, [r1, #0]
 80087ea:	491b      	ldr	r1, [pc, #108]	; (8008858 <__b2d+0x90>)
 80087ec:	dc15      	bgt.n	800881a <__b2d+0x52>
 80087ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80087f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80087f6:	45b8      	cmp	r8, r7
 80087f8:	ea43 0501 	orr.w	r5, r3, r1
 80087fc:	bf34      	ite	cc
 80087fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008802:	2300      	movcs	r3, #0
 8008804:	3015      	adds	r0, #21
 8008806:	fa02 f000 	lsl.w	r0, r2, r0
 800880a:	fa23 f30c 	lsr.w	r3, r3, ip
 800880e:	4303      	orrs	r3, r0
 8008810:	461c      	mov	r4, r3
 8008812:	ec45 4b10 	vmov	d0, r4, r5
 8008816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881a:	45b8      	cmp	r8, r7
 800881c:	bf3a      	itte	cc
 800881e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008822:	f1a6 0708 	subcc.w	r7, r6, #8
 8008826:	2300      	movcs	r3, #0
 8008828:	380b      	subs	r0, #11
 800882a:	d012      	beq.n	8008852 <__b2d+0x8a>
 800882c:	f1c0 0120 	rsb	r1, r0, #32
 8008830:	fa23 f401 	lsr.w	r4, r3, r1
 8008834:	4082      	lsls	r2, r0
 8008836:	4322      	orrs	r2, r4
 8008838:	4547      	cmp	r7, r8
 800883a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800883e:	bf8c      	ite	hi
 8008840:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008844:	2200      	movls	r2, #0
 8008846:	4083      	lsls	r3, r0
 8008848:	40ca      	lsrs	r2, r1
 800884a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800884e:	4313      	orrs	r3, r2
 8008850:	e7de      	b.n	8008810 <__b2d+0x48>
 8008852:	ea42 0501 	orr.w	r5, r2, r1
 8008856:	e7db      	b.n	8008810 <__b2d+0x48>
 8008858:	3ff00000 	.word	0x3ff00000

0800885c <__d2b>:
 800885c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008860:	460f      	mov	r7, r1
 8008862:	2101      	movs	r1, #1
 8008864:	ec59 8b10 	vmov	r8, r9, d0
 8008868:	4616      	mov	r6, r2
 800886a:	f7ff fc1b 	bl	80080a4 <_Balloc>
 800886e:	4604      	mov	r4, r0
 8008870:	b930      	cbnz	r0, 8008880 <__d2b+0x24>
 8008872:	4602      	mov	r2, r0
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <__d2b+0xac>)
 8008876:	4825      	ldr	r0, [pc, #148]	; (800890c <__d2b+0xb0>)
 8008878:	f240 310f 	movw	r1, #783	; 0x30f
 800887c:	f001 fb58 	bl	8009f30 <__assert_func>
 8008880:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008884:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008888:	bb2d      	cbnz	r5, 80088d6 <__d2b+0x7a>
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	f1b8 0300 	subs.w	r3, r8, #0
 8008890:	d026      	beq.n	80088e0 <__d2b+0x84>
 8008892:	4668      	mov	r0, sp
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	f7ff fd17 	bl	80082c8 <__lo0bits>
 800889a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800889e:	b1e8      	cbz	r0, 80088dc <__d2b+0x80>
 80088a0:	f1c0 0320 	rsb	r3, r0, #32
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	430b      	orrs	r3, r1
 80088aa:	40c2      	lsrs	r2, r0
 80088ac:	6163      	str	r3, [r4, #20]
 80088ae:	9201      	str	r2, [sp, #4]
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	61a3      	str	r3, [r4, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	bf14      	ite	ne
 80088b8:	2202      	movne	r2, #2
 80088ba:	2201      	moveq	r2, #1
 80088bc:	6122      	str	r2, [r4, #16]
 80088be:	b1bd      	cbz	r5, 80088f0 <__d2b+0x94>
 80088c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088c4:	4405      	add	r5, r0
 80088c6:	603d      	str	r5, [r7, #0]
 80088c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088cc:	6030      	str	r0, [r6, #0]
 80088ce:	4620      	mov	r0, r4
 80088d0:	b003      	add	sp, #12
 80088d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088da:	e7d6      	b.n	800888a <__d2b+0x2e>
 80088dc:	6161      	str	r1, [r4, #20]
 80088de:	e7e7      	b.n	80088b0 <__d2b+0x54>
 80088e0:	a801      	add	r0, sp, #4
 80088e2:	f7ff fcf1 	bl	80082c8 <__lo0bits>
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	6163      	str	r3, [r4, #20]
 80088ea:	3020      	adds	r0, #32
 80088ec:	2201      	movs	r2, #1
 80088ee:	e7e5      	b.n	80088bc <__d2b+0x60>
 80088f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088f8:	6038      	str	r0, [r7, #0]
 80088fa:	6918      	ldr	r0, [r3, #16]
 80088fc:	f7ff fcc4 	bl	8008288 <__hi0bits>
 8008900:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008904:	e7e2      	b.n	80088cc <__d2b+0x70>
 8008906:	bf00      	nop
 8008908:	0800ab61 	.word	0x0800ab61
 800890c:	0800ab72 	.word	0x0800ab72

08008910 <__ratio>:
 8008910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4688      	mov	r8, r1
 8008916:	4669      	mov	r1, sp
 8008918:	4681      	mov	r9, r0
 800891a:	f7ff ff55 	bl	80087c8 <__b2d>
 800891e:	a901      	add	r1, sp, #4
 8008920:	4640      	mov	r0, r8
 8008922:	ec55 4b10 	vmov	r4, r5, d0
 8008926:	f7ff ff4f 	bl	80087c8 <__b2d>
 800892a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800892e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008932:	eba3 0c02 	sub.w	ip, r3, r2
 8008936:	e9dd 3200 	ldrd	r3, r2, [sp]
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008940:	ec51 0b10 	vmov	r0, r1, d0
 8008944:	2b00      	cmp	r3, #0
 8008946:	bfd6      	itet	le
 8008948:	460a      	movle	r2, r1
 800894a:	462a      	movgt	r2, r5
 800894c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008950:	468b      	mov	fp, r1
 8008952:	462f      	mov	r7, r5
 8008954:	bfd4      	ite	le
 8008956:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800895a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800895e:	4620      	mov	r0, r4
 8008960:	ee10 2a10 	vmov	r2, s0
 8008964:	465b      	mov	r3, fp
 8008966:	4639      	mov	r1, r7
 8008968:	f7f7 ff80 	bl	800086c <__aeabi_ddiv>
 800896c:	ec41 0b10 	vmov	d0, r0, r1
 8008970:	b003      	add	sp, #12
 8008972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008976 <__copybits>:
 8008976:	3901      	subs	r1, #1
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	1149      	asrs	r1, r1, #5
 800897c:	6914      	ldr	r4, [r2, #16]
 800897e:	3101      	adds	r1, #1
 8008980:	f102 0314 	add.w	r3, r2, #20
 8008984:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800898c:	1f05      	subs	r5, r0, #4
 800898e:	42a3      	cmp	r3, r4
 8008990:	d30c      	bcc.n	80089ac <__copybits+0x36>
 8008992:	1aa3      	subs	r3, r4, r2
 8008994:	3b11      	subs	r3, #17
 8008996:	f023 0303 	bic.w	r3, r3, #3
 800899a:	3211      	adds	r2, #17
 800899c:	42a2      	cmp	r2, r4
 800899e:	bf88      	it	hi
 80089a0:	2300      	movhi	r3, #0
 80089a2:	4418      	add	r0, r3
 80089a4:	2300      	movs	r3, #0
 80089a6:	4288      	cmp	r0, r1
 80089a8:	d305      	bcc.n	80089b6 <__copybits+0x40>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80089b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80089b4:	e7eb      	b.n	800898e <__copybits+0x18>
 80089b6:	f840 3b04 	str.w	r3, [r0], #4
 80089ba:	e7f4      	b.n	80089a6 <__copybits+0x30>

080089bc <__any_on>:
 80089bc:	f100 0214 	add.w	r2, r0, #20
 80089c0:	6900      	ldr	r0, [r0, #16]
 80089c2:	114b      	asrs	r3, r1, #5
 80089c4:	4298      	cmp	r0, r3
 80089c6:	b510      	push	{r4, lr}
 80089c8:	db11      	blt.n	80089ee <__any_on+0x32>
 80089ca:	dd0a      	ble.n	80089e2 <__any_on+0x26>
 80089cc:	f011 011f 	ands.w	r1, r1, #31
 80089d0:	d007      	beq.n	80089e2 <__any_on+0x26>
 80089d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089d6:	fa24 f001 	lsr.w	r0, r4, r1
 80089da:	fa00 f101 	lsl.w	r1, r0, r1
 80089de:	428c      	cmp	r4, r1
 80089e0:	d10b      	bne.n	80089fa <__any_on+0x3e>
 80089e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d803      	bhi.n	80089f2 <__any_on+0x36>
 80089ea:	2000      	movs	r0, #0
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	4603      	mov	r3, r0
 80089f0:	e7f7      	b.n	80089e2 <__any_on+0x26>
 80089f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089f6:	2900      	cmp	r1, #0
 80089f8:	d0f5      	beq.n	80089e6 <__any_on+0x2a>
 80089fa:	2001      	movs	r0, #1
 80089fc:	e7f6      	b.n	80089ec <__any_on+0x30>

080089fe <sulp>:
 80089fe:	b570      	push	{r4, r5, r6, lr}
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	ec45 4b10 	vmov	d0, r4, r5
 8008a08:	4616      	mov	r6, r2
 8008a0a:	f7ff feb7 	bl	800877c <__ulp>
 8008a0e:	ec51 0b10 	vmov	r0, r1, d0
 8008a12:	b17e      	cbz	r6, 8008a34 <sulp+0x36>
 8008a14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd09      	ble.n	8008a34 <sulp+0x36>
 8008a20:	051b      	lsls	r3, r3, #20
 8008a22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a26:	2400      	movs	r4, #0
 8008a28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fdf2 	bl	8000618 <__aeabi_dmul>
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a38 <_strtod_l>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	ed2d 8b02 	vpush	{d8}
 8008a40:	b09b      	sub	sp, #108	; 0x6c
 8008a42:	4604      	mov	r4, r0
 8008a44:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a46:	2200      	movs	r2, #0
 8008a48:	9216      	str	r2, [sp, #88]	; 0x58
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	f04f 0900 	mov.w	r9, #0
 8008a54:	460a      	mov	r2, r1
 8008a56:	9215      	str	r2, [sp, #84]	; 0x54
 8008a58:	7811      	ldrb	r1, [r2, #0]
 8008a5a:	292b      	cmp	r1, #43	; 0x2b
 8008a5c:	d04c      	beq.n	8008af8 <_strtod_l+0xc0>
 8008a5e:	d83a      	bhi.n	8008ad6 <_strtod_l+0x9e>
 8008a60:	290d      	cmp	r1, #13
 8008a62:	d834      	bhi.n	8008ace <_strtod_l+0x96>
 8008a64:	2908      	cmp	r1, #8
 8008a66:	d834      	bhi.n	8008ad2 <_strtod_l+0x9a>
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	d03d      	beq.n	8008ae8 <_strtod_l+0xb0>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008a72:	7832      	ldrb	r2, [r6, #0]
 8008a74:	2a30      	cmp	r2, #48	; 0x30
 8008a76:	f040 80b4 	bne.w	8008be2 <_strtod_l+0x1aa>
 8008a7a:	7872      	ldrb	r2, [r6, #1]
 8008a7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008a80:	2a58      	cmp	r2, #88	; 0x58
 8008a82:	d170      	bne.n	8008b66 <_strtod_l+0x12e>
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	ab16      	add	r3, sp, #88	; 0x58
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4a8e      	ldr	r2, [pc, #568]	; (8008cc8 <_strtod_l+0x290>)
 8008a90:	ab17      	add	r3, sp, #92	; 0x5c
 8008a92:	a915      	add	r1, sp, #84	; 0x54
 8008a94:	4620      	mov	r0, r4
 8008a96:	f001 fae7 	bl	800a068 <__gethex>
 8008a9a:	f010 070f 	ands.w	r7, r0, #15
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	d005      	beq.n	8008aae <_strtod_l+0x76>
 8008aa2:	2f06      	cmp	r7, #6
 8008aa4:	d12a      	bne.n	8008afc <_strtod_l+0xc4>
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9615      	str	r6, [sp, #84]	; 0x54
 8008aac:	930a      	str	r3, [sp, #40]	; 0x28
 8008aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 857f 	bne.w	80095b4 <_strtod_l+0xb7c>
 8008ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab8:	b1db      	cbz	r3, 8008af2 <_strtod_l+0xba>
 8008aba:	4642      	mov	r2, r8
 8008abc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ac0:	ec43 2b10 	vmov	d0, r2, r3
 8008ac4:	b01b      	add	sp, #108	; 0x6c
 8008ac6:	ecbd 8b02 	vpop	{d8}
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	2920      	cmp	r1, #32
 8008ad0:	d1cc      	bne.n	8008a6c <_strtod_l+0x34>
 8008ad2:	3201      	adds	r2, #1
 8008ad4:	e7bf      	b.n	8008a56 <_strtod_l+0x1e>
 8008ad6:	292d      	cmp	r1, #45	; 0x2d
 8008ad8:	d1c8      	bne.n	8008a6c <_strtod_l+0x34>
 8008ada:	2101      	movs	r1, #1
 8008adc:	910a      	str	r1, [sp, #40]	; 0x28
 8008ade:	1c51      	adds	r1, r2, #1
 8008ae0:	9115      	str	r1, [sp, #84]	; 0x54
 8008ae2:	7852      	ldrb	r2, [r2, #1]
 8008ae4:	2a00      	cmp	r2, #0
 8008ae6:	d1c3      	bne.n	8008a70 <_strtod_l+0x38>
 8008ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aea:	9515      	str	r5, [sp, #84]	; 0x54
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 855f 	bne.w	80095b0 <_strtod_l+0xb78>
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	e7e3      	b.n	8008ac0 <_strtod_l+0x88>
 8008af8:	2100      	movs	r1, #0
 8008afa:	e7ef      	b.n	8008adc <_strtod_l+0xa4>
 8008afc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008afe:	b13a      	cbz	r2, 8008b10 <_strtod_l+0xd8>
 8008b00:	2135      	movs	r1, #53	; 0x35
 8008b02:	a818      	add	r0, sp, #96	; 0x60
 8008b04:	f7ff ff37 	bl	8008976 <__copybits>
 8008b08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff fb0a 	bl	8008124 <_Bfree>
 8008b10:	3f01      	subs	r7, #1
 8008b12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b14:	2f04      	cmp	r7, #4
 8008b16:	d806      	bhi.n	8008b26 <_strtod_l+0xee>
 8008b18:	e8df f007 	tbb	[pc, r7]
 8008b1c:	201d0314 	.word	0x201d0314
 8008b20:	14          	.byte	0x14
 8008b21:	00          	.byte	0x00
 8008b22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008b26:	05e9      	lsls	r1, r5, #23
 8008b28:	bf48      	it	mi
 8008b2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008b2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b32:	0d1b      	lsrs	r3, r3, #20
 8008b34:	051b      	lsls	r3, r3, #20
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1b9      	bne.n	8008aae <_strtod_l+0x76>
 8008b3a:	f7fe fbab 	bl	8007294 <__errno>
 8008b3e:	2322      	movs	r3, #34	; 0x22
 8008b40:	6003      	str	r3, [r0, #0]
 8008b42:	e7b4      	b.n	8008aae <_strtod_l+0x76>
 8008b44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008b48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b54:	e7e7      	b.n	8008b26 <_strtod_l+0xee>
 8008b56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008cd0 <_strtod_l+0x298>
 8008b5a:	e7e4      	b.n	8008b26 <_strtod_l+0xee>
 8008b5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b60:	f04f 38ff 	mov.w	r8, #4294967295
 8008b64:	e7df      	b.n	8008b26 <_strtod_l+0xee>
 8008b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	9215      	str	r2, [sp, #84]	; 0x54
 8008b6c:	785b      	ldrb	r3, [r3, #1]
 8008b6e:	2b30      	cmp	r3, #48	; 0x30
 8008b70:	d0f9      	beq.n	8008b66 <_strtod_l+0x12e>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d09b      	beq.n	8008aae <_strtod_l+0x76>
 8008b76:	2301      	movs	r3, #1
 8008b78:	f04f 0a00 	mov.w	sl, #0
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008b86:	46d3      	mov	fp, sl
 8008b88:	220a      	movs	r2, #10
 8008b8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008b8c:	7806      	ldrb	r6, [r0, #0]
 8008b8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b92:	b2d9      	uxtb	r1, r3
 8008b94:	2909      	cmp	r1, #9
 8008b96:	d926      	bls.n	8008be6 <_strtod_l+0x1ae>
 8008b98:	494c      	ldr	r1, [pc, #304]	; (8008ccc <_strtod_l+0x294>)
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f001 f98c 	bl	8009eb8 <strncmp>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d030      	beq.n	8008c06 <_strtod_l+0x1ce>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	9005      	str	r0, [sp, #20]
 8008baa:	465e      	mov	r6, fp
 8008bac:	4603      	mov	r3, r0
 8008bae:	2a65      	cmp	r2, #101	; 0x65
 8008bb0:	d001      	beq.n	8008bb6 <_strtod_l+0x17e>
 8008bb2:	2a45      	cmp	r2, #69	; 0x45
 8008bb4:	d113      	bne.n	8008bde <_strtod_l+0x1a6>
 8008bb6:	b91e      	cbnz	r6, 8008bc0 <_strtod_l+0x188>
 8008bb8:	9a04      	ldr	r2, [sp, #16]
 8008bba:	4302      	orrs	r2, r0
 8008bbc:	d094      	beq.n	8008ae8 <_strtod_l+0xb0>
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008bc2:	1c6a      	adds	r2, r5, #1
 8008bc4:	9215      	str	r2, [sp, #84]	; 0x54
 8008bc6:	786a      	ldrb	r2, [r5, #1]
 8008bc8:	2a2b      	cmp	r2, #43	; 0x2b
 8008bca:	d074      	beq.n	8008cb6 <_strtod_l+0x27e>
 8008bcc:	2a2d      	cmp	r2, #45	; 0x2d
 8008bce:	d078      	beq.n	8008cc2 <_strtod_l+0x28a>
 8008bd0:	f04f 0c00 	mov.w	ip, #0
 8008bd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008bd8:	2909      	cmp	r1, #9
 8008bda:	d97f      	bls.n	8008cdc <_strtod_l+0x2a4>
 8008bdc:	9515      	str	r5, [sp, #84]	; 0x54
 8008bde:	2700      	movs	r7, #0
 8008be0:	e09e      	b.n	8008d20 <_strtod_l+0x2e8>
 8008be2:	2300      	movs	r3, #0
 8008be4:	e7c8      	b.n	8008b78 <_strtod_l+0x140>
 8008be6:	f1bb 0f08 	cmp.w	fp, #8
 8008bea:	bfd8      	it	le
 8008bec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008bee:	f100 0001 	add.w	r0, r0, #1
 8008bf2:	bfda      	itte	le
 8008bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bf8:	9309      	strle	r3, [sp, #36]	; 0x24
 8008bfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008bfe:	f10b 0b01 	add.w	fp, fp, #1
 8008c02:	9015      	str	r0, [sp, #84]	; 0x54
 8008c04:	e7c1      	b.n	8008b8a <_strtod_l+0x152>
 8008c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	9215      	str	r2, [sp, #84]	; 0x54
 8008c0c:	785a      	ldrb	r2, [r3, #1]
 8008c0e:	f1bb 0f00 	cmp.w	fp, #0
 8008c12:	d037      	beq.n	8008c84 <_strtod_l+0x24c>
 8008c14:	9005      	str	r0, [sp, #20]
 8008c16:	465e      	mov	r6, fp
 8008c18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d912      	bls.n	8008c46 <_strtod_l+0x20e>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7c4      	b.n	8008bae <_strtod_l+0x176>
 8008c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	9215      	str	r2, [sp, #84]	; 0x54
 8008c2a:	785a      	ldrb	r2, [r3, #1]
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	2a30      	cmp	r2, #48	; 0x30
 8008c30:	d0f8      	beq.n	8008c24 <_strtod_l+0x1ec>
 8008c32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	f200 84c1 	bhi.w	80095be <_strtod_l+0xb86>
 8008c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c3e:	9005      	str	r0, [sp, #20]
 8008c40:	2000      	movs	r0, #0
 8008c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c44:	4606      	mov	r6, r0
 8008c46:	3a30      	subs	r2, #48	; 0x30
 8008c48:	f100 0301 	add.w	r3, r0, #1
 8008c4c:	d014      	beq.n	8008c78 <_strtod_l+0x240>
 8008c4e:	9905      	ldr	r1, [sp, #20]
 8008c50:	4419      	add	r1, r3
 8008c52:	9105      	str	r1, [sp, #20]
 8008c54:	4633      	mov	r3, r6
 8008c56:	eb00 0c06 	add.w	ip, r0, r6
 8008c5a:	210a      	movs	r1, #10
 8008c5c:	4563      	cmp	r3, ip
 8008c5e:	d113      	bne.n	8008c88 <_strtod_l+0x250>
 8008c60:	1833      	adds	r3, r6, r0
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	f106 0601 	add.w	r6, r6, #1
 8008c68:	4406      	add	r6, r0
 8008c6a:	dc1a      	bgt.n	8008ca2 <_strtod_l+0x26a>
 8008c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6e:	230a      	movs	r3, #10
 8008c70:	fb03 2301 	mla	r3, r3, r1, r2
 8008c74:	9309      	str	r3, [sp, #36]	; 0x24
 8008c76:	2300      	movs	r3, #0
 8008c78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c7a:	1c51      	adds	r1, r2, #1
 8008c7c:	9115      	str	r1, [sp, #84]	; 0x54
 8008c7e:	7852      	ldrb	r2, [r2, #1]
 8008c80:	4618      	mov	r0, r3
 8008c82:	e7c9      	b.n	8008c18 <_strtod_l+0x1e0>
 8008c84:	4658      	mov	r0, fp
 8008c86:	e7d2      	b.n	8008c2e <_strtod_l+0x1f6>
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	f103 0301 	add.w	r3, r3, #1
 8008c8e:	dc03      	bgt.n	8008c98 <_strtod_l+0x260>
 8008c90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c92:	434f      	muls	r7, r1
 8008c94:	9709      	str	r7, [sp, #36]	; 0x24
 8008c96:	e7e1      	b.n	8008c5c <_strtod_l+0x224>
 8008c98:	2b10      	cmp	r3, #16
 8008c9a:	bfd8      	it	le
 8008c9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ca0:	e7dc      	b.n	8008c5c <_strtod_l+0x224>
 8008ca2:	2e10      	cmp	r6, #16
 8008ca4:	bfdc      	itt	le
 8008ca6:	230a      	movle	r3, #10
 8008ca8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008cac:	e7e3      	b.n	8008c76 <_strtod_l+0x23e>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e780      	b.n	8008bb8 <_strtod_l+0x180>
 8008cb6:	f04f 0c00 	mov.w	ip, #0
 8008cba:	1caa      	adds	r2, r5, #2
 8008cbc:	9215      	str	r2, [sp, #84]	; 0x54
 8008cbe:	78aa      	ldrb	r2, [r5, #2]
 8008cc0:	e788      	b.n	8008bd4 <_strtod_l+0x19c>
 8008cc2:	f04f 0c01 	mov.w	ip, #1
 8008cc6:	e7f8      	b.n	8008cba <_strtod_l+0x282>
 8008cc8:	0800acd0 	.word	0x0800acd0
 8008ccc:	0800accc 	.word	0x0800accc
 8008cd0:	7ff00000 	.word	0x7ff00000
 8008cd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cd6:	1c51      	adds	r1, r2, #1
 8008cd8:	9115      	str	r1, [sp, #84]	; 0x54
 8008cda:	7852      	ldrb	r2, [r2, #1]
 8008cdc:	2a30      	cmp	r2, #48	; 0x30
 8008cde:	d0f9      	beq.n	8008cd4 <_strtod_l+0x29c>
 8008ce0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ce4:	2908      	cmp	r1, #8
 8008ce6:	f63f af7a 	bhi.w	8008bde <_strtod_l+0x1a6>
 8008cea:	3a30      	subs	r2, #48	; 0x30
 8008cec:	9208      	str	r2, [sp, #32]
 8008cee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cf0:	920c      	str	r2, [sp, #48]	; 0x30
 8008cf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cf4:	1c57      	adds	r7, r2, #1
 8008cf6:	9715      	str	r7, [sp, #84]	; 0x54
 8008cf8:	7852      	ldrb	r2, [r2, #1]
 8008cfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008cfe:	f1be 0f09 	cmp.w	lr, #9
 8008d02:	d938      	bls.n	8008d76 <_strtod_l+0x33e>
 8008d04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d06:	1a7f      	subs	r7, r7, r1
 8008d08:	2f08      	cmp	r7, #8
 8008d0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008d0e:	dc03      	bgt.n	8008d18 <_strtod_l+0x2e0>
 8008d10:	9908      	ldr	r1, [sp, #32]
 8008d12:	428f      	cmp	r7, r1
 8008d14:	bfa8      	it	ge
 8008d16:	460f      	movge	r7, r1
 8008d18:	f1bc 0f00 	cmp.w	ip, #0
 8008d1c:	d000      	beq.n	8008d20 <_strtod_l+0x2e8>
 8008d1e:	427f      	negs	r7, r7
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	d14f      	bne.n	8008dc4 <_strtod_l+0x38c>
 8008d24:	9904      	ldr	r1, [sp, #16]
 8008d26:	4301      	orrs	r1, r0
 8008d28:	f47f aec1 	bne.w	8008aae <_strtod_l+0x76>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f47f aedb 	bne.w	8008ae8 <_strtod_l+0xb0>
 8008d32:	2a69      	cmp	r2, #105	; 0x69
 8008d34:	d029      	beq.n	8008d8a <_strtod_l+0x352>
 8008d36:	dc26      	bgt.n	8008d86 <_strtod_l+0x34e>
 8008d38:	2a49      	cmp	r2, #73	; 0x49
 8008d3a:	d026      	beq.n	8008d8a <_strtod_l+0x352>
 8008d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8008d3e:	f47f aed3 	bne.w	8008ae8 <_strtod_l+0xb0>
 8008d42:	499b      	ldr	r1, [pc, #620]	; (8008fb0 <_strtod_l+0x578>)
 8008d44:	a815      	add	r0, sp, #84	; 0x54
 8008d46:	f001 fbcf 	bl	800a4e8 <__match>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f aecc 	beq.w	8008ae8 <_strtod_l+0xb0>
 8008d50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b28      	cmp	r3, #40	; 0x28
 8008d56:	d12f      	bne.n	8008db8 <_strtod_l+0x380>
 8008d58:	4996      	ldr	r1, [pc, #600]	; (8008fb4 <_strtod_l+0x57c>)
 8008d5a:	aa18      	add	r2, sp, #96	; 0x60
 8008d5c:	a815      	add	r0, sp, #84	; 0x54
 8008d5e:	f001 fbd7 	bl	800a510 <__hexnan>
 8008d62:	2805      	cmp	r0, #5
 8008d64:	d128      	bne.n	8008db8 <_strtod_l+0x380>
 8008d66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008d70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008d74:	e69b      	b.n	8008aae <_strtod_l+0x76>
 8008d76:	9f08      	ldr	r7, [sp, #32]
 8008d78:	210a      	movs	r1, #10
 8008d7a:	fb01 2107 	mla	r1, r1, r7, r2
 8008d7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008d82:	9208      	str	r2, [sp, #32]
 8008d84:	e7b5      	b.n	8008cf2 <_strtod_l+0x2ba>
 8008d86:	2a6e      	cmp	r2, #110	; 0x6e
 8008d88:	e7d9      	b.n	8008d3e <_strtod_l+0x306>
 8008d8a:	498b      	ldr	r1, [pc, #556]	; (8008fb8 <_strtod_l+0x580>)
 8008d8c:	a815      	add	r0, sp, #84	; 0x54
 8008d8e:	f001 fbab 	bl	800a4e8 <__match>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f43f aea8 	beq.w	8008ae8 <_strtod_l+0xb0>
 8008d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d9a:	4988      	ldr	r1, [pc, #544]	; (8008fbc <_strtod_l+0x584>)
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	a815      	add	r0, sp, #84	; 0x54
 8008da0:	9315      	str	r3, [sp, #84]	; 0x54
 8008da2:	f001 fba1 	bl	800a4e8 <__match>
 8008da6:	b910      	cbnz	r0, 8008dae <_strtod_l+0x376>
 8008da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008daa:	3301      	adds	r3, #1
 8008dac:	9315      	str	r3, [sp, #84]	; 0x54
 8008dae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008fcc <_strtod_l+0x594>
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	e67a      	b.n	8008aae <_strtod_l+0x76>
 8008db8:	4881      	ldr	r0, [pc, #516]	; (8008fc0 <_strtod_l+0x588>)
 8008dba:	f001 f8b1 	bl	8009f20 <nan>
 8008dbe:	ec59 8b10 	vmov	r8, r9, d0
 8008dc2:	e674      	b.n	8008aae <_strtod_l+0x76>
 8008dc4:	9b05      	ldr	r3, [sp, #20]
 8008dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dc8:	1afb      	subs	r3, r7, r3
 8008dca:	f1bb 0f00 	cmp.w	fp, #0
 8008dce:	bf08      	it	eq
 8008dd0:	46b3      	moveq	fp, r6
 8008dd2:	2e10      	cmp	r6, #16
 8008dd4:	9308      	str	r3, [sp, #32]
 8008dd6:	4635      	mov	r5, r6
 8008dd8:	bfa8      	it	ge
 8008dda:	2510      	movge	r5, #16
 8008ddc:	f7f7 fba2 	bl	8000524 <__aeabi_ui2d>
 8008de0:	2e09      	cmp	r6, #9
 8008de2:	4680      	mov	r8, r0
 8008de4:	4689      	mov	r9, r1
 8008de6:	dd13      	ble.n	8008e10 <_strtod_l+0x3d8>
 8008de8:	4b76      	ldr	r3, [pc, #472]	; (8008fc4 <_strtod_l+0x58c>)
 8008dea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008dee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008df2:	f7f7 fc11 	bl	8000618 <__aeabi_dmul>
 8008df6:	4680      	mov	r8, r0
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4689      	mov	r9, r1
 8008dfc:	f7f7 fb92 	bl	8000524 <__aeabi_ui2d>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4640      	mov	r0, r8
 8008e06:	4649      	mov	r1, r9
 8008e08:	f7f7 fa50 	bl	80002ac <__adddf3>
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	4689      	mov	r9, r1
 8008e10:	2e0f      	cmp	r6, #15
 8008e12:	dc38      	bgt.n	8008e86 <_strtod_l+0x44e>
 8008e14:	9b08      	ldr	r3, [sp, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f43f ae49 	beq.w	8008aae <_strtod_l+0x76>
 8008e1c:	dd24      	ble.n	8008e68 <_strtod_l+0x430>
 8008e1e:	2b16      	cmp	r3, #22
 8008e20:	dc0b      	bgt.n	8008e3a <_strtod_l+0x402>
 8008e22:	4968      	ldr	r1, [pc, #416]	; (8008fc4 <_strtod_l+0x58c>)
 8008e24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	f7f7 fbf2 	bl	8000618 <__aeabi_dmul>
 8008e34:	4680      	mov	r8, r0
 8008e36:	4689      	mov	r9, r1
 8008e38:	e639      	b.n	8008aae <_strtod_l+0x76>
 8008e3a:	9a08      	ldr	r2, [sp, #32]
 8008e3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008e40:	4293      	cmp	r3, r2
 8008e42:	db20      	blt.n	8008e86 <_strtod_l+0x44e>
 8008e44:	4c5f      	ldr	r4, [pc, #380]	; (8008fc4 <_strtod_l+0x58c>)
 8008e46:	f1c6 060f 	rsb	r6, r6, #15
 8008e4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008e4e:	4642      	mov	r2, r8
 8008e50:	464b      	mov	r3, r9
 8008e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e56:	f7f7 fbdf 	bl	8000618 <__aeabi_dmul>
 8008e5a:	9b08      	ldr	r3, [sp, #32]
 8008e5c:	1b9e      	subs	r6, r3, r6
 8008e5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008e62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e66:	e7e3      	b.n	8008e30 <_strtod_l+0x3f8>
 8008e68:	9b08      	ldr	r3, [sp, #32]
 8008e6a:	3316      	adds	r3, #22
 8008e6c:	db0b      	blt.n	8008e86 <_strtod_l+0x44e>
 8008e6e:	9b05      	ldr	r3, [sp, #20]
 8008e70:	1bdf      	subs	r7, r3, r7
 8008e72:	4b54      	ldr	r3, [pc, #336]	; (8008fc4 <_strtod_l+0x58c>)
 8008e74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4649      	mov	r1, r9
 8008e80:	f7f7 fcf4 	bl	800086c <__aeabi_ddiv>
 8008e84:	e7d6      	b.n	8008e34 <_strtod_l+0x3fc>
 8008e86:	9b08      	ldr	r3, [sp, #32]
 8008e88:	1b75      	subs	r5, r6, r5
 8008e8a:	441d      	add	r5, r3
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	dd70      	ble.n	8008f72 <_strtod_l+0x53a>
 8008e90:	f015 030f 	ands.w	r3, r5, #15
 8008e94:	d00a      	beq.n	8008eac <_strtod_l+0x474>
 8008e96:	494b      	ldr	r1, [pc, #300]	; (8008fc4 <_strtod_l+0x58c>)
 8008e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	464b      	mov	r3, r9
 8008ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea4:	f7f7 fbb8 	bl	8000618 <__aeabi_dmul>
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	4689      	mov	r9, r1
 8008eac:	f035 050f 	bics.w	r5, r5, #15
 8008eb0:	d04d      	beq.n	8008f4e <_strtod_l+0x516>
 8008eb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008eb6:	dd22      	ble.n	8008efe <_strtod_l+0x4c6>
 8008eb8:	2500      	movs	r5, #0
 8008eba:	46ab      	mov	fp, r5
 8008ebc:	9509      	str	r5, [sp, #36]	; 0x24
 8008ebe:	9505      	str	r5, [sp, #20]
 8008ec0:	2322      	movs	r3, #34	; 0x22
 8008ec2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008fcc <_strtod_l+0x594>
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	f04f 0800 	mov.w	r8, #0
 8008ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f43f aded 	beq.w	8008aae <_strtod_l+0x76>
 8008ed4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7ff f924 	bl	8008124 <_Bfree>
 8008edc:	9905      	ldr	r1, [sp, #20]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7ff f920 	bl	8008124 <_Bfree>
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff f91c 	bl	8008124 <_Bfree>
 8008eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff f918 	bl	8008124 <_Bfree>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7ff f914 	bl	8008124 <_Bfree>
 8008efc:	e5d7      	b.n	8008aae <_strtod_l+0x76>
 8008efe:	4b32      	ldr	r3, [pc, #200]	; (8008fc8 <_strtod_l+0x590>)
 8008f00:	9304      	str	r3, [sp, #16]
 8008f02:	2300      	movs	r3, #0
 8008f04:	112d      	asrs	r5, r5, #4
 8008f06:	4640      	mov	r0, r8
 8008f08:	4649      	mov	r1, r9
 8008f0a:	469a      	mov	sl, r3
 8008f0c:	2d01      	cmp	r5, #1
 8008f0e:	dc21      	bgt.n	8008f54 <_strtod_l+0x51c>
 8008f10:	b10b      	cbz	r3, 8008f16 <_strtod_l+0x4de>
 8008f12:	4680      	mov	r8, r0
 8008f14:	4689      	mov	r9, r1
 8008f16:	492c      	ldr	r1, [pc, #176]	; (8008fc8 <_strtod_l+0x590>)
 8008f18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008f1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008f20:	4642      	mov	r2, r8
 8008f22:	464b      	mov	r3, r9
 8008f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f28:	f7f7 fb76 	bl	8000618 <__aeabi_dmul>
 8008f2c:	4b27      	ldr	r3, [pc, #156]	; (8008fcc <_strtod_l+0x594>)
 8008f2e:	460a      	mov	r2, r1
 8008f30:	400b      	ands	r3, r1
 8008f32:	4927      	ldr	r1, [pc, #156]	; (8008fd0 <_strtod_l+0x598>)
 8008f34:	428b      	cmp	r3, r1
 8008f36:	4680      	mov	r8, r0
 8008f38:	d8be      	bhi.n	8008eb8 <_strtod_l+0x480>
 8008f3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f3e:	428b      	cmp	r3, r1
 8008f40:	bf86      	itte	hi
 8008f42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008fd4 <_strtod_l+0x59c>
 8008f46:	f04f 38ff 	movhi.w	r8, #4294967295
 8008f4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	e07b      	b.n	800904c <_strtod_l+0x614>
 8008f54:	07ea      	lsls	r2, r5, #31
 8008f56:	d505      	bpl.n	8008f64 <_strtod_l+0x52c>
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 fb5b 	bl	8000618 <__aeabi_dmul>
 8008f62:	2301      	movs	r3, #1
 8008f64:	9a04      	ldr	r2, [sp, #16]
 8008f66:	3208      	adds	r2, #8
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	106d      	asrs	r5, r5, #1
 8008f6e:	9204      	str	r2, [sp, #16]
 8008f70:	e7cc      	b.n	8008f0c <_strtod_l+0x4d4>
 8008f72:	d0ec      	beq.n	8008f4e <_strtod_l+0x516>
 8008f74:	426d      	negs	r5, r5
 8008f76:	f015 020f 	ands.w	r2, r5, #15
 8008f7a:	d00a      	beq.n	8008f92 <_strtod_l+0x55a>
 8008f7c:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <_strtod_l+0x58c>)
 8008f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 fc6f 	bl	800086c <__aeabi_ddiv>
 8008f8e:	4680      	mov	r8, r0
 8008f90:	4689      	mov	r9, r1
 8008f92:	112d      	asrs	r5, r5, #4
 8008f94:	d0db      	beq.n	8008f4e <_strtod_l+0x516>
 8008f96:	2d1f      	cmp	r5, #31
 8008f98:	dd1e      	ble.n	8008fd8 <_strtod_l+0x5a0>
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	46ab      	mov	fp, r5
 8008f9e:	9509      	str	r5, [sp, #36]	; 0x24
 8008fa0:	9505      	str	r5, [sp, #20]
 8008fa2:	2322      	movs	r3, #34	; 0x22
 8008fa4:	f04f 0800 	mov.w	r8, #0
 8008fa8:	f04f 0900 	mov.w	r9, #0
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	e78d      	b.n	8008ecc <_strtod_l+0x494>
 8008fb0:	0800aab9 	.word	0x0800aab9
 8008fb4:	0800ace4 	.word	0x0800ace4
 8008fb8:	0800aab1 	.word	0x0800aab1
 8008fbc:	0800aae8 	.word	0x0800aae8
 8008fc0:	0800ae75 	.word	0x0800ae75
 8008fc4:	0800abf8 	.word	0x0800abf8
 8008fc8:	0800abd0 	.word	0x0800abd0
 8008fcc:	7ff00000 	.word	0x7ff00000
 8008fd0:	7ca00000 	.word	0x7ca00000
 8008fd4:	7fefffff 	.word	0x7fefffff
 8008fd8:	f015 0310 	ands.w	r3, r5, #16
 8008fdc:	bf18      	it	ne
 8008fde:	236a      	movne	r3, #106	; 0x6a
 8008fe0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009384 <_strtod_l+0x94c>
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	2300      	movs	r3, #0
 8008fec:	07ea      	lsls	r2, r5, #31
 8008fee:	d504      	bpl.n	8008ffa <_strtod_l+0x5c2>
 8008ff0:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ff4:	f7f7 fb10 	bl	8000618 <__aeabi_dmul>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	106d      	asrs	r5, r5, #1
 8008ffc:	f10a 0a08 	add.w	sl, sl, #8
 8009000:	d1f4      	bne.n	8008fec <_strtod_l+0x5b4>
 8009002:	b10b      	cbz	r3, 8009008 <_strtod_l+0x5d0>
 8009004:	4680      	mov	r8, r0
 8009006:	4689      	mov	r9, r1
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	b1bb      	cbz	r3, 800903c <_strtod_l+0x604>
 800900c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009010:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009014:	2b00      	cmp	r3, #0
 8009016:	4649      	mov	r1, r9
 8009018:	dd10      	ble.n	800903c <_strtod_l+0x604>
 800901a:	2b1f      	cmp	r3, #31
 800901c:	f340 811e 	ble.w	800925c <_strtod_l+0x824>
 8009020:	2b34      	cmp	r3, #52	; 0x34
 8009022:	bfde      	ittt	le
 8009024:	f04f 33ff 	movle.w	r3, #4294967295
 8009028:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800902c:	4093      	lslle	r3, r2
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	bfcc      	ite	gt
 8009034:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009038:	ea03 0901 	andle.w	r9, r3, r1
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fd50 	bl	8000ae8 <__aeabi_dcmpeq>
 8009048:	2800      	cmp	r0, #0
 800904a:	d1a6      	bne.n	8008f9a <_strtod_l+0x562>
 800904c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009052:	4633      	mov	r3, r6
 8009054:	465a      	mov	r2, fp
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff f8cc 	bl	80081f4 <__s2b>
 800905c:	9009      	str	r0, [sp, #36]	; 0x24
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f af2a 	beq.w	8008eb8 <_strtod_l+0x480>
 8009064:	9a08      	ldr	r2, [sp, #32]
 8009066:	9b05      	ldr	r3, [sp, #20]
 8009068:	2a00      	cmp	r2, #0
 800906a:	eba3 0307 	sub.w	r3, r3, r7
 800906e:	bfa8      	it	ge
 8009070:	2300      	movge	r3, #0
 8009072:	930c      	str	r3, [sp, #48]	; 0x30
 8009074:	2500      	movs	r5, #0
 8009076:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800907a:	9312      	str	r3, [sp, #72]	; 0x48
 800907c:	46ab      	mov	fp, r5
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	4620      	mov	r0, r4
 8009082:	6859      	ldr	r1, [r3, #4]
 8009084:	f7ff f80e 	bl	80080a4 <_Balloc>
 8009088:	9005      	str	r0, [sp, #20]
 800908a:	2800      	cmp	r0, #0
 800908c:	f43f af18 	beq.w	8008ec0 <_strtod_l+0x488>
 8009090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	3202      	adds	r2, #2
 8009096:	f103 010c 	add.w	r1, r3, #12
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	300c      	adds	r0, #12
 800909e:	f7fe f926 	bl	80072ee <memcpy>
 80090a2:	ec49 8b10 	vmov	d0, r8, r9
 80090a6:	aa18      	add	r2, sp, #96	; 0x60
 80090a8:	a917      	add	r1, sp, #92	; 0x5c
 80090aa:	4620      	mov	r0, r4
 80090ac:	f7ff fbd6 	bl	800885c <__d2b>
 80090b0:	ec49 8b18 	vmov	d8, r8, r9
 80090b4:	9016      	str	r0, [sp, #88]	; 0x58
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f af02 	beq.w	8008ec0 <_strtod_l+0x488>
 80090bc:	2101      	movs	r1, #1
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff f930 	bl	8008324 <__i2b>
 80090c4:	4683      	mov	fp, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f aefa 	beq.w	8008ec0 <_strtod_l+0x488>
 80090cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80090ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090d0:	2e00      	cmp	r6, #0
 80090d2:	bfab      	itete	ge
 80090d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80090d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80090d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80090da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80090de:	bfac      	ite	ge
 80090e0:	eb06 0a03 	addge.w	sl, r6, r3
 80090e4:	1b9f      	sublt	r7, r3, r6
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	1af6      	subs	r6, r6, r3
 80090ea:	4416      	add	r6, r2
 80090ec:	4ba0      	ldr	r3, [pc, #640]	; (8009370 <_strtod_l+0x938>)
 80090ee:	3e01      	subs	r6, #1
 80090f0:	429e      	cmp	r6, r3
 80090f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090f6:	f280 80c4 	bge.w	8009282 <_strtod_l+0x84a>
 80090fa:	1b9b      	subs	r3, r3, r6
 80090fc:	2b1f      	cmp	r3, #31
 80090fe:	eba2 0203 	sub.w	r2, r2, r3
 8009102:	f04f 0101 	mov.w	r1, #1
 8009106:	f300 80b0 	bgt.w	800926a <_strtod_l+0x832>
 800910a:	fa01 f303 	lsl.w	r3, r1, r3
 800910e:	930e      	str	r3, [sp, #56]	; 0x38
 8009110:	2300      	movs	r3, #0
 8009112:	930d      	str	r3, [sp, #52]	; 0x34
 8009114:	eb0a 0602 	add.w	r6, sl, r2
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	45b2      	cmp	sl, r6
 800911c:	4417      	add	r7, r2
 800911e:	441f      	add	r7, r3
 8009120:	4653      	mov	r3, sl
 8009122:	bfa8      	it	ge
 8009124:	4633      	movge	r3, r6
 8009126:	42bb      	cmp	r3, r7
 8009128:	bfa8      	it	ge
 800912a:	463b      	movge	r3, r7
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfc2      	ittt	gt
 8009130:	1af6      	subgt	r6, r6, r3
 8009132:	1aff      	subgt	r7, r7, r3
 8009134:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800913a:	2b00      	cmp	r3, #0
 800913c:	dd17      	ble.n	800916e <_strtod_l+0x736>
 800913e:	4659      	mov	r1, fp
 8009140:	461a      	mov	r2, r3
 8009142:	4620      	mov	r0, r4
 8009144:	f7ff f9ae 	bl	80084a4 <__pow5mult>
 8009148:	4683      	mov	fp, r0
 800914a:	2800      	cmp	r0, #0
 800914c:	f43f aeb8 	beq.w	8008ec0 <_strtod_l+0x488>
 8009150:	4601      	mov	r1, r0
 8009152:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009154:	4620      	mov	r0, r4
 8009156:	f7ff f8fb 	bl	8008350 <__multiply>
 800915a:	900b      	str	r0, [sp, #44]	; 0x2c
 800915c:	2800      	cmp	r0, #0
 800915e:	f43f aeaf 	beq.w	8008ec0 <_strtod_l+0x488>
 8009162:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009164:	4620      	mov	r0, r4
 8009166:	f7fe ffdd 	bl	8008124 <_Bfree>
 800916a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800916c:	9316      	str	r3, [sp, #88]	; 0x58
 800916e:	2e00      	cmp	r6, #0
 8009170:	f300 808c 	bgt.w	800928c <_strtod_l+0x854>
 8009174:	9b08      	ldr	r3, [sp, #32]
 8009176:	2b00      	cmp	r3, #0
 8009178:	dd08      	ble.n	800918c <_strtod_l+0x754>
 800917a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800917c:	9905      	ldr	r1, [sp, #20]
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff f990 	bl	80084a4 <__pow5mult>
 8009184:	9005      	str	r0, [sp, #20]
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f ae9a 	beq.w	8008ec0 <_strtod_l+0x488>
 800918c:	2f00      	cmp	r7, #0
 800918e:	dd08      	ble.n	80091a2 <_strtod_l+0x76a>
 8009190:	9905      	ldr	r1, [sp, #20]
 8009192:	463a      	mov	r2, r7
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff f9df 	bl	8008558 <__lshift>
 800919a:	9005      	str	r0, [sp, #20]
 800919c:	2800      	cmp	r0, #0
 800919e:	f43f ae8f 	beq.w	8008ec0 <_strtod_l+0x488>
 80091a2:	f1ba 0f00 	cmp.w	sl, #0
 80091a6:	dd08      	ble.n	80091ba <_strtod_l+0x782>
 80091a8:	4659      	mov	r1, fp
 80091aa:	4652      	mov	r2, sl
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7ff f9d3 	bl	8008558 <__lshift>
 80091b2:	4683      	mov	fp, r0
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f43f ae83 	beq.w	8008ec0 <_strtod_l+0x488>
 80091ba:	9a05      	ldr	r2, [sp, #20]
 80091bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff fa52 	bl	8008668 <__mdiff>
 80091c4:	4605      	mov	r5, r0
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f43f ae7a 	beq.w	8008ec0 <_strtod_l+0x488>
 80091cc:	68c3      	ldr	r3, [r0, #12]
 80091ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d0:	2300      	movs	r3, #0
 80091d2:	60c3      	str	r3, [r0, #12]
 80091d4:	4659      	mov	r1, fp
 80091d6:	f7ff fa2b 	bl	8008630 <__mcmp>
 80091da:	2800      	cmp	r0, #0
 80091dc:	da60      	bge.n	80092a0 <_strtod_l+0x868>
 80091de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e0:	ea53 0308 	orrs.w	r3, r3, r8
 80091e4:	f040 8084 	bne.w	80092f0 <_strtod_l+0x8b8>
 80091e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d17f      	bne.n	80092f0 <_strtod_l+0x8b8>
 80091f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091f4:	0d1b      	lsrs	r3, r3, #20
 80091f6:	051b      	lsls	r3, r3, #20
 80091f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091fc:	d978      	bls.n	80092f0 <_strtod_l+0x8b8>
 80091fe:	696b      	ldr	r3, [r5, #20]
 8009200:	b913      	cbnz	r3, 8009208 <_strtod_l+0x7d0>
 8009202:	692b      	ldr	r3, [r5, #16]
 8009204:	2b01      	cmp	r3, #1
 8009206:	dd73      	ble.n	80092f0 <_strtod_l+0x8b8>
 8009208:	4629      	mov	r1, r5
 800920a:	2201      	movs	r2, #1
 800920c:	4620      	mov	r0, r4
 800920e:	f7ff f9a3 	bl	8008558 <__lshift>
 8009212:	4659      	mov	r1, fp
 8009214:	4605      	mov	r5, r0
 8009216:	f7ff fa0b 	bl	8008630 <__mcmp>
 800921a:	2800      	cmp	r0, #0
 800921c:	dd68      	ble.n	80092f0 <_strtod_l+0x8b8>
 800921e:	9904      	ldr	r1, [sp, #16]
 8009220:	4a54      	ldr	r2, [pc, #336]	; (8009374 <_strtod_l+0x93c>)
 8009222:	464b      	mov	r3, r9
 8009224:	2900      	cmp	r1, #0
 8009226:	f000 8084 	beq.w	8009332 <_strtod_l+0x8fa>
 800922a:	ea02 0109 	and.w	r1, r2, r9
 800922e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009232:	dc7e      	bgt.n	8009332 <_strtod_l+0x8fa>
 8009234:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009238:	f77f aeb3 	ble.w	8008fa2 <_strtod_l+0x56a>
 800923c:	4b4e      	ldr	r3, [pc, #312]	; (8009378 <_strtod_l+0x940>)
 800923e:	4640      	mov	r0, r8
 8009240:	4649      	mov	r1, r9
 8009242:	2200      	movs	r2, #0
 8009244:	f7f7 f9e8 	bl	8000618 <__aeabi_dmul>
 8009248:	4b4a      	ldr	r3, [pc, #296]	; (8009374 <_strtod_l+0x93c>)
 800924a:	400b      	ands	r3, r1
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	2b00      	cmp	r3, #0
 8009252:	f47f ae3f 	bne.w	8008ed4 <_strtod_l+0x49c>
 8009256:	2322      	movs	r3, #34	; 0x22
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	e63b      	b.n	8008ed4 <_strtod_l+0x49c>
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	ea03 0808 	and.w	r8, r3, r8
 8009268:	e6e8      	b.n	800903c <_strtod_l+0x604>
 800926a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800926e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009272:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009276:	36e2      	adds	r6, #226	; 0xe2
 8009278:	fa01 f306 	lsl.w	r3, r1, r6
 800927c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009280:	e748      	b.n	8009114 <_strtod_l+0x6dc>
 8009282:	2100      	movs	r1, #0
 8009284:	2301      	movs	r3, #1
 8009286:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800928a:	e743      	b.n	8009114 <_strtod_l+0x6dc>
 800928c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800928e:	4632      	mov	r2, r6
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff f961 	bl	8008558 <__lshift>
 8009296:	9016      	str	r0, [sp, #88]	; 0x58
 8009298:	2800      	cmp	r0, #0
 800929a:	f47f af6b 	bne.w	8009174 <_strtod_l+0x73c>
 800929e:	e60f      	b.n	8008ec0 <_strtod_l+0x488>
 80092a0:	46ca      	mov	sl, r9
 80092a2:	d171      	bne.n	8009388 <_strtod_l+0x950>
 80092a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092aa:	b352      	cbz	r2, 8009302 <_strtod_l+0x8ca>
 80092ac:	4a33      	ldr	r2, [pc, #204]	; (800937c <_strtod_l+0x944>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d12a      	bne.n	8009308 <_strtod_l+0x8d0>
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	4641      	mov	r1, r8
 80092b6:	b1fb      	cbz	r3, 80092f8 <_strtod_l+0x8c0>
 80092b8:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <_strtod_l+0x93c>)
 80092ba:	ea09 0303 	and.w	r3, r9, r3
 80092be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	d81a      	bhi.n	80092fe <_strtod_l+0x8c6>
 80092c8:	0d1b      	lsrs	r3, r3, #20
 80092ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d118      	bne.n	8009308 <_strtod_l+0x8d0>
 80092d6:	4b2a      	ldr	r3, [pc, #168]	; (8009380 <_strtod_l+0x948>)
 80092d8:	459a      	cmp	sl, r3
 80092da:	d102      	bne.n	80092e2 <_strtod_l+0x8aa>
 80092dc:	3101      	adds	r1, #1
 80092de:	f43f adef 	beq.w	8008ec0 <_strtod_l+0x488>
 80092e2:	4b24      	ldr	r3, [pc, #144]	; (8009374 <_strtod_l+0x93c>)
 80092e4:	ea0a 0303 	and.w	r3, sl, r3
 80092e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80092ec:	f04f 0800 	mov.w	r8, #0
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1a2      	bne.n	800923c <_strtod_l+0x804>
 80092f6:	e5ed      	b.n	8008ed4 <_strtod_l+0x49c>
 80092f8:	f04f 33ff 	mov.w	r3, #4294967295
 80092fc:	e7e9      	b.n	80092d2 <_strtod_l+0x89a>
 80092fe:	4613      	mov	r3, r2
 8009300:	e7e7      	b.n	80092d2 <_strtod_l+0x89a>
 8009302:	ea53 0308 	orrs.w	r3, r3, r8
 8009306:	d08a      	beq.n	800921e <_strtod_l+0x7e6>
 8009308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800930a:	b1e3      	cbz	r3, 8009346 <_strtod_l+0x90e>
 800930c:	ea13 0f0a 	tst.w	r3, sl
 8009310:	d0ee      	beq.n	80092f0 <_strtod_l+0x8b8>
 8009312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009314:	9a04      	ldr	r2, [sp, #16]
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	b1c3      	cbz	r3, 800934e <_strtod_l+0x916>
 800931c:	f7ff fb6f 	bl	80089fe <sulp>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	ec51 0b18 	vmov	r0, r1, d8
 8009328:	f7f6 ffc0 	bl	80002ac <__adddf3>
 800932c:	4680      	mov	r8, r0
 800932e:	4689      	mov	r9, r1
 8009330:	e7de      	b.n	80092f0 <_strtod_l+0x8b8>
 8009332:	4013      	ands	r3, r2
 8009334:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009338:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800933c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009340:	f04f 38ff 	mov.w	r8, #4294967295
 8009344:	e7d4      	b.n	80092f0 <_strtod_l+0x8b8>
 8009346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009348:	ea13 0f08 	tst.w	r3, r8
 800934c:	e7e0      	b.n	8009310 <_strtod_l+0x8d8>
 800934e:	f7ff fb56 	bl	80089fe <sulp>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	ec51 0b18 	vmov	r0, r1, d8
 800935a:	f7f6 ffa5 	bl	80002a8 <__aeabi_dsub>
 800935e:	2200      	movs	r2, #0
 8009360:	2300      	movs	r3, #0
 8009362:	4680      	mov	r8, r0
 8009364:	4689      	mov	r9, r1
 8009366:	f7f7 fbbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800936a:	2800      	cmp	r0, #0
 800936c:	d0c0      	beq.n	80092f0 <_strtod_l+0x8b8>
 800936e:	e618      	b.n	8008fa2 <_strtod_l+0x56a>
 8009370:	fffffc02 	.word	0xfffffc02
 8009374:	7ff00000 	.word	0x7ff00000
 8009378:	39500000 	.word	0x39500000
 800937c:	000fffff 	.word	0x000fffff
 8009380:	7fefffff 	.word	0x7fefffff
 8009384:	0800acf8 	.word	0x0800acf8
 8009388:	4659      	mov	r1, fp
 800938a:	4628      	mov	r0, r5
 800938c:	f7ff fac0 	bl	8008910 <__ratio>
 8009390:	ec57 6b10 	vmov	r6, r7, d0
 8009394:	ee10 0a10 	vmov	r0, s0
 8009398:	2200      	movs	r2, #0
 800939a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800939e:	4639      	mov	r1, r7
 80093a0:	f7f7 fbb6 	bl	8000b10 <__aeabi_dcmple>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d071      	beq.n	800948c <_strtod_l+0xa54>
 80093a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d17c      	bne.n	80094a8 <_strtod_l+0xa70>
 80093ae:	f1b8 0f00 	cmp.w	r8, #0
 80093b2:	d15a      	bne.n	800946a <_strtod_l+0xa32>
 80093b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d15d      	bne.n	8009478 <_strtod_l+0xa40>
 80093bc:	4b90      	ldr	r3, [pc, #576]	; (8009600 <_strtod_l+0xbc8>)
 80093be:	2200      	movs	r2, #0
 80093c0:	4630      	mov	r0, r6
 80093c2:	4639      	mov	r1, r7
 80093c4:	f7f7 fb9a 	bl	8000afc <__aeabi_dcmplt>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d15c      	bne.n	8009486 <_strtod_l+0xa4e>
 80093cc:	4630      	mov	r0, r6
 80093ce:	4639      	mov	r1, r7
 80093d0:	4b8c      	ldr	r3, [pc, #560]	; (8009604 <_strtod_l+0xbcc>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	f7f7 f920 	bl	8000618 <__aeabi_dmul>
 80093d8:	4606      	mov	r6, r0
 80093da:	460f      	mov	r7, r1
 80093dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80093e0:	9606      	str	r6, [sp, #24]
 80093e2:	9307      	str	r3, [sp, #28]
 80093e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80093ec:	4b86      	ldr	r3, [pc, #536]	; (8009608 <_strtod_l+0xbd0>)
 80093ee:	ea0a 0303 	and.w	r3, sl, r3
 80093f2:	930d      	str	r3, [sp, #52]	; 0x34
 80093f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093f6:	4b85      	ldr	r3, [pc, #532]	; (800960c <_strtod_l+0xbd4>)
 80093f8:	429a      	cmp	r2, r3
 80093fa:	f040 8090 	bne.w	800951e <_strtod_l+0xae6>
 80093fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009402:	ec49 8b10 	vmov	d0, r8, r9
 8009406:	f7ff f9b9 	bl	800877c <__ulp>
 800940a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800940e:	ec51 0b10 	vmov	r0, r1, d0
 8009412:	f7f7 f901 	bl	8000618 <__aeabi_dmul>
 8009416:	4642      	mov	r2, r8
 8009418:	464b      	mov	r3, r9
 800941a:	f7f6 ff47 	bl	80002ac <__adddf3>
 800941e:	460b      	mov	r3, r1
 8009420:	4979      	ldr	r1, [pc, #484]	; (8009608 <_strtod_l+0xbd0>)
 8009422:	4a7b      	ldr	r2, [pc, #492]	; (8009610 <_strtod_l+0xbd8>)
 8009424:	4019      	ands	r1, r3
 8009426:	4291      	cmp	r1, r2
 8009428:	4680      	mov	r8, r0
 800942a:	d944      	bls.n	80094b6 <_strtod_l+0xa7e>
 800942c:	ee18 2a90 	vmov	r2, s17
 8009430:	4b78      	ldr	r3, [pc, #480]	; (8009614 <_strtod_l+0xbdc>)
 8009432:	429a      	cmp	r2, r3
 8009434:	d104      	bne.n	8009440 <_strtod_l+0xa08>
 8009436:	ee18 3a10 	vmov	r3, s16
 800943a:	3301      	adds	r3, #1
 800943c:	f43f ad40 	beq.w	8008ec0 <_strtod_l+0x488>
 8009440:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009614 <_strtod_l+0xbdc>
 8009444:	f04f 38ff 	mov.w	r8, #4294967295
 8009448:	9916      	ldr	r1, [sp, #88]	; 0x58
 800944a:	4620      	mov	r0, r4
 800944c:	f7fe fe6a 	bl	8008124 <_Bfree>
 8009450:	9905      	ldr	r1, [sp, #20]
 8009452:	4620      	mov	r0, r4
 8009454:	f7fe fe66 	bl	8008124 <_Bfree>
 8009458:	4659      	mov	r1, fp
 800945a:	4620      	mov	r0, r4
 800945c:	f7fe fe62 	bl	8008124 <_Bfree>
 8009460:	4629      	mov	r1, r5
 8009462:	4620      	mov	r0, r4
 8009464:	f7fe fe5e 	bl	8008124 <_Bfree>
 8009468:	e609      	b.n	800907e <_strtod_l+0x646>
 800946a:	f1b8 0f01 	cmp.w	r8, #1
 800946e:	d103      	bne.n	8009478 <_strtod_l+0xa40>
 8009470:	f1b9 0f00 	cmp.w	r9, #0
 8009474:	f43f ad95 	beq.w	8008fa2 <_strtod_l+0x56a>
 8009478:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80095d0 <_strtod_l+0xb98>
 800947c:	4f60      	ldr	r7, [pc, #384]	; (8009600 <_strtod_l+0xbc8>)
 800947e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009482:	2600      	movs	r6, #0
 8009484:	e7ae      	b.n	80093e4 <_strtod_l+0x9ac>
 8009486:	4f5f      	ldr	r7, [pc, #380]	; (8009604 <_strtod_l+0xbcc>)
 8009488:	2600      	movs	r6, #0
 800948a:	e7a7      	b.n	80093dc <_strtod_l+0x9a4>
 800948c:	4b5d      	ldr	r3, [pc, #372]	; (8009604 <_strtod_l+0xbcc>)
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	2200      	movs	r2, #0
 8009494:	f7f7 f8c0 	bl	8000618 <__aeabi_dmul>
 8009498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949a:	4606      	mov	r6, r0
 800949c:	460f      	mov	r7, r1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d09c      	beq.n	80093dc <_strtod_l+0x9a4>
 80094a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80094a6:	e79d      	b.n	80093e4 <_strtod_l+0x9ac>
 80094a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80095d8 <_strtod_l+0xba0>
 80094ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80094b0:	ec57 6b17 	vmov	r6, r7, d7
 80094b4:	e796      	b.n	80093e4 <_strtod_l+0x9ac>
 80094b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	46ca      	mov	sl, r9
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1c2      	bne.n	8009448 <_strtod_l+0xa10>
 80094c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	051b      	lsls	r3, r3, #20
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d1bb      	bne.n	8009448 <_strtod_l+0xa10>
 80094d0:	4630      	mov	r0, r6
 80094d2:	4639      	mov	r1, r7
 80094d4:	f7f7 fc00 	bl	8000cd8 <__aeabi_d2lz>
 80094d8:	f7f7 f870 	bl	80005bc <__aeabi_l2d>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f6 fee0 	bl	80002a8 <__aeabi_dsub>
 80094e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ee:	ea43 0308 	orr.w	r3, r3, r8
 80094f2:	4313      	orrs	r3, r2
 80094f4:	4606      	mov	r6, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	d054      	beq.n	80095a4 <_strtod_l+0xb6c>
 80094fa:	a339      	add	r3, pc, #228	; (adr r3, 80095e0 <_strtod_l+0xba8>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f7 fafc 	bl	8000afc <__aeabi_dcmplt>
 8009504:	2800      	cmp	r0, #0
 8009506:	f47f ace5 	bne.w	8008ed4 <_strtod_l+0x49c>
 800950a:	a337      	add	r3, pc, #220	; (adr r3, 80095e8 <_strtod_l+0xbb0>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	f7f7 fb10 	bl	8000b38 <__aeabi_dcmpgt>
 8009518:	2800      	cmp	r0, #0
 800951a:	d095      	beq.n	8009448 <_strtod_l+0xa10>
 800951c:	e4da      	b.n	8008ed4 <_strtod_l+0x49c>
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	b333      	cbz	r3, 8009570 <_strtod_l+0xb38>
 8009522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009524:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009528:	d822      	bhi.n	8009570 <_strtod_l+0xb38>
 800952a:	a331      	add	r3, pc, #196	; (adr r3, 80095f0 <_strtod_l+0xbb8>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 faec 	bl	8000b10 <__aeabi_dcmple>
 8009538:	b1a0      	cbz	r0, 8009564 <_strtod_l+0xb2c>
 800953a:	4639      	mov	r1, r7
 800953c:	4630      	mov	r0, r6
 800953e:	f7f7 fb43 	bl	8000bc8 <__aeabi_d2uiz>
 8009542:	2801      	cmp	r0, #1
 8009544:	bf38      	it	cc
 8009546:	2001      	movcc	r0, #1
 8009548:	f7f6 ffec 	bl	8000524 <__aeabi_ui2d>
 800954c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800954e:	4606      	mov	r6, r0
 8009550:	460f      	mov	r7, r1
 8009552:	bb23      	cbnz	r3, 800959e <_strtod_l+0xb66>
 8009554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009558:	9010      	str	r0, [sp, #64]	; 0x40
 800955a:	9311      	str	r3, [sp, #68]	; 0x44
 800955c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009560:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009568:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800956c:	1a9b      	subs	r3, r3, r2
 800956e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009570:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009574:	eeb0 0a48 	vmov.f32	s0, s16
 8009578:	eef0 0a68 	vmov.f32	s1, s17
 800957c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009580:	f7ff f8fc 	bl	800877c <__ulp>
 8009584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009588:	ec53 2b10 	vmov	r2, r3, d0
 800958c:	f7f7 f844 	bl	8000618 <__aeabi_dmul>
 8009590:	ec53 2b18 	vmov	r2, r3, d8
 8009594:	f7f6 fe8a 	bl	80002ac <__adddf3>
 8009598:	4680      	mov	r8, r0
 800959a:	4689      	mov	r9, r1
 800959c:	e78d      	b.n	80094ba <_strtod_l+0xa82>
 800959e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80095a2:	e7db      	b.n	800955c <_strtod_l+0xb24>
 80095a4:	a314      	add	r3, pc, #80	; (adr r3, 80095f8 <_strtod_l+0xbc0>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f7f7 faa7 	bl	8000afc <__aeabi_dcmplt>
 80095ae:	e7b3      	b.n	8009518 <_strtod_l+0xae0>
 80095b0:	2300      	movs	r3, #0
 80095b2:	930a      	str	r3, [sp, #40]	; 0x28
 80095b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	f7ff ba7c 	b.w	8008ab6 <_strtod_l+0x7e>
 80095be:	2a65      	cmp	r2, #101	; 0x65
 80095c0:	f43f ab75 	beq.w	8008cae <_strtod_l+0x276>
 80095c4:	2a45      	cmp	r2, #69	; 0x45
 80095c6:	f43f ab72 	beq.w	8008cae <_strtod_l+0x276>
 80095ca:	2301      	movs	r3, #1
 80095cc:	f7ff bbaa 	b.w	8008d24 <_strtod_l+0x2ec>
 80095d0:	00000000 	.word	0x00000000
 80095d4:	bff00000 	.word	0xbff00000
 80095d8:	00000000 	.word	0x00000000
 80095dc:	3ff00000 	.word	0x3ff00000
 80095e0:	94a03595 	.word	0x94a03595
 80095e4:	3fdfffff 	.word	0x3fdfffff
 80095e8:	35afe535 	.word	0x35afe535
 80095ec:	3fe00000 	.word	0x3fe00000
 80095f0:	ffc00000 	.word	0xffc00000
 80095f4:	41dfffff 	.word	0x41dfffff
 80095f8:	94a03595 	.word	0x94a03595
 80095fc:	3fcfffff 	.word	0x3fcfffff
 8009600:	3ff00000 	.word	0x3ff00000
 8009604:	3fe00000 	.word	0x3fe00000
 8009608:	7ff00000 	.word	0x7ff00000
 800960c:	7fe00000 	.word	0x7fe00000
 8009610:	7c9fffff 	.word	0x7c9fffff
 8009614:	7fefffff 	.word	0x7fefffff

08009618 <_strtod_r>:
 8009618:	4b01      	ldr	r3, [pc, #4]	; (8009620 <_strtod_r+0x8>)
 800961a:	f7ff ba0d 	b.w	8008a38 <_strtod_l>
 800961e:	bf00      	nop
 8009620:	20000298 	.word	0x20000298

08009624 <_strtol_l.constprop.0>:
 8009624:	2b01      	cmp	r3, #1
 8009626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962a:	d001      	beq.n	8009630 <_strtol_l.constprop.0+0xc>
 800962c:	2b24      	cmp	r3, #36	; 0x24
 800962e:	d906      	bls.n	800963e <_strtol_l.constprop.0+0x1a>
 8009630:	f7fd fe30 	bl	8007294 <__errno>
 8009634:	2316      	movs	r3, #22
 8009636:	6003      	str	r3, [r0, #0]
 8009638:	2000      	movs	r0, #0
 800963a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009724 <_strtol_l.constprop.0+0x100>
 8009642:	460d      	mov	r5, r1
 8009644:	462e      	mov	r6, r5
 8009646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800964a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800964e:	f017 0708 	ands.w	r7, r7, #8
 8009652:	d1f7      	bne.n	8009644 <_strtol_l.constprop.0+0x20>
 8009654:	2c2d      	cmp	r4, #45	; 0x2d
 8009656:	d132      	bne.n	80096be <_strtol_l.constprop.0+0x9a>
 8009658:	782c      	ldrb	r4, [r5, #0]
 800965a:	2701      	movs	r7, #1
 800965c:	1cb5      	adds	r5, r6, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d05b      	beq.n	800971a <_strtol_l.constprop.0+0xf6>
 8009662:	2b10      	cmp	r3, #16
 8009664:	d109      	bne.n	800967a <_strtol_l.constprop.0+0x56>
 8009666:	2c30      	cmp	r4, #48	; 0x30
 8009668:	d107      	bne.n	800967a <_strtol_l.constprop.0+0x56>
 800966a:	782c      	ldrb	r4, [r5, #0]
 800966c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009670:	2c58      	cmp	r4, #88	; 0x58
 8009672:	d14d      	bne.n	8009710 <_strtol_l.constprop.0+0xec>
 8009674:	786c      	ldrb	r4, [r5, #1]
 8009676:	2310      	movs	r3, #16
 8009678:	3502      	adds	r5, #2
 800967a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800967e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009682:	f04f 0e00 	mov.w	lr, #0
 8009686:	fbb8 f9f3 	udiv	r9, r8, r3
 800968a:	4676      	mov	r6, lr
 800968c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009690:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009694:	f1bc 0f09 	cmp.w	ip, #9
 8009698:	d816      	bhi.n	80096c8 <_strtol_l.constprop.0+0xa4>
 800969a:	4664      	mov	r4, ip
 800969c:	42a3      	cmp	r3, r4
 800969e:	dd24      	ble.n	80096ea <_strtol_l.constprop.0+0xc6>
 80096a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80096a4:	d008      	beq.n	80096b8 <_strtol_l.constprop.0+0x94>
 80096a6:	45b1      	cmp	r9, r6
 80096a8:	d31c      	bcc.n	80096e4 <_strtol_l.constprop.0+0xc0>
 80096aa:	d101      	bne.n	80096b0 <_strtol_l.constprop.0+0x8c>
 80096ac:	45a2      	cmp	sl, r4
 80096ae:	db19      	blt.n	80096e4 <_strtol_l.constprop.0+0xc0>
 80096b0:	fb06 4603 	mla	r6, r6, r3, r4
 80096b4:	f04f 0e01 	mov.w	lr, #1
 80096b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096bc:	e7e8      	b.n	8009690 <_strtol_l.constprop.0+0x6c>
 80096be:	2c2b      	cmp	r4, #43	; 0x2b
 80096c0:	bf04      	itt	eq
 80096c2:	782c      	ldrbeq	r4, [r5, #0]
 80096c4:	1cb5      	addeq	r5, r6, #2
 80096c6:	e7ca      	b.n	800965e <_strtol_l.constprop.0+0x3a>
 80096c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80096cc:	f1bc 0f19 	cmp.w	ip, #25
 80096d0:	d801      	bhi.n	80096d6 <_strtol_l.constprop.0+0xb2>
 80096d2:	3c37      	subs	r4, #55	; 0x37
 80096d4:	e7e2      	b.n	800969c <_strtol_l.constprop.0+0x78>
 80096d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096da:	f1bc 0f19 	cmp.w	ip, #25
 80096de:	d804      	bhi.n	80096ea <_strtol_l.constprop.0+0xc6>
 80096e0:	3c57      	subs	r4, #87	; 0x57
 80096e2:	e7db      	b.n	800969c <_strtol_l.constprop.0+0x78>
 80096e4:	f04f 3eff 	mov.w	lr, #4294967295
 80096e8:	e7e6      	b.n	80096b8 <_strtol_l.constprop.0+0x94>
 80096ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80096ee:	d105      	bne.n	80096fc <_strtol_l.constprop.0+0xd8>
 80096f0:	2322      	movs	r3, #34	; 0x22
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	4646      	mov	r6, r8
 80096f6:	b942      	cbnz	r2, 800970a <_strtol_l.constprop.0+0xe6>
 80096f8:	4630      	mov	r0, r6
 80096fa:	e79e      	b.n	800963a <_strtol_l.constprop.0+0x16>
 80096fc:	b107      	cbz	r7, 8009700 <_strtol_l.constprop.0+0xdc>
 80096fe:	4276      	negs	r6, r6
 8009700:	2a00      	cmp	r2, #0
 8009702:	d0f9      	beq.n	80096f8 <_strtol_l.constprop.0+0xd4>
 8009704:	f1be 0f00 	cmp.w	lr, #0
 8009708:	d000      	beq.n	800970c <_strtol_l.constprop.0+0xe8>
 800970a:	1e69      	subs	r1, r5, #1
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	e7f3      	b.n	80096f8 <_strtol_l.constprop.0+0xd4>
 8009710:	2430      	movs	r4, #48	; 0x30
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1b1      	bne.n	800967a <_strtol_l.constprop.0+0x56>
 8009716:	2308      	movs	r3, #8
 8009718:	e7af      	b.n	800967a <_strtol_l.constprop.0+0x56>
 800971a:	2c30      	cmp	r4, #48	; 0x30
 800971c:	d0a5      	beq.n	800966a <_strtol_l.constprop.0+0x46>
 800971e:	230a      	movs	r3, #10
 8009720:	e7ab      	b.n	800967a <_strtol_l.constprop.0+0x56>
 8009722:	bf00      	nop
 8009724:	0800ad21 	.word	0x0800ad21

08009728 <_strtol_r>:
 8009728:	f7ff bf7c 	b.w	8009624 <_strtol_l.constprop.0>

0800972c <__ssputs_r>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	688e      	ldr	r6, [r1, #8]
 8009732:	461f      	mov	r7, r3
 8009734:	42be      	cmp	r6, r7
 8009736:	680b      	ldr	r3, [r1, #0]
 8009738:	4682      	mov	sl, r0
 800973a:	460c      	mov	r4, r1
 800973c:	4690      	mov	r8, r2
 800973e:	d82c      	bhi.n	800979a <__ssputs_r+0x6e>
 8009740:	898a      	ldrh	r2, [r1, #12]
 8009742:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009746:	d026      	beq.n	8009796 <__ssputs_r+0x6a>
 8009748:	6965      	ldr	r5, [r4, #20]
 800974a:	6909      	ldr	r1, [r1, #16]
 800974c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009750:	eba3 0901 	sub.w	r9, r3, r1
 8009754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009758:	1c7b      	adds	r3, r7, #1
 800975a:	444b      	add	r3, r9
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	429d      	cmp	r5, r3
 8009760:	bf38      	it	cc
 8009762:	461d      	movcc	r5, r3
 8009764:	0553      	lsls	r3, r2, #21
 8009766:	d527      	bpl.n	80097b8 <__ssputs_r+0x8c>
 8009768:	4629      	mov	r1, r5
 800976a:	f7fc fc07 	bl	8005f7c <_malloc_r>
 800976e:	4606      	mov	r6, r0
 8009770:	b360      	cbz	r0, 80097cc <__ssputs_r+0xa0>
 8009772:	6921      	ldr	r1, [r4, #16]
 8009774:	464a      	mov	r2, r9
 8009776:	f7fd fdba 	bl	80072ee <memcpy>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	6126      	str	r6, [r4, #16]
 8009788:	6165      	str	r5, [r4, #20]
 800978a:	444e      	add	r6, r9
 800978c:	eba5 0509 	sub.w	r5, r5, r9
 8009790:	6026      	str	r6, [r4, #0]
 8009792:	60a5      	str	r5, [r4, #8]
 8009794:	463e      	mov	r6, r7
 8009796:	42be      	cmp	r6, r7
 8009798:	d900      	bls.n	800979c <__ssputs_r+0x70>
 800979a:	463e      	mov	r6, r7
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	4632      	mov	r2, r6
 80097a0:	4641      	mov	r1, r8
 80097a2:	f000 fb6f 	bl	8009e84 <memmove>
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	1b9b      	subs	r3, r3, r6
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	4433      	add	r3, r6
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	2000      	movs	r0, #0
 80097b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b8:	462a      	mov	r2, r5
 80097ba:	f000 ff56 	bl	800a66a <_realloc_r>
 80097be:	4606      	mov	r6, r0
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d1e0      	bne.n	8009786 <__ssputs_r+0x5a>
 80097c4:	6921      	ldr	r1, [r4, #16]
 80097c6:	4650      	mov	r0, sl
 80097c8:	f7fe fc20 	bl	800800c <_free_r>
 80097cc:	230c      	movs	r3, #12
 80097ce:	f8ca 3000 	str.w	r3, [sl]
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	e7e9      	b.n	80097b4 <__ssputs_r+0x88>

080097e0 <_svfiprintf_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	4698      	mov	r8, r3
 80097e6:	898b      	ldrh	r3, [r1, #12]
 80097e8:	061b      	lsls	r3, r3, #24
 80097ea:	b09d      	sub	sp, #116	; 0x74
 80097ec:	4607      	mov	r7, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	4614      	mov	r4, r2
 80097f2:	d50e      	bpl.n	8009812 <_svfiprintf_r+0x32>
 80097f4:	690b      	ldr	r3, [r1, #16]
 80097f6:	b963      	cbnz	r3, 8009812 <_svfiprintf_r+0x32>
 80097f8:	2140      	movs	r1, #64	; 0x40
 80097fa:	f7fc fbbf 	bl	8005f7c <_malloc_r>
 80097fe:	6028      	str	r0, [r5, #0]
 8009800:	6128      	str	r0, [r5, #16]
 8009802:	b920      	cbnz	r0, 800980e <_svfiprintf_r+0x2e>
 8009804:	230c      	movs	r3, #12
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	e0d0      	b.n	80099b0 <_svfiprintf_r+0x1d0>
 800980e:	2340      	movs	r3, #64	; 0x40
 8009810:	616b      	str	r3, [r5, #20]
 8009812:	2300      	movs	r3, #0
 8009814:	9309      	str	r3, [sp, #36]	; 0x24
 8009816:	2320      	movs	r3, #32
 8009818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800981c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009820:	2330      	movs	r3, #48	; 0x30
 8009822:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099c8 <_svfiprintf_r+0x1e8>
 8009826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800982a:	f04f 0901 	mov.w	r9, #1
 800982e:	4623      	mov	r3, r4
 8009830:	469a      	mov	sl, r3
 8009832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009836:	b10a      	cbz	r2, 800983c <_svfiprintf_r+0x5c>
 8009838:	2a25      	cmp	r2, #37	; 0x25
 800983a:	d1f9      	bne.n	8009830 <_svfiprintf_r+0x50>
 800983c:	ebba 0b04 	subs.w	fp, sl, r4
 8009840:	d00b      	beq.n	800985a <_svfiprintf_r+0x7a>
 8009842:	465b      	mov	r3, fp
 8009844:	4622      	mov	r2, r4
 8009846:	4629      	mov	r1, r5
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff ff6f 	bl	800972c <__ssputs_r>
 800984e:	3001      	adds	r0, #1
 8009850:	f000 80a9 	beq.w	80099a6 <_svfiprintf_r+0x1c6>
 8009854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009856:	445a      	add	r2, fp
 8009858:	9209      	str	r2, [sp, #36]	; 0x24
 800985a:	f89a 3000 	ldrb.w	r3, [sl]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80a1 	beq.w	80099a6 <_svfiprintf_r+0x1c6>
 8009864:	2300      	movs	r3, #0
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986e:	f10a 0a01 	add.w	sl, sl, #1
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	9307      	str	r3, [sp, #28]
 8009876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800987a:	931a      	str	r3, [sp, #104]	; 0x68
 800987c:	4654      	mov	r4, sl
 800987e:	2205      	movs	r2, #5
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	4850      	ldr	r0, [pc, #320]	; (80099c8 <_svfiprintf_r+0x1e8>)
 8009886:	f7f6 fcb3 	bl	80001f0 <memchr>
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	b9d8      	cbnz	r0, 80098c6 <_svfiprintf_r+0xe6>
 800988e:	06d0      	lsls	r0, r2, #27
 8009890:	bf44      	itt	mi
 8009892:	2320      	movmi	r3, #32
 8009894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009898:	0711      	lsls	r1, r2, #28
 800989a:	bf44      	itt	mi
 800989c:	232b      	movmi	r3, #43	; 0x2b
 800989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a2:	f89a 3000 	ldrb.w	r3, [sl]
 80098a6:	2b2a      	cmp	r3, #42	; 0x2a
 80098a8:	d015      	beq.n	80098d6 <_svfiprintf_r+0xf6>
 80098aa:	9a07      	ldr	r2, [sp, #28]
 80098ac:	4654      	mov	r4, sl
 80098ae:	2000      	movs	r0, #0
 80098b0:	f04f 0c0a 	mov.w	ip, #10
 80098b4:	4621      	mov	r1, r4
 80098b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ba:	3b30      	subs	r3, #48	; 0x30
 80098bc:	2b09      	cmp	r3, #9
 80098be:	d94d      	bls.n	800995c <_svfiprintf_r+0x17c>
 80098c0:	b1b0      	cbz	r0, 80098f0 <_svfiprintf_r+0x110>
 80098c2:	9207      	str	r2, [sp, #28]
 80098c4:	e014      	b.n	80098f0 <_svfiprintf_r+0x110>
 80098c6:	eba0 0308 	sub.w	r3, r0, r8
 80098ca:	fa09 f303 	lsl.w	r3, r9, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	46a2      	mov	sl, r4
 80098d4:	e7d2      	b.n	800987c <_svfiprintf_r+0x9c>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	1d19      	adds	r1, r3, #4
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bfbb      	ittet	lt
 80098e2:	425b      	neglt	r3, r3
 80098e4:	f042 0202 	orrlt.w	r2, r2, #2
 80098e8:	9307      	strge	r3, [sp, #28]
 80098ea:	9307      	strlt	r3, [sp, #28]
 80098ec:	bfb8      	it	lt
 80098ee:	9204      	strlt	r2, [sp, #16]
 80098f0:	7823      	ldrb	r3, [r4, #0]
 80098f2:	2b2e      	cmp	r3, #46	; 0x2e
 80098f4:	d10c      	bne.n	8009910 <_svfiprintf_r+0x130>
 80098f6:	7863      	ldrb	r3, [r4, #1]
 80098f8:	2b2a      	cmp	r3, #42	; 0x2a
 80098fa:	d134      	bne.n	8009966 <_svfiprintf_r+0x186>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	1d1a      	adds	r2, r3, #4
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	9203      	str	r2, [sp, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	bfb8      	it	lt
 8009908:	f04f 33ff 	movlt.w	r3, #4294967295
 800990c:	3402      	adds	r4, #2
 800990e:	9305      	str	r3, [sp, #20]
 8009910:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099d8 <_svfiprintf_r+0x1f8>
 8009914:	7821      	ldrb	r1, [r4, #0]
 8009916:	2203      	movs	r2, #3
 8009918:	4650      	mov	r0, sl
 800991a:	f7f6 fc69 	bl	80001f0 <memchr>
 800991e:	b138      	cbz	r0, 8009930 <_svfiprintf_r+0x150>
 8009920:	9b04      	ldr	r3, [sp, #16]
 8009922:	eba0 000a 	sub.w	r0, r0, sl
 8009926:	2240      	movs	r2, #64	; 0x40
 8009928:	4082      	lsls	r2, r0
 800992a:	4313      	orrs	r3, r2
 800992c:	3401      	adds	r4, #1
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	4825      	ldr	r0, [pc, #148]	; (80099cc <_svfiprintf_r+0x1ec>)
 8009936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800993a:	2206      	movs	r2, #6
 800993c:	f7f6 fc58 	bl	80001f0 <memchr>
 8009940:	2800      	cmp	r0, #0
 8009942:	d038      	beq.n	80099b6 <_svfiprintf_r+0x1d6>
 8009944:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <_svfiprintf_r+0x1f0>)
 8009946:	bb1b      	cbnz	r3, 8009990 <_svfiprintf_r+0x1b0>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	3307      	adds	r3, #7
 800994c:	f023 0307 	bic.w	r3, r3, #7
 8009950:	3308      	adds	r3, #8
 8009952:	9303      	str	r3, [sp, #12]
 8009954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009956:	4433      	add	r3, r6
 8009958:	9309      	str	r3, [sp, #36]	; 0x24
 800995a:	e768      	b.n	800982e <_svfiprintf_r+0x4e>
 800995c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009960:	460c      	mov	r4, r1
 8009962:	2001      	movs	r0, #1
 8009964:	e7a6      	b.n	80098b4 <_svfiprintf_r+0xd4>
 8009966:	2300      	movs	r3, #0
 8009968:	3401      	adds	r4, #1
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	4619      	mov	r1, r3
 800996e:	f04f 0c0a 	mov.w	ip, #10
 8009972:	4620      	mov	r0, r4
 8009974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009978:	3a30      	subs	r2, #48	; 0x30
 800997a:	2a09      	cmp	r2, #9
 800997c:	d903      	bls.n	8009986 <_svfiprintf_r+0x1a6>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0c6      	beq.n	8009910 <_svfiprintf_r+0x130>
 8009982:	9105      	str	r1, [sp, #20]
 8009984:	e7c4      	b.n	8009910 <_svfiprintf_r+0x130>
 8009986:	fb0c 2101 	mla	r1, ip, r1, r2
 800998a:	4604      	mov	r4, r0
 800998c:	2301      	movs	r3, #1
 800998e:	e7f0      	b.n	8009972 <_svfiprintf_r+0x192>
 8009990:	ab03      	add	r3, sp, #12
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	462a      	mov	r2, r5
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <_svfiprintf_r+0x1f4>)
 8009998:	a904      	add	r1, sp, #16
 800999a:	4638      	mov	r0, r7
 800999c:	f7fc fc1a 	bl	80061d4 <_printf_float>
 80099a0:	1c42      	adds	r2, r0, #1
 80099a2:	4606      	mov	r6, r0
 80099a4:	d1d6      	bne.n	8009954 <_svfiprintf_r+0x174>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	065b      	lsls	r3, r3, #25
 80099aa:	f53f af2d 	bmi.w	8009808 <_svfiprintf_r+0x28>
 80099ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b0:	b01d      	add	sp, #116	; 0x74
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	462a      	mov	r2, r5
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <_svfiprintf_r+0x1f4>)
 80099be:	a904      	add	r1, sp, #16
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7fc feab 	bl	800671c <_printf_i>
 80099c6:	e7eb      	b.n	80099a0 <_svfiprintf_r+0x1c0>
 80099c8:	0800ae21 	.word	0x0800ae21
 80099cc:	0800ae2b 	.word	0x0800ae2b
 80099d0:	080061d5 	.word	0x080061d5
 80099d4:	0800972d 	.word	0x0800972d
 80099d8:	0800ae27 	.word	0x0800ae27

080099dc <__sfputc_r>:
 80099dc:	6893      	ldr	r3, [r2, #8]
 80099de:	3b01      	subs	r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	b410      	push	{r4}
 80099e4:	6093      	str	r3, [r2, #8]
 80099e6:	da08      	bge.n	80099fa <__sfputc_r+0x1e>
 80099e8:	6994      	ldr	r4, [r2, #24]
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	db01      	blt.n	80099f2 <__sfputc_r+0x16>
 80099ee:	290a      	cmp	r1, #10
 80099f0:	d103      	bne.n	80099fa <__sfputc_r+0x1e>
 80099f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f6:	f7fd bb56 	b.w	80070a6 <__swbuf_r>
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	1c58      	adds	r0, r3, #1
 80099fe:	6010      	str	r0, [r2, #0]
 8009a00:	7019      	strb	r1, [r3, #0]
 8009a02:	4608      	mov	r0, r1
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <__sfputs_r>:
 8009a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	18d5      	adds	r5, r2, r3
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	d101      	bne.n	8009a1c <__sfputs_r+0x12>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e007      	b.n	8009a2c <__sfputs_r+0x22>
 8009a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a20:	463a      	mov	r2, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffda 	bl	80099dc <__sfputc_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d1f3      	bne.n	8009a14 <__sfputs_r+0xa>
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a30 <_vfiprintf_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	460d      	mov	r5, r1
 8009a36:	b09d      	sub	sp, #116	; 0x74
 8009a38:	4614      	mov	r4, r2
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	b118      	cbz	r0, 8009a48 <_vfiprintf_r+0x18>
 8009a40:	6a03      	ldr	r3, [r0, #32]
 8009a42:	b90b      	cbnz	r3, 8009a48 <_vfiprintf_r+0x18>
 8009a44:	f7fd fa28 	bl	8006e98 <__sinit>
 8009a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a4a:	07d9      	lsls	r1, r3, #31
 8009a4c:	d405      	bmi.n	8009a5a <_vfiprintf_r+0x2a>
 8009a4e:	89ab      	ldrh	r3, [r5, #12]
 8009a50:	059a      	lsls	r2, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_vfiprintf_r+0x2a>
 8009a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a56:	f7fd fc48 	bl	80072ea <__retarget_lock_acquire_recursive>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	071b      	lsls	r3, r3, #28
 8009a5e:	d501      	bpl.n	8009a64 <_vfiprintf_r+0x34>
 8009a60:	692b      	ldr	r3, [r5, #16]
 8009a62:	b99b      	cbnz	r3, 8009a8c <_vfiprintf_r+0x5c>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7fd fb5a 	bl	8007120 <__swsetup_r>
 8009a6c:	b170      	cbz	r0, 8009a8c <_vfiprintf_r+0x5c>
 8009a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a70:	07dc      	lsls	r4, r3, #31
 8009a72:	d504      	bpl.n	8009a7e <_vfiprintf_r+0x4e>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	b01d      	add	sp, #116	; 0x74
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	0598      	lsls	r0, r3, #22
 8009a82:	d4f7      	bmi.n	8009a74 <_vfiprintf_r+0x44>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f7fd fc31 	bl	80072ec <__retarget_lock_release_recursive>
 8009a8a:	e7f3      	b.n	8009a74 <_vfiprintf_r+0x44>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a90:	2320      	movs	r3, #32
 8009a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a9a:	2330      	movs	r3, #48	; 0x30
 8009a9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c50 <_vfiprintf_r+0x220>
 8009aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa4:	f04f 0901 	mov.w	r9, #1
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	469a      	mov	sl, r3
 8009aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab0:	b10a      	cbz	r2, 8009ab6 <_vfiprintf_r+0x86>
 8009ab2:	2a25      	cmp	r2, #37	; 0x25
 8009ab4:	d1f9      	bne.n	8009aaa <_vfiprintf_r+0x7a>
 8009ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aba:	d00b      	beq.n	8009ad4 <_vfiprintf_r+0xa4>
 8009abc:	465b      	mov	r3, fp
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ffa1 	bl	8009a0a <__sfputs_r>
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f000 80a9 	beq.w	8009c20 <_vfiprintf_r+0x1f0>
 8009ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad0:	445a      	add	r2, fp
 8009ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80a1 	beq.w	8009c20 <_vfiprintf_r+0x1f0>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae8:	f10a 0a01 	add.w	sl, sl, #1
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af4:	931a      	str	r3, [sp, #104]	; 0x68
 8009af6:	4654      	mov	r4, sl
 8009af8:	2205      	movs	r2, #5
 8009afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afe:	4854      	ldr	r0, [pc, #336]	; (8009c50 <_vfiprintf_r+0x220>)
 8009b00:	f7f6 fb76 	bl	80001f0 <memchr>
 8009b04:	9a04      	ldr	r2, [sp, #16]
 8009b06:	b9d8      	cbnz	r0, 8009b40 <_vfiprintf_r+0x110>
 8009b08:	06d1      	lsls	r1, r2, #27
 8009b0a:	bf44      	itt	mi
 8009b0c:	2320      	movmi	r3, #32
 8009b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b12:	0713      	lsls	r3, r2, #28
 8009b14:	bf44      	itt	mi
 8009b16:	232b      	movmi	r3, #43	; 0x2b
 8009b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b20:	2b2a      	cmp	r3, #42	; 0x2a
 8009b22:	d015      	beq.n	8009b50 <_vfiprintf_r+0x120>
 8009b24:	9a07      	ldr	r2, [sp, #28]
 8009b26:	4654      	mov	r4, sl
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f04f 0c0a 	mov.w	ip, #10
 8009b2e:	4621      	mov	r1, r4
 8009b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b34:	3b30      	subs	r3, #48	; 0x30
 8009b36:	2b09      	cmp	r3, #9
 8009b38:	d94d      	bls.n	8009bd6 <_vfiprintf_r+0x1a6>
 8009b3a:	b1b0      	cbz	r0, 8009b6a <_vfiprintf_r+0x13a>
 8009b3c:	9207      	str	r2, [sp, #28]
 8009b3e:	e014      	b.n	8009b6a <_vfiprintf_r+0x13a>
 8009b40:	eba0 0308 	sub.w	r3, r0, r8
 8009b44:	fa09 f303 	lsl.w	r3, r9, r3
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	46a2      	mov	sl, r4
 8009b4e:	e7d2      	b.n	8009af6 <_vfiprintf_r+0xc6>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	1d19      	adds	r1, r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	9103      	str	r1, [sp, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfbb      	ittet	lt
 8009b5c:	425b      	neglt	r3, r3
 8009b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b62:	9307      	strge	r3, [sp, #28]
 8009b64:	9307      	strlt	r3, [sp, #28]
 8009b66:	bfb8      	it	lt
 8009b68:	9204      	strlt	r2, [sp, #16]
 8009b6a:	7823      	ldrb	r3, [r4, #0]
 8009b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6e:	d10c      	bne.n	8009b8a <_vfiprintf_r+0x15a>
 8009b70:	7863      	ldrb	r3, [r4, #1]
 8009b72:	2b2a      	cmp	r3, #42	; 0x2a
 8009b74:	d134      	bne.n	8009be0 <_vfiprintf_r+0x1b0>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	9203      	str	r2, [sp, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bfb8      	it	lt
 8009b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b86:	3402      	adds	r4, #2
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c60 <_vfiprintf_r+0x230>
 8009b8e:	7821      	ldrb	r1, [r4, #0]
 8009b90:	2203      	movs	r2, #3
 8009b92:	4650      	mov	r0, sl
 8009b94:	f7f6 fb2c 	bl	80001f0 <memchr>
 8009b98:	b138      	cbz	r0, 8009baa <_vfiprintf_r+0x17a>
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ba0:	2240      	movs	r2, #64	; 0x40
 8009ba2:	4082      	lsls	r2, r0
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	3401      	adds	r4, #1
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bae:	4829      	ldr	r0, [pc, #164]	; (8009c54 <_vfiprintf_r+0x224>)
 8009bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bb4:	2206      	movs	r2, #6
 8009bb6:	f7f6 fb1b 	bl	80001f0 <memchr>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d03f      	beq.n	8009c3e <_vfiprintf_r+0x20e>
 8009bbe:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <_vfiprintf_r+0x228>)
 8009bc0:	bb1b      	cbnz	r3, 8009c0a <_vfiprintf_r+0x1da>
 8009bc2:	9b03      	ldr	r3, [sp, #12]
 8009bc4:	3307      	adds	r3, #7
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	3308      	adds	r3, #8
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	443b      	add	r3, r7
 8009bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd4:	e768      	b.n	8009aa8 <_vfiprintf_r+0x78>
 8009bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bda:	460c      	mov	r4, r1
 8009bdc:	2001      	movs	r0, #1
 8009bde:	e7a6      	b.n	8009b2e <_vfiprintf_r+0xfe>
 8009be0:	2300      	movs	r3, #0
 8009be2:	3401      	adds	r4, #1
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	4619      	mov	r1, r3
 8009be8:	f04f 0c0a 	mov.w	ip, #10
 8009bec:	4620      	mov	r0, r4
 8009bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf2:	3a30      	subs	r2, #48	; 0x30
 8009bf4:	2a09      	cmp	r2, #9
 8009bf6:	d903      	bls.n	8009c00 <_vfiprintf_r+0x1d0>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0c6      	beq.n	8009b8a <_vfiprintf_r+0x15a>
 8009bfc:	9105      	str	r1, [sp, #20]
 8009bfe:	e7c4      	b.n	8009b8a <_vfiprintf_r+0x15a>
 8009c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c04:	4604      	mov	r4, r0
 8009c06:	2301      	movs	r3, #1
 8009c08:	e7f0      	b.n	8009bec <_vfiprintf_r+0x1bc>
 8009c0a:	ab03      	add	r3, sp, #12
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	462a      	mov	r2, r5
 8009c10:	4b12      	ldr	r3, [pc, #72]	; (8009c5c <_vfiprintf_r+0x22c>)
 8009c12:	a904      	add	r1, sp, #16
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7fc fadd 	bl	80061d4 <_printf_float>
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	1c78      	adds	r0, r7, #1
 8009c1e:	d1d6      	bne.n	8009bce <_vfiprintf_r+0x19e>
 8009c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c22:	07d9      	lsls	r1, r3, #31
 8009c24:	d405      	bmi.n	8009c32 <_vfiprintf_r+0x202>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	059a      	lsls	r2, r3, #22
 8009c2a:	d402      	bmi.n	8009c32 <_vfiprintf_r+0x202>
 8009c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2e:	f7fd fb5d 	bl	80072ec <__retarget_lock_release_recursive>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	065b      	lsls	r3, r3, #25
 8009c36:	f53f af1d 	bmi.w	8009a74 <_vfiprintf_r+0x44>
 8009c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3c:	e71c      	b.n	8009a78 <_vfiprintf_r+0x48>
 8009c3e:	ab03      	add	r3, sp, #12
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	462a      	mov	r2, r5
 8009c44:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <_vfiprintf_r+0x22c>)
 8009c46:	a904      	add	r1, sp, #16
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7fc fd67 	bl	800671c <_printf_i>
 8009c4e:	e7e4      	b.n	8009c1a <_vfiprintf_r+0x1ea>
 8009c50:	0800ae21 	.word	0x0800ae21
 8009c54:	0800ae2b 	.word	0x0800ae2b
 8009c58:	080061d5 	.word	0x080061d5
 8009c5c:	08009a0b 	.word	0x08009a0b
 8009c60:	0800ae27 	.word	0x0800ae27

08009c64 <__sflush_r>:
 8009c64:	898a      	ldrh	r2, [r1, #12]
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	0710      	lsls	r0, r2, #28
 8009c6e:	460c      	mov	r4, r1
 8009c70:	d458      	bmi.n	8009d24 <__sflush_r+0xc0>
 8009c72:	684b      	ldr	r3, [r1, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc05      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dc02      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c86:	2e00      	cmp	r6, #0
 8009c88:	d0f9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c90:	682f      	ldr	r7, [r5, #0]
 8009c92:	6a21      	ldr	r1, [r4, #32]
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	d032      	beq.n	8009cfe <__sflush_r+0x9a>
 8009c98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	075a      	lsls	r2, r3, #29
 8009c9e:	d505      	bpl.n	8009cac <__sflush_r+0x48>
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	1ac0      	subs	r0, r0, r3
 8009ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca6:	b10b      	cbz	r3, 8009cac <__sflush_r+0x48>
 8009ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009caa:	1ac0      	subs	r0, r0, r3
 8009cac:	2300      	movs	r3, #0
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb2:	6a21      	ldr	r1, [r4, #32]
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b0      	blx	r6
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	d106      	bne.n	8009ccc <__sflush_r+0x68>
 8009cbe:	6829      	ldr	r1, [r5, #0]
 8009cc0:	291d      	cmp	r1, #29
 8009cc2:	d82b      	bhi.n	8009d1c <__sflush_r+0xb8>
 8009cc4:	4a29      	ldr	r2, [pc, #164]	; (8009d6c <__sflush_r+0x108>)
 8009cc6:	410a      	asrs	r2, r1
 8009cc8:	07d6      	lsls	r6, r2, #31
 8009cca:	d427      	bmi.n	8009d1c <__sflush_r+0xb8>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6062      	str	r2, [r4, #4]
 8009cd0:	04d9      	lsls	r1, r3, #19
 8009cd2:	6922      	ldr	r2, [r4, #16]
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	d504      	bpl.n	8009ce2 <__sflush_r+0x7e>
 8009cd8:	1c42      	adds	r2, r0, #1
 8009cda:	d101      	bne.n	8009ce0 <__sflush_r+0x7c>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b903      	cbnz	r3, 8009ce2 <__sflush_r+0x7e>
 8009ce0:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce4:	602f      	str	r7, [r5, #0]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d0c9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	d002      	beq.n	8009cf8 <__sflush_r+0x94>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7fe f98a 	bl	800800c <_free_r>
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8009cfc:	e7c0      	b.n	8009c80 <__sflush_r+0x1c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b0      	blx	r6
 8009d04:	1c41      	adds	r1, r0, #1
 8009d06:	d1c8      	bne.n	8009c9a <__sflush_r+0x36>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c5      	beq.n	8009c9a <__sflush_r+0x36>
 8009d0e:	2b1d      	cmp	r3, #29
 8009d10:	d001      	beq.n	8009d16 <__sflush_r+0xb2>
 8009d12:	2b16      	cmp	r3, #22
 8009d14:	d101      	bne.n	8009d1a <__sflush_r+0xb6>
 8009d16:	602f      	str	r7, [r5, #0]
 8009d18:	e7b1      	b.n	8009c7e <__sflush_r+0x1a>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7ad      	b.n	8009c80 <__sflush_r+0x1c>
 8009d24:	690f      	ldr	r7, [r1, #16]
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	d0a9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009d2a:	0793      	lsls	r3, r2, #30
 8009d2c:	680e      	ldr	r6, [r1, #0]
 8009d2e:	bf08      	it	eq
 8009d30:	694b      	ldreq	r3, [r1, #20]
 8009d32:	600f      	str	r7, [r1, #0]
 8009d34:	bf18      	it	ne
 8009d36:	2300      	movne	r3, #0
 8009d38:	eba6 0807 	sub.w	r8, r6, r7
 8009d3c:	608b      	str	r3, [r1, #8]
 8009d3e:	f1b8 0f00 	cmp.w	r8, #0
 8009d42:	dd9c      	ble.n	8009c7e <__sflush_r+0x1a>
 8009d44:	6a21      	ldr	r1, [r4, #32]
 8009d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d48:	4643      	mov	r3, r8
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dc06      	bgt.n	8009d62 <__sflush_r+0xfe>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	e78e      	b.n	8009c80 <__sflush_r+0x1c>
 8009d62:	4407      	add	r7, r0
 8009d64:	eba8 0800 	sub.w	r8, r8, r0
 8009d68:	e7e9      	b.n	8009d3e <__sflush_r+0xda>
 8009d6a:	bf00      	nop
 8009d6c:	dfbffffe 	.word	0xdfbffffe

08009d70 <_fflush_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	690b      	ldr	r3, [r1, #16]
 8009d74:	4605      	mov	r5, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	b913      	cbnz	r3, 8009d80 <_fflush_r+0x10>
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	b118      	cbz	r0, 8009d8a <_fflush_r+0x1a>
 8009d82:	6a03      	ldr	r3, [r0, #32]
 8009d84:	b90b      	cbnz	r3, 8009d8a <_fflush_r+0x1a>
 8009d86:	f7fd f887 	bl	8006e98 <__sinit>
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f3      	beq.n	8009d7a <_fflush_r+0xa>
 8009d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d94:	07d0      	lsls	r0, r2, #31
 8009d96:	d404      	bmi.n	8009da2 <_fflush_r+0x32>
 8009d98:	0599      	lsls	r1, r3, #22
 8009d9a:	d402      	bmi.n	8009da2 <_fflush_r+0x32>
 8009d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9e:	f7fd faa4 	bl	80072ea <__retarget_lock_acquire_recursive>
 8009da2:	4628      	mov	r0, r5
 8009da4:	4621      	mov	r1, r4
 8009da6:	f7ff ff5d 	bl	8009c64 <__sflush_r>
 8009daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dac:	07da      	lsls	r2, r3, #31
 8009dae:	4605      	mov	r5, r0
 8009db0:	d4e4      	bmi.n	8009d7c <_fflush_r+0xc>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	d4e1      	bmi.n	8009d7c <_fflush_r+0xc>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f7fd fa97 	bl	80072ec <__retarget_lock_release_recursive>
 8009dbe:	e7dd      	b.n	8009d7c <_fflush_r+0xc>

08009dc0 <__swhatbuf_r>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	b096      	sub	sp, #88	; 0x58
 8009dcc:	4615      	mov	r5, r2
 8009dce:	461e      	mov	r6, r3
 8009dd0:	da0d      	bge.n	8009dee <__swhatbuf_r+0x2e>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	bf0c      	ite	eq
 8009dde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009de2:	2340      	movne	r3, #64	; 0x40
 8009de4:	2000      	movs	r0, #0
 8009de6:	6031      	str	r1, [r6, #0]
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	b016      	add	sp, #88	; 0x58
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
 8009dee:	466a      	mov	r2, sp
 8009df0:	f000 f874 	bl	8009edc <_fstat_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dbec      	blt.n	8009dd2 <__swhatbuf_r+0x12>
 8009df8:	9901      	ldr	r1, [sp, #4]
 8009dfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009dfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e02:	4259      	negs	r1, r3
 8009e04:	4159      	adcs	r1, r3
 8009e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0a:	e7eb      	b.n	8009de4 <__swhatbuf_r+0x24>

08009e0c <__smakebuf_r>:
 8009e0c:	898b      	ldrh	r3, [r1, #12]
 8009e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e10:	079d      	lsls	r5, r3, #30
 8009e12:	4606      	mov	r6, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	d507      	bpl.n	8009e28 <__smakebuf_r+0x1c>
 8009e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	6123      	str	r3, [r4, #16]
 8009e20:	2301      	movs	r3, #1
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	b002      	add	sp, #8
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	ab01      	add	r3, sp, #4
 8009e2a:	466a      	mov	r2, sp
 8009e2c:	f7ff ffc8 	bl	8009dc0 <__swhatbuf_r>
 8009e30:	9900      	ldr	r1, [sp, #0]
 8009e32:	4605      	mov	r5, r0
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7fc f8a1 	bl	8005f7c <_malloc_r>
 8009e3a:	b948      	cbnz	r0, 8009e50 <__smakebuf_r+0x44>
 8009e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d4ef      	bmi.n	8009e24 <__smakebuf_r+0x18>
 8009e44:	f023 0303 	bic.w	r3, r3, #3
 8009e48:	f043 0302 	orr.w	r3, r3, #2
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	e7e3      	b.n	8009e18 <__smakebuf_r+0xc>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	6020      	str	r0, [r4, #0]
 8009e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	9b00      	ldr	r3, [sp, #0]
 8009e5c:	6163      	str	r3, [r4, #20]
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	6120      	str	r0, [r4, #16]
 8009e62:	b15b      	cbz	r3, 8009e7c <__smakebuf_r+0x70>
 8009e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f000 f849 	bl	8009f00 <_isatty_r>
 8009e6e:	b128      	cbz	r0, 8009e7c <__smakebuf_r+0x70>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f023 0303 	bic.w	r3, r3, #3
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	431d      	orrs	r5, r3
 8009e80:	81a5      	strh	r5, [r4, #12]
 8009e82:	e7cf      	b.n	8009e24 <__smakebuf_r+0x18>

08009e84 <memmove>:
 8009e84:	4288      	cmp	r0, r1
 8009e86:	b510      	push	{r4, lr}
 8009e88:	eb01 0402 	add.w	r4, r1, r2
 8009e8c:	d902      	bls.n	8009e94 <memmove+0x10>
 8009e8e:	4284      	cmp	r4, r0
 8009e90:	4623      	mov	r3, r4
 8009e92:	d807      	bhi.n	8009ea4 <memmove+0x20>
 8009e94:	1e43      	subs	r3, r0, #1
 8009e96:	42a1      	cmp	r1, r4
 8009e98:	d008      	beq.n	8009eac <memmove+0x28>
 8009e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ea2:	e7f8      	b.n	8009e96 <memmove+0x12>
 8009ea4:	4402      	add	r2, r0
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	428a      	cmp	r2, r1
 8009eaa:	d100      	bne.n	8009eae <memmove+0x2a>
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eb6:	e7f7      	b.n	8009ea8 <memmove+0x24>

08009eb8 <strncmp>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	b16a      	cbz	r2, 8009ed8 <strncmp+0x20>
 8009ebc:	3901      	subs	r1, #1
 8009ebe:	1884      	adds	r4, r0, r2
 8009ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d103      	bne.n	8009ed4 <strncmp+0x1c>
 8009ecc:	42a0      	cmp	r0, r4
 8009ece:	d001      	beq.n	8009ed4 <strncmp+0x1c>
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d1f5      	bne.n	8009ec0 <strncmp+0x8>
 8009ed4:	1ad0      	subs	r0, r2, r3
 8009ed6:	bd10      	pop	{r4, pc}
 8009ed8:	4610      	mov	r0, r2
 8009eda:	e7fc      	b.n	8009ed6 <strncmp+0x1e>

08009edc <_fstat_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	; (8009efc <_fstat_r+0x20>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	f7f7 fe34 	bl	8001b56 <_fstat>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	d102      	bne.n	8009ef8 <_fstat_r+0x1c>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	b103      	cbz	r3, 8009ef8 <_fstat_r+0x1c>
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	bd38      	pop	{r3, r4, r5, pc}
 8009efa:	bf00      	nop
 8009efc:	200006d8 	.word	0x200006d8

08009f00 <_isatty_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_isatty_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f7 fe33 	bl	8001b76 <_isatty>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_isatty_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_isatty_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	200006d8 	.word	0x200006d8

08009f20 <nan>:
 8009f20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f28 <nan+0x8>
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	00000000 	.word	0x00000000
 8009f2c:	7ff80000 	.word	0x7ff80000

08009f30 <__assert_func>:
 8009f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f32:	4614      	mov	r4, r2
 8009f34:	461a      	mov	r2, r3
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <__assert_func+0x2c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	68d8      	ldr	r0, [r3, #12]
 8009f3e:	b14c      	cbz	r4, 8009f54 <__assert_func+0x24>
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <__assert_func+0x30>)
 8009f42:	9100      	str	r1, [sp, #0]
 8009f44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f48:	4906      	ldr	r1, [pc, #24]	; (8009f64 <__assert_func+0x34>)
 8009f4a:	462b      	mov	r3, r5
 8009f4c:	f000 fbca 	bl	800a6e4 <fiprintf>
 8009f50:	f000 fbda 	bl	800a708 <abort>
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <__assert_func+0x38>)
 8009f56:	461c      	mov	r4, r3
 8009f58:	e7f3      	b.n	8009f42 <__assert_func+0x12>
 8009f5a:	bf00      	nop
 8009f5c:	20000294 	.word	0x20000294
 8009f60:	0800ae3a 	.word	0x0800ae3a
 8009f64:	0800ae47 	.word	0x0800ae47
 8009f68:	0800ae75 	.word	0x0800ae75

08009f6c <_calloc_r>:
 8009f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6e:	fba1 2402 	umull	r2, r4, r1, r2
 8009f72:	b94c      	cbnz	r4, 8009f88 <_calloc_r+0x1c>
 8009f74:	4611      	mov	r1, r2
 8009f76:	9201      	str	r2, [sp, #4]
 8009f78:	f7fc f800 	bl	8005f7c <_malloc_r>
 8009f7c:	9a01      	ldr	r2, [sp, #4]
 8009f7e:	4605      	mov	r5, r0
 8009f80:	b930      	cbnz	r0, 8009f90 <_calloc_r+0x24>
 8009f82:	4628      	mov	r0, r5
 8009f84:	b003      	add	sp, #12
 8009f86:	bd30      	pop	{r4, r5, pc}
 8009f88:	220c      	movs	r2, #12
 8009f8a:	6002      	str	r2, [r0, #0]
 8009f8c:	2500      	movs	r5, #0
 8009f8e:	e7f8      	b.n	8009f82 <_calloc_r+0x16>
 8009f90:	4621      	mov	r1, r4
 8009f92:	f7fd f91d 	bl	80071d0 <memset>
 8009f96:	e7f4      	b.n	8009f82 <_calloc_r+0x16>

08009f98 <rshift>:
 8009f98:	6903      	ldr	r3, [r0, #16]
 8009f9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009fa6:	f100 0414 	add.w	r4, r0, #20
 8009faa:	dd45      	ble.n	800a038 <rshift+0xa0>
 8009fac:	f011 011f 	ands.w	r1, r1, #31
 8009fb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009fb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009fb8:	d10c      	bne.n	8009fd4 <rshift+0x3c>
 8009fba:	f100 0710 	add.w	r7, r0, #16
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	42b1      	cmp	r1, r6
 8009fc2:	d334      	bcc.n	800a02e <rshift+0x96>
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	1eea      	subs	r2, r5, #3
 8009fca:	4296      	cmp	r6, r2
 8009fcc:	bf38      	it	cc
 8009fce:	2300      	movcc	r3, #0
 8009fd0:	4423      	add	r3, r4
 8009fd2:	e015      	b.n	800a000 <rshift+0x68>
 8009fd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fd8:	f1c1 0820 	rsb	r8, r1, #32
 8009fdc:	40cf      	lsrs	r7, r1
 8009fde:	f105 0e04 	add.w	lr, r5, #4
 8009fe2:	46a1      	mov	r9, r4
 8009fe4:	4576      	cmp	r6, lr
 8009fe6:	46f4      	mov	ip, lr
 8009fe8:	d815      	bhi.n	800a016 <rshift+0x7e>
 8009fea:	1a9a      	subs	r2, r3, r2
 8009fec:	0092      	lsls	r2, r2, #2
 8009fee:	3a04      	subs	r2, #4
 8009ff0:	3501      	adds	r5, #1
 8009ff2:	42ae      	cmp	r6, r5
 8009ff4:	bf38      	it	cc
 8009ff6:	2200      	movcc	r2, #0
 8009ff8:	18a3      	adds	r3, r4, r2
 8009ffa:	50a7      	str	r7, [r4, r2]
 8009ffc:	b107      	cbz	r7, 800a000 <rshift+0x68>
 8009ffe:	3304      	adds	r3, #4
 800a000:	1b1a      	subs	r2, r3, r4
 800a002:	42a3      	cmp	r3, r4
 800a004:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a008:	bf08      	it	eq
 800a00a:	2300      	moveq	r3, #0
 800a00c:	6102      	str	r2, [r0, #16]
 800a00e:	bf08      	it	eq
 800a010:	6143      	streq	r3, [r0, #20]
 800a012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a016:	f8dc c000 	ldr.w	ip, [ip]
 800a01a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a01e:	ea4c 0707 	orr.w	r7, ip, r7
 800a022:	f849 7b04 	str.w	r7, [r9], #4
 800a026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a02a:	40cf      	lsrs	r7, r1
 800a02c:	e7da      	b.n	8009fe4 <rshift+0x4c>
 800a02e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a032:	f847 cf04 	str.w	ip, [r7, #4]!
 800a036:	e7c3      	b.n	8009fc0 <rshift+0x28>
 800a038:	4623      	mov	r3, r4
 800a03a:	e7e1      	b.n	800a000 <rshift+0x68>

0800a03c <__hexdig_fun>:
 800a03c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a040:	2b09      	cmp	r3, #9
 800a042:	d802      	bhi.n	800a04a <__hexdig_fun+0xe>
 800a044:	3820      	subs	r0, #32
 800a046:	b2c0      	uxtb	r0, r0
 800a048:	4770      	bx	lr
 800a04a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a04e:	2b05      	cmp	r3, #5
 800a050:	d801      	bhi.n	800a056 <__hexdig_fun+0x1a>
 800a052:	3847      	subs	r0, #71	; 0x47
 800a054:	e7f7      	b.n	800a046 <__hexdig_fun+0xa>
 800a056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d801      	bhi.n	800a062 <__hexdig_fun+0x26>
 800a05e:	3827      	subs	r0, #39	; 0x27
 800a060:	e7f1      	b.n	800a046 <__hexdig_fun+0xa>
 800a062:	2000      	movs	r0, #0
 800a064:	4770      	bx	lr
	...

0800a068 <__gethex>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	4617      	mov	r7, r2
 800a06e:	680a      	ldr	r2, [r1, #0]
 800a070:	b085      	sub	sp, #20
 800a072:	f102 0b02 	add.w	fp, r2, #2
 800a076:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a07a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a07e:	4681      	mov	r9, r0
 800a080:	468a      	mov	sl, r1
 800a082:	9302      	str	r3, [sp, #8]
 800a084:	32fe      	adds	r2, #254	; 0xfe
 800a086:	eb02 030b 	add.w	r3, r2, fp
 800a08a:	46d8      	mov	r8, fp
 800a08c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2830      	cmp	r0, #48	; 0x30
 800a094:	d0f7      	beq.n	800a086 <__gethex+0x1e>
 800a096:	f7ff ffd1 	bl	800a03c <__hexdig_fun>
 800a09a:	4604      	mov	r4, r0
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d138      	bne.n	800a112 <__gethex+0xaa>
 800a0a0:	49a7      	ldr	r1, [pc, #668]	; (800a340 <__gethex+0x2d8>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	f7ff ff07 	bl	8009eb8 <strncmp>
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d169      	bne.n	800a184 <__gethex+0x11c>
 800a0b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a0b4:	465d      	mov	r5, fp
 800a0b6:	f7ff ffc1 	bl	800a03c <__hexdig_fun>
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d064      	beq.n	800a188 <__gethex+0x120>
 800a0be:	465a      	mov	r2, fp
 800a0c0:	7810      	ldrb	r0, [r2, #0]
 800a0c2:	2830      	cmp	r0, #48	; 0x30
 800a0c4:	4690      	mov	r8, r2
 800a0c6:	f102 0201 	add.w	r2, r2, #1
 800a0ca:	d0f9      	beq.n	800a0c0 <__gethex+0x58>
 800a0cc:	f7ff ffb6 	bl	800a03c <__hexdig_fun>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	fab0 f480 	clz	r4, r0
 800a0d6:	0964      	lsrs	r4, r4, #5
 800a0d8:	465e      	mov	r6, fp
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	4642      	mov	r2, r8
 800a0de:	4615      	mov	r5, r2
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	7828      	ldrb	r0, [r5, #0]
 800a0e4:	f7ff ffaa 	bl	800a03c <__hexdig_fun>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1f8      	bne.n	800a0de <__gethex+0x76>
 800a0ec:	4994      	ldr	r1, [pc, #592]	; (800a340 <__gethex+0x2d8>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f7ff fee1 	bl	8009eb8 <strncmp>
 800a0f6:	b978      	cbnz	r0, 800a118 <__gethex+0xb0>
 800a0f8:	b946      	cbnz	r6, 800a10c <__gethex+0xa4>
 800a0fa:	1c6e      	adds	r6, r5, #1
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	4615      	mov	r5, r2
 800a100:	3201      	adds	r2, #1
 800a102:	7828      	ldrb	r0, [r5, #0]
 800a104:	f7ff ff9a 	bl	800a03c <__hexdig_fun>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d1f8      	bne.n	800a0fe <__gethex+0x96>
 800a10c:	1b73      	subs	r3, r6, r5
 800a10e:	009e      	lsls	r6, r3, #2
 800a110:	e004      	b.n	800a11c <__gethex+0xb4>
 800a112:	2400      	movs	r4, #0
 800a114:	4626      	mov	r6, r4
 800a116:	e7e1      	b.n	800a0dc <__gethex+0x74>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	d1f7      	bne.n	800a10c <__gethex+0xa4>
 800a11c:	782b      	ldrb	r3, [r5, #0]
 800a11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a122:	2b50      	cmp	r3, #80	; 0x50
 800a124:	d13d      	bne.n	800a1a2 <__gethex+0x13a>
 800a126:	786b      	ldrb	r3, [r5, #1]
 800a128:	2b2b      	cmp	r3, #43	; 0x2b
 800a12a:	d02f      	beq.n	800a18c <__gethex+0x124>
 800a12c:	2b2d      	cmp	r3, #45	; 0x2d
 800a12e:	d031      	beq.n	800a194 <__gethex+0x12c>
 800a130:	1c69      	adds	r1, r5, #1
 800a132:	f04f 0b00 	mov.w	fp, #0
 800a136:	7808      	ldrb	r0, [r1, #0]
 800a138:	f7ff ff80 	bl	800a03c <__hexdig_fun>
 800a13c:	1e42      	subs	r2, r0, #1
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	2a18      	cmp	r2, #24
 800a142:	d82e      	bhi.n	800a1a2 <__gethex+0x13a>
 800a144:	f1a0 0210 	sub.w	r2, r0, #16
 800a148:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a14c:	f7ff ff76 	bl	800a03c <__hexdig_fun>
 800a150:	f100 3cff 	add.w	ip, r0, #4294967295
 800a154:	fa5f fc8c 	uxtb.w	ip, ip
 800a158:	f1bc 0f18 	cmp.w	ip, #24
 800a15c:	d91d      	bls.n	800a19a <__gethex+0x132>
 800a15e:	f1bb 0f00 	cmp.w	fp, #0
 800a162:	d000      	beq.n	800a166 <__gethex+0xfe>
 800a164:	4252      	negs	r2, r2
 800a166:	4416      	add	r6, r2
 800a168:	f8ca 1000 	str.w	r1, [sl]
 800a16c:	b1dc      	cbz	r4, 800a1a6 <__gethex+0x13e>
 800a16e:	9b01      	ldr	r3, [sp, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	bf14      	ite	ne
 800a174:	f04f 0800 	movne.w	r8, #0
 800a178:	f04f 0806 	moveq.w	r8, #6
 800a17c:	4640      	mov	r0, r8
 800a17e:	b005      	add	sp, #20
 800a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	4645      	mov	r5, r8
 800a186:	4626      	mov	r6, r4
 800a188:	2401      	movs	r4, #1
 800a18a:	e7c7      	b.n	800a11c <__gethex+0xb4>
 800a18c:	f04f 0b00 	mov.w	fp, #0
 800a190:	1ca9      	adds	r1, r5, #2
 800a192:	e7d0      	b.n	800a136 <__gethex+0xce>
 800a194:	f04f 0b01 	mov.w	fp, #1
 800a198:	e7fa      	b.n	800a190 <__gethex+0x128>
 800a19a:	230a      	movs	r3, #10
 800a19c:	fb03 0002 	mla	r0, r3, r2, r0
 800a1a0:	e7d0      	b.n	800a144 <__gethex+0xdc>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	e7e0      	b.n	800a168 <__gethex+0x100>
 800a1a6:	eba5 0308 	sub.w	r3, r5, r8
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	dc0a      	bgt.n	800a1c8 <__gethex+0x160>
 800a1b2:	4648      	mov	r0, r9
 800a1b4:	f7fd ff76 	bl	80080a4 <_Balloc>
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	b940      	cbnz	r0, 800a1ce <__gethex+0x166>
 800a1bc:	4b61      	ldr	r3, [pc, #388]	; (800a344 <__gethex+0x2dc>)
 800a1be:	4602      	mov	r2, r0
 800a1c0:	21e4      	movs	r1, #228	; 0xe4
 800a1c2:	4861      	ldr	r0, [pc, #388]	; (800a348 <__gethex+0x2e0>)
 800a1c4:	f7ff feb4 	bl	8009f30 <__assert_func>
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	105b      	asrs	r3, r3, #1
 800a1cc:	e7ef      	b.n	800a1ae <__gethex+0x146>
 800a1ce:	f100 0a14 	add.w	sl, r0, #20
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	495a      	ldr	r1, [pc, #360]	; (800a340 <__gethex+0x2d8>)
 800a1d6:	f8cd a004 	str.w	sl, [sp, #4]
 800a1da:	469b      	mov	fp, r3
 800a1dc:	45a8      	cmp	r8, r5
 800a1de:	d342      	bcc.n	800a266 <__gethex+0x1fe>
 800a1e0:	9801      	ldr	r0, [sp, #4]
 800a1e2:	f840 bb04 	str.w	fp, [r0], #4
 800a1e6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ea:	1080      	asrs	r0, r0, #2
 800a1ec:	6120      	str	r0, [r4, #16]
 800a1ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a1f2:	4658      	mov	r0, fp
 800a1f4:	f7fe f848 	bl	8008288 <__hi0bits>
 800a1f8:	683d      	ldr	r5, [r7, #0]
 800a1fa:	eba8 0000 	sub.w	r0, r8, r0
 800a1fe:	42a8      	cmp	r0, r5
 800a200:	dd59      	ble.n	800a2b6 <__gethex+0x24e>
 800a202:	eba0 0805 	sub.w	r8, r0, r5
 800a206:	4641      	mov	r1, r8
 800a208:	4620      	mov	r0, r4
 800a20a:	f7fe fbd7 	bl	80089bc <__any_on>
 800a20e:	4683      	mov	fp, r0
 800a210:	b1b8      	cbz	r0, 800a242 <__gethex+0x1da>
 800a212:	f108 33ff 	add.w	r3, r8, #4294967295
 800a216:	1159      	asrs	r1, r3, #5
 800a218:	f003 021f 	and.w	r2, r3, #31
 800a21c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a220:	f04f 0b01 	mov.w	fp, #1
 800a224:	fa0b f202 	lsl.w	r2, fp, r2
 800a228:	420a      	tst	r2, r1
 800a22a:	d00a      	beq.n	800a242 <__gethex+0x1da>
 800a22c:	455b      	cmp	r3, fp
 800a22e:	dd06      	ble.n	800a23e <__gethex+0x1d6>
 800a230:	f1a8 0102 	sub.w	r1, r8, #2
 800a234:	4620      	mov	r0, r4
 800a236:	f7fe fbc1 	bl	80089bc <__any_on>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d138      	bne.n	800a2b0 <__gethex+0x248>
 800a23e:	f04f 0b02 	mov.w	fp, #2
 800a242:	4641      	mov	r1, r8
 800a244:	4620      	mov	r0, r4
 800a246:	f7ff fea7 	bl	8009f98 <rshift>
 800a24a:	4446      	add	r6, r8
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	42b3      	cmp	r3, r6
 800a250:	da41      	bge.n	800a2d6 <__gethex+0x26e>
 800a252:	4621      	mov	r1, r4
 800a254:	4648      	mov	r0, r9
 800a256:	f7fd ff65 	bl	8008124 <_Bfree>
 800a25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a25c:	2300      	movs	r3, #0
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a264:	e78a      	b.n	800a17c <__gethex+0x114>
 800a266:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a26a:	2a2e      	cmp	r2, #46	; 0x2e
 800a26c:	d014      	beq.n	800a298 <__gethex+0x230>
 800a26e:	2b20      	cmp	r3, #32
 800a270:	d106      	bne.n	800a280 <__gethex+0x218>
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	f843 bb04 	str.w	fp, [r3], #4
 800a278:	f04f 0b00 	mov.w	fp, #0
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	465b      	mov	r3, fp
 800a280:	7828      	ldrb	r0, [r5, #0]
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	f7ff feda 	bl	800a03c <__hexdig_fun>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	f000 000f 	and.w	r0, r0, #15
 800a28e:	4098      	lsls	r0, r3
 800a290:	ea4b 0b00 	orr.w	fp, fp, r0
 800a294:	3304      	adds	r3, #4
 800a296:	e7a1      	b.n	800a1dc <__gethex+0x174>
 800a298:	45a8      	cmp	r8, r5
 800a29a:	d8e8      	bhi.n	800a26e <__gethex+0x206>
 800a29c:	2201      	movs	r2, #1
 800a29e:	4628      	mov	r0, r5
 800a2a0:	9303      	str	r3, [sp, #12]
 800a2a2:	f7ff fe09 	bl	8009eb8 <strncmp>
 800a2a6:	4926      	ldr	r1, [pc, #152]	; (800a340 <__gethex+0x2d8>)
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d1df      	bne.n	800a26e <__gethex+0x206>
 800a2ae:	e795      	b.n	800a1dc <__gethex+0x174>
 800a2b0:	f04f 0b03 	mov.w	fp, #3
 800a2b4:	e7c5      	b.n	800a242 <__gethex+0x1da>
 800a2b6:	da0b      	bge.n	800a2d0 <__gethex+0x268>
 800a2b8:	eba5 0800 	sub.w	r8, r5, r0
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4642      	mov	r2, r8
 800a2c0:	4648      	mov	r0, r9
 800a2c2:	f7fe f949 	bl	8008558 <__lshift>
 800a2c6:	eba6 0608 	sub.w	r6, r6, r8
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	f100 0a14 	add.w	sl, r0, #20
 800a2d0:	f04f 0b00 	mov.w	fp, #0
 800a2d4:	e7ba      	b.n	800a24c <__gethex+0x1e4>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	42b3      	cmp	r3, r6
 800a2da:	dd73      	ble.n	800a3c4 <__gethex+0x35c>
 800a2dc:	1b9e      	subs	r6, r3, r6
 800a2de:	42b5      	cmp	r5, r6
 800a2e0:	dc34      	bgt.n	800a34c <__gethex+0x2e4>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d023      	beq.n	800a330 <__gethex+0x2c8>
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d025      	beq.n	800a338 <__gethex+0x2d0>
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d115      	bne.n	800a31c <__gethex+0x2b4>
 800a2f0:	42b5      	cmp	r5, r6
 800a2f2:	d113      	bne.n	800a31c <__gethex+0x2b4>
 800a2f4:	2d01      	cmp	r5, #1
 800a2f6:	d10b      	bne.n	800a310 <__gethex+0x2a8>
 800a2f8:	9a02      	ldr	r2, [sp, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	2301      	movs	r3, #1
 800a300:	6123      	str	r3, [r4, #16]
 800a302:	f8ca 3000 	str.w	r3, [sl]
 800a306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a308:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a30c:	601c      	str	r4, [r3, #0]
 800a30e:	e735      	b.n	800a17c <__gethex+0x114>
 800a310:	1e69      	subs	r1, r5, #1
 800a312:	4620      	mov	r0, r4
 800a314:	f7fe fb52 	bl	80089bc <__any_on>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d1ed      	bne.n	800a2f8 <__gethex+0x290>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4648      	mov	r0, r9
 800a320:	f7fd ff00 	bl	8008124 <_Bfree>
 800a324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a326:	2300      	movs	r3, #0
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a32e:	e725      	b.n	800a17c <__gethex+0x114>
 800a330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f2      	bne.n	800a31c <__gethex+0x2b4>
 800a336:	e7df      	b.n	800a2f8 <__gethex+0x290>
 800a338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1dc      	bne.n	800a2f8 <__gethex+0x290>
 800a33e:	e7ed      	b.n	800a31c <__gethex+0x2b4>
 800a340:	0800accc 	.word	0x0800accc
 800a344:	0800ab61 	.word	0x0800ab61
 800a348:	0800ae76 	.word	0x0800ae76
 800a34c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a350:	f1bb 0f00 	cmp.w	fp, #0
 800a354:	d133      	bne.n	800a3be <__gethex+0x356>
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	d004      	beq.n	800a366 <__gethex+0x2fe>
 800a35c:	4641      	mov	r1, r8
 800a35e:	4620      	mov	r0, r4
 800a360:	f7fe fb2c 	bl	80089bc <__any_on>
 800a364:	4683      	mov	fp, r0
 800a366:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a36a:	2301      	movs	r3, #1
 800a36c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a370:	f008 081f 	and.w	r8, r8, #31
 800a374:	fa03 f308 	lsl.w	r3, r3, r8
 800a378:	4213      	tst	r3, r2
 800a37a:	4631      	mov	r1, r6
 800a37c:	4620      	mov	r0, r4
 800a37e:	bf18      	it	ne
 800a380:	f04b 0b02 	orrne.w	fp, fp, #2
 800a384:	1bad      	subs	r5, r5, r6
 800a386:	f7ff fe07 	bl	8009f98 <rshift>
 800a38a:	687e      	ldr	r6, [r7, #4]
 800a38c:	f04f 0802 	mov.w	r8, #2
 800a390:	f1bb 0f00 	cmp.w	fp, #0
 800a394:	d04a      	beq.n	800a42c <__gethex+0x3c4>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d016      	beq.n	800a3ca <__gethex+0x362>
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d018      	beq.n	800a3d2 <__gethex+0x36a>
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d109      	bne.n	800a3b8 <__gethex+0x350>
 800a3a4:	f01b 0f02 	tst.w	fp, #2
 800a3a8:	d006      	beq.n	800a3b8 <__gethex+0x350>
 800a3aa:	f8da 3000 	ldr.w	r3, [sl]
 800a3ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800a3b2:	f01b 0f01 	tst.w	fp, #1
 800a3b6:	d10f      	bne.n	800a3d8 <__gethex+0x370>
 800a3b8:	f048 0810 	orr.w	r8, r8, #16
 800a3bc:	e036      	b.n	800a42c <__gethex+0x3c4>
 800a3be:	f04f 0b01 	mov.w	fp, #1
 800a3c2:	e7d0      	b.n	800a366 <__gethex+0x2fe>
 800a3c4:	f04f 0801 	mov.w	r8, #1
 800a3c8:	e7e2      	b.n	800a390 <__gethex+0x328>
 800a3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3cc:	f1c3 0301 	rsb	r3, r3, #1
 800a3d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0ef      	beq.n	800a3b8 <__gethex+0x350>
 800a3d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3dc:	f104 0214 	add.w	r2, r4, #20
 800a3e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4694      	mov	ip, r2
 800a3ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800a3f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a3f6:	d01e      	beq.n	800a436 <__gethex+0x3ce>
 800a3f8:	3101      	adds	r1, #1
 800a3fa:	f8cc 1000 	str.w	r1, [ip]
 800a3fe:	f1b8 0f02 	cmp.w	r8, #2
 800a402:	f104 0214 	add.w	r2, r4, #20
 800a406:	d13d      	bne.n	800a484 <__gethex+0x41c>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	d10b      	bne.n	800a428 <__gethex+0x3c0>
 800a410:	1169      	asrs	r1, r5, #5
 800a412:	2301      	movs	r3, #1
 800a414:	f005 051f 	and.w	r5, r5, #31
 800a418:	fa03 f505 	lsl.w	r5, r3, r5
 800a41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a420:	421d      	tst	r5, r3
 800a422:	bf18      	it	ne
 800a424:	f04f 0801 	movne.w	r8, #1
 800a428:	f048 0820 	orr.w	r8, r8, #32
 800a42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a42e:	601c      	str	r4, [r3, #0]
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	601e      	str	r6, [r3, #0]
 800a434:	e6a2      	b.n	800a17c <__gethex+0x114>
 800a436:	4290      	cmp	r0, r2
 800a438:	f842 3c04 	str.w	r3, [r2, #-4]
 800a43c:	d8d6      	bhi.n	800a3ec <__gethex+0x384>
 800a43e:	68a2      	ldr	r2, [r4, #8]
 800a440:	4593      	cmp	fp, r2
 800a442:	db17      	blt.n	800a474 <__gethex+0x40c>
 800a444:	6861      	ldr	r1, [r4, #4]
 800a446:	4648      	mov	r0, r9
 800a448:	3101      	adds	r1, #1
 800a44a:	f7fd fe2b 	bl	80080a4 <_Balloc>
 800a44e:	4682      	mov	sl, r0
 800a450:	b918      	cbnz	r0, 800a45a <__gethex+0x3f2>
 800a452:	4b1b      	ldr	r3, [pc, #108]	; (800a4c0 <__gethex+0x458>)
 800a454:	4602      	mov	r2, r0
 800a456:	2184      	movs	r1, #132	; 0x84
 800a458:	e6b3      	b.n	800a1c2 <__gethex+0x15a>
 800a45a:	6922      	ldr	r2, [r4, #16]
 800a45c:	3202      	adds	r2, #2
 800a45e:	f104 010c 	add.w	r1, r4, #12
 800a462:	0092      	lsls	r2, r2, #2
 800a464:	300c      	adds	r0, #12
 800a466:	f7fc ff42 	bl	80072ee <memcpy>
 800a46a:	4621      	mov	r1, r4
 800a46c:	4648      	mov	r0, r9
 800a46e:	f7fd fe59 	bl	8008124 <_Bfree>
 800a472:	4654      	mov	r4, sl
 800a474:	6922      	ldr	r2, [r4, #16]
 800a476:	1c51      	adds	r1, r2, #1
 800a478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a47c:	6121      	str	r1, [r4, #16]
 800a47e:	2101      	movs	r1, #1
 800a480:	6151      	str	r1, [r2, #20]
 800a482:	e7bc      	b.n	800a3fe <__gethex+0x396>
 800a484:	6921      	ldr	r1, [r4, #16]
 800a486:	4559      	cmp	r1, fp
 800a488:	dd0b      	ble.n	800a4a2 <__gethex+0x43a>
 800a48a:	2101      	movs	r1, #1
 800a48c:	4620      	mov	r0, r4
 800a48e:	f7ff fd83 	bl	8009f98 <rshift>
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	3601      	adds	r6, #1
 800a496:	42b3      	cmp	r3, r6
 800a498:	f6ff aedb 	blt.w	800a252 <__gethex+0x1ea>
 800a49c:	f04f 0801 	mov.w	r8, #1
 800a4a0:	e7c2      	b.n	800a428 <__gethex+0x3c0>
 800a4a2:	f015 051f 	ands.w	r5, r5, #31
 800a4a6:	d0f9      	beq.n	800a49c <__gethex+0x434>
 800a4a8:	9b01      	ldr	r3, [sp, #4]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	f1c5 0520 	rsb	r5, r5, #32
 800a4b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a4b4:	f7fd fee8 	bl	8008288 <__hi0bits>
 800a4b8:	42a8      	cmp	r0, r5
 800a4ba:	dbe6      	blt.n	800a48a <__gethex+0x422>
 800a4bc:	e7ee      	b.n	800a49c <__gethex+0x434>
 800a4be:	bf00      	nop
 800a4c0:	0800ab61 	.word	0x0800ab61

0800a4c4 <L_shift>:
 800a4c4:	f1c2 0208 	rsb	r2, r2, #8
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	b570      	push	{r4, r5, r6, lr}
 800a4cc:	f1c2 0620 	rsb	r6, r2, #32
 800a4d0:	6843      	ldr	r3, [r0, #4]
 800a4d2:	6804      	ldr	r4, [r0, #0]
 800a4d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a4d8:	432c      	orrs	r4, r5
 800a4da:	40d3      	lsrs	r3, r2
 800a4dc:	6004      	str	r4, [r0, #0]
 800a4de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4e2:	4288      	cmp	r0, r1
 800a4e4:	d3f4      	bcc.n	800a4d0 <L_shift+0xc>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <__match>:
 800a4e8:	b530      	push	{r4, r5, lr}
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f2:	b914      	cbnz	r4, 800a4fa <__match+0x12>
 800a4f4:	6003      	str	r3, [r0, #0]
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	bd30      	pop	{r4, r5, pc}
 800a4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a502:	2d19      	cmp	r5, #25
 800a504:	bf98      	it	ls
 800a506:	3220      	addls	r2, #32
 800a508:	42a2      	cmp	r2, r4
 800a50a:	d0f0      	beq.n	800a4ee <__match+0x6>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7f3      	b.n	800a4f8 <__match+0x10>

0800a510 <__hexnan>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	680b      	ldr	r3, [r1, #0]
 800a516:	6801      	ldr	r1, [r0, #0]
 800a518:	115e      	asrs	r6, r3, #5
 800a51a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a51e:	f013 031f 	ands.w	r3, r3, #31
 800a522:	b087      	sub	sp, #28
 800a524:	bf18      	it	ne
 800a526:	3604      	addne	r6, #4
 800a528:	2500      	movs	r5, #0
 800a52a:	1f37      	subs	r7, r6, #4
 800a52c:	4682      	mov	sl, r0
 800a52e:	4690      	mov	r8, r2
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	f846 5c04 	str.w	r5, [r6, #-4]
 800a536:	46b9      	mov	r9, r7
 800a538:	463c      	mov	r4, r7
 800a53a:	9502      	str	r5, [sp, #8]
 800a53c:	46ab      	mov	fp, r5
 800a53e:	784a      	ldrb	r2, [r1, #1]
 800a540:	1c4b      	adds	r3, r1, #1
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	b342      	cbz	r2, 800a598 <__hexnan+0x88>
 800a546:	4610      	mov	r0, r2
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	9204      	str	r2, [sp, #16]
 800a54c:	f7ff fd76 	bl	800a03c <__hexdig_fun>
 800a550:	2800      	cmp	r0, #0
 800a552:	d14f      	bne.n	800a5f4 <__hexnan+0xe4>
 800a554:	9a04      	ldr	r2, [sp, #16]
 800a556:	9905      	ldr	r1, [sp, #20]
 800a558:	2a20      	cmp	r2, #32
 800a55a:	d818      	bhi.n	800a58e <__hexnan+0x7e>
 800a55c:	9b02      	ldr	r3, [sp, #8]
 800a55e:	459b      	cmp	fp, r3
 800a560:	dd13      	ble.n	800a58a <__hexnan+0x7a>
 800a562:	454c      	cmp	r4, r9
 800a564:	d206      	bcs.n	800a574 <__hexnan+0x64>
 800a566:	2d07      	cmp	r5, #7
 800a568:	dc04      	bgt.n	800a574 <__hexnan+0x64>
 800a56a:	462a      	mov	r2, r5
 800a56c:	4649      	mov	r1, r9
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff ffa8 	bl	800a4c4 <L_shift>
 800a574:	4544      	cmp	r4, r8
 800a576:	d950      	bls.n	800a61a <__hexnan+0x10a>
 800a578:	2300      	movs	r3, #0
 800a57a:	f1a4 0904 	sub.w	r9, r4, #4
 800a57e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a582:	f8cd b008 	str.w	fp, [sp, #8]
 800a586:	464c      	mov	r4, r9
 800a588:	461d      	mov	r5, r3
 800a58a:	9903      	ldr	r1, [sp, #12]
 800a58c:	e7d7      	b.n	800a53e <__hexnan+0x2e>
 800a58e:	2a29      	cmp	r2, #41	; 0x29
 800a590:	d155      	bne.n	800a63e <__hexnan+0x12e>
 800a592:	3102      	adds	r1, #2
 800a594:	f8ca 1000 	str.w	r1, [sl]
 800a598:	f1bb 0f00 	cmp.w	fp, #0
 800a59c:	d04f      	beq.n	800a63e <__hexnan+0x12e>
 800a59e:	454c      	cmp	r4, r9
 800a5a0:	d206      	bcs.n	800a5b0 <__hexnan+0xa0>
 800a5a2:	2d07      	cmp	r5, #7
 800a5a4:	dc04      	bgt.n	800a5b0 <__hexnan+0xa0>
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff ff8a 	bl	800a4c4 <L_shift>
 800a5b0:	4544      	cmp	r4, r8
 800a5b2:	d934      	bls.n	800a61e <__hexnan+0x10e>
 800a5b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a5b8:	4623      	mov	r3, r4
 800a5ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5c2:	429f      	cmp	r7, r3
 800a5c4:	d2f9      	bcs.n	800a5ba <__hexnan+0xaa>
 800a5c6:	1b3b      	subs	r3, r7, r4
 800a5c8:	f023 0303 	bic.w	r3, r3, #3
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	3e03      	subs	r6, #3
 800a5d0:	3401      	adds	r4, #1
 800a5d2:	42a6      	cmp	r6, r4
 800a5d4:	bf38      	it	cc
 800a5d6:	2304      	movcc	r3, #4
 800a5d8:	4443      	add	r3, r8
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f843 2b04 	str.w	r2, [r3], #4
 800a5e0:	429f      	cmp	r7, r3
 800a5e2:	d2fb      	bcs.n	800a5dc <__hexnan+0xcc>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	b91b      	cbnz	r3, 800a5f0 <__hexnan+0xe0>
 800a5e8:	4547      	cmp	r7, r8
 800a5ea:	d126      	bne.n	800a63a <__hexnan+0x12a>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	2005      	movs	r0, #5
 800a5f2:	e025      	b.n	800a640 <__hexnan+0x130>
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	2d08      	cmp	r5, #8
 800a5f8:	f10b 0b01 	add.w	fp, fp, #1
 800a5fc:	dd06      	ble.n	800a60c <__hexnan+0xfc>
 800a5fe:	4544      	cmp	r4, r8
 800a600:	d9c3      	bls.n	800a58a <__hexnan+0x7a>
 800a602:	2300      	movs	r3, #0
 800a604:	f844 3c04 	str.w	r3, [r4, #-4]
 800a608:	2501      	movs	r5, #1
 800a60a:	3c04      	subs	r4, #4
 800a60c:	6822      	ldr	r2, [r4, #0]
 800a60e:	f000 000f 	and.w	r0, r0, #15
 800a612:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a616:	6020      	str	r0, [r4, #0]
 800a618:	e7b7      	b.n	800a58a <__hexnan+0x7a>
 800a61a:	2508      	movs	r5, #8
 800a61c:	e7b5      	b.n	800a58a <__hexnan+0x7a>
 800a61e:	9b01      	ldr	r3, [sp, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d0df      	beq.n	800a5e4 <__hexnan+0xd4>
 800a624:	f1c3 0320 	rsb	r3, r3, #32
 800a628:	f04f 32ff 	mov.w	r2, #4294967295
 800a62c:	40da      	lsrs	r2, r3
 800a62e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a632:	4013      	ands	r3, r2
 800a634:	f846 3c04 	str.w	r3, [r6, #-4]
 800a638:	e7d4      	b.n	800a5e4 <__hexnan+0xd4>
 800a63a:	3f04      	subs	r7, #4
 800a63c:	e7d2      	b.n	800a5e4 <__hexnan+0xd4>
 800a63e:	2004      	movs	r0, #4
 800a640:	b007      	add	sp, #28
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a646 <__ascii_mbtowc>:
 800a646:	b082      	sub	sp, #8
 800a648:	b901      	cbnz	r1, 800a64c <__ascii_mbtowc+0x6>
 800a64a:	a901      	add	r1, sp, #4
 800a64c:	b142      	cbz	r2, 800a660 <__ascii_mbtowc+0x1a>
 800a64e:	b14b      	cbz	r3, 800a664 <__ascii_mbtowc+0x1e>
 800a650:	7813      	ldrb	r3, [r2, #0]
 800a652:	600b      	str	r3, [r1, #0]
 800a654:	7812      	ldrb	r2, [r2, #0]
 800a656:	1e10      	subs	r0, r2, #0
 800a658:	bf18      	it	ne
 800a65a:	2001      	movne	r0, #1
 800a65c:	b002      	add	sp, #8
 800a65e:	4770      	bx	lr
 800a660:	4610      	mov	r0, r2
 800a662:	e7fb      	b.n	800a65c <__ascii_mbtowc+0x16>
 800a664:	f06f 0001 	mvn.w	r0, #1
 800a668:	e7f8      	b.n	800a65c <__ascii_mbtowc+0x16>

0800a66a <_realloc_r>:
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	4680      	mov	r8, r0
 800a670:	4614      	mov	r4, r2
 800a672:	460e      	mov	r6, r1
 800a674:	b921      	cbnz	r1, 800a680 <_realloc_r+0x16>
 800a676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67a:	4611      	mov	r1, r2
 800a67c:	f7fb bc7e 	b.w	8005f7c <_malloc_r>
 800a680:	b92a      	cbnz	r2, 800a68e <_realloc_r+0x24>
 800a682:	f7fd fcc3 	bl	800800c <_free_r>
 800a686:	4625      	mov	r5, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a68e:	f000 f842 	bl	800a716 <_malloc_usable_size_r>
 800a692:	4284      	cmp	r4, r0
 800a694:	4607      	mov	r7, r0
 800a696:	d802      	bhi.n	800a69e <_realloc_r+0x34>
 800a698:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a69c:	d812      	bhi.n	800a6c4 <_realloc_r+0x5a>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	f7fb fc6b 	bl	8005f7c <_malloc_r>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0ed      	beq.n	800a688 <_realloc_r+0x1e>
 800a6ac:	42bc      	cmp	r4, r7
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	4631      	mov	r1, r6
 800a6b2:	bf28      	it	cs
 800a6b4:	463a      	movcs	r2, r7
 800a6b6:	f7fc fe1a 	bl	80072ee <memcpy>
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4640      	mov	r0, r8
 800a6be:	f7fd fca5 	bl	800800c <_free_r>
 800a6c2:	e7e1      	b.n	800a688 <_realloc_r+0x1e>
 800a6c4:	4635      	mov	r5, r6
 800a6c6:	e7df      	b.n	800a688 <_realloc_r+0x1e>

0800a6c8 <__ascii_wctomb>:
 800a6c8:	b149      	cbz	r1, 800a6de <__ascii_wctomb+0x16>
 800a6ca:	2aff      	cmp	r2, #255	; 0xff
 800a6cc:	bf85      	ittet	hi
 800a6ce:	238a      	movhi	r3, #138	; 0x8a
 800a6d0:	6003      	strhi	r3, [r0, #0]
 800a6d2:	700a      	strbls	r2, [r1, #0]
 800a6d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6d8:	bf98      	it	ls
 800a6da:	2001      	movls	r0, #1
 800a6dc:	4770      	bx	lr
 800a6de:	4608      	mov	r0, r1
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <fiprintf>:
 800a6e4:	b40e      	push	{r1, r2, r3}
 800a6e6:	b503      	push	{r0, r1, lr}
 800a6e8:	4601      	mov	r1, r0
 800a6ea:	ab03      	add	r3, sp, #12
 800a6ec:	4805      	ldr	r0, [pc, #20]	; (800a704 <fiprintf+0x20>)
 800a6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f2:	6800      	ldr	r0, [r0, #0]
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	f7ff f99b 	bl	8009a30 <_vfiprintf_r>
 800a6fa:	b002      	add	sp, #8
 800a6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a700:	b003      	add	sp, #12
 800a702:	4770      	bx	lr
 800a704:	20000294 	.word	0x20000294

0800a708 <abort>:
 800a708:	b508      	push	{r3, lr}
 800a70a:	2006      	movs	r0, #6
 800a70c:	f000 f834 	bl	800a778 <raise>
 800a710:	2001      	movs	r0, #1
 800a712:	f7f7 f9d1 	bl	8001ab8 <_exit>

0800a716 <_malloc_usable_size_r>:
 800a716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71a:	1f18      	subs	r0, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfbc      	itt	lt
 800a720:	580b      	ldrlt	r3, [r1, r0]
 800a722:	18c0      	addlt	r0, r0, r3
 800a724:	4770      	bx	lr

0800a726 <_raise_r>:
 800a726:	291f      	cmp	r1, #31
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4604      	mov	r4, r0
 800a72c:	460d      	mov	r5, r1
 800a72e:	d904      	bls.n	800a73a <_raise_r+0x14>
 800a730:	2316      	movs	r3, #22
 800a732:	6003      	str	r3, [r0, #0]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	bd38      	pop	{r3, r4, r5, pc}
 800a73a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a73c:	b112      	cbz	r2, 800a744 <_raise_r+0x1e>
 800a73e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a742:	b94b      	cbnz	r3, 800a758 <_raise_r+0x32>
 800a744:	4620      	mov	r0, r4
 800a746:	f000 f831 	bl	800a7ac <_getpid_r>
 800a74a:	462a      	mov	r2, r5
 800a74c:	4601      	mov	r1, r0
 800a74e:	4620      	mov	r0, r4
 800a750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a754:	f000 b818 	b.w	800a788 <_kill_r>
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d00a      	beq.n	800a772 <_raise_r+0x4c>
 800a75c:	1c59      	adds	r1, r3, #1
 800a75e:	d103      	bne.n	800a768 <_raise_r+0x42>
 800a760:	2316      	movs	r3, #22
 800a762:	6003      	str	r3, [r0, #0]
 800a764:	2001      	movs	r0, #1
 800a766:	e7e7      	b.n	800a738 <_raise_r+0x12>
 800a768:	2400      	movs	r4, #0
 800a76a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a76e:	4628      	mov	r0, r5
 800a770:	4798      	blx	r3
 800a772:	2000      	movs	r0, #0
 800a774:	e7e0      	b.n	800a738 <_raise_r+0x12>
	...

0800a778 <raise>:
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <raise+0xc>)
 800a77a:	4601      	mov	r1, r0
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	f7ff bfd2 	b.w	800a726 <_raise_r>
 800a782:	bf00      	nop
 800a784:	20000294 	.word	0x20000294

0800a788 <_kill_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d07      	ldr	r5, [pc, #28]	; (800a7a8 <_kill_r+0x20>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	4611      	mov	r1, r2
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	f7f7 f97f 	bl	8001a98 <_kill>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d102      	bne.n	800a7a4 <_kill_r+0x1c>
 800a79e:	682b      	ldr	r3, [r5, #0]
 800a7a0:	b103      	cbz	r3, 800a7a4 <_kill_r+0x1c>
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	bd38      	pop	{r3, r4, r5, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200006d8 	.word	0x200006d8

0800a7ac <_getpid_r>:
 800a7ac:	f7f7 b96c 	b.w	8001a88 <_getpid>

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
