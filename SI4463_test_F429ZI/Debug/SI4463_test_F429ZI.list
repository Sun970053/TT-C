
SI4463_test_F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e02c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e0  0800e1e0  0800e1e0  0000f1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9c0  0800f9c0  00011768  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9c0  0800f9c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9c8  0800f9c8  00011768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9c8  0800f9c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9cc  0800f9cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000768  20000000  0800f9d0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011768  2**0
                  CONTENTS
 10 .bss          000004e0  20000768  20000768  00011768  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c48  20000c48  00011768  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011768  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014151  00000000  00000000  00011798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c41  00000000  00000000  000258e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00028530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f23  00000000  00000000  000297e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002617c  00000000  00000000  0002a70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015aeb  00000000  00000000  00050887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5202  00000000  00000000  00066372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b574  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006594  00000000  00000000  0014b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00151b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000768 	.word	0x20000768
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e1c4 	.word	0x0800e1c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000076c 	.word	0x2000076c
 80001ec:	0800e1c4 	.word	0x0800e1c4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__io_putchar>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800102c:	1d39      	adds	r1, r7, #4
 800102e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001032:	2201      	movs	r2, #1
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <__io_putchar+0x20>)
 8001036:	f004 fb84 	bl	8005742 <HAL_UART_Transmit>
	return ch;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000086c 	.word	0x2000086c

08001048 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4aa4      	ldr	r2, [pc, #656]	@ (80012e8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	f040 8142 	bne.w	80012e0 <HAL_UART_RxCpltCallback+0x298>
	{
		/* Enabling interrupt receive again */
		HAL_UART_Receive_IT(&huart2,(uint8_t*)&rxData,1);
 800105c:	2201      	movs	r2, #1
 800105e:	49a3      	ldr	r1, [pc, #652]	@ (80012ec <HAL_UART_RxCpltCallback+0x2a4>)
 8001060:	48a3      	ldr	r0, [pc, #652]	@ (80012f0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001062:	f004 fc00 	bl	8005866 <HAL_UART_Receive_IT>
		switch(rxData)
 8001066:	4ba1      	ldr	r3, [pc, #644]	@ (80012ec <HAL_UART_RxCpltCallback+0x2a4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b22      	cmp	r3, #34	@ 0x22
 800106c:	f000 8097 	beq.w	800119e <HAL_UART_RxCpltCallback+0x156>
 8001070:	2b22      	cmp	r3, #34	@ 0x22
 8001072:	f300 811f 	bgt.w	80012b4 <HAL_UART_RxCpltCallback+0x26c>
 8001076:	2b0d      	cmp	r3, #13
 8001078:	f000 80a7 	beq.w	80011ca <HAL_UART_RxCpltCallback+0x182>
 800107c:	2b20      	cmp	r3, #32
 800107e:	f040 8119 	bne.w	80012b4 <HAL_UART_RxCpltCallback+0x26c>
		{
		case ' ':
			// first space
			if(uartFlag == 0 && strFlag == 0)
 8001082:	4b9c      	ldr	r3, [pc, #624]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d136      	bne.n	80010fa <HAL_UART_RxCpltCallback+0xb2>
 800108c:	4b9a      	ldr	r3, [pc, #616]	@ (80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d131      	bne.n	80010fa <HAL_UART_RxCpltCallback+0xb2>
			{
				// clear array
				if(myRxCmd.cmdLen)
 8001096:	4b99      	ldr	r3, [pc, #612]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001098:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <HAL_UART_RxCpltCallback+0x68>
					memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 80010a0:	4b96      	ldr	r3, [pc, #600]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80010a2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80010a6:	461a      	mov	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	4895      	ldr	r0, [pc, #596]	@ (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80010ac:	f009 fe28 	bl	800ad00 <memset>
				memcpy(myRxCmd.cmd, myRxCmd.temp, pos + 1);
 80010b0:	4b94      	ldr	r3, [pc, #592]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	461a      	mov	r2, r3
 80010b8:	4990      	ldr	r1, [pc, #576]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80010ba:	4891      	ldr	r0, [pc, #580]	@ (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 80010bc:	f009 fecb 	bl	800ae56 <memcpy>
				memset(myRxCmd.temp, '\0', pos + 1);
 80010c0:	4b90      	ldr	r3, [pc, #576]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	461a      	mov	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	488c      	ldr	r0, [pc, #560]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80010cc:	f009 fe18 	bl	800ad00 <memset>
				myRxCmd.cmdLen = pos + 1;
 80010d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b88      	ldr	r3, [pc, #544]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80010da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
				pos = 0;
 80010de:	4b89      	ldr	r3, [pc, #548]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				uartFlag++;
 80010e4:	4b83      	ldr	r3, [pc, #524]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b81      	ldr	r3, [pc, #516]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 80010f0:	701a      	strb	r2, [r3, #0]
				printf(" ");
 80010f2:	2020      	movs	r0, #32
 80010f4:	f009 fca6 	bl	800aa44 <putchar>
 80010f8:	e03a      	b.n	8001170 <HAL_UART_RxCpltCallback+0x128>
			}
			// second space
			else if(uartFlag == 1 && strFlag == 0)
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d135      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x128>
 8001104:	4b7c      	ldr	r3, [pc, #496]	@ (80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d130      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x128>
			{
				// clear array
				if(myRxCmd.paramLen)
 800110e:	4b7b      	ldr	r3, [pc, #492]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001110:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_UART_RxCpltCallback+0xe0>
					memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001118:	4b78      	ldr	r3, [pc, #480]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 800111a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800111e:	461a      	mov	r2, r3
 8001120:	2100      	movs	r1, #0
 8001122:	4879      	ldr	r0, [pc, #484]	@ (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 8001124:	f009 fdec 	bl	800ad00 <memset>
				memcpy(myRxCmd.param, myRxCmd.temp, pos + 1);
 8001128:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	461a      	mov	r2, r3
 8001130:	4972      	ldr	r1, [pc, #456]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001132:	4875      	ldr	r0, [pc, #468]	@ (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 8001134:	f009 fe8f 	bl	800ae56 <memcpy>
				memset(myRxCmd.temp, '\0', pos + 1);
 8001138:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	461a      	mov	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	486e      	ldr	r0, [pc, #440]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001144:	f009 fddc 	bl	800ad00 <memset>
				myRxCmd.paramLen = pos + 1;
 8001148:	4b6e      	ldr	r3, [pc, #440]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b6a      	ldr	r3, [pc, #424]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001152:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
				pos = 0;
 8001156:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
				uartFlag++;
 800115c:	4b65      	ldr	r3, [pc, #404]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3301      	adds	r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b63      	ldr	r3, [pc, #396]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001168:	701a      	strb	r2, [r3, #0]
				printf(" ");
 800116a:	2020      	movs	r0, #32
 800116c:	f009 fc6a 	bl	800aa44 <putchar>
			}
			if(strFlag == 1)
 8001170:	4b61      	ldr	r3, [pc, #388]	@ (80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b01      	cmp	r3, #1
 8001178:	f040 80af 	bne.w	80012da <HAL_UART_RxCpltCallback+0x292>
			{
				myRxCmd.temp[pos] = rxData;
 800117c:	4b61      	ldr	r3, [pc, #388]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b5a      	ldr	r3, [pc, #360]	@ (80012ec <HAL_UART_RxCpltCallback+0x2a4>)
 8001184:	7819      	ldrb	r1, [r3, #0]
 8001186:	4b5d      	ldr	r3, [pc, #372]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001188:	5499      	strb	r1, [r3, r2]
				pos++;
 800118a:	4b5e      	ldr	r3, [pc, #376]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b5c      	ldr	r3, [pc, #368]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001194:	701a      	strb	r2, [r3, #0]
				printf(" ");
 8001196:	2020      	movs	r0, #32
 8001198:	f009 fc54 	bl	800aa44 <putchar>
			}

			break;
 800119c:	e09d      	b.n	80012da <HAL_UART_RxCpltCallback+0x292>
		case '\"':
			if(uartFlag == 1)
 800119e:	4b55      	ldr	r3, [pc, #340]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f040 809a 	bne.w	80012de <HAL_UART_RxCpltCallback+0x296>
			{
				if(strFlag) strFlag = 0;
 80011aa:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_UART_RxCpltCallback+0x174>
 80011b4:	4b50      	ldr	r3, [pc, #320]	@ (80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e002      	b.n	80011c2 <HAL_UART_RxCpltCallback+0x17a>
				else strFlag = 1;
 80011bc:	4b4e      	ldr	r3, [pc, #312]	@ (80012f8 <HAL_UART_RxCpltCallback+0x2b0>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
				printf("\"");
 80011c2:	2022      	movs	r0, #34	@ 0x22
 80011c4:	f009 fc3e 	bl	800aa44 <putchar>
			}
			break;
 80011c8:	e089      	b.n	80012de <HAL_UART_RxCpltCallback+0x296>
		case '\r':
			// two parameter
			if(uartFlag == 2)
 80011ca:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d11c      	bne.n	800120e <HAL_UART_RxCpltCallback+0x1c6>
			{
				// clear array
				if(myRxCmd.paramLen2)
 80011d4:	4b49      	ldr	r3, [pc, #292]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80011d6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <HAL_UART_RxCpltCallback+0x1a6>
					memset(myRxCmd.param2, '\0', myRxCmd.paramLen2);
 80011de:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80011e0:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80011e4:	461a      	mov	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	4848      	ldr	r0, [pc, #288]	@ (800130c <HAL_UART_RxCpltCallback+0x2c4>)
 80011ea:	f009 fd89 	bl	800ad00 <memset>
				memcpy(myRxCmd.param2, myRxCmd.temp, pos + 1);
 80011ee:	4b45      	ldr	r3, [pc, #276]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	461a      	mov	r2, r3
 80011f6:	4941      	ldr	r1, [pc, #260]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80011f8:	4844      	ldr	r0, [pc, #272]	@ (800130c <HAL_UART_RxCpltCallback+0x2c4>)
 80011fa:	f009 fe2c 	bl	800ae56 <memcpy>
				myRxCmd.paramLen2 = pos + 1;
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001208:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 800120c:	e03d      	b.n	800128a <HAL_UART_RxCpltCallback+0x242>
			}
			// one parameter
			else if(uartFlag == 1)
 800120e:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11c      	bne.n	8001252 <HAL_UART_RxCpltCallback+0x20a>
			{
				// clear array
				if(myRxCmd.paramLen)
 8001218:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 800121a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_UART_RxCpltCallback+0x1ea>
					memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001222:	4b36      	ldr	r3, [pc, #216]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001224:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001228:	461a      	mov	r2, r3
 800122a:	2100      	movs	r1, #0
 800122c:	4836      	ldr	r0, [pc, #216]	@ (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800122e:	f009 fd67 	bl	800ad00 <memset>
				memcpy(myRxCmd.param, myRxCmd.temp, pos + 1);
 8001232:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	461a      	mov	r2, r3
 800123a:	4930      	ldr	r1, [pc, #192]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 800123c:	4832      	ldr	r0, [pc, #200]	@ (8001308 <HAL_UART_RxCpltCallback+0x2c0>)
 800123e:	f009 fe0a 	bl	800ae56 <memcpy>
				myRxCmd.paramLen = pos + 1;
 8001242:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 800124c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001250:	e01b      	b.n	800128a <HAL_UART_RxCpltCallback+0x242>
			}
			else
			{
				// clear array
				if(myRxCmd.cmdLen)
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001254:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_UART_RxCpltCallback+0x224>
					memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 800125c:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 800125e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001262:	461a      	mov	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	4826      	ldr	r0, [pc, #152]	@ (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001268:	f009 fd4a 	bl	800ad00 <memset>
				memcpy(myRxCmd.cmd, myRxCmd.temp, pos + 1);
 800126c:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	461a      	mov	r2, r3
 8001274:	4921      	ldr	r1, [pc, #132]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001276:	4822      	ldr	r0, [pc, #136]	@ (8001300 <HAL_UART_RxCpltCallback+0x2b8>)
 8001278:	f009 fded 	bl	800ae56 <memcpy>
				myRxCmd.cmdLen = pos + 1;
 800127c:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
			}
			memset(myRxCmd.temp, '\0', pos + 1);
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	461a      	mov	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	4819      	ldr	r0, [pc, #100]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 8001296:	f009 fd33 	bl	800ad00 <memset>
			pos = 0;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
			uartFlag = 0;
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <HAL_UART_RxCpltCallback+0x2ac>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
			/* Start execute command */
			cmdFlag = 1;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_UART_RxCpltCallback+0x2c8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
			printf("\r\n");
 80012ac:	4819      	ldr	r0, [pc, #100]	@ (8001314 <HAL_UART_RxCpltCallback+0x2cc>)
 80012ae:	f009 fc27 	bl	800ab00 <puts>
			break;
 80012b2:	e015      	b.n	80012e0 <HAL_UART_RxCpltCallback+0x298>
		default:
			myRxCmd.temp[pos] = rxData;
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_UART_RxCpltCallback+0x2a4>)
 80012bc:	7819      	ldrb	r1, [r3, #0]
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_UART_RxCpltCallback+0x2b4>)
 80012c0:	5499      	strb	r1, [r3, r2]
			pos++;
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_UART_RxCpltCallback+0x2bc>)
 80012cc:	701a      	strb	r2, [r3, #0]
			printf("%c", rxData);
 80012ce:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <HAL_UART_RxCpltCallback+0x2a4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f009 fbb6 	bl	800aa44 <putchar>
		}
	}
}
 80012d8:	e002      	b.n	80012e0 <HAL_UART_RxCpltCallback+0x298>
			break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <HAL_UART_RxCpltCallback+0x298>
			break;
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40004400 	.word	0x40004400
 80012ec:	200009cc 	.word	0x200009cc
 80012f0:	2000086c 	.word	0x2000086c
 80012f4:	200009cd 	.word	0x200009cd
 80012f8:	200009ce 	.word	0x200009ce
 80012fc:	20000950 	.word	0x20000950
 8001300:	2000096e 	.word	0x2000096e
 8001304:	200009cb 	.word	0x200009cb
 8001308:	20000978 	.word	0x20000978
 800130c:	200009aa 	.word	0x200009aa
 8001310:	200009cf 	.word	0x200009cf
 8001314:	0800e1e0 	.word	0x0800e1e0

08001318 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d110      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x32>
	{
		printf("Button interrupt !\r\n");
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x48>)
 800132a:	f009 fbe9 	bl	800ab00 <puts>
		si4463_getInterrupts(&si4463);
 800132e:	480d      	ldr	r0, [pc, #52]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001330:	f007 f835 	bl	800839e <si4463_getInterrupts>
		printf("Current RSSI: %d\r\n", si4463_getCurrentRSSI(&si4463));
 8001334:	480b      	ldr	r0, [pc, #44]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001336:	f006 ff7f 	bl	8008238 <si4463_getCurrentRSSI>
 800133a:	4603      	mov	r3, r0
 800133c:	4619      	mov	r1, r3
 800133e:	480a      	ldr	r0, [pc, #40]	@ (8001368 <HAL_GPIO_EXTI_Callback+0x50>)
 8001340:	f009 fb6e 	bl	800aa20 <iprintf>
		irqFlag = true;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_GPIO_EXTI_Callback+0x54>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == IRQ_Pin)
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	2b10      	cmp	r3, #16
 800134e:	d102      	bne.n	8001356 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		irqFlag = true;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_GPIO_EXTI_Callback+0x54>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
	}
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800e1e4 	.word	0x0800e1e4
 8001364:	200008b0 	.word	0x200008b0
 8001368:	0800e1f8 	.word	0x0800e1f8
 800136c:	20000948 	.word	0x20000948

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b0c4      	sub	sp, #272	@ 0x110
 8001374:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f001 ffb7 	bl	80032e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f001 f82f 	bl	80023dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f001 f999 	bl	80026b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001382:	f001 f89b 	bl	80024bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001386:	f001 f96b 	bl	8002660 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800138a:	f001 f8cd 	bl	8002528 <MX_TIM1_Init>
  MX_TIM2_Init();
 800138e:	f001 f91b 	bl	80025c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1); // us delay timer
 8001392:	48a9      	ldr	r0, [pc, #676]	@ (8001638 <main+0x2c8>)
 8001394:	f003 fea2 	bl	80050dc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2); // us delay timer
 8001398:	48a8      	ldr	r0, [pc, #672]	@ (800163c <main+0x2cc>)
 800139a:	f003 fe9f 	bl	80050dc <HAL_TIM_Base_Start>

  HAL_UART_Receive_IT(&huart2,(uint8_t*)&rxData,1); // Enabling interrupt receive again
 800139e:	2201      	movs	r2, #1
 80013a0:	49a7      	ldr	r1, [pc, #668]	@ (8001640 <main+0x2d0>)
 80013a2:	48a8      	ldr	r0, [pc, #672]	@ (8001644 <main+0x2d4>)
 80013a4:	f004 fa5f 	bl	8005866 <HAL_UART_Receive_IT>
    //HAL_I2C_Slave_Receive_IT(&hi2c1, isr_rxData, SLAVE_RX_BUFFER_SIZE);
    initHashTable();
 80013a8:	f001 fbe2 	bl	8002b70 <initHashTable>

	si4463.SPI_Write = si4463_SPI_Write;
 80013ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001648 <main+0x2d8>)
 80013ae:	4aa7      	ldr	r2, [pc, #668]	@ (800164c <main+0x2dc>)
 80013b0:	601a      	str	r2, [r3, #0]
	si4463.SPI_Read = si4463_SPI_Read;
 80013b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001648 <main+0x2d8>)
 80013b4:	4aa6      	ldr	r2, [pc, #664]	@ (8001650 <main+0x2e0>)
 80013b6:	605a      	str	r2, [r3, #4]
	si4463.SPI_WriteRead = si4463_SPI_WriteRead;
 80013b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001648 <main+0x2d8>)
 80013ba:	4aa6      	ldr	r2, [pc, #664]	@ (8001654 <main+0x2e4>)
 80013bc:	609a      	str	r2, [r3, #8]
	si4463.SPI_CheckState = si4463_SPI_CheckState;
 80013be:	4ba2      	ldr	r3, [pc, #648]	@ (8001648 <main+0x2d8>)
 80013c0:	4aa5      	ldr	r2, [pc, #660]	@ (8001658 <main+0x2e8>)
 80013c2:	60da      	str	r2, [r3, #12]
	si4463.spi_state_ready = HAL_SPI_STATE_READY;
 80013c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001648 <main+0x2d8>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	741a      	strb	r2, [r3, #16]
	si4463.DelayUs = si4463_DelayUs;
 80013ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001648 <main+0x2d8>)
 80013cc:	4aa3      	ldr	r2, [pc, #652]	@ (800165c <main+0x2ec>)
 80013ce:	615a      	str	r2, [r3, #20]
	si4463.NSEL = si4463_setNSEL;
 80013d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001648 <main+0x2d8>)
 80013d2:	4aa3      	ldr	r2, [pc, #652]	@ (8001660 <main+0x2f0>)
 80013d4:	619a      	str	r2, [r3, #24]
	si4463.SDN = si4463_setSDN;
 80013d6:	4b9c      	ldr	r3, [pc, #624]	@ (8001648 <main+0x2d8>)
 80013d8:	4aa2      	ldr	r2, [pc, #648]	@ (8001664 <main+0x2f4>)
 80013da:	61da      	str	r2, [r3, #28]
	si4463.OOK = si4463_setOOK;
 80013dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001648 <main+0x2d8>)
 80013de:	4aa2      	ldr	r2, [pc, #648]	@ (8001668 <main+0x2f8>)
 80013e0:	621a      	str	r2, [r3, #32]
	si4463.gpios.IRQ = si4463_getIRQ;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <main+0x2d8>)
 80013e4:	4aa1      	ldr	r2, [pc, #644]	@ (800166c <main+0x2fc>)
 80013e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	si4463.gpios.GPIO1 = si4463_getGPIO1;
 80013e8:	4b97      	ldr	r3, [pc, #604]	@ (8001648 <main+0x2d8>)
 80013ea:	4aa1      	ldr	r2, [pc, #644]	@ (8001670 <main+0x300>)
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44
	si4463.gpios.gpio_low = GPIO_PIN_RESET;
 80013ee:	4b96      	ldr	r3, [pc, #600]	@ (8001648 <main+0x2d8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	si4463.gpios.gpio_high = GPIO_PIN_SET;
 80013f6:	4b94      	ldr	r3, [pc, #592]	@ (8001648 <main+0x2d8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	morse.time.resetToNow = morse_resetToNow;
 80013fe:	4b9d      	ldr	r3, [pc, #628]	@ (8001674 <main+0x304>)
 8001400:	4a9d      	ldr	r2, [pc, #628]	@ (8001678 <main+0x308>)
 8001402:	661a      	str	r2, [r3, #96]	@ 0x60
	morse.time.millisecondsElapsed = morse_millisecondsElapsed;
 8001404:	4b9b      	ldr	r3, [pc, #620]	@ (8001674 <main+0x304>)
 8001406:	4a9d      	ldr	r2, [pc, #628]	@ (800167c <main+0x30c>)
 8001408:	659a      	str	r2, [r3, #88]	@ 0x58
	morse.time.secondsElapsed = morse_secondsElapsed;
 800140a:	4b9a      	ldr	r3, [pc, #616]	@ (8001674 <main+0x304>)
 800140c:	4a9c      	ldr	r2, [pc, #624]	@ (8001680 <main+0x310>)
 800140e:	65da      	str	r2, [r3, #92]	@ 0x5c
	//HAL_NVIC_DisableIRQ(EXTI4_IRQn);
	/* Initialize si4463 */
	int res = si4463_init(&si4463);
 8001410:	488d      	ldr	r0, [pc, #564]	@ (8001648 <main+0x2d8>)
 8001412:	f006 fd9f 	bl	8007f54 <si4463_init>
 8001416:	4603      	mov	r3, r0
 8001418:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	if(res == SI4463_OK)
 800141c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <main+0xbc>
		printf("Si4463 init .. ok !\r\n");
 8001424:	4897      	ldr	r0, [pc, #604]	@ (8001684 <main+0x314>)
 8001426:	f009 fb6b 	bl	800ab00 <puts>
 800142a:	e004      	b.n	8001436 <main+0xc6>
	else
		printf("Si4463 init .. fail ! error code: %d\r\n", res);
 800142c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001430:	4895      	ldr	r0, [pc, #596]	@ (8001688 <main+0x318>)
 8001432:	f009 faf5 	bl	800aa20 <iprintf>

	si4463_getPartInfo(&si4463);
 8001436:	4884      	ldr	r0, [pc, #528]	@ (8001648 <main+0x2d8>)
 8001438:	f006 fde0 	bl	8007ffc <si4463_getPartInfo>
	si4463_getFuncInfo(&si4463);
 800143c:	4882      	ldr	r0, [pc, #520]	@ (8001648 <main+0x2d8>)
 800143e:	f006 fe53 	bl	80080e8 <si4463_getFuncInfo>

	/* Functional test: Packet generator send data to packet parser.
	 * AX.25 -> HDLC -> NRZI -> G3RUH
	 * G3RUH -> NRZI -> HDLC -> AX.25*/
	char testInfo[] = "What is 'X' SATORO ??";
 8001442:	4b92      	ldr	r3, [pc, #584]	@ (800168c <main+0x31c>)
 8001444:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001448:	461d      	mov	r5, r3
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001452:	6020      	str	r0, [r4, #0]
 8001454:	3404      	adds	r4, #4
 8001456:	8021      	strh	r1, [r4, #0]
	uint8_t control = RADIOLIB_AX25_CONTROL_U_UNNUMBERED_INFORMATION | RADIOLIB_AX25_CONTROL_POLL_FINAL_DISABLED | RADIOLIB_AX25_CONTROL_UNNUMBERED_FRAME;
 8001458:	2303      	movs	r3, #3
 800145a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
	ax25sendframe_t* testsendframe = createAX25SendFrame("STARL", 0, "NCKU", 0, control, RADIOLIB_AX25_PID_NO_LAYER_3, (uint8_t*)testInfo, strlen(testInfo), 8);
 800145e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ff24 	bl	80002b0 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29b      	uxth	r3, r3
 800146c:	2208      	movs	r2, #8
 800146e:	9204      	str	r2, [sp, #16]
 8001470:	9303      	str	r3, [sp, #12]
 8001472:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	23f0      	movs	r3, #240	@ 0xf0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2300      	movs	r3, #0
 8001484:	4a82      	ldr	r2, [pc, #520]	@ (8001690 <main+0x320>)
 8001486:	2100      	movs	r1, #0
 8001488:	4882      	ldr	r0, [pc, #520]	@ (8001694 <main+0x324>)
 800148a:	f005 fb10 	bl	8006aae <createAX25SendFrame>
 800148e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	ax25frame.ax25SendFrame = testsendframe;
 8001492:	4a81      	ldr	r2, [pc, #516]	@ (8001698 <main+0x328>)
 8001494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001498:	6013      	str	r3, [r2, #0]
	uint16_t testhdlcLen = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	uint8_t* testhdlcbuff;
	uint8_t pres = AX25Frame_HDLC_Generator(&ax25frame, &testhdlcbuff, &testhdlcLen);
 80014a0:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 80014a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014a8:	4619      	mov	r1, r3
 80014aa:	487b      	ldr	r0, [pc, #492]	@ (8001698 <main+0x328>)
 80014ac:	f005 fbb4 	bl	8006c18 <AX25Frame_HDLC_Generator>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
	if(!pres)
 80014b6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d125      	bne.n	800150a <main+0x19a>
	{
		printf("Generate AX.25 frame .. success ! \r\n");
 80014be:	4877      	ldr	r0, [pc, #476]	@ (800169c <main+0x32c>)
 80014c0:	f009 fb1e 	bl	800ab00 <puts>
		printf("AX.25/HDLC frame\r\n");
 80014c4:	4876      	ldr	r0, [pc, #472]	@ (80016a0 <main+0x330>)
 80014c6:	f009 fb1b 	bl	800ab00 <puts>
		printf("packet: ");
 80014ca:	4876      	ldr	r0, [pc, #472]	@ (80016a4 <main+0x334>)
 80014cc:	f009 faa8 	bl	800aa20 <iprintf>
		for(int i = 0; i <  testhdlcLen; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80014d6:	e00d      	b.n	80014f4 <main+0x184>
			printf("0x%02x ", testhdlcbuff[i]);
 80014d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4870      	ldr	r0, [pc, #448]	@ (80016a8 <main+0x338>)
 80014e6:	f009 fa9b 	bl	800aa20 <iprintf>
		for(int i = 0; i <  testhdlcLen; i++)
 80014ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014ee:	3301      	adds	r3, #1
 80014f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80014f4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80014f8:	461a      	mov	r2, r3
 80014fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014fe:	4293      	cmp	r3, r2
 8001500:	dbea      	blt.n	80014d8 <main+0x168>
		printf("\r\n");
 8001502:	486a      	ldr	r0, [pc, #424]	@ (80016ac <main+0x33c>)
 8001504:	f009 fafc 	bl	800ab00 <puts>
 8001508:	e002      	b.n	8001510 <main+0x1a0>
	}
	else
		printf("Generate AX.25 frame .. fail ! \r\n");
 800150a:	4869      	ldr	r0, [pc, #420]	@ (80016b0 <main+0x340>)
 800150c:	f009 faf8 	bl	800ab00 <puts>
	ax25_nrzi_encode(testhdlcbuff, testhdlcbuff, testhdlcLen);
 8001510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001512:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001514:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8001518:	4618      	mov	r0, r3
 800151a:	f006 f878 	bl	800760e <ax25_nrzi_encode>
	printf("NRZI encode\r\n");
 800151e:	4865      	ldr	r0, [pc, #404]	@ (80016b4 <main+0x344>)
 8001520:	f009 faee 	bl	800ab00 <puts>
	printf("packet: ");
 8001524:	485f      	ldr	r0, [pc, #380]	@ (80016a4 <main+0x334>)
 8001526:	f009 fa7b 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001530:	e00d      	b.n	800154e <main+0x1de>
		printf("0x%02x ", testhdlcbuff[i]);
 8001532:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001534:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	485a      	ldr	r0, [pc, #360]	@ (80016a8 <main+0x338>)
 8001540:	f009 fa6e 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 8001544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001548:	3301      	adds	r3, #1
 800154a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800154e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001552:	461a      	mov	r2, r3
 8001554:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001558:	4293      	cmp	r3, r2
 800155a:	dbea      	blt.n	8001532 <main+0x1c2>
	printf("\r\n");
 800155c:	4853      	ldr	r0, [pc, #332]	@ (80016ac <main+0x33c>)
 800155e:	f009 facf 	bl	800ab00 <puts>
	ax25_g3ruh_scrambler_init(0x21000UL);
 8001562:	f44f 3004 	mov.w	r0, #135168	@ 0x21000
 8001566:	f006 f937 	bl	80077d8 <ax25_g3ruh_scrambler_init>
	ax25_g3ruh_scrambler(testhdlcbuff, testhdlcbuff, testhdlcLen);
 800156a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800156c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800156e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8001572:	4618      	mov	r0, r3
 8001574:	f006 f962 	bl	800783c <ax25_g3ruh_scrambler>
	printf("G3RUH scramble\r\n");
 8001578:	484f      	ldr	r0, [pc, #316]	@ (80016b8 <main+0x348>)
 800157a:	f009 fac1 	bl	800ab00 <puts>
	printf("packet: ");
 800157e:	4849      	ldr	r0, [pc, #292]	@ (80016a4 <main+0x334>)
 8001580:	f009 fa4e 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800158a:	e00d      	b.n	80015a8 <main+0x238>
		printf("0x%02x ", testhdlcbuff[i]);
 800158c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800158e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4843      	ldr	r0, [pc, #268]	@ (80016a8 <main+0x338>)
 800159a:	f009 fa41 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 800159e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80015a8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80015ac:	461a      	mov	r2, r3
 80015ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80015b2:	4293      	cmp	r3, r2
 80015b4:	dbea      	blt.n	800158c <main+0x21c>
	printf("\r\n");
 80015b6:	483d      	ldr	r0, [pc, #244]	@ (80016ac <main+0x33c>)
 80015b8:	f009 faa2 	bl	800ab00 <puts>

	ax25_g3ruh_scrambler_init(0x21000UL);
 80015bc:	f44f 3004 	mov.w	r0, #135168	@ 0x21000
 80015c0:	f006 f90a 	bl	80077d8 <ax25_g3ruh_scrambler_init>
	ax25_g3ruh_descrambler(testhdlcbuff, testhdlcbuff, testhdlcLen);
 80015c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80015c8:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80015cc:	4618      	mov	r0, r3
 80015ce:	f006 f9cf 	bl	8007970 <ax25_g3ruh_descrambler>
	printf("G3RUH descramble\r\n");
 80015d2:	483a      	ldr	r0, [pc, #232]	@ (80016bc <main+0x34c>)
 80015d4:	f009 fa94 	bl	800ab00 <puts>
	printf("packet: ");
 80015d8:	4832      	ldr	r0, [pc, #200]	@ (80016a4 <main+0x334>)
 80015da:	f009 fa21 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80015e4:	e00d      	b.n	8001602 <main+0x292>
		printf("0x%02x ", testhdlcbuff[i]);
 80015e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	482d      	ldr	r0, [pc, #180]	@ (80016a8 <main+0x338>)
 80015f4:	f009 fa14 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 80015f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80015fc:	3301      	adds	r3, #1
 80015fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001602:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800160c:	4293      	cmp	r3, r2
 800160e:	dbea      	blt.n	80015e6 <main+0x276>
	printf("\r\n");
 8001610:	4826      	ldr	r0, [pc, #152]	@ (80016ac <main+0x33c>)
 8001612:	f009 fa75 	bl	800ab00 <puts>

	ax25_nrzi_decode(testhdlcbuff, testhdlcbuff, testhdlcLen);
 8001616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001618:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800161a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 800161e:	4618      	mov	r0, r3
 8001620:	f006 f868 	bl	80076f4 <ax25_nrzi_decode>
	printf("NRZI decode\r\n");
 8001624:	4826      	ldr	r0, [pc, #152]	@ (80016c0 <main+0x350>)
 8001626:	f009 fa6b 	bl	800ab00 <puts>
	printf("packet: ");
 800162a:	481e      	ldr	r0, [pc, #120]	@ (80016a4 <main+0x334>)
 800162c:	f009 f9f8 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001636:	e053      	b.n	80016e0 <main+0x370>
 8001638:	200007dc 	.word	0x200007dc
 800163c:	20000824 	.word	0x20000824
 8001640:	200009cc 	.word	0x200009cc
 8001644:	2000086c 	.word	0x2000086c
 8001648:	200008b0 	.word	0x200008b0
 800164c:	08002899 	.word	0x08002899
 8001650:	080028c5 	.word	0x080028c5
 8001654:	080028f1 	.word	0x080028f1
 8001658:	08002925 	.word	0x08002925
 800165c:	08002939 	.word	0x08002939
 8001660:	08002969 	.word	0x08002969
 8001664:	0800299d 	.word	0x0800299d
 8001668:	080029d1 	.word	0x080029d1
 800166c:	08002a05 	.word	0x08002a05
 8001670:	08002a25 	.word	0x08002a25
 8001674:	200009f0 	.word	0x200009f0
 8001678:	08002db5 	.word	0x08002db5
 800167c:	08002dd9 	.word	0x08002dd9
 8001680:	08002e19 	.word	0x08002e19
 8001684:	0800e20c 	.word	0x0800e20c
 8001688:	0800e224 	.word	0x0800e224
 800168c:	0800ec5c 	.word	0x0800ec5c
 8001690:	0800e24c 	.word	0x0800e24c
 8001694:	0800e254 	.word	0x0800e254
 8001698:	200009d4 	.word	0x200009d4
 800169c:	0800e25c 	.word	0x0800e25c
 80016a0:	0800e280 	.word	0x0800e280
 80016a4:	0800e294 	.word	0x0800e294
 80016a8:	0800e2a0 	.word	0x0800e2a0
 80016ac:	0800e1e0 	.word	0x0800e1e0
 80016b0:	0800e2a8 	.word	0x0800e2a8
 80016b4:	0800e2cc 	.word	0x0800e2cc
 80016b8:	0800e2dc 	.word	0x0800e2dc
 80016bc:	0800e2ec 	.word	0x0800e2ec
 80016c0:	0800e300 	.word	0x0800e300
		printf("0x%02x ", testhdlcbuff[i]);
 80016c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	48c9      	ldr	r0, [pc, #804]	@ (80019f8 <main+0x688>)
 80016d2:	f009 f9a5 	bl	800aa20 <iprintf>
	for(int i = 0; i <  testhdlcLen; i++)
 80016d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016da:	3301      	adds	r3, #1
 80016dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80016e0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80016e4:	461a      	mov	r2, r3
 80016e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016ea:	4293      	cmp	r3, r2
 80016ec:	dbea      	blt.n	80016c4 <main+0x354>
	printf("\r\n");
 80016ee:	48c3      	ldr	r0, [pc, #780]	@ (80019fc <main+0x68c>)
 80016f0:	f009 fa06 	bl	800ab00 <puts>

	ax25receiveframe_t* testrcvframe = createAX25ReceiveFrame("STARL", 0, "NCKU", 0, control, RADIOLIB_AX25_PID_NO_LAYER_3, 8);
 80016f4:	2308      	movs	r3, #8
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	23f0      	movs	r3, #240	@ 0xf0
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	4abe      	ldr	r2, [pc, #760]	@ (8001a00 <main+0x690>)
 8001706:	2100      	movs	r1, #0
 8001708:	48be      	ldr	r0, [pc, #760]	@ (8001a04 <main+0x694>)
 800170a:	f005 fa35 	bl	8006b78 <createAX25ReceiveFrame>
 800170e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	ax25frame.ax25RcvFrame = testrcvframe;
 8001712:	4abd      	ldr	r2, [pc, #756]	@ (8001a08 <main+0x698>)
 8001714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001718:	6053      	str	r3, [r2, #4]

	pres = AX25Frame_HDLC_Parser(&ax25frame, testhdlcbuff, testhdlcLen);
 800171a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800171c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8001720:	4619      	mov	r1, r3
 8001722:	48b9      	ldr	r0, [pc, #740]	@ (8001a08 <main+0x698>)
 8001724:	f005 fcf4 	bl	8007110 <AX25Frame_HDLC_Parser>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
	if(!pres)
 800172e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <main+0x3ce>
		printf("Parse AX.25 frame .. success ! \r\n");
 8001736:	48b5      	ldr	r0, [pc, #724]	@ (8001a0c <main+0x69c>)
 8001738:	f009 f9e2 	bl	800ab00 <puts>
 800173c:	e002      	b.n	8001744 <main+0x3d4>
	else
		printf("Parse AX.25 frame .. fail !  CRC Error !\r\n");
 800173e:	48b4      	ldr	r0, [pc, #720]	@ (8001a10 <main+0x6a0>)
 8001740:	f009 f9de 	bl	800ab00 <puts>

	printf("AX.25/HDLC frame information:\r\n");
 8001744:	48b3      	ldr	r0, [pc, #716]	@ (8001a14 <main+0x6a4>)
 8001746:	f009 f9db 	bl	800ab00 <puts>
	printf("From %s to %s ", ax25frame.ax25RcvFrame->srcCallsign, ax25frame.ax25RcvFrame->destCallsign);
 800174a:	4baf      	ldr	r3, [pc, #700]	@ (8001a08 <main+0x698>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	3308      	adds	r3, #8
 8001750:	4aad      	ldr	r2, [pc, #692]	@ (8001a08 <main+0x698>)
 8001752:	6852      	ldr	r2, [r2, #4]
 8001754:	4619      	mov	r1, r3
 8001756:	48b0      	ldr	r0, [pc, #704]	@ (8001a18 <main+0x6a8>)
 8001758:	f009 f962 	bl	800aa20 <iprintf>
	printf("<Control: %d, PID: %02X, Length: %d> \r\n", ax25frame.ax25RcvFrame->control, ax25frame.ax25RcvFrame->protocolID, ax25frame.ax25RcvFrame->infoLen);
 800175c:	4baa      	ldr	r3, [pc, #680]	@ (8001a08 <main+0x698>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	7c1b      	ldrb	r3, [r3, #16]
 8001762:	4619      	mov	r1, r3
 8001764:	4ba8      	ldr	r3, [pc, #672]	@ (8001a08 <main+0x698>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	7c5b      	ldrb	r3, [r3, #17]
 800176a:	461a      	mov	r2, r3
 800176c:	4ba6      	ldr	r3, [pc, #664]	@ (8001a08 <main+0x698>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	8a5b      	ldrh	r3, [r3, #18]
 8001772:	48aa      	ldr	r0, [pc, #680]	@ (8001a1c <main+0x6ac>)
 8001774:	f009 f954 	bl	800aa20 <iprintf>
	printf("Message: %s \r\n", ax25frame.ax25RcvFrame->info);
 8001778:	4ba3      	ldr	r3, [pc, #652]	@ (8001a08 <main+0x698>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4619      	mov	r1, r3
 8001780:	48a7      	ldr	r0, [pc, #668]	@ (8001a20 <main+0x6b0>)
 8001782:	f009 f94d 	bl	800aa20 <iprintf>
	printf("\r\n");
 8001786:	489d      	ldr	r0, [pc, #628]	@ (80019fc <main+0x68c>)
 8001788:	f009 f9ba 	bl	800ab00 <puts>
	//HAL_NVIC_EnableIRQ(EXTI4_IRQn);
	uint8_t rxDataLen = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
	uint8_t rxData[100] = {0};
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2260      	movs	r2, #96	@ 0x60
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f009 faae 	bl	800ad00 <memset>
	int cmdCode = -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int paramCode = -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(rxFlag)
 80017b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001a24 <main+0x6b4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d067      	beq.n	800188e <main+0x51e>
	{
		if(si4463.gpios.IRQ() == si4463.gpios.gpio_low)
 80017be:	4b9a      	ldr	r3, [pc, #616]	@ (8001a28 <main+0x6b8>)
 80017c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c2:	4798      	blx	r3
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b97      	ldr	r3, [pc, #604]	@ (8001a28 <main+0x6b8>)
 80017ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d15d      	bne.n	800188e <main+0x51e>
		{
			printf("RSSI: %d\r\n", si4463_getLatchRSSI(&si4463));
 80017d2:	4895      	ldr	r0, [pc, #596]	@ (8001a28 <main+0x6b8>)
 80017d4:	f006 fd64 	bl	80082a0 <si4463_getLatchRSSI>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	4893      	ldr	r0, [pc, #588]	@ (8001a2c <main+0x6bc>)
 80017de:	f009 f91f 	bl	800aa20 <iprintf>
			si4463_getInterrupts(&si4463);
 80017e2:	4891      	ldr	r0, [pc, #580]	@ (8001a28 <main+0x6b8>)
 80017e4:	f006 fddb 	bl	800839e <si4463_getInterrupts>
			res = si4463_getRxFifoInfo(&si4463);
 80017e8:	488f      	ldr	r0, [pc, #572]	@ (8001a28 <main+0x6b8>)
 80017ea:	f006 fcfd 	bl	80081e8 <si4463_getRxFifoInfo>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if(res > 0)
 80017f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd43      	ble.n	8001884 <main+0x514>
			{
				rxDataLen = res;
 80017fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001800:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
				res = si4463_receive(&si4463, rxData, rxDataLen);
 8001804:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4619      	mov	r1, r3
 800180e:	4886      	ldr	r0, [pc, #536]	@ (8001a28 <main+0x6b8>)
 8001810:	f006 ffd6 	bl	80087c0 <si4463_receive>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

				if(res == SI4463_OK)
 800181a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800181e:	2b00      	cmp	r3, #0
 8001820:	d12a      	bne.n	8001878 <main+0x508>
				{
					printf("Receive .. ok !\r\n");
 8001822:	4883      	ldr	r0, [pc, #524]	@ (8001a30 <main+0x6c0>)
 8001824:	f009 f96c 	bl	800ab00 <puts>
					printf("Message: ");
 8001828:	4882      	ldr	r0, [pc, #520]	@ (8001a34 <main+0x6c4>)
 800182a:	f009 f8f9 	bl	800aa20 <iprintf>
					for(int i = 0;i < rxDataLen; i++)
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001834:	e00e      	b.n	8001854 <main+0x4e4>
					{
						printf("0x%02x ", rxData[i]);
 8001836:	f107 0208 	add.w	r2, r7, #8
 800183a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4619      	mov	r1, r3
 8001844:	486c      	ldr	r0, [pc, #432]	@ (80019f8 <main+0x688>)
 8001846:	f009 f8eb 	bl	800aa20 <iprintf>
					for(int i = 0;i < rxDataLen; i++)
 800184a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800184e:	3301      	adds	r3, #1
 8001850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001854:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001858:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800185c:	429a      	cmp	r2, r3
 800185e:	dbea      	blt.n	8001836 <main+0x4c6>
					}
					printf("\r\n");
 8001860:	4866      	ldr	r0, [pc, #408]	@ (80019fc <main+0x68c>)
 8001862:	f009 f94d 	bl	800ab00 <puts>
					memset(rxData, '\0', rxDataLen);
 8001866:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f009 fa45 	bl	800ad00 <memset>
 8001876:	e00a      	b.n	800188e <main+0x51e>
//					printf("Message: %s \r\n", ax25frame.ax25RcvFrame->info);
//					printf("\r\n");

				}
				else
					printf("Receive .. fail ! error code: %d\r\n", res);
 8001878:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800187c:	486e      	ldr	r0, [pc, #440]	@ (8001a38 <main+0x6c8>)
 800187e:	f009 f8cf 	bl	800aa20 <iprintf>
 8001882:	e004      	b.n	800188e <main+0x51e>
			}
			else
			{
				printf("Get Rx FiFO info .. fail ! error code: %d\r\n", res);
 8001884:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001888:	486c      	ldr	r0, [pc, #432]	@ (8001a3c <main+0x6cc>)
 800188a:	f009 f8c9 	bl	800aa20 <iprintf>
			}
		}
	}

	if(cmdFlag)
 800188e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a40 <main+0x6d0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d08d      	beq.n	80017b4 <main+0x444>
	{
		cmdCode = HT_searchKey(ht, (char*)&myRxCmd.cmd[0]);
 8001898:	4b6a      	ldr	r3, [pc, #424]	@ (8001a44 <main+0x6d4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	496a      	ldr	r1, [pc, #424]	@ (8001a48 <main+0x6d8>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f005 f879 	bl	8006996 <HT_searchKey>
 80018a4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
		paramCode = HT_searchKey(ht, (char*)&myRxCmd.param[0]);
 80018a8:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <main+0x6d4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4967      	ldr	r1, [pc, #412]	@ (8001a4c <main+0x6dc>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 f871 	bl	8006996 <HT_searchKey>
 80018b4:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
//		param2Code = HT_searchKey(ht, (char*)&myRxCmd.param2[0]);
		switch(cmdCode)
 80018b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018bc:	2b33      	cmp	r3, #51	@ 0x33
 80018be:	f200 8548 	bhi.w	8002352 <main+0xfe2>
 80018c2:	a201      	add	r2, pc, #4	@ (adr r2, 80018c8 <main+0x558>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001999 	.word	0x08001999
 80018cc:	080019a1 	.word	0x080019a1
 80018d0:	080019cd 	.word	0x080019cd
 80018d4:	08001bff 	.word	0x08001bff
 80018d8:	08002353 	.word	0x08002353
 80018dc:	08002353 	.word	0x08002353
 80018e0:	08002353 	.word	0x08002353
 80018e4:	08002353 	.word	0x08002353
 80018e8:	08002353 	.word	0x08002353
 80018ec:	08002353 	.word	0x08002353
 80018f0:	08002353 	.word	0x08002353
 80018f4:	08001a61 	.word	0x08001a61
 80018f8:	08001bc7 	.word	0x08001bc7
 80018fc:	08002353 	.word	0x08002353
 8001900:	08002353 	.word	0x08002353
 8001904:	08001bbf 	.word	0x08001bbf
 8001908:	08002353 	.word	0x08002353
 800190c:	08002353 	.word	0x08002353
 8001910:	08002353 	.word	0x08002353
 8001914:	08002353 	.word	0x08002353
 8001918:	08002353 	.word	0x08002353
 800191c:	08002353 	.word	0x08002353
 8001920:	08002353 	.word	0x08002353
 8001924:	08002353 	.word	0x08002353
 8001928:	08002353 	.word	0x08002353
 800192c:	08002353 	.word	0x08002353
 8001930:	08002353 	.word	0x08002353
 8001934:	08002353 	.word	0x08002353
 8001938:	08002353 	.word	0x08002353
 800193c:	08002353 	.word	0x08002353
 8001940:	08002353 	.word	0x08002353
 8001944:	08002353 	.word	0x08002353
 8001948:	08002353 	.word	0x08002353
 800194c:	08002353 	.word	0x08002353
 8001950:	08002353 	.word	0x08002353
 8001954:	08002353 	.word	0x08002353
 8001958:	08002353 	.word	0x08002353
 800195c:	08002353 	.word	0x08002353
 8001960:	08002353 	.word	0x08002353
 8001964:	08002353 	.word	0x08002353
 8001968:	08002353 	.word	0x08002353
 800196c:	08002353 	.word	0x08002353
 8001970:	08002353 	.word	0x08002353
 8001974:	08002353 	.word	0x08002353
 8001978:	08002353 	.word	0x08002353
 800197c:	08002353 	.word	0x08002353
 8001980:	08002353 	.word	0x08002353
 8001984:	08002353 	.word	0x08002353
 8001988:	08002353 	.word	0x08002353
 800198c:	08002353 	.word	0x08002353
 8001990:	080020a5 	.word	0x080020a5
 8001994:	08001c27 	.word	0x08001c27
		{
		case CMD_HELP:
			si4463MenuDisplay();
 8001998:	f001 f854 	bl	8002a44 <si4463MenuDisplay>
			break;
 800199c:	f000 bcdc 	b.w	8002358 <main+0xfe8>
		case CMD_RESET:
			res = si4463_powerOnReset(&si4463);
 80019a0:	4821      	ldr	r0, [pc, #132]	@ (8001a28 <main+0x6b8>)
 80019a2:	f006 fa99 	bl	8007ed8 <si4463_powerOnReset>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if(res == SI4463_OK)
 80019ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <main+0x64e>
				printf("Si4463 power on reset .. ok !\r\n");
 80019b4:	4826      	ldr	r0, [pc, #152]	@ (8001a50 <main+0x6e0>)
 80019b6:	f009 f8a3 	bl	800ab00 <puts>
			else
				printf("Si4463 power on reset .. fail ! error code: %d\r\n", res);
			break;
 80019ba:	f000 bccd 	b.w	8002358 <main+0xfe8>
				printf("Si4463 power on reset .. fail ! error code: %d\r\n", res);
 80019be:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80019c2:	4824      	ldr	r0, [pc, #144]	@ (8001a54 <main+0x6e4>)
 80019c4:	f009 f82c 	bl	800aa20 <iprintf>
			break;
 80019c8:	f000 bcc6 	b.w	8002358 <main+0xfe8>
		case CMD_INIT:
			res = si4463_init(&si4463);
 80019cc:	4816      	ldr	r0, [pc, #88]	@ (8001a28 <main+0x6b8>)
 80019ce:	f006 fac1 	bl	8007f54 <si4463_init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if(res == SI4463_OK)
 80019d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <main+0x67a>
				printf("Si4463 init .. ok !\r\n");
 80019e0:	481d      	ldr	r0, [pc, #116]	@ (8001a58 <main+0x6e8>)
 80019e2:	f009 f88d 	bl	800ab00 <puts>
			else
				printf("Si4463 init .. fail ! error code: %d\r\n", res);
			break;
 80019e6:	f000 bcb7 	b.w	8002358 <main+0xfe8>
				printf("Si4463 init .. fail ! error code: %d\r\n", res);
 80019ea:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80019ee:	481b      	ldr	r0, [pc, #108]	@ (8001a5c <main+0x6ec>)
 80019f0:	f009 f816 	bl	800aa20 <iprintf>
			break;
 80019f4:	f000 bcb0 	b.w	8002358 <main+0xfe8>
 80019f8:	0800e2a0 	.word	0x0800e2a0
 80019fc:	0800e1e0 	.word	0x0800e1e0
 8001a00:	0800e24c 	.word	0x0800e24c
 8001a04:	0800e254 	.word	0x0800e254
 8001a08:	200009d4 	.word	0x200009d4
 8001a0c:	0800e310 	.word	0x0800e310
 8001a10:	0800e334 	.word	0x0800e334
 8001a14:	0800e360 	.word	0x0800e360
 8001a18:	0800e380 	.word	0x0800e380
 8001a1c:	0800e390 	.word	0x0800e390
 8001a20:	0800e3b8 	.word	0x0800e3b8
 8001a24:	200009d0 	.word	0x200009d0
 8001a28:	200008b0 	.word	0x200008b0
 8001a2c:	0800e3c8 	.word	0x0800e3c8
 8001a30:	0800e3d4 	.word	0x0800e3d4
 8001a34:	0800e3e8 	.word	0x0800e3e8
 8001a38:	0800e3f4 	.word	0x0800e3f4
 8001a3c:	0800e418 	.word	0x0800e418
 8001a40:	200009cf 	.word	0x200009cf
 8001a44:	2000094c 	.word	0x2000094c
 8001a48:	2000096e 	.word	0x2000096e
 8001a4c:	20000978 	.word	0x20000978
 8001a50:	0800e444 	.word	0x0800e444
 8001a54:	0800e464 	.word	0x0800e464
 8001a58:	0800e20c 	.word	0x0800e20c
 8001a5c:	0800e224 	.word	0x0800e224
		case CMD_TX:
			if(myRxCmd.paramLen > 0)
 8001a60:	4ba6      	ldr	r3, [pc, #664]	@ (8001cfc <main+0x98c>)
 8001a62:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80a5 	beq.w	8001bb6 <main+0x846>
			{
				if(si4463.settings.txMod != MOD_OOK)
 8001a6c:	4ba4      	ldr	r3, [pc, #656]	@ (8001d00 <main+0x990>)
 8001a6e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d07a      	beq.n	8001b6c <main+0x7fc>
				{
					uint8_t control = RADIOLIB_AX25_CONTROL_U_UNNUMBERED_INFORMATION | RADIOLIB_AX25_CONTROL_POLL_FINAL_DISABLED | RADIOLIB_AX25_CONTROL_UNNUMBERED_FRAME;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
					ax25sendframe_t* ax25sendframe = createAX25SendFrame("STARL", 0, "NCKU", 0, control, RADIOLIB_AX25_PID_NO_LAYER_3, (uint8_t*)myRxCmd.param, myRxCmd.paramLen - 1, 8);
 8001a7c:	4b9f      	ldr	r3, [pc, #636]	@ (8001cfc <main+0x98c>)
 8001a7e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2208      	movs	r2, #8
 8001a88:	9204      	str	r2, [sp, #16]
 8001a8a:	9303      	str	r3, [sp, #12]
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	@ (8001d04 <main+0x994>)
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	23f0      	movs	r3, #240	@ 0xf0
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001d08 <main+0x998>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	489a      	ldr	r0, [pc, #616]	@ (8001d0c <main+0x99c>)
 8001aa2:	f005 f804 	bl	8006aae <createAX25SendFrame>
 8001aa6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					ax25frame.ax25SendFrame = ax25sendframe;
 8001aaa:	4a99      	ldr	r2, [pc, #612]	@ (8001d10 <main+0x9a0>)
 8001aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ab0:	6013      	str	r3, [r2, #0]
					uint16_t hdlcLen = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	80fb      	strh	r3, [r7, #6]
					uint8_t* hdlcbuff;
					uint8_t pres = AX25Frame_HDLC_Generator(&ax25frame, &hdlcbuff, &hdlcLen);
 8001ab6:	1dba      	adds	r2, r7, #6
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4619      	mov	r1, r3
 8001abc:	4894      	ldr	r0, [pc, #592]	@ (8001d10 <main+0x9a0>)
 8001abe:	f005 f8ab 	bl	8006c18 <AX25Frame_HDLC_Generator>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
					if(!pres)
 8001ac8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d146      	bne.n	8001b5e <main+0x7ee>
					{
						ax25_nrzi_encode(hdlcbuff, hdlcbuff, hdlcLen);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 fd99 	bl	800760e <ax25_nrzi_encode>
						ax25_g3ruh_scrambler_init(0x21000UL);
 8001adc:	f44f 3004 	mov.w	r0, #135168	@ 0x21000
 8001ae0:	f005 fe7a 	bl	80077d8 <ax25_g3ruh_scrambler_init>
						ax25_g3ruh_scrambler(hdlcbuff, hdlcbuff, hdlcLen);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fea6 	bl	800783c <ax25_g3ruh_scrambler>

						res = si4463_transmit(&si4463, hdlcbuff, hdlcLen, STATE_NO_CHANGE);
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	2300      	movs	r3, #0
 8001af8:	4881      	ldr	r0, [pc, #516]	@ (8001d00 <main+0x990>)
 8001afa:	f006 fd8b 	bl	8008614 <si4463_transmit>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						if(res == SI4463_OK)
 8001b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d122      	bne.n	8001b52 <main+0x7e2>
						{
							printf("Si4463 Transmit .. ok !\r\n");
 8001b0c:	4881      	ldr	r0, [pc, #516]	@ (8001d14 <main+0x9a4>)
 8001b0e:	f008 fff7 	bl	800ab00 <puts>
							printf("packet: ");
 8001b12:	4881      	ldr	r0, [pc, #516]	@ (8001d18 <main+0x9a8>)
 8001b14:	f008 ff84 	bl	800aa20 <iprintf>
							for(int i = 0; i <  hdlcLen; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b1e:	e00d      	b.n	8001b3c <main+0x7cc>
								printf("0x%02x ", hdlcbuff[i]);
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	487b      	ldr	r0, [pc, #492]	@ (8001d1c <main+0x9ac>)
 8001b2e:	f008 ff77 	bl	800aa20 <iprintf>
							for(int i = 0; i <  hdlcLen; i++)
 8001b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001b36:	3301      	adds	r3, #1
 8001b38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001b44:	4293      	cmp	r3, r2
 8001b46:	dbeb      	blt.n	8001b20 <main+0x7b0>
							printf("\r\n");
 8001b48:	4875      	ldr	r0, [pc, #468]	@ (8001d20 <main+0x9b0>)
 8001b4a:	f008 ffd9 	bl	800ab00 <puts>
			}
			else
			{
				printf("Invalid packets ! \r\n");
			}
			break;
 8001b4e:	f000 bc03 	b.w	8002358 <main+0xfe8>
							printf("Si4463 Transmit .. fail ! error code: %d\r\n", res);
 8001b52:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001b56:	4873      	ldr	r0, [pc, #460]	@ (8001d24 <main+0x9b4>)
 8001b58:	f008 ff62 	bl	800aa20 <iprintf>
			break;
 8001b5c:	e3fc      	b.n	8002358 <main+0xfe8>
						printf("Tx error ! error code: %d", pres);
 8001b5e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001b62:	4619      	mov	r1, r3
 8001b64:	4870      	ldr	r0, [pc, #448]	@ (8001d28 <main+0x9b8>)
 8001b66:	f008 ff5b 	bl	800aa20 <iprintf>
			break;
 8001b6a:	e3f5      	b.n	8002358 <main+0xfe8>
					morse_setText(&morse, (char*)myRxCmd.param);
 8001b6c:	4965      	ldr	r1, [pc, #404]	@ (8001d04 <main+0x994>)
 8001b6e:	486f      	ldr	r0, [pc, #444]	@ (8001d2c <main+0x9bc>)
 8001b70:	f005 ff98 	bl	8007aa4 <morse_setText>
					morse_start(&morse);
 8001b74:	486d      	ldr	r0, [pc, #436]	@ (8001d2c <main+0x9bc>)
 8001b76:	f006 f99a 	bl	8007eae <morse_start>
					si4463_startTx(&si4463, 0, STATE_NO_CHANGE);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4860      	ldr	r0, [pc, #384]	@ (8001d00 <main+0x990>)
 8001b80:	f007 fd0c 	bl	800959c <si4463_startTx>
					while(morse.currentState != msEndOfText)
 8001b84:	e00e      	b.n	8001ba4 <main+0x834>
						morse_handleTimeout(&morse);
 8001b86:	4869      	ldr	r0, [pc, #420]	@ (8001d2c <main+0x9bc>)
 8001b88:	f005 ffa6 	bl	8007ad8 <morse_handleTimeout>
						bool toneOn = morse_isToneActive(&morse);
 8001b8c:	4867      	ldr	r0, [pc, #412]	@ (8001d2c <main+0x9bc>)
 8001b8e:	f006 f96f 	bl	8007e70 <morse_isToneActive>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
						si4463_controlOOK(&si4463, toneOn);
 8001b98:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4858      	ldr	r0, [pc, #352]	@ (8001d00 <main+0x990>)
 8001ba0:	f007 feac 	bl	80098fc <si4463_controlOOK>
					while(morse.currentState != msEndOfText)
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <main+0x9bc>)
 8001ba6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d1eb      	bne.n	8001b86 <main+0x816>
					printf("Sending Morse code.. Complete !\r\n");
 8001bae:	4860      	ldr	r0, [pc, #384]	@ (8001d30 <main+0x9c0>)
 8001bb0:	f008 ffa6 	bl	800ab00 <puts>
			break;
 8001bb4:	e3d0      	b.n	8002358 <main+0xfe8>
				printf("Invalid packets ! \r\n");
 8001bb6:	485f      	ldr	r0, [pc, #380]	@ (8001d34 <main+0x9c4>)
 8001bb8:	f008 ffa2 	bl	800ab00 <puts>
			break;
 8001bbc:	e3cc      	b.n	8002358 <main+0xfe8>
		case CMD_CONTINUE_TX:
			printf("TBD \r\n");
 8001bbe:	485e      	ldr	r0, [pc, #376]	@ (8001d38 <main+0x9c8>)
 8001bc0:	f008 ff9e 	bl	800ab00 <puts>
			break;
 8001bc4:	e3c8      	b.n	8002358 <main+0xfe8>
		case CMD_RX:
			res = si4463_initRx(&si4463, 0, STATE_RX, STATE_RX, STATE_RX);
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2308      	movs	r3, #8
 8001bcc:	2208      	movs	r2, #8
 8001bce:	2100      	movs	r1, #0
 8001bd0:	484b      	ldr	r0, [pc, #300]	@ (8001d00 <main+0x990>)
 8001bd2:	f006 fd94 	bl	80086fe <si4463_initRx>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if(res == SI4463_OK)
 8001bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d106      	bne.n	8001bf2 <main+0x882>
			{
				printf("Start Rx .. ok !\r\n");
 8001be4:	4855      	ldr	r0, [pc, #340]	@ (8001d3c <main+0x9cc>)
 8001be6:	f008 ff8b 	bl	800ab00 <puts>
				rxFlag = 1;
 8001bea:	4b55      	ldr	r3, [pc, #340]	@ (8001d40 <main+0x9d0>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
			}
			else
				printf("Start Rx .. fail ! error code: %d\r\n", res);
			break;
 8001bf0:	e3b2      	b.n	8002358 <main+0xfe8>
				printf("Start Rx .. fail ! error code: %d\r\n", res);
 8001bf2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001bf6:	4853      	ldr	r0, [pc, #332]	@ (8001d44 <main+0x9d4>)
 8001bf8:	f008 ff12 	bl	800aa20 <iprintf>
			break;
 8001bfc:	e3ac      	b.n	8002358 <main+0xfe8>
		case CMD_NOP:
			res = si4463_checkNop(&si4463);
 8001bfe:	4840      	ldr	r0, [pc, #256]	@ (8001d00 <main+0x990>)
 8001c00:	f006 f9da 	bl	8007fb8 <si4463_checkNop>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if(res == SI4463_OK)
 8001c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <main+0x8aa>
				printf("Si4463 has responded !\r\n");
 8001c12:	484d      	ldr	r0, [pc, #308]	@ (8001d48 <main+0x9d8>)
 8001c14:	f008 ff74 	bl	800ab00 <puts>
			else
				printf("Si4463 NOP .. fail ! error code: %d\r\n", res);
			break;
 8001c18:	e39e      	b.n	8002358 <main+0xfe8>
				printf("Si4463 NOP .. fail ! error code: %d\r\n", res);
 8001c1a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001c1e:	484b      	ldr	r0, [pc, #300]	@ (8001d4c <main+0x9dc>)
 8001c20:	f008 fefe 	bl	800aa20 <iprintf>
			break;
 8001c24:	e398      	b.n	8002358 <main+0xfe8>
		case CMD_SET:
			if(paramCode == PARAM_TXPWR)
 8001c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c2a:	2b0d      	cmp	r3, #13
 8001c2c:	d12c      	bne.n	8001c88 <main+0x918>
			{
				int txpwr = atoi((char*)myRxCmd.param2);
 8001c2e:	4848      	ldr	r0, [pc, #288]	@ (8001d50 <main+0x9e0>)
 8001c30:	f007 fe80 	bl	8009934 <atoi>
 8001c34:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				if(txpwr > 0)
 8001c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dd1f      	ble.n	8001c80 <main+0x910>
				{
					res = si4463_setTxPower(&si4463, txpwr);
 8001c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	482d      	ldr	r0, [pc, #180]	@ (8001d00 <main+0x990>)
 8001c4a:	f006 fddf 	bl	800880c <si4463_setTxPower>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <main+0x904>
					{
						printf("Set Tx power .. ok !\r\n");
 8001c5c:	483d      	ldr	r0, [pc, #244]	@ (8001d54 <main+0x9e4>)
 8001c5e:	f008 ff4f 	bl	800ab00 <puts>
						printf("Get Tx power %d \r\n", si4463_getTxPower(&si4463));
 8001c62:	4827      	ldr	r0, [pc, #156]	@ (8001d00 <main+0x990>)
 8001c64:	f006 fdf1 	bl	800884a <si4463_getTxPower>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	483a      	ldr	r0, [pc, #232]	@ (8001d58 <main+0x9e8>)
 8001c6e:	f008 fed7 	bl	800aa20 <iprintf>
			}
			else
			{
				printf("Invalid parameter ! \r\n");
			}
			break;
 8001c72:	e371      	b.n	8002358 <main+0xfe8>
						printf("Set Tx power .. fail ! error code: %d\r\n", res);
 8001c74:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001c78:	4838      	ldr	r0, [pc, #224]	@ (8001d5c <main+0x9ec>)
 8001c7a:	f008 fed1 	bl	800aa20 <iprintf>
			break;
 8001c7e:	e36b      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8001c80:	4837      	ldr	r0, [pc, #220]	@ (8001d60 <main+0x9f0>)
 8001c82:	f008 ff3d 	bl	800ab00 <puts>
			break;
 8001c86:	e367      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_PREAMBLE)
 8001c88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c8c:	2b0e      	cmp	r3, #14
 8001c8e:	d12c      	bne.n	8001cea <main+0x97a>
				int preamble = atoi((char*)myRxCmd.param2);
 8001c90:	482f      	ldr	r0, [pc, #188]	@ (8001d50 <main+0x9e0>)
 8001c92:	f007 fe4f 	bl	8009934 <atoi>
 8001c96:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				if(preamble > 0)
 8001c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dd1f      	ble.n	8001ce2 <main+0x972>
					res = si4463_setPreamble(&si4463, preamble);
 8001ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4815      	ldr	r0, [pc, #84]	@ (8001d00 <main+0x990>)
 8001cac:	f006 fe12 	bl	80088d4 <si4463_setPreamble>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <main+0x966>
						printf("Set Tx preamble .. ok !\r\n");
 8001cbe:	4829      	ldr	r0, [pc, #164]	@ (8001d64 <main+0x9f4>)
 8001cc0:	f008 ff1e 	bl	800ab00 <puts>
						printf("Get Tx preamble %d \r\n", si4463_getPreamble(&si4463));
 8001cc4:	480e      	ldr	r0, [pc, #56]	@ (8001d00 <main+0x990>)
 8001cc6:	f006 fe20 	bl	800890a <si4463_getPreamble>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4826      	ldr	r0, [pc, #152]	@ (8001d68 <main+0x9f8>)
 8001cd0:	f008 fea6 	bl	800aa20 <iprintf>
			break;
 8001cd4:	e340      	b.n	8002358 <main+0xfe8>
						printf("Set Tx power .. fail ! error code: %d\r\n", res);
 8001cd6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001cda:	4820      	ldr	r0, [pc, #128]	@ (8001d5c <main+0x9ec>)
 8001cdc:	f008 fea0 	bl	800aa20 <iprintf>
			break;
 8001ce0:	e33a      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8001ce2:	481f      	ldr	r0, [pc, #124]	@ (8001d60 <main+0x9f0>)
 8001ce4:	f008 ff0c 	bl	800ab00 <puts>
			break;
 8001ce8:	e336      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_SYNCWORD)
 8001cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cee:	2b14      	cmp	r3, #20
 8001cf0:	d13c      	bne.n	8001d6c <main+0x9fc>
				printf("TBD \r\n");
 8001cf2:	4811      	ldr	r0, [pc, #68]	@ (8001d38 <main+0x9c8>)
 8001cf4:	f008 ff04 	bl	800ab00 <puts>
			break;
 8001cf8:	e32e      	b.n	8002358 <main+0xfe8>
 8001cfa:	bf00      	nop
 8001cfc:	20000950 	.word	0x20000950
 8001d00:	200008b0 	.word	0x200008b0
 8001d04:	20000978 	.word	0x20000978
 8001d08:	0800e24c 	.word	0x0800e24c
 8001d0c:	0800e254 	.word	0x0800e254
 8001d10:	200009d4 	.word	0x200009d4
 8001d14:	0800e498 	.word	0x0800e498
 8001d18:	0800e294 	.word	0x0800e294
 8001d1c:	0800e2a0 	.word	0x0800e2a0
 8001d20:	0800e1e0 	.word	0x0800e1e0
 8001d24:	0800e4b4 	.word	0x0800e4b4
 8001d28:	0800e4e0 	.word	0x0800e4e0
 8001d2c:	200009f0 	.word	0x200009f0
 8001d30:	0800e4fc 	.word	0x0800e4fc
 8001d34:	0800e520 	.word	0x0800e520
 8001d38:	0800e534 	.word	0x0800e534
 8001d3c:	0800e53c 	.word	0x0800e53c
 8001d40:	200009d0 	.word	0x200009d0
 8001d44:	0800e550 	.word	0x0800e550
 8001d48:	0800e574 	.word	0x0800e574
 8001d4c:	0800e58c 	.word	0x0800e58c
 8001d50:	200009aa 	.word	0x200009aa
 8001d54:	0800e5b4 	.word	0x0800e5b4
 8001d58:	0800e5cc 	.word	0x0800e5cc
 8001d5c:	0800e5e0 	.word	0x0800e5e0
 8001d60:	0800e608 	.word	0x0800e608
 8001d64:	0800e620 	.word	0x0800e620
 8001d68:	0800e63c 	.word	0x0800e63c
			else if(paramCode == PARAM_CRC_POLY)
 8001d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d70:	2b22      	cmp	r3, #34	@ 0x22
 8001d72:	d131      	bne.n	8001dd8 <main+0xa68>
				int poly = atoi((char*)myRxCmd.param2);
 8001d74:	48b5      	ldr	r0, [pc, #724]	@ (800204c <main+0xcdc>)
 8001d76:	f007 fddd 	bl	8009934 <atoi>
 8001d7a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
				if(poly > 0)
 8001d7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dd24      	ble.n	8001dd0 <main+0xa60>
					res = si4463_setCRC(&si4463, si4463.settings.crcSeed, poly);
 8001d86:	4bb2      	ldr	r3, [pc, #712]	@ (8002050 <main+0xce0>)
 8001d88:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	48ae      	ldr	r0, [pc, #696]	@ (8002050 <main+0xce0>)
 8001d96:	f006 fe18 	bl	80089ca <si4463_setCRC>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <main+0xa54>
						si4463_getCRC(&si4463);
 8001da8:	48a9      	ldr	r0, [pc, #676]	@ (8002050 <main+0xce0>)
 8001daa:	f006 fe3a 	bl	8008a22 <si4463_getCRC>
						printf("Set CRC polynomial .. ok !\r\n");
 8001dae:	48a9      	ldr	r0, [pc, #676]	@ (8002054 <main+0xce4>)
 8001db0:	f008 fea6 	bl	800ab00 <puts>
						printf("Get CRC polynomial %d \r\n", si4463.settings.crcPoly);
 8001db4:	4ba6      	ldr	r3, [pc, #664]	@ (8002050 <main+0xce0>)
 8001db6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001dba:	4619      	mov	r1, r3
 8001dbc:	48a6      	ldr	r0, [pc, #664]	@ (8002058 <main+0xce8>)
 8001dbe:	f008 fe2f 	bl	800aa20 <iprintf>
			break;
 8001dc2:	e2c9      	b.n	8002358 <main+0xfe8>
						printf("Set Tx power .. fail ! error code: %d\r\n", res);
 8001dc4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001dc8:	48a4      	ldr	r0, [pc, #656]	@ (800205c <main+0xcec>)
 8001dca:	f008 fe29 	bl	800aa20 <iprintf>
			break;
 8001dce:	e2c3      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8001dd0:	48a3      	ldr	r0, [pc, #652]	@ (8002060 <main+0xcf0>)
 8001dd2:	f008 fe95 	bl	800ab00 <puts>
			break;
 8001dd6:	e2bf      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_CRC_SEED)
 8001dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ddc:	2b23      	cmp	r3, #35	@ 0x23
 8001dde:	d139      	bne.n	8001e54 <main+0xae4>
				int seed = atoi((char*)myRxCmd.param2);
 8001de0:	489a      	ldr	r0, [pc, #616]	@ (800204c <main+0xcdc>)
 8001de2:	f007 fda7 	bl	8009934 <atoi>
 8001de6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
				if(seed == 0 || seed == 1)
 8001dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <main+0xa8a>
 8001df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d128      	bne.n	8001e4c <main+0xadc>
					res = si4463_setCRC(&si4463, seed, si4463.settings.crcPoly);
 8001dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4a91      	ldr	r2, [pc, #580]	@ (8002050 <main+0xce0>)
 8001e0a:	f892 2091 	ldrb.w	r2, [r2, #145]	@ 0x91
 8001e0e:	4619      	mov	r1, r3
 8001e10:	488f      	ldr	r0, [pc, #572]	@ (8002050 <main+0xce0>)
 8001e12:	f006 fdda 	bl	80089ca <si4463_setCRC>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <main+0xad0>
						si4463_getCRC(&si4463);
 8001e24:	488a      	ldr	r0, [pc, #552]	@ (8002050 <main+0xce0>)
 8001e26:	f006 fdfc 	bl	8008a22 <si4463_getCRC>
						printf("Set CRC polynomial .. ok !\r\n");
 8001e2a:	488a      	ldr	r0, [pc, #552]	@ (8002054 <main+0xce4>)
 8001e2c:	f008 fe68 	bl	800ab00 <puts>
						printf("Get CRC polynomial %d \r\n", si4463.settings.crcSeed);
 8001e30:	4b87      	ldr	r3, [pc, #540]	@ (8002050 <main+0xce0>)
 8001e32:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001e36:	4619      	mov	r1, r3
 8001e38:	4887      	ldr	r0, [pc, #540]	@ (8002058 <main+0xce8>)
 8001e3a:	f008 fdf1 	bl	800aa20 <iprintf>
					if(res == SI4463_OK)
 8001e3e:	e103      	b.n	8002048 <main+0xcd8>
						printf("Set Tx power .. fail ! error code: %d\r\n", res);
 8001e40:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001e44:	4885      	ldr	r0, [pc, #532]	@ (800205c <main+0xcec>)
 8001e46:	f008 fdeb 	bl	800aa20 <iprintf>
					if(res == SI4463_OK)
 8001e4a:	e0fd      	b.n	8002048 <main+0xcd8>
					printf("Invalid parameter ! \r\n");
 8001e4c:	4884      	ldr	r0, [pc, #528]	@ (8002060 <main+0xcf0>)
 8001e4e:	f008 fe57 	bl	800ab00 <puts>
			break;
 8001e52:	e281      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_FREQUENCY)
 8001e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	d131      	bne.n	8001ec0 <main+0xb50>
				int freq = atoi((char*)myRxCmd.param2);
 8001e5c:	487b      	ldr	r0, [pc, #492]	@ (800204c <main+0xcdc>)
 8001e5e:	f007 fd69 	bl	8009934 <atoi>
 8001e62:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
				if(freq >= 400000000 && freq < 436000000)
 8001e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002064 <main+0xcf4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	dd23      	ble.n	8001eb8 <main+0xb48>
 8001e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e74:	4a7c      	ldr	r2, [pc, #496]	@ (8002068 <main+0xcf8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	dc1e      	bgt.n	8001eb8 <main+0xb48>
					res = si4463_setFrequency(&si4463, freq);
 8001e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4873      	ldr	r0, [pc, #460]	@ (8002050 <main+0xce0>)
 8001e82:	f006 fe8d 	bl	8008ba0 <si4463_setFrequency>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <main+0xb3c>
						printf("Set frequency .. ok !\r\n");
 8001e94:	4875      	ldr	r0, [pc, #468]	@ (800206c <main+0xcfc>)
 8001e96:	f008 fe33 	bl	800ab00 <puts>
						printf("Get frequency %ld \r\n", si4463_getFrequency(&si4463));
 8001e9a:	486d      	ldr	r0, [pc, #436]	@ (8002050 <main+0xce0>)
 8001e9c:	f006 fef0 	bl	8008c80 <si4463_getFrequency>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4872      	ldr	r0, [pc, #456]	@ (8002070 <main+0xd00>)
 8001ea6:	f008 fdbb 	bl	800aa20 <iprintf>
					if(res == SI4463_OK)
 8001eaa:	e0cd      	b.n	8002048 <main+0xcd8>
						printf("Set Tx power .. fail ! error code: %d\r\n", res);
 8001eac:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001eb0:	486a      	ldr	r0, [pc, #424]	@ (800205c <main+0xcec>)
 8001eb2:	f008 fdb5 	bl	800aa20 <iprintf>
					if(res == SI4463_OK)
 8001eb6:	e0c7      	b.n	8002048 <main+0xcd8>
					printf("Invalid parameter ! \r\n");
 8001eb8:	4869      	ldr	r0, [pc, #420]	@ (8002060 <main+0xcf0>)
 8001eba:	f008 fe21 	bl	800ab00 <puts>
			break;
 8001ebe:	e24b      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_TX_MODULATION)
 8001ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ec4:	2b24      	cmp	r3, #36	@ 0x24
 8001ec6:	d12b      	bne.n	8001f20 <main+0xbb0>
				int txmod = atoi((char*)myRxCmd.param2);
 8001ec8:	4860      	ldr	r0, [pc, #384]	@ (800204c <main+0xcdc>)
 8001eca:	f007 fd33 	bl	8009934 <atoi>
 8001ece:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
				if(txmod >= 0)
 8001ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db1e      	blt.n	8001f18 <main+0xba8>
					res = si4463_setTxModulation(&si4463, txmod);
 8001eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	485b      	ldr	r0, [pc, #364]	@ (8002050 <main+0xce0>)
 8001ee4:	f006 ff5a 	bl	8008d9c <si4463_setTxModulation>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <main+0xb9c>
						printf("Set Tx modulation .. ok !\r\n");
 8001ef6:	485f      	ldr	r0, [pc, #380]	@ (8002074 <main+0xd04>)
 8001ef8:	f008 fe02 	bl	800ab00 <puts>
						printf("Get Tx modulation %d \r\n", si4463.settings.txMod);
 8001efc:	4b54      	ldr	r3, [pc, #336]	@ (8002050 <main+0xce0>)
 8001efe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001f02:	4619      	mov	r1, r3
 8001f04:	485c      	ldr	r0, [pc, #368]	@ (8002078 <main+0xd08>)
 8001f06:	f008 fd8b 	bl	800aa20 <iprintf>
			break;
 8001f0a:	e225      	b.n	8002358 <main+0xfe8>
						printf("Set Tx modulation .. fail ! error code: %d\r\n", res);
 8001f0c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001f10:	485a      	ldr	r0, [pc, #360]	@ (800207c <main+0xd0c>)
 8001f12:	f008 fd85 	bl	800aa20 <iprintf>
			break;
 8001f16:	e21f      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8001f18:	4851      	ldr	r0, [pc, #324]	@ (8002060 <main+0xcf0>)
 8001f1a:	f008 fdf1 	bl	800ab00 <puts>
			break;
 8001f1e:	e21b      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_RX_MODULATION)
 8001f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f24:	2b25      	cmp	r3, #37	@ 0x25
 8001f26:	d12b      	bne.n	8001f80 <main+0xc10>
				int rxmod = atoi((char*)myRxCmd.param2);
 8001f28:	4848      	ldr	r0, [pc, #288]	@ (800204c <main+0xcdc>)
 8001f2a:	f007 fd03 	bl	8009934 <atoi>
 8001f2e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
				if(rxmod >= 0)
 8001f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db1e      	blt.n	8001f78 <main+0xc08>
					res = si4463_setRxModulation(&si4463, rxmod);
 8001f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	4619      	mov	r1, r3
 8001f42:	4843      	ldr	r0, [pc, #268]	@ (8002050 <main+0xce0>)
 8001f44:	f006 ffda 	bl	8008efc <si4463_setRxModulation>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <main+0xbfc>
						printf("Set Rx modulation .. ok !\r\n");
 8001f56:	484a      	ldr	r0, [pc, #296]	@ (8002080 <main+0xd10>)
 8001f58:	f008 fdd2 	bl	800ab00 <puts>
						printf("Get Rx modulation %d \r\n", si4463.settings.rxMod);
 8001f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002050 <main+0xce0>)
 8001f5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001f62:	4619      	mov	r1, r3
 8001f64:	4847      	ldr	r0, [pc, #284]	@ (8002084 <main+0xd14>)
 8001f66:	f008 fd5b 	bl	800aa20 <iprintf>
			break;
 8001f6a:	e1f5      	b.n	8002358 <main+0xfe8>
						printf("Set Rx modulation .. fail ! error code: %d\r\n", res);
 8001f6c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001f70:	4845      	ldr	r0, [pc, #276]	@ (8002088 <main+0xd18>)
 8001f72:	f008 fd55 	bl	800aa20 <iprintf>
			break;
 8001f76:	e1ef      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8001f78:	4839      	ldr	r0, [pc, #228]	@ (8002060 <main+0xcf0>)
 8001f7a:	f008 fdc1 	bl	800ab00 <puts>
			break;
 8001f7e:	e1eb      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_TX_DATARATE)
 8001f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f84:	2b26      	cmp	r3, #38	@ 0x26
 8001f86:	d12b      	bne.n	8001fe0 <main+0xc70>
				int txdr = atoi((char*)myRxCmd.param2);
 8001f88:	4830      	ldr	r0, [pc, #192]	@ (800204c <main+0xcdc>)
 8001f8a:	f007 fcd3 	bl	8009934 <atoi>
 8001f8e:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
				if(txdr >= 0)
 8001f92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db1e      	blt.n	8001fd8 <main+0xc68>
					res = si4463_setTxDataRate(&si4463, txdr);
 8001f9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	482b      	ldr	r0, [pc, #172]	@ (8002050 <main+0xce0>)
 8001fa4:	f007 f86a 	bl	800907c <si4463_setTxDataRate>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 8001fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <main+0xc5c>
						printf("Set Tx data rate .. ok !\r\n");
 8001fb6:	4835      	ldr	r0, [pc, #212]	@ (800208c <main+0xd1c>)
 8001fb8:	f008 fda2 	bl	800ab00 <puts>
						printf("Get Tx data rate %d \r\n", si4463.settings.txDataRate);
 8001fbc:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <main+0xce0>)
 8001fbe:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4832      	ldr	r0, [pc, #200]	@ (8002090 <main+0xd20>)
 8001fc6:	f008 fd2b 	bl	800aa20 <iprintf>
			break;
 8001fca:	e1c5      	b.n	8002358 <main+0xfe8>
						printf("Set Tx data rate .. fail ! error code: %d\r\n", res);
 8001fcc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001fd0:	4830      	ldr	r0, [pc, #192]	@ (8002094 <main+0xd24>)
 8001fd2:	f008 fd25 	bl	800aa20 <iprintf>
			break;
 8001fd6:	e1bf      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8001fd8:	4821      	ldr	r0, [pc, #132]	@ (8002060 <main+0xcf0>)
 8001fda:	f008 fd91 	bl	800ab00 <puts>
			break;
 8001fde:	e1bb      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_RX_DATARATE)
 8001fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fe4:	2b27      	cmp	r3, #39	@ 0x27
 8001fe6:	d12b      	bne.n	8002040 <main+0xcd0>
				int rxdr = atoi((char*)myRxCmd.param2);
 8001fe8:	4818      	ldr	r0, [pc, #96]	@ (800204c <main+0xcdc>)
 8001fea:	f007 fca3 	bl	8009934 <atoi>
 8001fee:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
				if(rxdr >= 0)
 8001ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db1e      	blt.n	8002038 <main+0xcc8>
					res = si4463_setRxDataRate(&si4463, rxdr);
 8001ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	4813      	ldr	r0, [pc, #76]	@ (8002050 <main+0xce0>)
 8002004:	f007 f8c6 	bl	8009194 <si4463_setRxDataRate>
 8002008:	4603      	mov	r3, r0
 800200a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					if(res == SI4463_OK)
 800200e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <main+0xcbc>
						printf("Set Rx data rate .. ok !\r\n");
 8002016:	4820      	ldr	r0, [pc, #128]	@ (8002098 <main+0xd28>)
 8002018:	f008 fd72 	bl	800ab00 <puts>
						printf("Get Rx data rate %d \r\n", si4463.settings.rxDataRate);
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <main+0xce0>)
 800201e:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002022:	4619      	mov	r1, r3
 8002024:	481d      	ldr	r0, [pc, #116]	@ (800209c <main+0xd2c>)
 8002026:	f008 fcfb 	bl	800aa20 <iprintf>
			break;
 800202a:	e195      	b.n	8002358 <main+0xfe8>
						printf("Set Rx data rate .. fail ! error code: %d\r\n", res);
 800202c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002030:	481b      	ldr	r0, [pc, #108]	@ (80020a0 <main+0xd30>)
 8002032:	f008 fcf5 	bl	800aa20 <iprintf>
			break;
 8002036:	e18f      	b.n	8002358 <main+0xfe8>
					printf("Invalid parameter ! \r\n");
 8002038:	4809      	ldr	r0, [pc, #36]	@ (8002060 <main+0xcf0>)
 800203a:	f008 fd61 	bl	800ab00 <puts>
			break;
 800203e:	e18b      	b.n	8002358 <main+0xfe8>
				printf("Invalid parameter ! \r\n");
 8002040:	4807      	ldr	r0, [pc, #28]	@ (8002060 <main+0xcf0>)
 8002042:	f008 fd5d 	bl	800ab00 <puts>
			break;
 8002046:	e187      	b.n	8002358 <main+0xfe8>
 8002048:	e186      	b.n	8002358 <main+0xfe8>
 800204a:	bf00      	nop
 800204c:	200009aa 	.word	0x200009aa
 8002050:	200008b0 	.word	0x200008b0
 8002054:	0800e654 	.word	0x0800e654
 8002058:	0800e670 	.word	0x0800e670
 800205c:	0800e5e0 	.word	0x0800e5e0
 8002060:	0800e608 	.word	0x0800e608
 8002064:	17d783ff 	.word	0x17d783ff
 8002068:	19fcd4ff 	.word	0x19fcd4ff
 800206c:	0800e68c 	.word	0x0800e68c
 8002070:	0800e6a4 	.word	0x0800e6a4
 8002074:	0800e6bc 	.word	0x0800e6bc
 8002078:	0800e6d8 	.word	0x0800e6d8
 800207c:	0800e6f0 	.word	0x0800e6f0
 8002080:	0800e720 	.word	0x0800e720
 8002084:	0800e73c 	.word	0x0800e73c
 8002088:	0800e754 	.word	0x0800e754
 800208c:	0800e784 	.word	0x0800e784
 8002090:	0800e7a0 	.word	0x0800e7a0
 8002094:	0800e7b8 	.word	0x0800e7b8
 8002098:	0800e7e4 	.word	0x0800e7e4
 800209c:	0800e800 	.word	0x0800e800
 80020a0:	0800e818 	.word	0x0800e818
		case CMD_GET:
			if(paramCode == PARAM_PART)
 80020a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d113      	bne.n	80020d4 <main+0xd64>
			{
				res = si4463_getPartInfo(&si4463);
 80020ac:	48ad      	ldr	r0, [pc, #692]	@ (8002364 <main+0xff4>)
 80020ae:	f005 ffa5 	bl	8007ffc <si4463_getPartInfo>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res == SI4463_OK)
 80020b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <main+0xd58>
					printf("Si4463 get part info .. ok !\r\n");
 80020c0:	48a9      	ldr	r0, [pc, #676]	@ (8002368 <main+0xff8>)
 80020c2:	f008 fd1d 	bl	800ab00 <puts>
			}
			else
			{
				printf("Invalid parameter ! \r\n");
			}
			break;
 80020c6:	e147      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get part info .. fail ! error code: %d\r\n", res);
 80020c8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80020cc:	48a7      	ldr	r0, [pc, #668]	@ (800236c <main+0xffc>)
 80020ce:	f008 fca7 	bl	800aa20 <iprintf>
			break;
 80020d2:	e141      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_FUNC)
 80020d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d113      	bne.n	8002104 <main+0xd94>
				res = si4463_getFuncInfo(&si4463);
 80020dc:	48a1      	ldr	r0, [pc, #644]	@ (8002364 <main+0xff4>)
 80020de:	f006 f803 	bl	80080e8 <si4463_getFuncInfo>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res == SI4463_OK)
 80020e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <main+0xd88>
					printf("Si4463 get function info .. ok !\r\n");
 80020f0:	489f      	ldr	r0, [pc, #636]	@ (8002370 <main+0x1000>)
 80020f2:	f008 fd05 	bl	800ab00 <puts>
			break;
 80020f6:	e12f      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get function info .. fail ! error code: %d\r\n", res);
 80020f8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80020fc:	489d      	ldr	r0, [pc, #628]	@ (8002374 <main+0x1004>)
 80020fe:	f008 fc8f 	bl	800aa20 <iprintf>
			break;
 8002102:	e129      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_CURRSSI)
 8002104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002108:	2b06      	cmp	r3, #6
 800210a:	d116      	bne.n	800213a <main+0xdca>
				res = si4463_getCurrentRSSI(&si4463);
 800210c:	4895      	ldr	r0, [pc, #596]	@ (8002364 <main+0xff4>)
 800210e:	f006 f893 	bl	8008238 <si4463_getCurrentRSSI>
 8002112:	4603      	mov	r3, r0
 8002114:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res < -12)
 8002118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800211c:	f113 0f0c 	cmn.w	r3, #12
 8002120:	da05      	bge.n	800212e <main+0xdbe>
					printf("Si4463 get current RSSI: %d\r\n", res);
 8002122:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002126:	4894      	ldr	r0, [pc, #592]	@ (8002378 <main+0x1008>)
 8002128:	f008 fc7a 	bl	800aa20 <iprintf>
			break;
 800212c:	e114      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get current RSSI .. fail ! error code: %d\r\n", res);
 800212e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002132:	4892      	ldr	r0, [pc, #584]	@ (800237c <main+0x100c>)
 8002134:	f008 fc74 	bl	800aa20 <iprintf>
			break;
 8002138:	e10e      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_LATRSSI)
 800213a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213e:	2b07      	cmp	r3, #7
 8002140:	d116      	bne.n	8002170 <main+0xe00>
				res = si4463_getLatchRSSI(&si4463);
 8002142:	4888      	ldr	r0, [pc, #544]	@ (8002364 <main+0xff4>)
 8002144:	f006 f8ac 	bl	80082a0 <si4463_getLatchRSSI>
 8002148:	4603      	mov	r3, r0
 800214a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res < -12)
 800214e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002152:	f113 0f0c 	cmn.w	r3, #12
 8002156:	da05      	bge.n	8002164 <main+0xdf4>
					printf("Si4463 get latch RSSI: %d\r\n", res);
 8002158:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800215c:	4888      	ldr	r0, [pc, #544]	@ (8002380 <main+0x1010>)
 800215e:	f008 fc5f 	bl	800aa20 <iprintf>
			break;
 8002162:	e0f9      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get latch RSSI .. fail ! error code: %d\r\n", res);
 8002164:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002168:	4886      	ldr	r0, [pc, #536]	@ (8002384 <main+0x1014>)
 800216a:	f008 fc59 	bl	800aa20 <iprintf>
			break;
 800216e:	e0f3      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_INTS)
 8002170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002174:	2b0a      	cmp	r3, #10
 8002176:	d113      	bne.n	80021a0 <main+0xe30>
				res = si4463_getInterrupts(&si4463);
 8002178:	487a      	ldr	r0, [pc, #488]	@ (8002364 <main+0xff4>)
 800217a:	f006 f910 	bl	800839e <si4463_getInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res == SI4463_OK)
 8002184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d103      	bne.n	8002194 <main+0xe24>
					printf("Si4463 get interrupts' info .. ok !\r\n");
 800218c:	487e      	ldr	r0, [pc, #504]	@ (8002388 <main+0x1018>)
 800218e:	f008 fcb7 	bl	800ab00 <puts>
			break;
 8002192:	e0e1      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get interrupts' info .. fail ! error code: %d\r\n", res);
 8002194:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002198:	487c      	ldr	r0, [pc, #496]	@ (800238c <main+0x101c>)
 800219a:	f008 fc41 	bl	800aa20 <iprintf>
			break;
 800219e:	e0db      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_TXPWR)
 80021a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021a4:	2b0d      	cmp	r3, #13
 80021a6:	d115      	bne.n	80021d4 <main+0xe64>
				res = si4463_getTxPower(&si4463);
 80021a8:	486e      	ldr	r0, [pc, #440]	@ (8002364 <main+0xff4>)
 80021aa:	f006 fb4e 	bl	800884a <si4463_getTxPower>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res >= 0)
 80021b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db05      	blt.n	80021c8 <main+0xe58>
					printf("Si4463 get Tx power: %d\r\n", res);
 80021bc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80021c0:	4873      	ldr	r0, [pc, #460]	@ (8002390 <main+0x1020>)
 80021c2:	f008 fc2d 	bl	800aa20 <iprintf>
			break;
 80021c6:	e0c7      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get Tx power .. fail ! error code: %d\r\n", res);
 80021c8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80021cc:	4871      	ldr	r0, [pc, #452]	@ (8002394 <main+0x1024>)
 80021ce:	f008 fc27 	bl	800aa20 <iprintf>
			break;
 80021d2:	e0c1      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_PREAMBLE)
 80021d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021d8:	2b0e      	cmp	r3, #14
 80021da:	d115      	bne.n	8002208 <main+0xe98>
				res = si4463_getPreamble(&si4463);
 80021dc:	4861      	ldr	r0, [pc, #388]	@ (8002364 <main+0xff4>)
 80021de:	f006 fb94 	bl	800890a <si4463_getPreamble>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res >= 0)
 80021e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db05      	blt.n	80021fc <main+0xe8c>
					printf("Si4463 get preamble: %d\r\n", res);
 80021f0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80021f4:	4868      	ldr	r0, [pc, #416]	@ (8002398 <main+0x1028>)
 80021f6:	f008 fc13 	bl	800aa20 <iprintf>
			break;
 80021fa:	e0ad      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get preamble .. fail ! error code: %d\r\n", res);
 80021fc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002200:	4866      	ldr	r0, [pc, #408]	@ (800239c <main+0x102c>)
 8002202:	f008 fc0d 	bl	800aa20 <iprintf>
			break;
 8002206:	e0a7      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_SYNCWORD)
 8002208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800220c:	2b14      	cmp	r3, #20
 800220e:	d12f      	bne.n	8002270 <main+0xf00>
				res = si4463_getSyncWords(&si4463);
 8002210:	4854      	ldr	r0, [pc, #336]	@ (8002364 <main+0xff4>)
 8002212:	f006 fb9e 	bl	8008952 <si4463_getSyncWords>
 8002216:	4603      	mov	r3, r0
 8002218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res >= 0)
 800221c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002220:	2b00      	cmp	r3, #0
 8002222:	db1f      	blt.n	8002264 <main+0xef4>
					printf("Si4463 get sync words: ");
 8002224:	485e      	ldr	r0, [pc, #376]	@ (80023a0 <main+0x1030>)
 8002226:	f008 fbfb 	bl	800aa20 <iprintf>
					for(int i = 0; i < res; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002230:	e00e      	b.n	8002250 <main+0xee0>
						printf("0x%02x ", si4463.settings.syncWords[i]);
 8002232:	4a4c      	ldr	r2, [pc, #304]	@ (8002364 <main+0xff4>)
 8002234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002238:	4413      	add	r3, r2
 800223a:	338d      	adds	r3, #141	@ 0x8d
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	4619      	mov	r1, r3
 8002240:	4858      	ldr	r0, [pc, #352]	@ (80023a4 <main+0x1034>)
 8002242:	f008 fbed 	bl	800aa20 <iprintf>
					for(int i = 0; i < res; i++)
 8002246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800224a:	3301      	adds	r3, #1
 800224c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002250:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8002254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002258:	429a      	cmp	r2, r3
 800225a:	dbea      	blt.n	8002232 <main+0xec2>
					printf("\r\n");
 800225c:	4852      	ldr	r0, [pc, #328]	@ (80023a8 <main+0x1038>)
 800225e:	f008 fc4f 	bl	800ab00 <puts>
			break;
 8002262:	e079      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get sync words .. fail ! error code: %d\r\n", res);
 8002264:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002268:	4850      	ldr	r0, [pc, #320]	@ (80023ac <main+0x103c>)
 800226a:	f008 fbd9 	bl	800aa20 <iprintf>
			break;
 800226e:	e073      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_CRC)
 8002270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002274:	2b1e      	cmp	r3, #30
 8002276:	d11b      	bne.n	80022b0 <main+0xf40>
				res = si4463_getCRC(&si4463);
 8002278:	483a      	ldr	r0, [pc, #232]	@ (8002364 <main+0xff4>)
 800227a:	f006 fbd2 	bl	8008a22 <si4463_getCRC>
 800227e:	4603      	mov	r3, r0
 8002280:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res == SI4463_OK)
 8002284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <main+0xf34>
					printf("Si4463 get CRC Poly: %d, Seed: %d\r\n", si4463.settings.crcPoly, si4463.settings.crcSeed);
 800228c:	4b35      	ldr	r3, [pc, #212]	@ (8002364 <main+0xff4>)
 800228e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8002292:	4619      	mov	r1, r3
 8002294:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <main+0xff4>)
 8002296:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800229a:	461a      	mov	r2, r3
 800229c:	4844      	ldr	r0, [pc, #272]	@ (80023b0 <main+0x1040>)
 800229e:	f008 fbbf 	bl	800aa20 <iprintf>
			break;
 80022a2:	e059      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get CRC Poly .. fail ! error code: %d\r\n", res);
 80022a4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80022a8:	4842      	ldr	r0, [pc, #264]	@ (80023b4 <main+0x1044>)
 80022aa:	f008 fbb9 	bl	800aa20 <iprintf>
			break;
 80022ae:	e053      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_FREQUENCY)
 80022b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022b4:	2b1f      	cmp	r3, #31
 80022b6:	d114      	bne.n	80022e2 <main+0xf72>
				res = si4463_getFrequency(&si4463);
 80022b8:	482a      	ldr	r0, [pc, #168]	@ (8002364 <main+0xff4>)
 80022ba:	f006 fce1 	bl	8008c80 <si4463_getFrequency>
 80022be:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				if(res >= 0)
 80022c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db05      	blt.n	80022d6 <main+0xf66>
					printf("Si4463 get Tx/Rx frequency: %d\r\n", res);
 80022ca:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80022ce:	483a      	ldr	r0, [pc, #232]	@ (80023b8 <main+0x1048>)
 80022d0:	f008 fba6 	bl	800aa20 <iprintf>
			break;
 80022d4:	e040      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get Tx/Rx frequency .. fail ! error code: %d\r\n", res);
 80022d6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80022da:	4838      	ldr	r0, [pc, #224]	@ (80023bc <main+0x104c>)
 80022dc:	f008 fba0 	bl	800aa20 <iprintf>
			break;
 80022e0:	e03a      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_MODULATION)
 80022e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d115      	bne.n	8002316 <main+0xfa6>
				res = si4463_getModulation(&si4463);
 80022ea:	481e      	ldr	r0, [pc, #120]	@ (8002364 <main+0xff4>)
 80022ec:	f006 fea4 	bl	8009038 <si4463_getModulation>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res >= 0)
 80022f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db05      	blt.n	800230a <main+0xf9a>
					printf("Si4463 get Tx modulation: %d\r\n", res);
 80022fe:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002302:	482f      	ldr	r0, [pc, #188]	@ (80023c0 <main+0x1050>)
 8002304:	f008 fb8c 	bl	800aa20 <iprintf>
			break;
 8002308:	e026      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get Tx modulation .. fail ! error code: %d\r\n", res);
 800230a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800230e:	482d      	ldr	r0, [pc, #180]	@ (80023c4 <main+0x1054>)
 8002310:	f008 fb86 	bl	800aa20 <iprintf>
			break;
 8002314:	e020      	b.n	8002358 <main+0xfe8>
			else if(paramCode == PARAM_DATARATE)
 8002316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800231a:	2b21      	cmp	r3, #33	@ 0x21
 800231c:	d115      	bne.n	800234a <main+0xfda>
				res = si4463_getDataRate(&si4463);
 800231e:	4811      	ldr	r0, [pc, #68]	@ (8002364 <main+0xff4>)
 8002320:	f006 ffc4 	bl	80092ac <si4463_getDataRate>
 8002324:	4603      	mov	r3, r0
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				if(res >= 0)
 800232a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800232e:	2b00      	cmp	r3, #0
 8002330:	db05      	blt.n	800233e <main+0xfce>
					printf("Si4463 get Tx data rate: %d\r\n", res);
 8002332:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002336:	4824      	ldr	r0, [pc, #144]	@ (80023c8 <main+0x1058>)
 8002338:	f008 fb72 	bl	800aa20 <iprintf>
			break;
 800233c:	e00c      	b.n	8002358 <main+0xfe8>
					printf("Si4463 get Tx data rate .. fail ! error code: %d\r\n", res);
 800233e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002342:	4822      	ldr	r0, [pc, #136]	@ (80023cc <main+0x105c>)
 8002344:	f008 fb6c 	bl	800aa20 <iprintf>
			break;
 8002348:	e006      	b.n	8002358 <main+0xfe8>
				printf("Invalid parameter ! \r\n");
 800234a:	4821      	ldr	r0, [pc, #132]	@ (80023d0 <main+0x1060>)
 800234c:	f008 fbd8 	bl	800ab00 <puts>
			break;
 8002350:	e002      	b.n	8002358 <main+0xfe8>
		default:
			printf("Display the command menu -----------> help \r\n\r\n");
 8002352:	4820      	ldr	r0, [pc, #128]	@ (80023d4 <main+0x1064>)
 8002354:	f008 fbd4 	bl	800ab00 <puts>
		}
		cmdFlag = 0;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <main+0x1068>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
	if(rxFlag)
 800235e:	f7ff ba29 	b.w	80017b4 <main+0x444>
 8002362:	bf00      	nop
 8002364:	200008b0 	.word	0x200008b0
 8002368:	0800e844 	.word	0x0800e844
 800236c:	0800e864 	.word	0x0800e864
 8002370:	0800e894 	.word	0x0800e894
 8002374:	0800e8b8 	.word	0x0800e8b8
 8002378:	0800e8ec 	.word	0x0800e8ec
 800237c:	0800e90c 	.word	0x0800e90c
 8002380:	0800e940 	.word	0x0800e940
 8002384:	0800e95c 	.word	0x0800e95c
 8002388:	0800e990 	.word	0x0800e990
 800238c:	0800e9b8 	.word	0x0800e9b8
 8002390:	0800e9f0 	.word	0x0800e9f0
 8002394:	0800ea0c 	.word	0x0800ea0c
 8002398:	0800ea3c 	.word	0x0800ea3c
 800239c:	0800ea58 	.word	0x0800ea58
 80023a0:	0800ea88 	.word	0x0800ea88
 80023a4:	0800e2a0 	.word	0x0800e2a0
 80023a8:	0800e1e0 	.word	0x0800e1e0
 80023ac:	0800eaa0 	.word	0x0800eaa0
 80023b0:	0800ead4 	.word	0x0800ead4
 80023b4:	0800eaf8 	.word	0x0800eaf8
 80023b8:	0800eb28 	.word	0x0800eb28
 80023bc:	0800eb4c 	.word	0x0800eb4c
 80023c0:	0800eb84 	.word	0x0800eb84
 80023c4:	0800eba4 	.word	0x0800eba4
 80023c8:	0800ebd8 	.word	0x0800ebd8
 80023cc:	0800ebf8 	.word	0x0800ebf8
 80023d0:	0800e608 	.word	0x0800e608
 80023d4:	0800ec2c 	.word	0x0800ec2c
 80023d8:	200009cf 	.word	0x200009cf

080023dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b094      	sub	sp, #80	@ 0x50
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	2230      	movs	r2, #48	@ 0x30
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f008 fc88 	bl	800ad00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <SystemClock_Config+0xd8>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <SystemClock_Config+0xd8>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <SystemClock_Config+0xd8>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <SystemClock_Config+0xdc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <SystemClock_Config+0xdc>)
 8002426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <SystemClock_Config+0xdc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002438:	2301      	movs	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800243c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002442:	2302      	movs	r3, #2
 8002444:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002446:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800244a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800244c:	2304      	movs	r3, #4
 800244e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002450:	23b4      	movs	r3, #180	@ 0xb4
 8002452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002454:	2302      	movs	r3, #2
 8002456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002458:	2307      	movs	r3, #7
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fb9d 	bl	8003ba0 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800246c:	f000 fce6 	bl	8002e3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002470:	f001 fb46 	bl	8003b00 <HAL_PWREx_EnableOverDrive>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800247a:	f000 fcdf 	bl	8002e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800247e:	230f      	movs	r3, #15
 8002480:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002482:	2302      	movs	r3, #2
 8002484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800248a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800248e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002494:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	2105      	movs	r1, #5
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fdf7 	bl	8004090 <HAL_RCC_ClockConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80024a8:	f000 fcc8 	bl	8002e3c <Error_Handler>
  }
}
 80024ac:	bf00      	nop
 80024ae:	3750      	adds	r7, #80	@ 0x50
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40007000 	.word	0x40007000

080024bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024c0:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024c2:	4a18      	ldr	r2, [pc, #96]	@ (8002524 <MX_SPI1_Init+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024f0:	2228      	movs	r2, #40	@ 0x28
 80024f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <MX_SPI1_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <MX_SPI1_Init+0x64>)
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <MX_SPI1_Init+0x64>)
 8002508:	220a      	movs	r2, #10
 800250a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <MX_SPI1_Init+0x64>)
 800250e:	f001 ffdf 	bl	80044d0 <HAL_SPI_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002518:	f000 fc90 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000784 	.word	0x20000784
 8002524:	40013000 	.word	0x40013000

08002528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002544:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <MX_TIM1_Init+0x98>)
 8002546:	4a1f      	ldr	r2, [pc, #124]	@ (80025c4 <MX_TIM1_Init+0x9c>)
 8002548:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <MX_TIM1_Init+0x98>)
 800254c:	22b3      	movs	r2, #179	@ 0xb3
 800254e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <MX_TIM1_Init+0x98>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <MX_TIM1_Init+0x98>)
 8002558:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800255c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <MX_TIM1_Init+0x98>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <MX_TIM1_Init+0x98>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <MX_TIM1_Init+0x98>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002570:	4813      	ldr	r0, [pc, #76]	@ (80025c0 <MX_TIM1_Init+0x98>)
 8002572:	f002 fd63 	bl	800503c <HAL_TIM_Base_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800257c:	f000 fc5e 	bl	8002e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	4619      	mov	r1, r3
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <MX_TIM1_Init+0x98>)
 800258e:	f002 fe0d 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002598:	f000 fc50 	bl	8002e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025a4:	463b      	mov	r3, r7
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_TIM1_Init+0x98>)
 80025aa:	f003 f801 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80025b4:	f000 fc42 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200007dc 	.word	0x200007dc
 80025c4:	40010000 	.word	0x40010000

080025c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <MX_TIM2_Init+0x94>)
 80025e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <MX_TIM2_Init+0x94>)
 80025ee:	2259      	movs	r2, #89	@ 0x59
 80025f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_TIM2_Init+0x94>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <MX_TIM2_Init+0x94>)
 80025fa:	f04f 32ff 	mov.w	r2, #4294967295
 80025fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <MX_TIM2_Init+0x94>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <MX_TIM2_Init+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800260c:	4813      	ldr	r0, [pc, #76]	@ (800265c <MX_TIM2_Init+0x94>)
 800260e:	f002 fd15 	bl	800503c <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002618:	f000 fc10 	bl	8002e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	4619      	mov	r1, r3
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <MX_TIM2_Init+0x94>)
 800262a:	f002 fdbf 	bl	80051ac <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002634:	f000 fc02 	bl	8002e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002640:	463b      	mov	r3, r7
 8002642:	4619      	mov	r1, r3
 8002644:	4805      	ldr	r0, [pc, #20]	@ (800265c <MX_TIM2_Init+0x94>)
 8002646:	f002 ffb3 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002650:	f000 fbf4 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000824 	.word	0x20000824

08002660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002666:	4a12      	ldr	r2, [pc, #72]	@ (80026b0 <MX_USART2_UART_Init+0x50>)
 8002668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002698:	f003 f806 	bl	80056a8 <HAL_UART_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026a2:	f000 fbcb 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000086c 	.word	0x2000086c
 80026b0:	40004400 	.word	0x40004400

080026b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	@ 0x30
 80026b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 80026d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b66      	ldr	r3, [pc, #408]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a65      	ldr	r2, [pc, #404]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b63      	ldr	r3, [pc, #396]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a5e      	ldr	r2, [pc, #376]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a57      	ldr	r2, [pc, #348]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	4b51      	ldr	r3, [pc, #324]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a50      	ldr	r2, [pc, #320]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b4e      	ldr	r3, [pc, #312]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b4a      	ldr	r3, [pc, #296]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	4a49      	ldr	r2, [pc, #292]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002764:	6313      	str	r3, [r2, #48]	@ 0x30
 8002766:	4b47      	ldr	r3, [pc, #284]	@ (8002884 <MX_GPIO_Init+0x1d0>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_SET);
 8002772:	2201      	movs	r2, #1
 8002774:	2110      	movs	r1, #16
 8002776:	4844      	ldr	r0, [pc, #272]	@ (8002888 <MX_GPIO_Init+0x1d4>)
 8002778:	f001 f990 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	2120      	movs	r1, #32
 8002780:	4841      	ldr	r0, [pc, #260]	@ (8002888 <MX_GPIO_Init+0x1d4>)
 8002782:	f001 f98b 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_RESET);
 8002786:	2200      	movs	r2, #0
 8002788:	2102      	movs	r1, #2
 800278a:	4840      	ldr	r0, [pc, #256]	@ (800288c <MX_GPIO_Init+0x1d8>)
 800278c:	f001 f986 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002796:	483e      	ldr	r0, [pc, #248]	@ (8002890 <MX_GPIO_Init+0x1dc>)
 8002798:	f001 f980 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800279c:	2301      	movs	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	4838      	ldr	r0, [pc, #224]	@ (8002894 <MX_GPIO_Init+0x1e0>)
 80027b2:	f000 ffaf 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80027b6:	2310      	movs	r3, #16
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	4619      	mov	r1, r3
 80027ca:	4832      	ldr	r0, [pc, #200]	@ (8002894 <MX_GPIO_Init+0x1e0>)
 80027cc:	f000 ffa2 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSEL_Pin */
  GPIO_InitStruct.Pin = NSEL_Pin;
 80027d0:	2310      	movs	r3, #16
 80027d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d8:	2301      	movs	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NSEL_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4828      	ldr	r0, [pc, #160]	@ (8002888 <MX_GPIO_Init+0x1d4>)
 80027e8:	f000 ff94 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 80027ec:	2320      	movs	r3, #32
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	4619      	mov	r1, r3
 8002802:	4821      	ldr	r0, [pc, #132]	@ (8002888 <MX_GPIO_Init+0x1d4>)
 8002804:	f000 ff86 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 8002808:	2301      	movs	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	481c      	ldr	r0, [pc, #112]	@ (800288c <MX_GPIO_Init+0x1d8>)
 800281c:	f000 ff7a 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO0_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin;
 8002820:	2302      	movs	r3, #2
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO0_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	4815      	ldr	r0, [pc, #84]	@ (800288c <MX_GPIO_Init+0x1d8>)
 8002838:	f000 ff6c 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800283c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002842:	2301      	movs	r3, #1
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	480e      	ldr	r0, [pc, #56]	@ (8002890 <MX_GPIO_Init+0x1dc>)
 8002856:	f000 ff5d 	bl	8003714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2105      	movs	r1, #5
 800285e:	2006      	movs	r0, #6
 8002860:	f000 fe8f 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002864:	2006      	movs	r0, #6
 8002866:	f000 fea8 	bl	80035ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2105      	movs	r1, #5
 800286e:	200a      	movs	r0, #10
 8002870:	f000 fe87 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002874:	200a      	movs	r0, #10
 8002876:	f000 fea0 	bl	80035ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800287a:	bf00      	nop
 800287c:	3730      	adds	r7, #48	@ 0x30
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40020800 	.word	0x40020800
 800288c:	40020400 	.word	0x40020400
 8002890:	40021800 	.word	0x40021800
 8002894:	40020000 	.word	0x40020000

08002898 <si4463_SPI_Write>:

/* USER CODE BEGIN 4 */
uint8_t si4463_SPI_Write(uint8_t* pTxData, uint8_t dataLen, uint32_t timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	460b      	mov	r3, r1
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	72fb      	strb	r3, [r7, #11]
	return HAL_SPI_Transmit(&hspi1, pTxData, dataLen, timeout);
 80028a6:	7afb      	ldrb	r3, [r7, #11]
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <si4463_SPI_Write+0x28>)
 80028b0:	f001 fe97 	bl	80045e2 <HAL_SPI_Transmit>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000784 	.word	0x20000784

080028c4 <si4463_SPI_Read>:

uint8_t si4463_SPI_Read(uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	460b      	mov	r3, r1
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	72fb      	strb	r3, [r7, #11]
	return HAL_SPI_Receive(&hspi1, pRxData, dataLen, timeout);
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4804      	ldr	r0, [pc, #16]	@ (80028ec <si4463_SPI_Read+0x28>)
 80028dc:	f001 ffbd 	bl	800485a <HAL_SPI_Receive>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000784 	.word	0x20000784

080028f0 <si4463_SPI_WriteRead>:

uint8_t si4463_SPI_WriteRead(uint8_t* pTxData, uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	71fb      	strb	r3, [r7, #7]
	return HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, dataLen, timeout);
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	b29a      	uxth	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	68f9      	ldr	r1, [r7, #12]
 800290e:	4804      	ldr	r0, [pc, #16]	@ (8002920 <si4463_SPI_WriteRead+0x30>)
 8002910:	f002 f8b4 	bl	8004a7c <HAL_SPI_TransmitReceive>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000784 	.word	0x20000784

08002924 <si4463_SPI_CheckState>:

uint8_t si4463_SPI_CheckState(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	return HAL_SPI_GetState(&hspi1);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <si4463_SPI_CheckState+0x10>)
 800292a:	f002 fa49 	bl	8004dc0 <HAL_SPI_GetState>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000784 	.word	0x20000784

08002938 <si4463_DelayUs>:

void si4463_DelayUs(uint32_t delay)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <si4463_DelayUs+0x2c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1)) < delay);
 8002948:	bf00      	nop
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <si4463_DelayUs+0x2c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d8f9      	bhi.n	800294a <si4463_DelayUs+0x12>
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	200007dc 	.word	0x200007dc

08002968 <si4463_setNSEL>:

void si4463_setNSEL(bool val)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	if(val == true)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <si4463_setNSEL+0x1c>
		HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	2110      	movs	r1, #16
 800297c:	4806      	ldr	r0, [pc, #24]	@ (8002998 <si4463_setNSEL+0x30>)
 800297e:	f001 f88d 	bl	8003a9c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_RESET);
}
 8002982:	e004      	b.n	800298e <si4463_setNSEL+0x26>
		HAL_GPIO_WritePin(NSEL_GPIO_Port, NSEL_Pin, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2110      	movs	r1, #16
 8002988:	4803      	ldr	r0, [pc, #12]	@ (8002998 <si4463_setNSEL+0x30>)
 800298a:	f001 f887 	bl	8003a9c <HAL_GPIO_WritePin>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020800 	.word	0x40020800

0800299c <si4463_setSDN>:

void si4463_setSDN(bool val)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	if(val == true)
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <si4463_setSDN+0x1c>
		HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	2120      	movs	r1, #32
 80029b0:	4806      	ldr	r0, [pc, #24]	@ (80029cc <si4463_setSDN+0x30>)
 80029b2:	f001 f873 	bl	8003a9c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
}
 80029b6:	e004      	b.n	80029c2 <si4463_setSDN+0x26>
		HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2120      	movs	r1, #32
 80029bc:	4803      	ldr	r0, [pc, #12]	@ (80029cc <si4463_setSDN+0x30>)
 80029be:	f001 f86d 	bl	8003a9c <HAL_GPIO_WritePin>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40020800 	.word	0x40020800

080029d0 <si4463_setOOK>:

void si4463_setOOK(bool val)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
	if(val == true)
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <si4463_setOOK+0x1c>
		HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_SET);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2102      	movs	r1, #2
 80029e4:	4806      	ldr	r0, [pc, #24]	@ (8002a00 <si4463_setOOK+0x30>)
 80029e6:	f001 f859 	bl	8003a9c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_RESET);
}
 80029ea:	e004      	b.n	80029f6 <si4463_setOOK+0x26>
		HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2102      	movs	r1, #2
 80029f0:	4803      	ldr	r0, [pc, #12]	@ (8002a00 <si4463_setOOK+0x30>)
 80029f2:	f001 f853 	bl	8003a9c <HAL_GPIO_WritePin>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40020400 	.word	0x40020400

08002a04 <si4463_getIRQ>:

bool si4463_getIRQ(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin);
 8002a08:	2110      	movs	r1, #16
 8002a0a:	4805      	ldr	r0, [pc, #20]	@ (8002a20 <si4463_getIRQ+0x1c>)
 8002a0c:	f001 f82e 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40020000 	.word	0x40020000

08002a24 <si4463_getGPIO1>:

bool si4463_getGPIO1(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIO1_GPIO_Port, GPIO1_Pin);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <si4463_getGPIO1+0x1c>)
 8002a2c:	f001 f81e 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40020400 	.word	0x40020400

08002a44 <si4463MenuDisplay>:

void si4463MenuDisplay(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	printf("============== Command Menu ============== \r\n");
 8002a48:	482c      	ldr	r0, [pc, #176]	@ (8002afc <si4463MenuDisplay+0xb8>)
 8002a4a:	f008 f859 	bl	800ab00 <puts>
	printf("Display the command menu -----------> help \r\n");
 8002a4e:	482c      	ldr	r0, [pc, #176]	@ (8002b00 <si4463MenuDisplay+0xbc>)
 8002a50:	f008 f856 	bl	800ab00 <puts>
	printf("Power on reset si4463 chip ---------> reset \r\n");
 8002a54:	482b      	ldr	r0, [pc, #172]	@ (8002b04 <si4463MenuDisplay+0xc0>)
 8002a56:	f008 f853 	bl	800ab00 <puts>
	printf("Initialize si4463 configuration ----> init \r\n");
 8002a5a:	482b      	ldr	r0, [pc, #172]	@ (8002b08 <si4463MenuDisplay+0xc4>)
 8002a5c:	f008 f850 	bl	800ab00 <puts>
	printf("Communicate to si4463 with NOP -----> nop \r\n");
 8002a60:	482a      	ldr	r0, [pc, #168]	@ (8002b0c <si4463MenuDisplay+0xc8>)
 8002a62:	f008 f84d 	bl	800ab00 <puts>
	printf("Transmit packets -------------------> tx  [string] \r\n");
 8002a66:	482a      	ldr	r0, [pc, #168]	@ (8002b10 <si4463MenuDisplay+0xcc>)
 8002a68:	f008 f84a 	bl	800ab00 <puts>
	printf("Send the most recently sent data ---> contx \r\n");
 8002a6c:	4829      	ldr	r0, [pc, #164]	@ (8002b14 <si4463MenuDisplay+0xd0>)
 8002a6e:	f008 f847 	bl	800ab00 <puts>
	printf("Start to receive packets -----------> rx \r\n");
 8002a72:	4829      	ldr	r0, [pc, #164]	@ (8002b18 <si4463MenuDisplay+0xd4>)
 8002a74:	f008 f844 	bl	800ab00 <puts>
	printf("Basic information about si4463 -----> get part \r\n");
 8002a78:	4828      	ldr	r0, [pc, #160]	@ (8002b1c <si4463MenuDisplay+0xd8>)
 8002a7a:	f008 f841 	bl	800ab00 <puts>
	printf("Function revision information ------> get func \r\n");
 8002a7e:	4828      	ldr	r0, [pc, #160]	@ (8002b20 <si4463MenuDisplay+0xdc>)
 8002a80:	f008 f83e 	bl	800ab00 <puts>
	printf("Obtain the current RSSI ------------> get curRSSI \r\n");
 8002a84:	4827      	ldr	r0, [pc, #156]	@ (8002b24 <si4463MenuDisplay+0xe0>)
 8002a86:	f008 f83b 	bl	800ab00 <puts>
	printf("Get RSSI when receiving signal -----> get latRSSI \r\n");
 8002a8a:	4827      	ldr	r0, [pc, #156]	@ (8002b28 <si4463MenuDisplay+0xe4>)
 8002a8c:	f008 f838 	bl	800ab00 <puts>
	printf("Get the status of all interrupts ---> get ints \r\n");
 8002a90:	4826      	ldr	r0, [pc, #152]	@ (8002b2c <si4463MenuDisplay+0xe8>)
 8002a92:	f008 f835 	bl	800ab00 <puts>
	printf("Set the transmission power ---------> set txpwr    [0-127] \r\n");
 8002a96:	4826      	ldr	r0, [pc, #152]	@ (8002b30 <si4463MenuDisplay+0xec>)
 8002a98:	f008 f832 	bl	800ab00 <puts>
	printf("Get the transmission power ---------> get txpwr \r\n");
 8002a9c:	4825      	ldr	r0, [pc, #148]	@ (8002b34 <si4463MenuDisplay+0xf0>)
 8002a9e:	f008 f82f 	bl	800ab00 <puts>
	printf("Set the preamble number ------------> set preamble [5-255] \r\n");
 8002aa2:	4825      	ldr	r0, [pc, #148]	@ (8002b38 <si4463MenuDisplay+0xf4>)
 8002aa4:	f008 f82c 	bl	800ab00 <puts>
	printf("Get the preamble number ------------> get preamble \r\n");
 8002aa8:	4824      	ldr	r0, [pc, #144]	@ (8002b3c <si4463MenuDisplay+0xf8>)
 8002aaa:	f008 f829 	bl	800ab00 <puts>
	printf("Set the syncwords ------------------> set syncword [TBD] \r\n");
 8002aae:	4824      	ldr	r0, [pc, #144]	@ (8002b40 <si4463MenuDisplay+0xfc>)
 8002ab0:	f008 f826 	bl	800ab00 <puts>
	printf("Get the syncwords ------------------> get syncword \r\n");
 8002ab4:	4823      	ldr	r0, [pc, #140]	@ (8002b44 <si4463MenuDisplay+0x100>)
 8002ab6:	f008 f823 	bl	800ab00 <puts>
	printf("Set the CRC polynomial -------------> set crc      [0-9] \r\n");
 8002aba:	4823      	ldr	r0, [pc, #140]	@ (8002b48 <si4463MenuDisplay+0x104>)
 8002abc:	f008 f820 	bl	800ab00 <puts>
	printf("Get the CRC polynomial/seed --------> get crc \r\n");
 8002ac0:	4822      	ldr	r0, [pc, #136]	@ (8002b4c <si4463MenuDisplay+0x108>)
 8002ac2:	f008 f81d 	bl	800ab00 <puts>
	printf("Set TX/RX frequency ----------------> set freq     [Hz] \r\n");
 8002ac6:	4822      	ldr	r0, [pc, #136]	@ (8002b50 <si4463MenuDisplay+0x10c>)
 8002ac8:	f008 f81a 	bl	800ab00 <puts>
	printf("Get TX/RX frequency ----------------> get freq \r\n");
 8002acc:	4821      	ldr	r0, [pc, #132]	@ (8002b54 <si4463MenuDisplay+0x110>)
 8002ace:	f008 f817 	bl	800ab00 <puts>
	printf("Set the TX modulation --------------> set txmod    [0-2] \r\n");
 8002ad2:	4821      	ldr	r0, [pc, #132]	@ (8002b58 <si4463MenuDisplay+0x114>)
 8002ad4:	f008 f814 	bl	800ab00 <puts>
	printf("Set the RX modulation --------------> set rxmod    [0-2] \r\n");
 8002ad8:	4820      	ldr	r0, [pc, #128]	@ (8002b5c <si4463MenuDisplay+0x118>)
 8002ada:	f008 f811 	bl	800ab00 <puts>
	printf("Get the TX modulation --------------> get mod \r\n");
 8002ade:	4820      	ldr	r0, [pc, #128]	@ (8002b60 <si4463MenuDisplay+0x11c>)
 8002ae0:	f008 f80e 	bl	800ab00 <puts>
	printf("Set the TX data rate ---------------> set txdr     [0-3] \r\n");
 8002ae4:	481f      	ldr	r0, [pc, #124]	@ (8002b64 <si4463MenuDisplay+0x120>)
 8002ae6:	f008 f80b 	bl	800ab00 <puts>
	printf("Set the RX data rate ---------------> set rxdr     [0-3] \r\n");
 8002aea:	481f      	ldr	r0, [pc, #124]	@ (8002b68 <si4463MenuDisplay+0x124>)
 8002aec:	f008 f808 	bl	800ab00 <puts>
	printf("Get the TX data rate ---------------> get dr \r\n");
 8002af0:	481e      	ldr	r0, [pc, #120]	@ (8002b6c <si4463MenuDisplay+0x128>)
 8002af2:	f008 f805 	bl	800ab00 <puts>
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	0800ec74 	.word	0x0800ec74
 8002b00:	0800eca4 	.word	0x0800eca4
 8002b04:	0800ecd4 	.word	0x0800ecd4
 8002b08:	0800ed04 	.word	0x0800ed04
 8002b0c:	0800ed34 	.word	0x0800ed34
 8002b10:	0800ed60 	.word	0x0800ed60
 8002b14:	0800ed98 	.word	0x0800ed98
 8002b18:	0800edc8 	.word	0x0800edc8
 8002b1c:	0800edf4 	.word	0x0800edf4
 8002b20:	0800ee28 	.word	0x0800ee28
 8002b24:	0800ee5c 	.word	0x0800ee5c
 8002b28:	0800ee90 	.word	0x0800ee90
 8002b2c:	0800eec4 	.word	0x0800eec4
 8002b30:	0800eef8 	.word	0x0800eef8
 8002b34:	0800ef38 	.word	0x0800ef38
 8002b38:	0800ef6c 	.word	0x0800ef6c
 8002b3c:	0800efac 	.word	0x0800efac
 8002b40:	0800efe4 	.word	0x0800efe4
 8002b44:	0800f020 	.word	0x0800f020
 8002b48:	0800f058 	.word	0x0800f058
 8002b4c:	0800f094 	.word	0x0800f094
 8002b50:	0800f0c4 	.word	0x0800f0c4
 8002b54:	0800f100 	.word	0x0800f100
 8002b58:	0800f134 	.word	0x0800f134
 8002b5c:	0800f170 	.word	0x0800f170
 8002b60:	0800f1ac 	.word	0x0800f1ac
 8002b64:	0800f1dc 	.word	0x0800f1dc
 8002b68:	0800f218 	.word	0x0800f218
 8002b6c:	0800f254 	.word	0x0800f254

08002b70 <initHashTable>:

void initHashTable(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	// define the function pointer
	HT_malloc = &malloc;
 8002b74:	4b6d      	ldr	r3, [pc, #436]	@ (8002d2c <initHashTable+0x1bc>)
 8002b76:	4a6e      	ldr	r2, [pc, #440]	@ (8002d30 <initHashTable+0x1c0>)
 8002b78:	601a      	str	r2, [r3, #0]
	HT_free = &free;
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <initHashTable+0x1c4>)
 8002b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d38 <initHashTable+0x1c8>)
 8002b7e:	601a      	str	r2, [r3, #0]
	// select commands
	ht = HT_createTable(50);
 8002b80:	2032      	movs	r0, #50	@ 0x32
 8002b82:	f003 fe2f 	bl	80067e4 <HT_createTable>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4a6c      	ldr	r2, [pc, #432]	@ (8002d3c <initHashTable+0x1cc>)
 8002b8a:	6013      	str	r3, [r2, #0]
	HT_insertItem(ht, "help",    0);
 8002b8c:	4b6b      	ldr	r3, [pc, #428]	@ (8002d3c <initHashTable+0x1cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	496b      	ldr	r1, [pc, #428]	@ (8002d40 <initHashTable+0x1d0>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 feb5 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "reset",   1);
 8002b9a:	4b68      	ldr	r3, [pc, #416]	@ (8002d3c <initHashTable+0x1cc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4968      	ldr	r1, [pc, #416]	@ (8002d44 <initHashTable+0x1d4>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 feae 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "init",    2);
 8002ba8:	4b64      	ldr	r3, [pc, #400]	@ (8002d3c <initHashTable+0x1cc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2202      	movs	r2, #2
 8002bae:	4966      	ldr	r1, [pc, #408]	@ (8002d48 <initHashTable+0x1d8>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fea7 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "nop",     3);
 8002bb6:	4b61      	ldr	r3, [pc, #388]	@ (8002d3c <initHashTable+0x1cc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	4963      	ldr	r1, [pc, #396]	@ (8002d4c <initHashTable+0x1dc>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fea0 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "part",    4);
 8002bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d3c <initHashTable+0x1cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	4961      	ldr	r1, [pc, #388]	@ (8002d50 <initHashTable+0x1e0>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 fe99 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "func",    5);
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d3c <initHashTable+0x1cc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	495e      	ldr	r1, [pc, #376]	@ (8002d54 <initHashTable+0x1e4>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fe92 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "curRSSI", 6);
 8002be0:	4b56      	ldr	r3, [pc, #344]	@ (8002d3c <initHashTable+0x1cc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2206      	movs	r2, #6
 8002be6:	495c      	ldr	r1, [pc, #368]	@ (8002d58 <initHashTable+0x1e8>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fe8b 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "latRSSI", 7);
 8002bee:	4b53      	ldr	r3, [pc, #332]	@ (8002d3c <initHashTable+0x1cc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4959      	ldr	r1, [pc, #356]	@ (8002d5c <initHashTable+0x1ec>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fe84 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "ints",    10);
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d3c <initHashTable+0x1cc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	220a      	movs	r2, #10
 8002c02:	4957      	ldr	r1, [pc, #348]	@ (8002d60 <initHashTable+0x1f0>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 fe7d 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "tx",      11);
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d3c <initHashTable+0x1cc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	220b      	movs	r2, #11
 8002c10:	4954      	ldr	r1, [pc, #336]	@ (8002d64 <initHashTable+0x1f4>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fe76 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "rx",      12);
 8002c18:	4b48      	ldr	r3, [pc, #288]	@ (8002d3c <initHashTable+0x1cc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	220c      	movs	r2, #12
 8002c1e:	4952      	ldr	r1, [pc, #328]	@ (8002d68 <initHashTable+0x1f8>)
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fe6f 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "txpwr",   13);
 8002c26:	4b45      	ldr	r3, [pc, #276]	@ (8002d3c <initHashTable+0x1cc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	220d      	movs	r2, #13
 8002c2c:	494f      	ldr	r1, [pc, #316]	@ (8002d6c <initHashTable+0x1fc>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fe68 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "preamble",14);
 8002c34:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <initHashTable+0x1cc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	220e      	movs	r2, #14
 8002c3a:	494d      	ldr	r1, [pc, #308]	@ (8002d70 <initHashTable+0x200>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fe61 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "contx",   15);
 8002c42:	4b3e      	ldr	r3, [pc, #248]	@ (8002d3c <initHashTable+0x1cc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	220f      	movs	r2, #15
 8002c48:	494a      	ldr	r1, [pc, #296]	@ (8002d74 <initHashTable+0x204>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fe5a 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "syncword",20);
 8002c50:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <initHashTable+0x1cc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2214      	movs	r2, #20
 8002c56:	4948      	ldr	r1, [pc, #288]	@ (8002d78 <initHashTable+0x208>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fe53 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "crc",     30);
 8002c5e:	4b37      	ldr	r3, [pc, #220]	@ (8002d3c <initHashTable+0x1cc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	221e      	movs	r2, #30
 8002c64:	4945      	ldr	r1, [pc, #276]	@ (8002d7c <initHashTable+0x20c>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 fe4c 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "freq",    31);
 8002c6c:	4b33      	ldr	r3, [pc, #204]	@ (8002d3c <initHashTable+0x1cc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	221f      	movs	r2, #31
 8002c72:	4943      	ldr	r1, [pc, #268]	@ (8002d80 <initHashTable+0x210>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fe45 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "mod",     32);
 8002c7a:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <initHashTable+0x1cc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4940      	ldr	r1, [pc, #256]	@ (8002d84 <initHashTable+0x214>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fe3e 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "dr",      33);
 8002c88:	4b2c      	ldr	r3, [pc, #176]	@ (8002d3c <initHashTable+0x1cc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2221      	movs	r2, #33	@ 0x21
 8002c8e:	493e      	ldr	r1, [pc, #248]	@ (8002d88 <initHashTable+0x218>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fe37 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "crcpoly", 34);
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <initHashTable+0x1cc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2222      	movs	r2, #34	@ 0x22
 8002c9c:	493b      	ldr	r1, [pc, #236]	@ (8002d8c <initHashTable+0x21c>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fe30 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "crcseed", 35);
 8002ca4:	4b25      	ldr	r3, [pc, #148]	@ (8002d3c <initHashTable+0x1cc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2223      	movs	r2, #35	@ 0x23
 8002caa:	4939      	ldr	r1, [pc, #228]	@ (8002d90 <initHashTable+0x220>)
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fe29 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "txmod",   36);
 8002cb2:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <initHashTable+0x1cc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2224      	movs	r2, #36	@ 0x24
 8002cb8:	4936      	ldr	r1, [pc, #216]	@ (8002d94 <initHashTable+0x224>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fe22 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "rxmod",   37);
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <initHashTable+0x1cc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2225      	movs	r2, #37	@ 0x25
 8002cc6:	4934      	ldr	r1, [pc, #208]	@ (8002d98 <initHashTable+0x228>)
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fe1b 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "txdr",    38);
 8002cce:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <initHashTable+0x1cc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2226      	movs	r2, #38	@ 0x26
 8002cd4:	4931      	ldr	r1, [pc, #196]	@ (8002d9c <initHashTable+0x22c>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fe14 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "rxdr",    39);
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <initHashTable+0x1cc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2227      	movs	r2, #39	@ 0x27
 8002ce2:	492f      	ldr	r1, [pc, #188]	@ (8002da0 <initHashTable+0x230>)
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 fe0d 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "get",     50);
 8002cea:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <initHashTable+0x1cc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2232      	movs	r2, #50	@ 0x32
 8002cf0:	492c      	ldr	r1, [pc, #176]	@ (8002da4 <initHashTable+0x234>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fe06 	bl	8006904 <HT_insertItem>
	HT_insertItem(ht, "set",     51);
 8002cf8:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <initHashTable+0x1cc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2233      	movs	r2, #51	@ 0x33
 8002cfe:	492a      	ldr	r1, [pc, #168]	@ (8002da8 <initHashTable+0x238>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fdff 	bl	8006904 <HT_insertItem>
	HT_print(ht);
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <initHashTable+0x1cc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fd9c 	bl	8006848 <HT_print>

	printf("Search Key %s: Value %d \r\n", "check", HT_searchKey(ht, "check"));
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <initHashTable+0x1cc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4925      	ldr	r1, [pc, #148]	@ (8002dac <initHashTable+0x23c>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fe3d 	bl	8006996 <HT_searchKey>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4922      	ldr	r1, [pc, #136]	@ (8002dac <initHashTable+0x23c>)
 8002d22:	4823      	ldr	r0, [pc, #140]	@ (8002db0 <initHashTable+0x240>)
 8002d24:	f007 fe7c 	bl	800aa20 <iprintf>
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000a6c 	.word	0x20000a6c
 8002d30:	0800993d 	.word	0x0800993d
 8002d34:	20000a70 	.word	0x20000a70
 8002d38:	0800994d 	.word	0x0800994d
 8002d3c:	2000094c 	.word	0x2000094c
 8002d40:	0800f284 	.word	0x0800f284
 8002d44:	0800f28c 	.word	0x0800f28c
 8002d48:	0800f294 	.word	0x0800f294
 8002d4c:	0800f29c 	.word	0x0800f29c
 8002d50:	0800f2a0 	.word	0x0800f2a0
 8002d54:	0800f2a8 	.word	0x0800f2a8
 8002d58:	0800f2b0 	.word	0x0800f2b0
 8002d5c:	0800f2b8 	.word	0x0800f2b8
 8002d60:	0800f2c0 	.word	0x0800f2c0
 8002d64:	0800f2c8 	.word	0x0800f2c8
 8002d68:	0800f2cc 	.word	0x0800f2cc
 8002d6c:	0800f2d0 	.word	0x0800f2d0
 8002d70:	0800f2d8 	.word	0x0800f2d8
 8002d74:	0800f2e4 	.word	0x0800f2e4
 8002d78:	0800f2ec 	.word	0x0800f2ec
 8002d7c:	0800f2f8 	.word	0x0800f2f8
 8002d80:	0800f2fc 	.word	0x0800f2fc
 8002d84:	0800f304 	.word	0x0800f304
 8002d88:	0800f308 	.word	0x0800f308
 8002d8c:	0800f30c 	.word	0x0800f30c
 8002d90:	0800f314 	.word	0x0800f314
 8002d94:	0800f31c 	.word	0x0800f31c
 8002d98:	0800f324 	.word	0x0800f324
 8002d9c:	0800f32c 	.word	0x0800f32c
 8002da0:	0800f334 	.word	0x0800f334
 8002da4:	0800f33c 	.word	0x0800f33c
 8002da8:	0800f340 	.word	0x0800f340
 8002dac:	0800f344 	.word	0x0800f344
 8002db0:	0800f34c 	.word	0x0800f34c

08002db4 <morse_resetToNow>:

void morse_resetToNow(timerange_t* time)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	time->stamp = __HAL_TIM_GET_COUNTER(&htim2);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <morse_resetToNow+0x20>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000824 	.word	0x20000824

08002dd8 <morse_millisecondsElapsed>:

uint32_t morse_millisecondsElapsed(timerange_t* time)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	uint32_t current = __HAL_TIM_GET_COUNTER(&htim2);
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <morse_millisecondsElapsed+0x3c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	60fb      	str	r3, [r7, #12]
	if(time->stamp < current)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d904      	bls.n	8002dfc <morse_millisecondsElapsed+0x24>
	{
		return current - time->stamp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	e004      	b.n	8002e06 <morse_millisecondsElapsed+0x2e>
	}
	// unsigned integer overflow
	else
	{
		return UINT32_MAX - (time->stamp - current);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	3b01      	subs	r3, #1
	}
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000824 	.word	0x20000824

08002e18 <morse_secondsElapsed>:

uint32_t morse_secondsElapsed(timerange_t* time)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	return morse_millisecondsElapsed(time)/1000;
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ffd9 	bl	8002dd8 <morse_millisecondsElapsed>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a03      	ldr	r2, [pc, #12]	@ (8002e38 <morse_secondsElapsed+0x20>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	099b      	lsrs	r3, r3, #6
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <Error_Handler+0x8>

08002e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <HAL_MspInit+0x4c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	4a0f      	ldr	r2, [pc, #60]	@ (8002e94 <HAL_MspInit+0x4c>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <HAL_MspInit+0x4c>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_MspInit+0x4c>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <HAL_MspInit+0x4c>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_MspInit+0x4c>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	@ 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_SPI_MspInit+0xa4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d13b      	bne.n	8002f32 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_SPI_MspInit+0xa8>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f40 <HAL_SPI_MspInit+0xa8>)
 8002ec4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_SPI_MspInit+0xa8>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <HAL_SPI_MspInit+0xa8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a18      	ldr	r2, [pc, #96]	@ (8002f40 <HAL_SPI_MspInit+0xa8>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <HAL_SPI_MspInit+0xa8>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002efa:	2302      	movs	r3, #2
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f02:	2305      	movs	r3, #5
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480d      	ldr	r0, [pc, #52]	@ (8002f44 <HAL_SPI_MspInit+0xac>)
 8002f0e:	f000 fc01 	bl	8003714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f12:	23c0      	movs	r3, #192	@ 0xc0
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f22:	2305      	movs	r3, #5
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	@ (8002f44 <HAL_SPI_MspInit+0xac>)
 8002f2e:	f000 fbf1 	bl	8003714 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	@ 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40013000 	.word	0x40013000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020000 	.word	0x40020000

08002f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <HAL_TIM_Base_MspInit+0x64>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a13      	ldr	r2, [pc, #76]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f76:	e012      	b.n	8002f9e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f80:	d10d      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	4a09      	ldr	r2, [pc, #36]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_UART_MspInit+0x94>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d133      	bne.n	800303e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b1c      	ldr	r3, [pc, #112]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a14      	ldr	r2, [pc, #80]	@ (800304c <HAL_UART_MspInit+0x98>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_UART_MspInit+0x98>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800300e:	2360      	movs	r3, #96	@ 0x60
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301a:	2303      	movs	r3, #3
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800301e:	2307      	movs	r3, #7
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	4809      	ldr	r0, [pc, #36]	@ (8003050 <HAL_UART_MspInit+0x9c>)
 800302a:	f000 fb73 	bl	8003714 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2105      	movs	r1, #5
 8003032:	2026      	movs	r0, #38	@ 0x26
 8003034:	f000 faa5 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003038:	2026      	movs	r0, #38	@ 0x26
 800303a:	f000 fabe 	bl	80035ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	@ 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40004400 	.word	0x40004400
 800304c:	40023800 	.word	0x40023800
 8003050:	40020c00 	.word	0x40020c00

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <NMI_Handler+0x4>

0800305c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <HardFault_Handler+0x4>

08003064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <MemManage_Handler+0x4>

0800306c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <BusFault_Handler+0x4>

08003074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <UsageFault_Handler+0x4>

0800307c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030aa:	f000 f96f 	bl	800338c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80030b6:	2001      	movs	r0, #1
 80030b8:	f000 fd0a 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 80030c4:	2010      	movs	r0, #16
 80030c6:	f000 fd03 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <USART2_IRQHandler+0x10>)
 80030d6:	f002 fbf7 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	2000086c 	.word	0x2000086c

080030e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return 1;
 80030e8:	2301      	movs	r3, #1
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_kill>:

int _kill(int pid, int sig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fe:	f007 fe75 	bl	800adec <__errno>
 8003102:	4603      	mov	r3, r0
 8003104:	2216      	movs	r2, #22
 8003106:	601a      	str	r2, [r3, #0]
  return -1;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <_exit>:

void _exit (int status)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe7 	bl	80030f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003126:	bf00      	nop
 8003128:	e7fd      	b.n	8003126 <_exit+0x12>

0800312a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00a      	b.n	8003152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313c:	f3af 8000 	nop.w
 8003140:	4601      	mov	r1, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbf0      	blt.n	800313c <_read+0x12>
  }

  return len;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e009      	b.n	800318a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60ba      	str	r2, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd ff50 	bl	8001024 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	dbf1      	blt.n	8003176 <_write+0x12>
  }
  return len;
 8003192:	687b      	ldr	r3, [r7, #4]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_close>:

int _close(int file)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031c4:	605a      	str	r2, [r3, #4]
  return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_isatty>:

int _isatty(int file)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031dc:	2301      	movs	r3, #1
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <_sbrk+0x5c>)
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <_sbrk+0x60>)
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <_sbrk+0x64>)
 8003222:	4a12      	ldr	r2, [pc, #72]	@ (800326c <_sbrk+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d207      	bcs.n	8003244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003234:	f007 fdda 	bl	800adec <__errno>
 8003238:	4603      	mov	r3, r0
 800323a:	220c      	movs	r2, #12
 800323c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	e009      	b.n	8003258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003244:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324a:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <_sbrk+0x64>)
 8003254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20030000 	.word	0x20030000
 8003264:	00000400 	.word	0x00000400
 8003268:	20000a64 	.word	0x20000a64
 800326c:	20000c48 	.word	0x20000c48

08003270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003274:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <SystemInit+0x20>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <SystemInit+0x20>)
 800327c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003294:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003298:	480d      	ldr	r0, [pc, #52]	@ (80032d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800329a:	490e      	ldr	r1, [pc, #56]	@ (80032d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800329c:	4a0e      	ldr	r2, [pc, #56]	@ (80032d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800329e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a0:	e002      	b.n	80032a8 <LoopCopyDataInit>

080032a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a6:	3304      	adds	r3, #4

080032a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032ac:	d3f9      	bcc.n	80032a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ae:	4a0b      	ldr	r2, [pc, #44]	@ (80032dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032b0:	4c0b      	ldr	r4, [pc, #44]	@ (80032e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b4:	e001      	b.n	80032ba <LoopFillZerobss>

080032b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b8:	3204      	adds	r2, #4

080032ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032bc:	d3fb      	bcc.n	80032b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032be:	f7ff ffd7 	bl	8003270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c2:	f007 fd99 	bl	800adf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c6:	f7fe f853 	bl	8001370 <main>
  bx  lr    
 80032ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80032cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d4:	20000768 	.word	0x20000768
  ldr r2, =_sidata
 80032d8:	0800f9d0 	.word	0x0800f9d0
  ldr r2, =_sbss
 80032dc:	20000768 	.word	0x20000768
  ldr r4, =_ebss
 80032e0:	20000c48 	.word	0x20000c48

080032e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <ADC_IRQHandler>
	...

080032e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <HAL_Init+0x40>)
 80032f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <HAL_Init+0x40>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003304:	4b08      	ldr	r3, [pc, #32]	@ (8003328 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <HAL_Init+0x40>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003310:	2003      	movs	r0, #3
 8003312:	f000 f92b 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003316:	2000      	movs	r0, #0
 8003318:	f000 f808 	bl	800332c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800331c:	f7ff fd94 	bl	8002e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00

0800332c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003334:	4b12      	ldr	r3, [pc, #72]	@ (8003380 <HAL_InitTick+0x54>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_InitTick+0x58>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4619      	mov	r1, r3
 800333e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003342:	fbb3 f3f1 	udiv	r3, r3, r1
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f943 	bl	80035d6 <HAL_SYSTICK_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e00e      	b.n	8003378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d80a      	bhi.n	8003376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003360:	2200      	movs	r2, #0
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	f000 f90b 	bl	8003582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800336c:	4a06      	ldr	r2, [pc, #24]	@ (8003388 <HAL_InitTick+0x5c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000000 	.word	0x20000000
 8003384:	20000008 	.word	0x20000008
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003390:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_IncTick+0x20>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_IncTick+0x24>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4413      	add	r3, r2
 800339c:	4a04      	ldr	r2, [pc, #16]	@ (80033b0 <HAL_IncTick+0x24>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000008 	.word	0x20000008
 80033b0:	20000a68 	.word	0x20000a68

080033b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return uwTick;
 80033b8:	4b03      	ldr	r3, [pc, #12]	@ (80033c8 <HAL_GetTick+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000a68 	.word	0x20000a68

080033cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <__NVIC_GetPriorityGrouping+0x18>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 0307 	and.w	r3, r3, #7
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	2b00      	cmp	r3, #0
 8003440:	db0b      	blt.n	800345a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	f003 021f 	and.w	r2, r3, #31
 8003448:	4907      	ldr	r1, [pc, #28]	@ (8003468 <__NVIC_EnableIRQ+0x38>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2001      	movs	r0, #1
 8003452:	fa00 f202 	lsl.w	r2, r0, r2
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e100 	.word	0xe000e100

0800346c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	db0a      	blt.n	8003496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	490c      	ldr	r1, [pc, #48]	@ (80034b8 <__NVIC_SetPriority+0x4c>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	440b      	add	r3, r1
 8003490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003494:	e00a      	b.n	80034ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4908      	ldr	r1, [pc, #32]	@ (80034bc <__NVIC_SetPriority+0x50>)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	3b04      	subs	r3, #4
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	440b      	add	r3, r1
 80034aa:	761a      	strb	r2, [r3, #24]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	@ 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f1c3 0307 	rsb	r3, r3, #7
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf28      	it	cs
 80034de:	2304      	movcs	r3, #4
 80034e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d902      	bls.n	80034f0 <NVIC_EncodePriority+0x30>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3b03      	subs	r3, #3
 80034ee:	e000      	b.n	80034f2 <NVIC_EncodePriority+0x32>
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	401a      	ands	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003508:	f04f 31ff 	mov.w	r1, #4294967295
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43d9      	mvns	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	4313      	orrs	r3, r2
         );
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	@ (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f7ff ff8e 	bl	800346c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff29 	bl	80033cc <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff3e 	bl	8003414 <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff8e 	bl	80034c0 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5d 	bl	800346c <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff31 	bl	8003430 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffa2 	bl	8003528 <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff feda 	bl	80033b4 <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d008      	beq.n	8003620 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e052      	b.n	80036c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0216 	bic.w	r2, r2, #22
 800362e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800363e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <HAL_DMA_Abort+0x62>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0208 	bic.w	r2, r2, #8
 800365e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003670:	e013      	b.n	800369a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003672:	f7ff fe9f 	bl	80033b4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b05      	cmp	r3, #5
 800367e:	d90c      	bls.n	800369a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e015      	b.n	80036c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e4      	bne.n	8003672 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ac:	223f      	movs	r2, #63	@ 0x3f
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2280      	movs	r2, #128	@ 0x80
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e00c      	b.n	8003706 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2205      	movs	r2, #5
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e177      	b.n	8003a20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	f040 8166 	bne.w	8003a1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d005      	beq.n	8003766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003762:	2b02      	cmp	r3, #2
 8003764:	d130      	bne.n	80037c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800379c:	2201      	movs	r2, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 0201 	and.w	r2, r3, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d017      	beq.n	8003804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d123      	bne.n	8003858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	08da      	lsrs	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	69b9      	ldr	r1, [r7, #24]
 8003854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80c0 	beq.w	8003a1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b66      	ldr	r3, [pc, #408]	@ (8003a38 <HAL_GPIO_Init+0x324>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4a65      	ldr	r2, [pc, #404]	@ (8003a38 <HAL_GPIO_Init+0x324>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038aa:	4b63      	ldr	r3, [pc, #396]	@ (8003a38 <HAL_GPIO_Init+0x324>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b6:	4a61      	ldr	r2, [pc, #388]	@ (8003a3c <HAL_GPIO_Init+0x328>)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a58      	ldr	r2, [pc, #352]	@ (8003a40 <HAL_GPIO_Init+0x32c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d037      	beq.n	8003952 <HAL_GPIO_Init+0x23e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a57      	ldr	r2, [pc, #348]	@ (8003a44 <HAL_GPIO_Init+0x330>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_GPIO_Init+0x23a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a56      	ldr	r2, [pc, #344]	@ (8003a48 <HAL_GPIO_Init+0x334>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02b      	beq.n	800394a <HAL_GPIO_Init+0x236>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a55      	ldr	r2, [pc, #340]	@ (8003a4c <HAL_GPIO_Init+0x338>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d025      	beq.n	8003946 <HAL_GPIO_Init+0x232>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a54      	ldr	r2, [pc, #336]	@ (8003a50 <HAL_GPIO_Init+0x33c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <HAL_GPIO_Init+0x22e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a53      	ldr	r2, [pc, #332]	@ (8003a54 <HAL_GPIO_Init+0x340>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d019      	beq.n	800393e <HAL_GPIO_Init+0x22a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a52      	ldr	r2, [pc, #328]	@ (8003a58 <HAL_GPIO_Init+0x344>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_GPIO_Init+0x226>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a51      	ldr	r2, [pc, #324]	@ (8003a5c <HAL_GPIO_Init+0x348>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00d      	beq.n	8003936 <HAL_GPIO_Init+0x222>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a50      	ldr	r2, [pc, #320]	@ (8003a60 <HAL_GPIO_Init+0x34c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <HAL_GPIO_Init+0x21e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a4f      	ldr	r2, [pc, #316]	@ (8003a64 <HAL_GPIO_Init+0x350>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <HAL_GPIO_Init+0x21a>
 800392a:	2309      	movs	r3, #9
 800392c:	e012      	b.n	8003954 <HAL_GPIO_Init+0x240>
 800392e:	230a      	movs	r3, #10
 8003930:	e010      	b.n	8003954 <HAL_GPIO_Init+0x240>
 8003932:	2308      	movs	r3, #8
 8003934:	e00e      	b.n	8003954 <HAL_GPIO_Init+0x240>
 8003936:	2307      	movs	r3, #7
 8003938:	e00c      	b.n	8003954 <HAL_GPIO_Init+0x240>
 800393a:	2306      	movs	r3, #6
 800393c:	e00a      	b.n	8003954 <HAL_GPIO_Init+0x240>
 800393e:	2305      	movs	r3, #5
 8003940:	e008      	b.n	8003954 <HAL_GPIO_Init+0x240>
 8003942:	2304      	movs	r3, #4
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x240>
 8003946:	2303      	movs	r3, #3
 8003948:	e004      	b.n	8003954 <HAL_GPIO_Init+0x240>
 800394a:	2302      	movs	r3, #2
 800394c:	e002      	b.n	8003954 <HAL_GPIO_Init+0x240>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_GPIO_Init+0x240>
 8003952:	2300      	movs	r3, #0
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	f002 0203 	and.w	r2, r2, #3
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	4093      	lsls	r3, r2
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003964:	4935      	ldr	r1, [pc, #212]	@ (8003a3c <HAL_GPIO_Init+0x328>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003996:	4a34      	ldr	r2, [pc, #208]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800399c:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c0:	4a29      	ldr	r2, [pc, #164]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039c6:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <HAL_GPIO_Init+0x354>)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	f67f ae84 	bls.w	8003730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3724      	adds	r7, #36	@ 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40021400 	.word	0x40021400
 8003a58:	40021800 	.word	0x40021800
 8003a5c:	40021c00 	.word	0x40021c00
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40022400 	.word	0x40022400
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e001      	b.n	8003a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab8:	e003      	b.n	8003ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae6:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fc12 	bl	8001318 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40013c00 	.word	0x40013c00

08003b00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b26:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b2c:	f7ff fc42 	bl	80033b4 <HAL_GetTick>
 8003b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b32:	e009      	b.n	8003b48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b34:	f7ff fc3e 	bl	80033b4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b42:	d901      	bls.n	8003b48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e01f      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b48:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d1ee      	bne.n	8003b34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b56:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5c:	f7ff fc2a 	bl	80033b4 <HAL_GetTick>
 8003b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b62:	e009      	b.n	8003b78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b64:	f7ff fc26 	bl	80033b4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b72:	d901      	bls.n	8003b78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e007      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b78:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b84:	d1ee      	bne.n	8003b64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	420e0040 	.word	0x420e0040
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	420e0044 	.word	0x420e0044

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e267      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d075      	beq.n	8003caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bbe:	4b88      	ldr	r3, [pc, #544]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d00c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b85      	ldr	r3, [pc, #532]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d112      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b82      	ldr	r3, [pc, #520]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	4b7e      	ldr	r3, [pc, #504]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x108>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d157      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e242      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x74>
 8003c06:	4b76      	ldr	r3, [pc, #472]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a75      	ldr	r2, [pc, #468]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xb0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x98>
 8003c1e:	4b70      	ldr	r3, [pc, #448]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6f      	ldr	r2, [pc, #444]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xb0>
 8003c38:	4b69      	ldr	r3, [pc, #420]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a68      	ldr	r2, [pc, #416]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b66      	ldr	r3, [pc, #408]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a65      	ldr	r2, [pc, #404]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7ff fbac 	bl	80033b4 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7ff fba8 	bl	80033b4 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	@ 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e207      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b5b      	ldr	r3, [pc, #364]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xc0>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7ff fb98 	bl	80033b4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7ff fb94 	bl	80033b4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	@ 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1f3      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b51      	ldr	r3, [pc, #324]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0xe8>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d063      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b47      	ldr	r3, [pc, #284]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b44      	ldr	r3, [pc, #272]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	4b41      	ldr	r3, [pc, #260]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x152>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1c7      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4937      	ldr	r1, [pc, #220]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	e03a      	b.n	8003d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	4b34      	ldr	r3, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x244>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7ff fb4d 	bl	80033b4 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7ff fb49 	bl	80033b4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1a8      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	4b2b      	ldr	r3, [pc, #172]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3c:	4b28      	ldr	r3, [pc, #160]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4925      	ldr	r1, [pc, #148]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d52:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCC_OscConfig+0x244>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7ff fb2c 	bl	80033b4 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d60:	f7ff fb28 	bl	80033b4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e187      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d036      	beq.n	8003df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <HAL_RCC_OscConfig+0x248>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7ff fb0c 	bl	80033b4 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da0:	f7ff fb08 	bl	80033b4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e167      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCC_OscConfig+0x240>)
 8003db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x200>
 8003dbe:	e01b      	b.n	8003df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <HAL_RCC_OscConfig+0x248>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7ff faf5 	bl	80033b4 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	e00e      	b.n	8003dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dce:	f7ff faf1 	bl	80033b4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d907      	bls.n	8003dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e150      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470000 	.word	0x42470000
 8003de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ea      	bne.n	8003dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8097 	beq.w	8003f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b81      	ldr	r3, [pc, #516]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e26:	4b7a      	ldr	r3, [pc, #488]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	4b77      	ldr	r3, [pc, #476]	@ (8004014 <HAL_RCC_OscConfig+0x474>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e42:	4b74      	ldr	r3, [pc, #464]	@ (8004014 <HAL_RCC_OscConfig+0x474>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a73      	ldr	r2, [pc, #460]	@ (8004014 <HAL_RCC_OscConfig+0x474>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7ff fab1 	bl	80033b4 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7ff faad 	bl	80033b4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e10c      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b6a      	ldr	r3, [pc, #424]	@ (8004014 <HAL_RCC_OscConfig+0x474>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2ea>
 8003e7c:	4b64      	ldr	r3, [pc, #400]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	4a63      	ldr	r2, [pc, #396]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e88:	e01c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x324>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x30c>
 8003e92:	4b5f      	ldr	r3, [pc, #380]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	4a5e      	ldr	r2, [pc, #376]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x324>
 8003eac:	4b58      	ldr	r3, [pc, #352]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	4a57      	ldr	r2, [pc, #348]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb8:	4b55      	ldr	r3, [pc, #340]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebc:	4a54      	ldr	r2, [pc, #336]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f023 0304 	bic.w	r3, r3, #4
 8003ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7ff fa72 	bl	80033b4 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7ff fa6e 	bl	80033b4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0cb      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ee      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x334>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef8:	f7ff fa5c 	bl	80033b4 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7ff fa58 	bl	80033b4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0b5      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	4b3e      	ldr	r3, [pc, #248]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ee      	bne.n	8003f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	4a38      	ldr	r2, [pc, #224]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a1 	beq.w	8004080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3e:	4b34      	ldr	r3, [pc, #208]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d05c      	beq.n	8004004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d141      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b31      	ldr	r3, [pc, #196]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7ff fa2c 	bl	80033b4 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f60:	f7ff fa28 	bl	80033b4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e087      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	4b27      	ldr	r3, [pc, #156]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	491b      	ldr	r1, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7ff fa01 	bl	80033b4 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7ff f9fd 	bl	80033b4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e05c      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc8:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x416>
 8003fd4:	e054      	b.n	8004080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7ff f9ea 	bl	80033b4 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7ff f9e6 	bl	80033b4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e045      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x444>
 8004002:	e03d      	b.n	8004080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e038      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
 8004010:	40023800 	.word	0x40023800
 8004014:	40007000 	.word	0x40007000
 8004018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800401c:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <HAL_RCC_OscConfig+0x4ec>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d028      	beq.n	800407c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d121      	bne.n	800407c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	429a      	cmp	r2, r3
 8004044:	d11a      	bne.n	800407c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004054:	4293      	cmp	r3, r2
 8004056:	d111      	bne.n	800407c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	3b01      	subs	r3, #1
 8004066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d107      	bne.n	800407c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0cc      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b68      	ldr	r3, [pc, #416]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d90c      	bls.n	80040cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b65      	ldr	r3, [pc, #404]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b63      	ldr	r3, [pc, #396]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0b8      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e4:	4b59      	ldr	r3, [pc, #356]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a58      	ldr	r2, [pc, #352]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040fc:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a52      	ldr	r2, [pc, #328]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b50      	ldr	r3, [pc, #320]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	494d      	ldr	r1, [pc, #308]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d044      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b47      	ldr	r3, [pc, #284]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d119      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e07f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d003      	beq.n	800414e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b3b      	ldr	r3, [pc, #236]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e067      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4934      	ldr	r1, [pc, #208]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7ff f918 	bl	80033b4 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7ff f914 	bl	80033b4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2b      	ldr	r3, [pc, #172]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b25      	ldr	r3, [pc, #148]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d20c      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b22      	ldr	r3, [pc, #136]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b20      	ldr	r3, [pc, #128]	@ (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e032      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4916      	ldr	r1, [pc, #88]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004202:	4b12      	ldr	r3, [pc, #72]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	490e      	ldr	r1, [pc, #56]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004216:	f000 f821 	bl	800425c <HAL_RCC_GetSysClockFreq>
 800421a:	4602      	mov	r2, r0
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	490a      	ldr	r1, [pc, #40]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	5ccb      	ldrb	r3, [r1, r3]
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	4a09      	ldr	r2, [pc, #36]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f878 	bl	800332c <HAL_InitTick>

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00
 800424c:	40023800 	.word	0x40023800
 8004250:	0800f52c 	.word	0x0800f52c
 8004254:	20000000 	.word	0x20000000
 8004258:	20000004 	.word	0x20000004

0800425c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800425c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004260:	b094      	sub	sp, #80	@ 0x50
 8004262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	647b      	str	r3, [r7, #68]	@ 0x44
 8004268:	2300      	movs	r3, #0
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	2300      	movs	r3, #0
 800426e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004274:	4b79      	ldr	r3, [pc, #484]	@ (800445c <HAL_RCC_GetSysClockFreq+0x200>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b08      	cmp	r3, #8
 800427e:	d00d      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x40>
 8004280:	2b08      	cmp	r3, #8
 8004282:	f200 80e1 	bhi.w	8004448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x34>
 800428a:	2b04      	cmp	r3, #4
 800428c:	d003      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x3a>
 800428e:	e0db      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b73      	ldr	r3, [pc, #460]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x204>)
 8004292:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004294:	e0db      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004296:	4b73      	ldr	r3, [pc, #460]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x208>)
 8004298:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800429a:	e0d8      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800429c:	4b6f      	ldr	r3, [pc, #444]	@ (800445c <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a6:	4b6d      	ldr	r3, [pc, #436]	@ (800445c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b6a      	ldr	r3, [pc, #424]	@ (800445c <HAL_RCC_GetSysClockFreq+0x200>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	2200      	movs	r2, #0
 80042ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c6:	2300      	movs	r3, #0
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042ce:	4622      	mov	r2, r4
 80042d0:	462b      	mov	r3, r5
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	0159      	lsls	r1, r3, #5
 80042dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e0:	0150      	lsls	r0, r2, #5
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4621      	mov	r1, r4
 80042e8:	1a51      	subs	r1, r2, r1
 80042ea:	6139      	str	r1, [r7, #16]
 80042ec:	4629      	mov	r1, r5
 80042ee:	eb63 0301 	sbc.w	r3, r3, r1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004300:	4659      	mov	r1, fp
 8004302:	018b      	lsls	r3, r1, #6
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800430a:	4651      	mov	r1, sl
 800430c:	018a      	lsls	r2, r1, #6
 800430e:	4651      	mov	r1, sl
 8004310:	ebb2 0801 	subs.w	r8, r2, r1
 8004314:	4659      	mov	r1, fp
 8004316:	eb63 0901 	sbc.w	r9, r3, r1
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800432a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800432e:	4690      	mov	r8, r2
 8004330:	4699      	mov	r9, r3
 8004332:	4623      	mov	r3, r4
 8004334:	eb18 0303 	adds.w	r3, r8, r3
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	462b      	mov	r3, r5
 800433c:	eb49 0303 	adc.w	r3, r9, r3
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800434e:	4629      	mov	r1, r5
 8004350:	024b      	lsls	r3, r1, #9
 8004352:	4621      	mov	r1, r4
 8004354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004358:	4621      	mov	r1, r4
 800435a:	024a      	lsls	r2, r1, #9
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004362:	2200      	movs	r2, #0
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800436c:	f7fc fcac 	bl	8000cc8 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004378:	e058      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437a:	4b38      	ldr	r3, [pc, #224]	@ (800445c <HAL_RCC_GetSysClockFreq+0x200>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	099b      	lsrs	r3, r3, #6
 8004380:	2200      	movs	r2, #0
 8004382:	4618      	mov	r0, r3
 8004384:	4611      	mov	r1, r2
 8004386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	2300      	movs	r3, #0
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	f04f 0000 	mov.w	r0, #0
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	0159      	lsls	r1, r3, #5
 80043a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a6:	0150      	lsls	r0, r2, #5
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4641      	mov	r1, r8
 80043ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80043b2:	4649      	mov	r1, r9
 80043b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043cc:	ebb2 040a 	subs.w	r4, r2, sl
 80043d0:	eb63 050b 	sbc.w	r5, r3, fp
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	00eb      	lsls	r3, r5, #3
 80043de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043e2:	00e2      	lsls	r2, r4, #3
 80043e4:	4614      	mov	r4, r2
 80043e6:	461d      	mov	r5, r3
 80043e8:	4643      	mov	r3, r8
 80043ea:	18e3      	adds	r3, r4, r3
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	464b      	mov	r3, r9
 80043f0:	eb45 0303 	adc.w	r3, r5, r3
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004402:	4629      	mov	r1, r5
 8004404:	028b      	lsls	r3, r1, #10
 8004406:	4621      	mov	r1, r4
 8004408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800440c:	4621      	mov	r1, r4
 800440e:	028a      	lsls	r2, r1, #10
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004416:	2200      	movs	r2, #0
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	61fa      	str	r2, [r7, #28]
 800441c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004420:	f7fc fc52 	bl	8000cc8 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4613      	mov	r3, r2
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_GetSysClockFreq+0x200>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	3301      	adds	r3, #1
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800443c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800443e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004446:	e002      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x204>)
 800444a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800444c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004450:	4618      	mov	r0, r3
 8004452:	3750      	adds	r7, #80	@ 0x50
 8004454:	46bd      	mov	sp, r7
 8004456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	00f42400 	.word	0x00f42400
 8004464:	007a1200 	.word	0x007a1200

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b03      	ldr	r3, [pc, #12]	@ (800447c <HAL_RCC_GetHCLKFreq+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000000 	.word	0x20000000

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004484:	f7ff fff0 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0a9b      	lsrs	r3, r3, #10
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4903      	ldr	r1, [pc, #12]	@ (80044a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	0800f53c 	.word	0x0800f53c

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044ac:	f7ff ffdc 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0b5b      	lsrs	r3, r3, #13
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	@ (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	0800f53c 	.word	0x0800f53c

080044d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07b      	b.n	80045da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f2:	d009      	beq.n	8004508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	61da      	str	r2, [r3, #28]
 80044fa:	e005      	b.n	8004508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fe fcb8 	bl	8002e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800453e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	ea42 0103 	orr.w	r1, r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0104 	and.w	r1, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	f003 0210 	and.w	r2, r3, #16
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b088      	sub	sp, #32
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_SPI_Transmit+0x22>
 8004600:	2302      	movs	r3, #2
 8004602:	e126      	b.n	8004852 <HAL_SPI_Transmit+0x270>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460c:	f7fe fed2 	bl	80033b4 <HAL_GetTick>
 8004610:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d002      	beq.n	8004628 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004622:	2302      	movs	r3, #2
 8004624:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004626:	e10b      	b.n	8004840 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0x52>
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004638:	e102      	b.n	8004840 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2203      	movs	r2, #3
 800463e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004680:	d10f      	bne.n	80046a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d007      	beq.n	80046c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c8:	d14b      	bne.n	8004762 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SPI_Transmit+0xf6>
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d13e      	bne.n	8004756 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046fc:	e02b      	b.n	8004756 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d112      	bne.n	8004732 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004730:	e011      	b.n	8004756 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004732:	f7fe fe3f 	bl	80033b4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d803      	bhi.n	800474a <HAL_SPI_Transmit+0x168>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d102      	bne.n	8004750 <HAL_SPI_Transmit+0x16e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004754:	e074      	b.n	8004840 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ce      	bne.n	80046fe <HAL_SPI_Transmit+0x11c>
 8004760:	e04c      	b.n	80047fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0x18e>
 800476a:	8afb      	ldrh	r3, [r7, #22]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d140      	bne.n	80047f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004796:	e02c      	b.n	80047f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d113      	bne.n	80047ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047cc:	e011      	b.n	80047f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ce:	f7fe fdf1 	bl	80033b4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d803      	bhi.n	80047e6 <HAL_SPI_Transmit+0x204>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d102      	bne.n	80047ec <HAL_SPI_Transmit+0x20a>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047f0:	e026      	b.n	8004840 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1cd      	bne.n	8004798 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fbd9 	bl	8004fb8 <SPI_EndRxTxTransaction>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e000      	b.n	8004840 <HAL_SPI_Transmit+0x25e>
  }

error:
 800483e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004850:	7ffb      	ldrb	r3, [r7, #31]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b088      	sub	sp, #32
 800485e:	af02      	add	r7, sp, #8
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004876:	d112      	bne.n	800489e <HAL_SPI_Receive+0x44>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10e      	bne.n	800489e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2204      	movs	r2, #4
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f8f1 	bl	8004a7c <HAL_SPI_TransmitReceive>
 800489a:	4603      	mov	r3, r0
 800489c:	e0ea      	b.n	8004a74 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_SPI_Receive+0x52>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e0e3      	b.n	8004a74 <HAL_SPI_Receive+0x21a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b4:	f7fe fd7e 	bl	80033b4 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048ca:	e0ca      	b.n	8004a62 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Receive+0x7e>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048dc:	e0c1      	b.n	8004a62 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2204      	movs	r2, #4
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004924:	d10f      	bne.n	8004946 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b40      	cmp	r3, #64	@ 0x40
 8004952:	d007      	beq.n	8004964 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d162      	bne.n	8004a32 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800496c:	e02e      	b.n	80049cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d115      	bne.n	80049a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f103 020c 	add.w	r2, r3, #12
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049a6:	e011      	b.n	80049cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a8:	f7fe fd04 	bl	80033b4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d803      	bhi.n	80049c0 <HAL_SPI_Receive+0x166>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Receive+0x16c>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049ca:	e04a      	b.n	8004a62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1cb      	bne.n	800496e <HAL_SPI_Receive+0x114>
 80049d6:	e031      	b.n	8004a3c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d113      	bne.n	8004a0e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	b292      	uxth	r2, r2
 80049f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f8:	1c9a      	adds	r2, r3, #2
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a0c:	e011      	b.n	8004a32 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a0e:	f7fe fcd1 	bl	80033b4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d803      	bhi.n	8004a26 <HAL_SPI_Receive+0x1cc>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d102      	bne.n	8004a2c <HAL_SPI_Receive+0x1d2>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a30:	e017      	b.n	8004a62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1cd      	bne.n	80049d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fa53 	bl	8004eec <SPI_EndRxTransaction>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
 8004a5e:	e000      	b.n	8004a62 <HAL_SPI_Receive+0x208>
  }

error :
 8004a60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	@ 0x30
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x26>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e18a      	b.n	8004db8 <HAL_SPI_TransmitReceive+0x33c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aaa:	f7fe fc83 	bl	80033b4 <HAL_GetTick>
 8004aae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ac0:	887b      	ldrh	r3, [r7, #2]
 8004ac2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d00f      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x70>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ad2:	d107      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x68>
 8004adc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d003      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004aea:	e15b      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x82>
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004b04:	e14e      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d003      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2205      	movs	r2, #5
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	887a      	ldrh	r2, [r7, #2]
 8004b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	887a      	ldrh	r2, [r7, #2]
 8004b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	887a      	ldrh	r2, [r7, #2]
 8004b42:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b40      	cmp	r3, #64	@ 0x40
 8004b5c:	d007      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b76:	d178      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_TransmitReceive+0x10a>
 8004b80:	8b7b      	ldrh	r3, [r7, #26]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d166      	bne.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004baa:	e053      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d11b      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x176>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x176>
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d113      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d119      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1b8>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d014      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	b292      	uxth	r2, r2
 8004c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c30:	2301      	movs	r3, #1
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c34:	f7fe fbbe 	bl	80033b4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d807      	bhi.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d003      	beq.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004c52:	e0a7      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1a6      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x130>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1a1      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x130>
 8004c68:	e07c      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x1fc>
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d16b      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9e:	e057      	b.n	8004d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d11c      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x26c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d017      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x26c>
 8004cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d114      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d119      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x2ae>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d014      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d26:	2301      	movs	r3, #1
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d2a:	f7fe fb43 	bl	80033b4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d803      	bhi.n	8004d42 <HAL_SPI_TransmitReceive+0x2c6>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2cc>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004d4e:	e029      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1a2      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x224>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d19d      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f925 	bl	8004fb8 <SPI_EndRxTxTransaction>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d006      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004d80:	e010      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	e000      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004da2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004db4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3730      	adds	r7, #48	@ 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dce:	b2db      	uxtb	r3, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dec:	f7fe fae2 	bl	80033b4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dfc:	f7fe fada 	bl	80033b4 <HAL_GetTick>
 8004e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e02:	4b39      	ldr	r3, [pc, #228]	@ (8004ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	015b      	lsls	r3, r3, #5
 8004e08:	0d1b      	lsrs	r3, r3, #20
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e12:	e054      	b.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d050      	beq.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e1c:	f7fe faca 	bl	80033b4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d902      	bls.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d13d      	bne.n	8004eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4a:	d111      	bne.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e54:	d004      	beq.n	8004e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5e:	d107      	bne.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e78:	d10f      	bne.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e017      	b.n	8004ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d19b      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000000 	.word	0x20000000

08004eec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f00:	d111      	bne.n	8004f26 <SPI_EndRxTransaction+0x3a>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0a:	d004      	beq.n	8004f16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f14:	d107      	bne.n	8004f26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2e:	d12a      	bne.n	8004f86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f38:	d012      	beq.n	8004f60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2200      	movs	r2, #0
 8004f42:	2180      	movs	r1, #128	@ 0x80
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff ff49 	bl	8004ddc <SPI_WaitFlagStateUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02d      	beq.n	8004fac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e026      	b.n	8004fae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2101      	movs	r1, #1
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff ff36 	bl	8004ddc <SPI_WaitFlagStateUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01a      	beq.n	8004fac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e013      	b.n	8004fae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2101      	movs	r1, #1
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff23 	bl	8004ddc <SPI_WaitFlagStateUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e000      	b.n	8004fae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <SPI_EndRxTxTransaction+0x7c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005038 <SPI_EndRxTxTransaction+0x80>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	0d5b      	lsrs	r3, r3, #21
 8004fd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fd4:	fb02 f303 	mul.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe2:	d112      	bne.n	800500a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	2180      	movs	r1, #128	@ 0x80
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff fef4 	bl	8004ddc <SPI_WaitFlagStateUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	f043 0220 	orr.w	r2, r3, #32
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e00f      	b.n	800502a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3b01      	subs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005020:	2b80      	cmp	r3, #128	@ 0x80
 8005022:	d0f2      	beq.n	800500a <SPI_EndRxTxTransaction+0x52>
 8005024:	e000      	b.n	8005028 <SPI_EndRxTxTransaction+0x70>
        break;
 8005026:	bf00      	nop
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000000 	.word	0x20000000
 8005038:	165e9f81 	.word	0x165e9f81

0800503c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e041      	b.n	80050d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fd ff70 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 f95e 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e046      	b.n	8005182 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <HAL_TIM_Base_Start+0xb4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d01d      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <HAL_TIM_Base_Start+0xb8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	@ (8005198 <HAL_TIM_Base_Start+0xbc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	@ (800519c <HAL_TIM_Base_Start+0xc0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	@ (80051a0 <HAL_TIM_Base_Start+0xc4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <HAL_TIM_Base_Start+0xc8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_Base_Start+0x70>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <HAL_TIM_Base_Start+0xcc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40010400 	.word	0x40010400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40001800 	.word	0x40001800

080051ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x1c>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0b4      	b.n	8005332 <HAL_TIM_ConfigClockSource+0x186>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005200:	d03e      	beq.n	8005280 <HAL_TIM_ConfigClockSource+0xd4>
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005206:	f200 8087 	bhi.w	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520e:	f000 8086 	beq.w	800531e <HAL_TIM_ConfigClockSource+0x172>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005216:	d87f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b70      	cmp	r3, #112	@ 0x70
 800521a:	d01a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xa6>
 800521c:	2b70      	cmp	r3, #112	@ 0x70
 800521e:	d87b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b60      	cmp	r3, #96	@ 0x60
 8005222:	d050      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005224:	2b60      	cmp	r3, #96	@ 0x60
 8005226:	d877      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b50      	cmp	r3, #80	@ 0x50
 800522a:	d03c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xfa>
 800522c:	2b50      	cmp	r3, #80	@ 0x50
 800522e:	d873      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	d058      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d86f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b30      	cmp	r3, #48	@ 0x30
 800523a:	d064      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	2b30      	cmp	r3, #48	@ 0x30
 800523e:	d86b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d060      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d867      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05c      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d05a      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	e062      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f000 f985 	bl	8005570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
      break;
 800527e:	e04f      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f000 f96e 	bl	8005570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a2:	609a      	str	r2, [r3, #8]
      break;
 80052a4:	e03c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 f8e2 	bl	800547c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2150      	movs	r1, #80	@ 0x50
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f93b 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 80052c4:	e02c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 f901 	bl	80054da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2160      	movs	r1, #96	@ 0x60
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f92b 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 80052e4:	e01c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 f8c2 	bl	800547c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2140      	movs	r1, #64	@ 0x40
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f91b 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 8005304:	e00c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f000 f912 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 8005316:	e003      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e000      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800531e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a40      	ldr	r2, [pc, #256]	@ (8005450 <TIM_Base_SetConfig+0x114>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535a:	d00f      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3d      	ldr	r2, [pc, #244]	@ (8005454 <TIM_Base_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00b      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3c      	ldr	r2, [pc, #240]	@ (8005458 <TIM_Base_SetConfig+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d007      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3b      	ldr	r2, [pc, #236]	@ (800545c <TIM_Base_SetConfig+0x120>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3a      	ldr	r2, [pc, #232]	@ (8005460 <TIM_Base_SetConfig+0x124>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d108      	bne.n	800538e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2f      	ldr	r2, [pc, #188]	@ (8005450 <TIM_Base_SetConfig+0x114>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02b      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539c:	d027      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005454 <TIM_Base_SetConfig+0x118>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d023      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005458 <TIM_Base_SetConfig+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	@ (800545c <TIM_Base_SetConfig+0x120>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01b      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a29      	ldr	r2, [pc, #164]	@ (8005460 <TIM_Base_SetConfig+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d017      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <TIM_Base_SetConfig+0x128>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a27      	ldr	r2, [pc, #156]	@ (8005468 <TIM_Base_SetConfig+0x12c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00f      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a26      	ldr	r2, [pc, #152]	@ (800546c <TIM_Base_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a25      	ldr	r2, [pc, #148]	@ (8005470 <TIM_Base_SetConfig+0x134>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a24      	ldr	r2, [pc, #144]	@ (8005474 <TIM_Base_SetConfig+0x138>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a23      	ldr	r2, [pc, #140]	@ (8005478 <TIM_Base_SetConfig+0x13c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0a      	ldr	r2, [pc, #40]	@ (8005450 <TIM_Base_SetConfig+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0xf8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0c      	ldr	r2, [pc, #48]	@ (8005460 <TIM_Base_SetConfig+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d103      	bne.n	800543c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	615a      	str	r2, [r3, #20]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40010400 	.word	0x40010400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800
 8005470:	40001800 	.word	0x40001800
 8005474:	40001c00 	.word	0x40001c00
 8005478:	40002000 	.word	0x40002000

0800547c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 030a 	bic.w	r3, r3, #10
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054da:	b480      	push	{r7}
 80054dc:	b087      	sub	sp, #28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0210 	bic.w	r2, r3, #16
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	f043 0307 	orr.w	r3, r3, #7
 800555c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800558a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	431a      	orrs	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e05a      	b.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a21      	ldr	r2, [pc, #132]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005614:	d01d      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1d      	ldr	r2, [pc, #116]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1b      	ldr	r2, [pc, #108]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1a      	ldr	r2, [pc, #104]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a18      	ldr	r2, [pc, #96]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a17      	ldr	r2, [pc, #92]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10c      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40010400 	.word	0x40010400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40001800 	.word	0x40001800

080056a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e03f      	b.n	800573a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fd fc70 	bl	8002fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2224      	movs	r2, #36	@ 0x24
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fddf 	bl	80062b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b08a      	sub	sp, #40	@ 0x28
 8005746:	af02      	add	r7, sp, #8
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b20      	cmp	r3, #32
 8005760:	d17c      	bne.n	800585c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_UART_Transmit+0x2c>
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e075      	b.n	800585e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_UART_Transmit+0x3e>
 800577c:	2302      	movs	r3, #2
 800577e:	e06e      	b.n	800585e <HAL_UART_Transmit+0x11c>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2221      	movs	r2, #33	@ 0x21
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005796:	f7fd fe0d 	bl	80033b4 <HAL_GetTick>
 800579a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b0:	d108      	bne.n	80057c4 <HAL_UART_Transmit+0x82>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e003      	b.n	80057cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80057d4:	e02a      	b.n	800582c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fb1f 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e036      	b.n	800585e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3302      	adds	r3, #2
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	e007      	b.n	800581e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1cf      	bne.n	80057d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	2140      	movs	r1, #64	@ 0x40
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 faef 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e006      	b.n	800585e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b20      	cmp	r3, #32
 800587e:	d11d      	bne.n	80058bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_UART_Receive_IT+0x26>
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e016      	b.n	80058be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_UART_Receive_IT+0x38>
 800589a:	2302      	movs	r3, #2
 800589c:	e00f      	b.n	80058be <HAL_UART_Receive_IT+0x58>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	461a      	mov	r2, r3
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fb24 	bl	8005f00 <UART_Start_Receive_IT>
 80058b8:	4603      	mov	r3, r0
 80058ba:	e000      	b.n	80058be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b0ba      	sub	sp, #232	@ 0xe8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <HAL_UART_IRQHandler+0x66>
 800591a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fc07 	bl	800613a <UART_Receive_IT>
      return;
 800592c:	e256      	b.n	8005ddc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800592e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80de 	beq.w	8005af4 <HAL_UART_IRQHandler+0x22c>
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80d1 	beq.w	8005af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_UART_IRQHandler+0xae>
 800595e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_UART_IRQHandler+0xd2>
 8005982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	f043 0202 	orr.w	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_UART_IRQHandler+0xf6>
 80059a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	f043 0204 	orr.w	r2, r3, #4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d011      	beq.n	80059ee <HAL_UART_IRQHandler+0x126>
 80059ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	f043 0208 	orr.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 81ed 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_UART_IRQHandler+0x14e>
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fb92 	bl	800613a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <HAL_UART_IRQHandler+0x17a>
 8005a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d04f      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa9a 	bl	8005f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	d141      	bne.n	8005ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1d9      	bne.n	8005a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	4a7d      	ldr	r2, [pc, #500]	@ (8005ca4 <HAL_UART_IRQHandler+0x3dc>)
 8005ab0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fd fe09 	bl	80036ce <HAL_DMA_Abort_IT>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d016      	beq.n	8005af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e00e      	b.n	8005af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f990 	bl	8005df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	e00a      	b.n	8005af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f98c 	bl	8005df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e006      	b.n	8005af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f988 	bl	8005df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005aee:	e170      	b.n	8005dd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	bf00      	nop
    return;
 8005af2:	e16e      	b.n	8005dd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	f040 814a 	bne.w	8005d92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8143 	beq.w	8005d92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 813c 	beq.w	8005d92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3a:	2b40      	cmp	r3, #64	@ 0x40
 8005b3c:	f040 80b4 	bne.w	8005ca8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8140 	beq.w	8005dd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f080 8139 	bcs.w	8005dd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b76:	f000 8088 	beq.w	8005c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1d9      	bne.n	8005b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e1      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3314      	adds	r3, #20
 8005c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3314      	adds	r3, #20
 8005c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e3      	bne.n	8005c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5a:	f023 0310 	bic.w	r3, r3, #16
 8005c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e3      	bne.n	8005c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fd fcb2 	bl	80035ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f8b6 	bl	8005e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ca0:	e099      	b.n	8005dd6 <HAL_UART_IRQHandler+0x50e>
 8005ca2:	bf00      	nop
 8005ca4:	08006043 	.word	0x08006043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 808b 	beq.w	8005dda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8086 	beq.w	8005dda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e3      	bne.n	8005cce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	623b      	str	r3, [r7, #32]
   return(result);
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3314      	adds	r3, #20
 8005d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e3      	bne.n	8005d06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
 8005d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d70:	61fa      	str	r2, [r7, #28]
 8005d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e3      	bne.n	8005d4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f83e 	bl	8005e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d90:	e023      	b.n	8005dda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_UART_IRQHandler+0x4ea>
 8005d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f95d 	bl	800606a <UART_Transmit_IT>
    return;
 8005db0:	e014      	b.n	8005ddc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_UART_IRQHandler+0x514>
 8005dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f99d 	bl	800610a <UART_EndTransmit_IT>
    return;
 8005dd0:	e004      	b.n	8005ddc <HAL_UART_IRQHandler+0x514>
    return;
 8005dd2:	bf00      	nop
 8005dd4:	e002      	b.n	8005ddc <HAL_UART_IRQHandler+0x514>
      return;
 8005dd6:	bf00      	nop
 8005dd8:	e000      	b.n	8005ddc <HAL_UART_IRQHandler+0x514>
      return;
 8005dda:	bf00      	nop
  }
}
 8005ddc:	37e8      	adds	r7, #232	@ 0xe8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b090      	sub	sp, #64	@ 0x40
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	e050      	b.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d04c      	beq.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e44:	f7fd fab6 	bl	80033b4 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d241      	bcs.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e74:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	613b      	str	r3, [r7, #16]
   return(result);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ea8:	623a      	str	r2, [r7, #32]
 8005eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	69f9      	ldr	r1, [r7, #28]
 8005eae:	6a3a      	ldr	r2, [r7, #32]
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e5      	bne.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e00f      	b.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d09f      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3740      	adds	r7, #64	@ 0x40
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2222      	movs	r2, #34	@ 0x22
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0220 	orr.w	r2, r2, #32
 8005f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b095      	sub	sp, #84	@ 0x54
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fa4:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005faa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e5      	bne.n	8005f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d119      	bne.n	8006028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	330c      	adds	r3, #12
 8005ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	60bb      	str	r3, [r7, #8]
   return(result);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 0310 	bic.w	r3, r3, #16
 800600a:	647b      	str	r3, [r7, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006014:	61ba      	str	r2, [r7, #24]
 8006016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6979      	ldr	r1, [r7, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	613b      	str	r3, [r7, #16]
   return(result);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e5      	bne.n	8005ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006036:	bf00      	nop
 8006038:	3754      	adds	r7, #84	@ 0x54
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fecb 	bl	8005df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b21      	cmp	r3, #33	@ 0x21
 800607c:	d13e      	bne.n	80060fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006086:	d114      	bne.n	80060b2 <UART_Transmit_IT+0x48>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d110      	bne.n	80060b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	1c9a      	adds	r2, r3, #2
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	621a      	str	r2, [r3, #32]
 80060b0:	e008      	b.n	80060c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6211      	str	r1, [r2, #32]
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	4619      	mov	r1, r3
 80060d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10f      	bne.n	80060f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	e000      	b.n	80060fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff fe5a 	bl	8005de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b08c      	sub	sp, #48	@ 0x30
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b22      	cmp	r3, #34	@ 0x22
 800614c:	f040 80ab 	bne.w	80062a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006158:	d117      	bne.n	800618a <UART_Receive_IT+0x50>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d113      	bne.n	800618a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006178:	b29a      	uxth	r2, r3
 800617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	@ 0x28
 8006188:	e026      	b.n	80061d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619c:	d007      	beq.n	80061ae <UART_Receive_IT+0x74>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <UART_Receive_IT+0x82>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e008      	b.n	80061ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4619      	mov	r1, r3
 80061e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d15a      	bne.n	80062a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0220 	bic.w	r2, r2, #32
 80061fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800620a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006228:	2b01      	cmp	r3, #1
 800622a:	d135      	bne.n	8006298 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	613b      	str	r3, [r7, #16]
   return(result);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006252:	623a      	str	r2, [r7, #32]
 8006254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	69f9      	ldr	r1, [r7, #28]
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b10      	cmp	r3, #16
 8006272:	d10a      	bne.n	800628a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff fdbb 	bl	8005e0c <HAL_UARTEx_RxEventCallback>
 8006296:	e002      	b.n	800629e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fa fed5 	bl	8001048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e002      	b.n	80062a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3730      	adds	r7, #48	@ 0x30
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b4:	b0c0      	sub	sp, #256	@ 0x100
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	68d9      	ldr	r1, [r3, #12]
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	ea40 0301 	orr.w	r3, r0, r1
 80062d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006308:	f021 010c 	bic.w	r1, r1, #12
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006316:	430b      	orrs	r3, r1
 8006318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632a:	6999      	ldr	r1, [r3, #24]
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	ea40 0301 	orr.w	r3, r0, r1
 8006336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b8f      	ldr	r3, [pc, #572]	@ (800657c <UART_SetConfig+0x2cc>)
 8006340:	429a      	cmp	r2, r3
 8006342:	d005      	beq.n	8006350 <UART_SetConfig+0xa0>
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b8d      	ldr	r3, [pc, #564]	@ (8006580 <UART_SetConfig+0x2d0>)
 800634c:	429a      	cmp	r2, r3
 800634e:	d104      	bne.n	800635a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fe f8aa 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8006354:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006358:	e003      	b.n	8006362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fe f891 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 800635e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636c:	f040 810c 	bne.w	8006588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006374:	2200      	movs	r2, #0
 8006376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800637a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800637e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006382:	4622      	mov	r2, r4
 8006384:	462b      	mov	r3, r5
 8006386:	1891      	adds	r1, r2, r2
 8006388:	65b9      	str	r1, [r7, #88]	@ 0x58
 800638a:	415b      	adcs	r3, r3
 800638c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800638e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006392:	4621      	mov	r1, r4
 8006394:	eb12 0801 	adds.w	r8, r2, r1
 8006398:	4629      	mov	r1, r5
 800639a:	eb43 0901 	adc.w	r9, r3, r1
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063b2:	4690      	mov	r8, r2
 80063b4:	4699      	mov	r9, r3
 80063b6:	4623      	mov	r3, r4
 80063b8:	eb18 0303 	adds.w	r3, r8, r3
 80063bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c0:	462b      	mov	r3, r5
 80063c2:	eb49 0303 	adc.w	r3, r9, r3
 80063c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063de:	460b      	mov	r3, r1
 80063e0:	18db      	adds	r3, r3, r3
 80063e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e4:	4613      	mov	r3, r2
 80063e6:	eb42 0303 	adc.w	r3, r2, r3
 80063ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063f4:	f7fa fc68 	bl	8000cc8 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4b61      	ldr	r3, [pc, #388]	@ (8006584 <UART_SetConfig+0x2d4>)
 80063fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	011c      	lsls	r4, r3, #4
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006410:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006420:	415b      	adcs	r3, r3
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006428:	4641      	mov	r1, r8
 800642a:	eb12 0a01 	adds.w	sl, r2, r1
 800642e:	4649      	mov	r1, r9
 8006430:	eb43 0b01 	adc.w	fp, r3, r1
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006448:	4692      	mov	sl, r2
 800644a:	469b      	mov	fp, r3
 800644c:	4643      	mov	r3, r8
 800644e:	eb1a 0303 	adds.w	r3, sl, r3
 8006452:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006456:	464b      	mov	r3, r9
 8006458:	eb4b 0303 	adc.w	r3, fp, r3
 800645c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800646c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006474:	460b      	mov	r3, r1
 8006476:	18db      	adds	r3, r3, r3
 8006478:	643b      	str	r3, [r7, #64]	@ 0x40
 800647a:	4613      	mov	r3, r2
 800647c:	eb42 0303 	adc.w	r3, r2, r3
 8006480:	647b      	str	r3, [r7, #68]	@ 0x44
 8006482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800648a:	f7fa fc1d 	bl	8000cc8 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4611      	mov	r1, r2
 8006494:	4b3b      	ldr	r3, [pc, #236]	@ (8006584 <UART_SetConfig+0x2d4>)
 8006496:	fba3 2301 	umull	r2, r3, r3, r1
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	2264      	movs	r2, #100	@ 0x64
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	1acb      	subs	r3, r1, r3
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064aa:	4b36      	ldr	r3, [pc, #216]	@ (8006584 <UART_SetConfig+0x2d4>)
 80064ac:	fba3 2302 	umull	r2, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064b8:	441c      	add	r4, r3
 80064ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	1891      	adds	r1, r2, r2
 80064d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064d4:	415b      	adcs	r3, r3
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064dc:	4641      	mov	r1, r8
 80064de:	1851      	adds	r1, r2, r1
 80064e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80064e2:	4649      	mov	r1, r9
 80064e4:	414b      	adcs	r3, r1
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064f4:	4659      	mov	r1, fp
 80064f6:	00cb      	lsls	r3, r1, #3
 80064f8:	4651      	mov	r1, sl
 80064fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fe:	4651      	mov	r1, sl
 8006500:	00ca      	lsls	r2, r1, #3
 8006502:	4610      	mov	r0, r2
 8006504:	4619      	mov	r1, r3
 8006506:	4603      	mov	r3, r0
 8006508:	4642      	mov	r2, r8
 800650a:	189b      	adds	r3, r3, r2
 800650c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006510:	464b      	mov	r3, r9
 8006512:	460a      	mov	r2, r1
 8006514:	eb42 0303 	adc.w	r3, r2, r3
 8006518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006528:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800652c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006530:	460b      	mov	r3, r1
 8006532:	18db      	adds	r3, r3, r3
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006536:	4613      	mov	r3, r2
 8006538:	eb42 0303 	adc.w	r3, r2, r3
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006546:	f7fa fbbf 	bl	8000cc8 <__aeabi_uldivmod>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <UART_SetConfig+0x2d4>)
 8006550:	fba3 1302 	umull	r1, r3, r3, r2
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	2164      	movs	r1, #100	@ 0x64
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	3332      	adds	r3, #50	@ 0x32
 8006562:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <UART_SetConfig+0x2d4>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	f003 0207 	and.w	r2, r3, #7
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4422      	add	r2, r4
 8006576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006578:	e106      	b.n	8006788 <UART_SetConfig+0x4d8>
 800657a:	bf00      	nop
 800657c:	40011000 	.word	0x40011000
 8006580:	40011400 	.word	0x40011400
 8006584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800658c:	2200      	movs	r2, #0
 800658e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006592:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800659a:	4642      	mov	r2, r8
 800659c:	464b      	mov	r3, r9
 800659e:	1891      	adds	r1, r2, r2
 80065a0:	6239      	str	r1, [r7, #32]
 80065a2:	415b      	adcs	r3, r3
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065aa:	4641      	mov	r1, r8
 80065ac:	1854      	adds	r4, r2, r1
 80065ae:	4649      	mov	r1, r9
 80065b0:	eb43 0501 	adc.w	r5, r3, r1
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	00eb      	lsls	r3, r5, #3
 80065be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065c2:	00e2      	lsls	r2, r4, #3
 80065c4:	4614      	mov	r4, r2
 80065c6:	461d      	mov	r5, r3
 80065c8:	4643      	mov	r3, r8
 80065ca:	18e3      	adds	r3, r4, r3
 80065cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065d0:	464b      	mov	r3, r9
 80065d2:	eb45 0303 	adc.w	r3, r5, r3
 80065d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065f6:	4629      	mov	r1, r5
 80065f8:	008b      	lsls	r3, r1, #2
 80065fa:	4621      	mov	r1, r4
 80065fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006600:	4621      	mov	r1, r4
 8006602:	008a      	lsls	r2, r1, #2
 8006604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006608:	f7fa fb5e 	bl	8000cc8 <__aeabi_uldivmod>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4b60      	ldr	r3, [pc, #384]	@ (8006794 <UART_SetConfig+0x4e4>)
 8006612:	fba3 2302 	umull	r2, r3, r3, r2
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	011c      	lsls	r4, r3, #4
 800661a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006624:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	61b9      	str	r1, [r7, #24]
 8006634:	415b      	adcs	r3, r3
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800663c:	4641      	mov	r1, r8
 800663e:	1851      	adds	r1, r2, r1
 8006640:	6139      	str	r1, [r7, #16]
 8006642:	4649      	mov	r1, r9
 8006644:	414b      	adcs	r3, r1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006654:	4659      	mov	r1, fp
 8006656:	00cb      	lsls	r3, r1, #3
 8006658:	4651      	mov	r1, sl
 800665a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665e:	4651      	mov	r1, sl
 8006660:	00ca      	lsls	r2, r1, #3
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	4603      	mov	r3, r0
 8006668:	4642      	mov	r2, r8
 800666a:	189b      	adds	r3, r3, r2
 800666c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006670:	464b      	mov	r3, r9
 8006672:	460a      	mov	r2, r1
 8006674:	eb42 0303 	adc.w	r3, r2, r3
 8006678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006686:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006694:	4649      	mov	r1, r9
 8006696:	008b      	lsls	r3, r1, #2
 8006698:	4641      	mov	r1, r8
 800669a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669e:	4641      	mov	r1, r8
 80066a0:	008a      	lsls	r2, r1, #2
 80066a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066a6:	f7fa fb0f 	bl	8000cc8 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	4b38      	ldr	r3, [pc, #224]	@ (8006794 <UART_SetConfig+0x4e4>)
 80066b2:	fba3 2301 	umull	r2, r3, r3, r1
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2264      	movs	r2, #100	@ 0x64
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
 80066be:	1acb      	subs	r3, r1, r3
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	3332      	adds	r3, #50	@ 0x32
 80066c4:	4a33      	ldr	r2, [pc, #204]	@ (8006794 <UART_SetConfig+0x4e4>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066d0:	441c      	add	r4, r3
 80066d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d6:	2200      	movs	r2, #0
 80066d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80066da:	677a      	str	r2, [r7, #116]	@ 0x74
 80066dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	415b      	adcs	r3, r3
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f0:	4641      	mov	r1, r8
 80066f2:	1851      	adds	r1, r2, r1
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	4649      	mov	r1, r9
 80066f8:	414b      	adcs	r3, r1
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006708:	4659      	mov	r1, fp
 800670a:	00cb      	lsls	r3, r1, #3
 800670c:	4651      	mov	r1, sl
 800670e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006712:	4651      	mov	r1, sl
 8006714:	00ca      	lsls	r2, r1, #3
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	4603      	mov	r3, r0
 800671c:	4642      	mov	r2, r8
 800671e:	189b      	adds	r3, r3, r2
 8006720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006722:	464b      	mov	r3, r9
 8006724:	460a      	mov	r2, r1
 8006726:	eb42 0303 	adc.w	r3, r2, r3
 800672a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	663b      	str	r3, [r7, #96]	@ 0x60
 8006736:	667a      	str	r2, [r7, #100]	@ 0x64
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006744:	4649      	mov	r1, r9
 8006746:	008b      	lsls	r3, r1, #2
 8006748:	4641      	mov	r1, r8
 800674a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800674e:	4641      	mov	r1, r8
 8006750:	008a      	lsls	r2, r1, #2
 8006752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006756:	f7fa fab7 	bl	8000cc8 <__aeabi_uldivmod>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <UART_SetConfig+0x4e4>)
 8006760:	fba3 1302 	umull	r1, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	2164      	movs	r1, #100	@ 0x64
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	3332      	adds	r3, #50	@ 0x32
 8006772:	4a08      	ldr	r2, [pc, #32]	@ (8006794 <UART_SetConfig+0x4e4>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f003 020f 	and.w	r2, r3, #15
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4422      	add	r2, r4
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800678e:	46bd      	mov	sp, r7
 8006790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006794:	51eb851f 	.word	0x51eb851f

08006798 <HT_createItem>:

void* (*HT_malloc)(size_t size);
void (*HT_free)(void*);

HT_Item* HT_createItem(char* key, int value)
{
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
    HT_Item* item = (HT_Item*)HT_malloc(sizeof(HT_Item));
 80067a2:	4b0f      	ldr	r3, [pc, #60]	@ (80067e0 <HT_createItem+0x48>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2008      	movs	r0, #8
 80067a8:	4798      	blx	r3
 80067aa:	60f8      	str	r0, [r7, #12]
    item->key = (char*)HT_malloc(strlen(key) + 1);
 80067ac:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <HT_createItem+0x48>)
 80067ae:	681c      	ldr	r4, [r3, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7f9 fd7d 	bl	80002b0 <strlen>
 80067b6:	4603      	mov	r3, r0
 80067b8:	3301      	adds	r3, #1
 80067ba:	4618      	mov	r0, r3
 80067bc:	47a0      	blx	r4
 80067be:	4602      	mov	r2, r0
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	601a      	str	r2, [r3, #0]
    item->value = value;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	605a      	str	r2, [r3, #4]
    // put the content of key into item structure
    strcpy(item->key, key);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f004 fb38 	bl	800ae46 <strcpy>
    return item;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd90      	pop	{r4, r7, pc}
 80067e0:	20000a6c 	.word	0x20000a6c

080067e4 <HT_createTable>:

Hash_Table* HT_createTable(int size)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
    Hash_Table* table = (Hash_Table*)HT_malloc(sizeof(Hash_Table));
 80067ec:	4b15      	ldr	r3, [pc, #84]	@ (8006844 <HT_createTable+0x60>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	200c      	movs	r0, #12
 80067f2:	4798      	blx	r3
 80067f4:	60b8      	str	r0, [r7, #8]
    table->itemNodes = (HT_LinkedList**)HT_malloc(size * sizeof(HT_LinkedList*));
 80067f6:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <HT_createTable+0x60>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	4610      	mov	r0, r2
 8006800:	4798      	blx	r3
 8006802:	4602      	mov	r2, r0
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	601a      	str	r2, [r3, #0]
    table->size = size;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	605a      	str	r2, [r3, #4]
    table->count = 0;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
    // set all of lists' header node to null pointer.
    for(int i = 0; i < table->size; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e009      	b.n	800682e <HT_createTable+0x4a>
    {
        table->itemNodes[i] = NULL; 
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < table->size; i++)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	dbf0      	blt.n	800681a <HT_createTable+0x36>
    }
    return table;
 8006838:	68bb      	ldr	r3, [r7, #8]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000a6c 	.word	0x20000a6c

08006848 <HT_print>:
    }
    HT_free(table);
}

void HT_print(Hash_Table* table)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	printf("------------------------------\r\n");
 8006850:	4825      	ldr	r0, [pc, #148]	@ (80068e8 <HT_print+0xa0>)
 8006852:	f004 f955 	bl	800ab00 <puts>
    for(int i = 0; i < table->size; i++)
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e038      	b.n	80068ce <HT_print+0x86>
    {
        if(table->itemNodes[i] != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d023      	beq.n	80068b4 <HT_print+0x6c>
        {
            printf("Index: %d\t", i);
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	481f      	ldr	r0, [pc, #124]	@ (80068ec <HT_print+0xa4>)
 8006870:	f004 f8d6 	bl	800aa20 <iprintf>
            HT_LinkedList* temp = table->itemNodes[i];
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60bb      	str	r3, [r7, #8]
            while(temp)
 8006882:	e013      	b.n	80068ac <HT_print+0x64>
            {
                printf("Key: %s, ", temp->item->key);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	4818      	ldr	r0, [pc, #96]	@ (80068f0 <HT_print+0xa8>)
 800688e:	f004 f8c7 	bl	800aa20 <iprintf>
                printf("Value: %d", temp->item->value);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4619      	mov	r1, r3
 800689a:	4816      	ldr	r0, [pc, #88]	@ (80068f4 <HT_print+0xac>)
 800689c:	f004 f8c0 	bl	800aa20 <iprintf>
                printf(" -> ");
 80068a0:	4815      	ldr	r0, [pc, #84]	@ (80068f8 <HT_print+0xb0>)
 80068a2:	f004 f8bd 	bl	800aa20 <iprintf>
                temp = temp->next;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60bb      	str	r3, [r7, #8]
            while(temp)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e8      	bne.n	8006884 <HT_print+0x3c>
 80068b2:	e003      	b.n	80068bc <HT_print+0x74>
            }
        }
        else
        {
            printf("Index: %d\t", i);
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	480d      	ldr	r0, [pc, #52]	@ (80068ec <HT_print+0xa4>)
 80068b8:	f004 f8b2 	bl	800aa20 <iprintf>
        }
        printf("NULL");
 80068bc:	480f      	ldr	r0, [pc, #60]	@ (80068fc <HT_print+0xb4>)
 80068be:	f004 f8af 	bl	800aa20 <iprintf>
        printf("\r\n");
 80068c2:	480f      	ldr	r0, [pc, #60]	@ (8006900 <HT_print+0xb8>)
 80068c4:	f004 f91c 	bl	800ab00 <puts>
    for(int i = 0; i < table->size; i++)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	dbc1      	blt.n	800685c <HT_print+0x14>
    }
    printf("------------------------------\r\n");
 80068d8:	4803      	ldr	r0, [pc, #12]	@ (80068e8 <HT_print+0xa0>)
 80068da:	f004 f911 	bl	800ab00 <puts>
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	0800f368 	.word	0x0800f368
 80068ec:	0800f388 	.word	0x0800f388
 80068f0:	0800f394 	.word	0x0800f394
 80068f4:	0800f3a0 	.word	0x0800f3a0
 80068f8:	0800f3ac 	.word	0x0800f3ac
 80068fc:	0800f3b4 	.word	0x0800f3b4
 8006900:	0800f3bc 	.word	0x0800f3bc

08006904 <HT_insertItem>:

void HT_insertItem(Hash_Table* table, char* key, int value)
{
 8006904:	b590      	push	{r4, r7, lr}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
    uint32_t index = ht_hashFunction(table, key);
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f8a1 	bl	8006a5a <ht_hashFunction>
 8006918:	6178      	str	r0, [r7, #20]
    if(table->itemNodes[index] == NULL)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d122      	bne.n	8006970 <HT_insertItem+0x6c>
    {
        // if itemNodes list is empty, then we need to allocate a new linkedlist
        table->itemNodes[index] = linkedlist_allocate();
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	18d4      	adds	r4, r2, r3
 8006934:	f000 f866 	bl	8006a04 <linkedlist_allocate>
 8006938:	4603      	mov	r3, r0
 800693a:	6023      	str	r3, [r4, #0]
        // after allocating a new one, it needs to be define its content.
        table->itemNodes[index]->item = HT_createItem(key, value);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	681c      	ldr	r4, [r3, #0]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f7ff ff24 	bl	8006798 <HT_createItem>
 8006950:	4603      	mov	r3, r0
 8006952:	6023      	str	r3, [r4, #0]
        table->itemNodes[index]->next = NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2200      	movs	r2, #0
 8006962:	605a      	str	r2, [r3, #4]
        table->count++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	609a      	str	r2, [r3, #8]
        // it isn't same, and then insert a new node at the end.
        HT_Item* newItem = HT_createItem(key, value);
        // Separate chaining
        linkedlist_insert(table->itemNodes[index], newItem);
    }
}
 800696e:	e00e      	b.n	800698e <HT_insertItem+0x8a>
        HT_Item* newItem = HT_createItem(key, value);
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	68b8      	ldr	r0, [r7, #8]
 8006974:	f7ff ff10 	bl	8006798 <HT_createItem>
 8006978:	6138      	str	r0, [r7, #16]
        linkedlist_insert(table->itemNodes[index], newItem);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6939      	ldr	r1, [r7, #16]
 8006988:	4618      	mov	r0, r3
 800698a:	f000 f847 	bl	8006a1c <linkedlist_insert>
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd90      	pop	{r4, r7, pc}

08006996 <HT_searchKey>:
        linkedlist_delete(head, key);
    }
}

int HT_searchKey(Hash_Table* table, char* key)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
    uint32_t index = ht_hashFunction(table, key);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f859 	bl	8006a5a <ht_hashFunction>
 80069a8:	60b8      	str	r0, [r7, #8]
    if(table->itemNodes[index] == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <HT_searchKey+0x2a>
        return -1;
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295
 80069be:	e01d      	b.n	80069fc <HT_searchKey+0x66>
    
    HT_LinkedList* currentNode = table->itemNodes[index];
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
    while(currentNode)
 80069ce:	e010      	b.n	80069f2 <HT_searchKey+0x5c>
    {
        // compare its key, if the key is same.
        if(strcmp(currentNode->item->key, key) == 0){
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7f9 fc09 	bl	80001f0 <strcmp>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <HT_searchKey+0x56>
            // then return the current item value
            return currentNode->item->value;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	e007      	b.n	80069fc <HT_searchKey+0x66>
        }
        currentNode = currentNode->next;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	60fb      	str	r3, [r7, #12]
    while(currentNode)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1eb      	bne.n	80069d0 <HT_searchKey+0x3a>
    }
    // No matching key
    return -1;
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <linkedlist_allocate>:

HT_LinkedList* linkedlist_allocate()
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
    return (HT_LinkedList*)HT_malloc(sizeof(HT_LinkedList));
 8006a08:	4b03      	ldr	r3, [pc, #12]	@ (8006a18 <linkedlist_allocate+0x14>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2008      	movs	r0, #8
 8006a0e:	4798      	blx	r3
 8006a10:	4603      	mov	r3, r0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000a6c 	.word	0x20000a6c

08006a1c <linkedlist_insert>:

void linkedlist_insert(HT_LinkedList* head, HT_Item* item)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
    HT_LinkedList* currentNode = head;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60fb      	str	r3, [r7, #12]
    while(currentNode->next)
 8006a2a:	e002      	b.n	8006a32 <linkedlist_insert+0x16>
    {
    	currentNode = currentNode->next;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
    while(currentNode->next)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f8      	bne.n	8006a2c <linkedlist_insert+0x10>
    }
    HT_LinkedList* tempNode = linkedlist_allocate();
 8006a3a:	f7ff ffe3 	bl	8006a04 <linkedlist_allocate>
 8006a3e:	60b8      	str	r0, [r7, #8]
    tempNode->item = item;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	601a      	str	r2, [r3, #0]
    tempNode->next = NULL;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]
    currentNode->next = tempNode;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	605a      	str	r2, [r3, #4]
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <ht_hashFunction>:
        HT_free(temp);
    }
}

uint32_t ht_hashFunction(Hash_Table* table, char* key)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
    uint32_t index = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
    
    for(int i = 0; key[i]; i++)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	e00a      	b.n	8006a84 <ht_hashFunction+0x2a>
    {
        index += key[i];
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	4413      	add	r3, r2
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
    for(int i = 0; key[i]; i++)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	4413      	add	r3, r2
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ee      	bne.n	8006a6e <ht_hashFunction+0x14>
    }
    return index % table->size;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	461a      	mov	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a9c:	fb01 f202 	mul.w	r2, r1, r2
 8006aa0:	1a9b      	subs	r3, r3, r2
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <createAX25SendFrame>:
uint32_t d_taps[32];
uint32_t d_tap_count;


ax25sendframe_t* createAX25SendFrame(const char* destCallsign, uint8_t destSSID, const char* srcCallsign, uint8_t srcSSID, uint8_t control, uint8_t protocolID, uint8_t* info, uint16_t infoLen, uint16_t preLen)
{
 8006aae:	b590      	push	{r4, r7, lr}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	460b      	mov	r3, r1
 8006abc:	72fb      	strb	r3, [r7, #11]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	72bb      	strb	r3, [r7, #10]
  ax25sendframe_t* ax25frame = (ax25sendframe_t*)malloc(sizeof(ax25sendframe_t));
 8006ac2:	2020      	movs	r0, #32
 8006ac4:	f002 ff3a 	bl	800993c <malloc>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	617b      	str	r3, [r7, #20]

  // destination callsign/SSID
  memcpy(ax25frame->destCallsign, destCallsign, strlen(destCallsign));
 8006acc:	697c      	ldr	r4, [r7, #20]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7f9 fbee 	bl	80002b0 <strlen>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68f9      	ldr	r1, [r7, #12]
 8006ada:	4620      	mov	r0, r4
 8006adc:	f004 f9bb 	bl	800ae56 <memcpy>
  ax25frame->destCallsign[strlen(destCallsign)] = '\0';
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7f9 fbe5 	bl	80002b0 <strlen>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2100      	movs	r1, #0
 8006aec:	5499      	strb	r1, [r3, r2]
  ax25frame->destSSID = destSSID;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	7afa      	ldrb	r2, [r7, #11]
 8006af2:	71da      	strb	r2, [r3, #7]

  // source callsign/SSID
  memcpy(ax25frame->srcCallsign, srcCallsign, strlen(srcCallsign));
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f103 0408 	add.w	r4, r3, #8
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7f9 fbd8 	bl	80002b0 <strlen>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4620      	mov	r0, r4
 8006b08:	f004 f9a5 	bl	800ae56 <memcpy>
  ax25frame->srcCallsign[strlen(srcCallsign)] = '\0';
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7f9 fbcf 	bl	80002b0 <strlen>
 8006b12:	4602      	mov	r2, r0
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4413      	add	r3, r2
 8006b18:	2200      	movs	r2, #0
 8006b1a:	721a      	strb	r2, [r3, #8]
  ax25frame->srcSSID = srcSSID;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	7aba      	ldrb	r2, [r7, #10]
 8006b20:	73da      	strb	r2, [r3, #15]

  // control field
  ax25frame->control = control;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006b28:	741a      	strb	r2, [r3, #16]

  // sequence numbers
  ax25frame->rcvSeqNumber = 0;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	751a      	strb	r2, [r3, #20]
  ax25frame->sendSeqNumber = 0;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	82da      	strh	r2, [r3, #22]

  // PID field
  ax25frame->protocolID = protocolID;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006b3c:	745a      	strb	r2, [r3, #17]

  // info field
  ax25frame->infoLen = infoLen;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b42:	825a      	strh	r2, [r3, #18]
  if(infoLen > 0) 
 8006b44:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <createAX25SendFrame+0xba>
  {
      ax25frame->info = (uint8_t*)malloc(infoLen*sizeof(uint8_t));
 8006b4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f002 fef5 	bl	800993c <malloc>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	619a      	str	r2, [r3, #24]
      memcpy(ax25frame->info, info, infoLen);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b62:	4618      	mov	r0, r3
 8006b64:	f004 f977 	bl	800ae56 <memcpy>
  }

  // save preamble length
  ax25frame->preambleLen = preLen;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8006b6c:	839a      	strh	r2, [r3, #28]

  return ax25frame;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <createAX25ReceiveFrame>:

ax25receiveframe_t* createAX25ReceiveFrame(const char* destCallsign, uint8_t destSSID, const char* srcCallsign, uint8_t srcSSID, uint8_t control, uint8_t protocolID,  uint16_t preLen)
{
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	461a      	mov	r2, r3
 8006b84:	460b      	mov	r3, r1
 8006b86:	72fb      	strb	r3, [r7, #11]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	72bb      	strb	r3, [r7, #10]
  ax25receiveframe_t* ax25frame = (ax25receiveframe_t*)malloc(sizeof(ax25receiveframe_t));
 8006b8c:	2020      	movs	r0, #32
 8006b8e:	f002 fed5 	bl	800993c <malloc>
 8006b92:	4603      	mov	r3, r0
 8006b94:	617b      	str	r3, [r7, #20]

  // destination callsign/SSID
  memcpy(ax25frame->destCallsign, destCallsign, strlen(destCallsign));
 8006b96:	697c      	ldr	r4, [r7, #20]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7f9 fb89 	bl	80002b0 <strlen>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f004 f956 	bl	800ae56 <memcpy>
  ax25frame->destCallsign[strlen(destCallsign)] = '\0';
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7f9 fb80 	bl	80002b0 <strlen>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	5499      	strb	r1, [r3, r2]
  ax25frame->destSSID = destSSID;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	7afa      	ldrb	r2, [r7, #11]
 8006bbc:	71da      	strb	r2, [r3, #7]

  // source callsign/SSID
  memcpy(ax25frame->srcCallsign, srcCallsign, strlen(srcCallsign));
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f103 0408 	add.w	r4, r3, #8
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7f9 fb73 	bl	80002b0 <strlen>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f004 f940 	bl	800ae56 <memcpy>
  ax25frame->srcCallsign[strlen(srcCallsign)] = '\0';
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7f9 fb6a 	bl	80002b0 <strlen>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	2200      	movs	r2, #0
 8006be4:	721a      	strb	r2, [r3, #8]
  ax25frame->srcSSID = srcSSID;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	7aba      	ldrb	r2, [r7, #10]
 8006bea:	73da      	strb	r2, [r3, #15]

  // control field
  ax25frame->control = control;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006bf2:	741a      	strb	r2, [r3, #16]

  // sequence numbers
  ax25frame->rcvSeqNumber = 0;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	751a      	strb	r2, [r3, #20]
  ax25frame->sendSeqNumber = 0;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	82da      	strh	r2, [r3, #22]

  // PID field
  ax25frame->protocolID = protocolID;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006c06:	745a      	strb	r2, [r3, #17]

  // save preamble length
  ax25frame->preambleLen = preLen;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006c0c:	839a      	strh	r2, [r3, #28]

  return ax25frame;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd90      	pop	{r4, r7, pc}

08006c18 <AX25Frame_HDLC_Generator>:
  ax25frame->crc.refIn = false;
  ax25frame->crc.refOut = false;
}

uint16_t AX25Frame_HDLC_Generator(ax25frame_t* ax25frame, uint8_t** pStuffedFrame, uint16_t* stuffedFrameLen)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b094      	sub	sp, #80	@ 0x50
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  // check destination callsign length (6 characters max)
  if(strlen(ax25frame->ax25SendFrame->destCallsign) > RADIOLIB_AX25_MAX_CALLSIGN_LEN) {
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7f9 fb41 	bl	80002b0 <strlen>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d902      	bls.n	8006c3a <AX25Frame_HDLC_Generator+0x22>
      return(RADIOLIB_ERR_INVALID_CALLSIGN);
 8006c34:	f64f 43df 	movw	r3, #64735	@ 0xfcdf
 8006c38:	e25b      	b.n	80070f2 <AX25Frame_HDLC_Generator+0x4da>
  }

  // calculate frame length without FCS (destination address, source address, repeater addresses, control, PID, info)
  size_t frameBuffLen = (2*(RADIOLIB_AX25_MAX_CALLSIGN_LEN + 1)) + 1 + 1 + ax25frame->ax25SendFrame->infoLen;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	8a5b      	ldrh	r3, [r3, #18]
 8006c40:	3310      	adds	r3, #16
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
  // create frame buffer without preamble, start or stop flags
  uint8_t* frameBuff = (uint8_t*)malloc((frameBuffLen + 2)*sizeof(uint8_t));
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	3302      	adds	r3, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f002 fe77 	bl	800993c <malloc>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	623b      	str	r3, [r7, #32]
  uint8_t* frameBuffPtr = frameBuff;
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  // set destination callsign - all address field bytes are shifted by one bit to make room for HDLC address extension bit
  memset(frameBuffPtr, ' ' << 1, RADIOLIB_AX25_MAX_CALLSIGN_LEN);
 8006c56:	2206      	movs	r2, #6
 8006c58:	2140      	movs	r1, #64	@ 0x40
 8006c5a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006c5c:	f004 f850 	bl	800ad00 <memset>
  for(size_t i = 0; i < strlen(ax25frame->ax25SendFrame->destCallsign); i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c64:	e00d      	b.n	8006c82 <AX25Frame_HDLC_Generator+0x6a>
  {
      *(frameBuffPtr + i) = ax25frame->ax25SendFrame->destCallsign[i] << 1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c6c:	4413      	add	r3, r2
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c74:	440b      	add	r3, r1
 8006c76:	0052      	lsls	r2, r2, #1
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]
  for(size_t i = 0; i < strlen(ax25frame->ax25SendFrame->destCallsign); i++)
 8006c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c7e:	3301      	adds	r3, #1
 8006c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7f9 fb12 	bl	80002b0 <strlen>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d3e8      	bcc.n	8006c66 <AX25Frame_HDLC_Generator+0x4e>
  }
  frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 8006c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c96:	3306      	adds	r3, #6
 8006c98:	64fb      	str	r3, [r7, #76]	@ 0x4c

  // set destination SSID
  *(frameBuffPtr++) = RADIOLIB_AX25_SSID_RESPONSE_DEST | RADIOLIB_AX25_SSID_RESERVED_BITS | (ax25frame->ax25SendFrame->destSSID & 0x0F) << 1 | RADIOLIB_AX25_SSID_HDLC_EXTENSION_CONTINUE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	79db      	ldrb	r3, [r3, #7]
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	b25b      	sxtb	r3, r3
 8006ca4:	f003 031e 	and.w	r3, r3, #30
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006cae:	b259      	sxtb	r1, r3
 8006cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006cb6:	b2ca      	uxtb	r2, r1
 8006cb8:	701a      	strb	r2, [r3, #0]

  // set source callsign - all address field bytes are shifted by one bit to make room for HDLC address extension bit
  memset(frameBuffPtr, ' ' << 1, RADIOLIB_AX25_MAX_CALLSIGN_LEN);
 8006cba:	2206      	movs	r2, #6
 8006cbc:	2140      	movs	r1, #64	@ 0x40
 8006cbe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006cc0:	f004 f81e 	bl	800ad00 <memset>
  for(size_t i = 0; i < strlen(ax25frame->ax25SendFrame->srcCallsign); i++)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cc8:	e00e      	b.n	8006ce8 <AX25Frame_HDLC_Generator+0xd0>
  {
      *(frameBuffPtr + i) = ax25frame->ax25SendFrame->srcCallsign[i] << 1;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cda:	440b      	add	r3, r1
 8006cdc:	0052      	lsls	r2, r2, #1
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
  for(size_t i = 0; i < strlen(ax25frame->ax25SendFrame->srcCallsign); i++)
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7f9 fade 	bl	80002b0 <strlen>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d3e6      	bcc.n	8006cca <AX25Frame_HDLC_Generator+0xb2>
  }
  frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 8006cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cfe:	3306      	adds	r3, #6
 8006d00:	64fb      	str	r3, [r7, #76]	@ 0x4c

  // set source SSID
  *(frameBuffPtr++) = RADIOLIB_AX25_SSID_COMMAND_SOURCE | RADIOLIB_AX25_SSID_RESERVED_BITS | (ax25frame->ax25SendFrame->srcSSID & 0x0F) << 1 | RADIOLIB_AX25_SSID_HDLC_EXTENSION_CONTINUE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	7bdb      	ldrb	r3, [r3, #15]
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	f003 031e 	and.w	r3, r3, #30
 8006d10:	b25b      	sxtb	r3, r3
 8006d12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d16:	b259      	sxtb	r1, r3
 8006d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d1e:	b2ca      	uxtb	r2, r1
 8006d20:	701a      	strb	r2, [r3, #0]

  // set HDLC extension end bit
  *(frameBuffPtr - 1) |= RADIOLIB_AX25_SSID_HDLC_EXTENSION_END;
 8006d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d24:	3b01      	subs	r3, #1
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]

  // set sequence numbers of the frames that have it
  uint8_t controlField = ax25frame->ax25SendFrame->control;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	7c1b      	ldrb	r3, [r3, #16]
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  if((ax25frame->ax25SendFrame->control & 0x01) == 0) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	7c1b      	ldrb	r3, [r3, #16]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d116      	bne.n	8006d7a <AX25Frame_HDLC_Generator+0x162>
      // information frame, set both sequence numbers
      controlField |= ax25frame->ax25SendFrame->rcvSeqNumber << 5;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	7d1b      	ldrb	r3, [r3, #20]
 8006d52:	015b      	lsls	r3, r3, #5
 8006d54:	b25a      	sxtb	r2, r3
 8006d56:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
      controlField |= ax25frame->ax25SendFrame->sendSeqNumber << 1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	8adb      	ldrh	r3, [r3, #22]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	b25a      	sxtb	r2, r3
 8006d6c:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d78:	e011      	b.n	8006d9e <AX25Frame_HDLC_Generator+0x186>
  } else if((ax25frame->ax25SendFrame->control & 0x02) == 0) {
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	7c1b      	ldrb	r3, [r3, #16]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <AX25Frame_HDLC_Generator+0x186>
      // supervisory frame, set only receive sequence number
      controlField |= ax25frame->ax25SendFrame->rcvSeqNumber << 5;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	7d1b      	ldrb	r3, [r3, #20]
 8006d8e:	015b      	lsls	r3, r3, #5
 8006d90:	b25a      	sxtb	r2, r3
 8006d92:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b25b      	sxtb	r3, r3
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  }

  // set control field
  *(frameBuffPtr++) = controlField;
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006da4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8006da8:	701a      	strb	r2, [r3, #0]

  // set PID field of the frames that have it
  if(ax25frame->ax25SendFrame->protocolID != 0x00) {
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	7c5b      	ldrb	r3, [r3, #17]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <AX25Frame_HDLC_Generator+0x1aa>
      *(frameBuffPtr++) = ax25frame->ax25SendFrame->protocolID;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8006dbe:	7c52      	ldrb	r2, [r2, #17]
 8006dc0:	701a      	strb	r2, [r3, #0]
  }

  // set info field of the frames that have it
  if(ax25frame->ax25SendFrame->infoLen > 0) {
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	8a5b      	ldrh	r3, [r3, #18]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <AX25Frame_HDLC_Generator+0x1d6>
      memcpy(frameBuffPtr, ax25frame->ax25SendFrame->info, ax25frame->ax25SendFrame->infoLen);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6999      	ldr	r1, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	8a5b      	ldrh	r3, [r3, #18]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ddc:	f004 f83b 	bl	800ae56 <memcpy>
      frameBuffPtr += ax25frame->ax25SendFrame->infoLen;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	8a5b      	ldrh	r3, [r3, #18]
 8006de6:	461a      	mov	r2, r3
 8006de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dea:	4413      	add	r3, r2
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // flip bit order
  for(size_t i = 0; i < frameBuffLen; i++) 
 8006dee:	2300      	movs	r3, #0
 8006df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df2:	e010      	b.n	8006e16 <AX25Frame_HDLC_Generator+0x1fe>
  {
      frameBuff[i] = reflect(frameBuff[i], 8);
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df8:	4413      	add	r3, r2
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2108      	movs	r1, #8
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fb72 	bl	80074e8 <reflect>
 8006e04:	4601      	mov	r1, r0
 8006e06:	6a3a      	ldr	r2, [r7, #32]
 8006e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	b2ca      	uxtb	r2, r1
 8006e0e:	701a      	strb	r2, [r3, #0]
  for(size_t i = 0; i < frameBuffLen; i++) 
 8006e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e12:	3301      	adds	r3, #1
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d3ea      	bcc.n	8006df4 <AX25Frame_HDLC_Generator+0x1dc>
  }

  ax25frame->crc.size = 16;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2210      	movs	r2, #16
 8006e22:	721a      	strb	r2, [r3, #8]
  ax25frame->crc.poly = RADIOLIB_CRC_CCITT_POLY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f241 0221 	movw	r2, #4129	@ 0x1021
 8006e2a:	60da      	str	r2, [r3, #12]
  ax25frame->crc.init = RADIOLIB_CRC_CCITT_INIT;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e32:	611a      	str	r2, [r3, #16]
  ax25frame->crc.out = RADIOLIB_CRC_CCITT_OUT;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e3a:	615a      	str	r2, [r3, #20]
  ax25frame->crc.refIn = false;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	761a      	strb	r2, [r3, #24]
  ax25frame->crc.refOut = false;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	765a      	strb	r2, [r3, #25]

  uint16_t fcs = checksum(ax25frame, frameBuff, frameBuffLen);
 8006e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4a:	6a39      	ldr	r1, [r7, #32]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fb74 	bl	800753a <checksum>
 8006e52:	4603      	mov	r3, r0
 8006e54:	83fb      	strh	r3, [r7, #30]
  *(frameBuffPtr++) = (uint8_t)((fcs >> 8) & 0xFF);
 8006e56:	8bfb      	ldrh	r3, [r7, #30]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	b299      	uxth	r1, r3
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e62:	b2ca      	uxtb	r2, r1
 8006e64:	701a      	strb	r2, [r3, #0]
  *(frameBuffPtr++) = (uint8_t)(fcs & 0xFF);
 8006e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e6c:	8bfa      	ldrh	r2, [r7, #30]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

  printf("AX.25 frame\r\n");
 8006e72:	48a2      	ldr	r0, [pc, #648]	@ (80070fc <AX25Frame_HDLC_Generator+0x4e4>)
 8006e74:	f003 fe44 	bl	800ab00 <puts>
	printf("packet: ");
 8006e78:	48a1      	ldr	r0, [pc, #644]	@ (8007100 <AX25Frame_HDLC_Generator+0x4e8>)
 8006e7a:	f003 fdd1 	bl	800aa20 <iprintf>
	for(int i = 0; i <  frameBuffLen + 2; i++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e82:	e00a      	b.n	8006e9a <AX25Frame_HDLC_Generator+0x282>
		printf("0x%02x ", frameBuff[i]);
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	4413      	add	r3, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	489d      	ldr	r0, [pc, #628]	@ (8007104 <AX25Frame_HDLC_Generator+0x4ec>)
 8006e90:	f003 fdc6 	bl	800aa20 <iprintf>
	for(int i = 0; i <  frameBuffLen + 2; i++)
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	3301      	adds	r3, #1
 8006e98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	1c9a      	adds	r2, r3, #2
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d8ef      	bhi.n	8006e84 <AX25Frame_HDLC_Generator+0x26c>
	printf("\r\n");
 8006ea4:	4898      	ldr	r0, [pc, #608]	@ (8007108 <AX25Frame_HDLC_Generator+0x4f0>)
 8006ea6:	f003 fe2b 	bl	800ab00 <puts>

  // prepare buffer for the final frame (stuffed, with added preamble + flags and NRZI-encoded)
  // worst-case scenario: sequence of 1s, will have 120% of the original length, stuffed frame also includes both flags
  uint8_t* stuffedFrameBuff = (uint8_t*)malloc((ax25frame->ax25SendFrame->preambleLen + 1 + (6*frameBuffLen)/5 + 2)*sizeof(uint8_t));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	8b9b      	ldrh	r3, [r3, #28]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	4413      	add	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4b93      	ldr	r3, [pc, #588]	@ (800710c <AX25Frame_HDLC_Generator+0x4f4>)
 8006ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec4:	089b      	lsrs	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3303      	adds	r3, #3
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f002 fd36 	bl	800993c <malloc>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	61bb      	str	r3, [r7, #24]

  // initialize buffer to all zeros
  memset(stuffedFrameBuff, 0x00, ax25frame->ax25SendFrame->preambleLen + 1 + (6*frameBuffLen)/5 + 2);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	8b9b      	ldrh	r3, [r3, #28]
 8006eda:	4619      	mov	r1, r3
 8006edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ede:	4613      	mov	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4b88      	ldr	r3, [pc, #544]	@ (800710c <AX25Frame_HDLC_Generator+0x4f4>)
 8006eea:	fba3 2302 	umull	r2, r3, r3, r2
 8006eee:	089b      	lsrs	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	3303      	adds	r3, #3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	69b8      	ldr	r0, [r7, #24]
 8006efa:	f003 ff01 	bl	800ad00 <memset>

  // stuff bits (skip preamble and both flags)
  uint16_t stuffedFrameBuffLenBits = 8*(ax25frame->ax25SendFrame->preambleLen + 1);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	8b9b      	ldrh	r3, [r3, #28]
 8006f04:	3301      	adds	r3, #1
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t count = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  for(size_t i = 0; i < frameBuffLen + 2; i++) 
 8006f12:	2300      	movs	r3, #0
 8006f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f16:	e094      	b.n	8007042 <AX25Frame_HDLC_Generator+0x42a>
  {
    for(int8_t shift = 7; shift >= 0; shift--) 
 8006f18:	2307      	movs	r3, #7
 8006f1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006f1e:	e088      	b.n	8007032 <AX25Frame_HDLC_Generator+0x41a>
    {
      // for example, if preambleLen == 8, then stuffedFrameBuffPos -> [79 ~ 72] [87 ~ 80] [95 ~ 88] ...
      uint16_t stuffedFrameBuffPos = stuffedFrameBuffLenBits + 7 - 2*(stuffedFrameBuffLenBits%8);
 8006f20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3307      	adds	r3, #7
 8006f34:	82bb      	strh	r3, [r7, #20]
      if((frameBuff[i] >> shift) & 0x01) 
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	4413      	add	r3, r2
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006f44:	fa42 f303 	asr.w	r3, r2, r3
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d04b      	beq.n	8006fe8 <AX25Frame_HDLC_Generator+0x3d0>
      {
        // copy 1 and increment counter
        SET_BIT_IN_ARRAY(stuffedFrameBuff, stuffedFrameBuffPos);
 8006f50:	8abb      	ldrh	r3, [r7, #20]
 8006f52:	08db      	lsrs	r3, r3, #3
 8006f54:	b298      	uxth	r0, r3
 8006f56:	4602      	mov	r2, r0
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b25a      	sxtb	r2, r3
 8006f60:	8abb      	ldrh	r3, [r7, #20]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2101      	movs	r1, #1
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	b25b      	sxtb	r3, r3
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	b25a      	sxtb	r2, r3
 8006f72:	4601      	mov	r1, r0
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	440b      	add	r3, r1
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
        stuffedFrameBuffLenBits++;
 8006f7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f7e:	3301      	adds	r3, #1
 8006f80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        count++;
 8006f82:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006f86:	3301      	adds	r3, #1
 8006f88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        // check 5 consecutive 1s
        if(count == 5) 
 8006f8c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006f90:	2b05      	cmp	r3, #5
 8006f92:	d147      	bne.n	8007024 <AX25Frame_HDLC_Generator+0x40c>
        {
          // get the new position in stuffed frame
          stuffedFrameBuffPos = stuffedFrameBuffLenBits + 7 - 2*(stuffedFrameBuffLenBits%8);
 8006f94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3307      	adds	r3, #7
 8006fa8:	82bb      	strh	r3, [r7, #20]

          // insert 0 and reset counter
          CLEAR_BIT_IN_ARRAY(stuffedFrameBuff, stuffedFrameBuffPos);
 8006faa:	8abb      	ldrh	r3, [r7, #20]
 8006fac:	08db      	lsrs	r3, r3, #3
 8006fae:	b298      	uxth	r0, r3
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b25a      	sxtb	r2, r3
 8006fba:	8abb      	ldrh	r3, [r7, #20]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc6:	b25b      	sxtb	r3, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	b25b      	sxtb	r3, r3
 8006fcc:	4013      	ands	r3, r2
 8006fce:	b25a      	sxtb	r2, r3
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	440b      	add	r3, r1
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
          stuffedFrameBuffLenBits++;
 8006fda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fdc:	3301      	adds	r3, #1
 8006fde:	86fb      	strh	r3, [r7, #54]	@ 0x36
          count = 0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8006fe6:	e01d      	b.n	8007024 <AX25Frame_HDLC_Generator+0x40c>
        }
      } 
      else
      {
        // copy 0 and reset counter
        CLEAR_BIT_IN_ARRAY(stuffedFrameBuff, stuffedFrameBuffPos);
 8006fe8:	8abb      	ldrh	r3, [r7, #20]
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	b298      	uxth	r0, r3
 8006fee:	4602      	mov	r2, r0
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b25a      	sxtb	r2, r3
 8006ff8:	8abb      	ldrh	r3, [r7, #20]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2101      	movs	r1, #1
 8007000:	fa01 f303 	lsl.w	r3, r1, r3
 8007004:	b25b      	sxtb	r3, r3
 8007006:	43db      	mvns	r3, r3
 8007008:	b25b      	sxtb	r3, r3
 800700a:	4013      	ands	r3, r2
 800700c:	b25a      	sxtb	r2, r3
 800700e:	4601      	mov	r1, r0
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	440b      	add	r3, r1
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
        stuffedFrameBuffLenBits++;
 8007018:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800701a:	3301      	adds	r3, #1
 800701c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        count = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    for(int8_t shift = 7; shift >= 0; shift--) 
 8007024:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007028:	b2db      	uxtb	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007032:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007036:	2b00      	cmp	r3, #0
 8007038:	f6bf af72 	bge.w	8006f20 <AX25Frame_HDLC_Generator+0x308>
  for(size_t i = 0; i < frameBuffLen + 2; i++) 
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	3301      	adds	r3, #1
 8007040:	633b      	str	r3, [r7, #48]	@ 0x30
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	3302      	adds	r3, #2
 8007046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007048:	429a      	cmp	r2, r3
 800704a:	f4ff af65 	bcc.w	8006f18 <AX25Frame_HDLC_Generator+0x300>
      }
    }
  }

    // deallocate memory
    free(frameBuff);
 800704e:	6a38      	ldr	r0, [r7, #32]
 8007050:	f002 fc7c 	bl	800994c <free>

    // set preamble bytes and start flag field
    for(uint16_t i = 0; i < ax25frame->ax25SendFrame->preambleLen + 1; i++)
 8007054:	2300      	movs	r3, #0
 8007056:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007058:	e007      	b.n	800706a <AX25Frame_HDLC_Generator+0x452>
        stuffedFrameBuff[i] = RADIOLIB_AX25_FLAG;
 800705a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	4413      	add	r3, r2
 8007060:	227e      	movs	r2, #126	@ 0x7e
 8007062:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < ax25frame->ax25SendFrame->preambleLen + 1; i++)
 8007064:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007066:	3301      	adds	r3, #1
 8007068:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	8b9b      	ldrh	r3, [r3, #28]
 8007070:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007072:	429a      	cmp	r2, r3
 8007074:	d9f1      	bls.n	800705a <AX25Frame_HDLC_Generator+0x442>

    // get stuffed frame length in bytes
    size_t stuffedFrameBuffLen = stuffedFrameBuffLenBits/8 + 1;
 8007076:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007078:	08db      	lsrs	r3, r3, #3
 800707a:	b29b      	uxth	r3, r3
 800707c:	3301      	adds	r3, #1
 800707e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t trailingLen = stuffedFrameBuffLenBits % 8;
 8007080:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007082:	b2db      	uxtb	r3, r3
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	75fb      	strb	r3, [r7, #23]

    // set end flag field (may be split into two bytes due to misalignment caused by extra stuffing bits)
    if(trailingLen != 0) 
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d022      	beq.n	80070d6 <AX25Frame_HDLC_Generator+0x4be>
    {
        stuffedFrameBuffLen++;
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	3301      	adds	r3, #1
 8007094:	62bb      	str	r3, [r7, #40]	@ 0x28
        stuffedFrameBuff[stuffedFrameBuffLen - 2] |= RADIOLIB_AX25_FLAG >> trailingLen;
 8007096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007098:	3b02      	subs	r3, #2
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	4413      	add	r3, r2
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b25a      	sxtb	r2, r3
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	217e      	movs	r1, #126	@ 0x7e
 80070a6:	fa41 f303 	asr.w	r3, r1, r3
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b259      	sxtb	r1, r3
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	3b02      	subs	r3, #2
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4413      	add	r3, r2
 80070b8:	b2ca      	uxtb	r2, r1
 80070ba:	701a      	strb	r2, [r3, #0]
        stuffedFrameBuff[stuffedFrameBuffLen - 1] = RADIOLIB_AX25_FLAG << (8 - trailingLen);
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	f1c3 0308 	rsb	r3, r3, #8
 80070c2:	227e      	movs	r2, #126	@ 0x7e
 80070c4:	fa02 f103 	lsl.w	r1, r2, r3
 80070c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ca:	3b01      	subs	r3, #1
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4413      	add	r3, r2
 80070d0:	b2ca      	uxtb	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	e005      	b.n	80070e2 <AX25Frame_HDLC_Generator+0x4ca>
    } 
    else 
    {
        stuffedFrameBuff[stuffedFrameBuffLen - 1] = RADIOLIB_AX25_FLAG;
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	3b01      	subs	r3, #1
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	4413      	add	r3, r2
 80070de:	227e      	movs	r2, #126	@ 0x7e
 80070e0:	701a      	strb	r2, [r3, #0]
    }

    *stuffedFrameLen = stuffedFrameBuffLen;
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	801a      	strh	r2, [r3, #0]
    *pStuffedFrame = stuffedFrameBuff;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	601a      	str	r2, [r3, #0]
    return RADIOLIB_ERR_NONE;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3750      	adds	r7, #80	@ 0x50
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	0800f3c0 	.word	0x0800f3c0
 8007100:	0800f3d0 	.word	0x0800f3d0
 8007104:	0800f3dc 	.word	0x0800f3dc
 8007108:	0800f3e4 	.word	0x0800f3e4
 800710c:	cccccccd 	.word	0xcccccccd

08007110 <AX25Frame_HDLC_Parser>:

uint16_t AX25Frame_HDLC_Parser(ax25frame_t* ax25frame , uint8_t* stuffedFrame, uint16_t stuffedFrameLen)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b094      	sub	sp, #80	@ 0x50
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  // prepare the true length of AX.25 frame
  size_t ax25frameBuffLen = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // calculate the unstuff bytes length without preamble and front flag 
  size_t frameBuffLen = stuffedFrameLen - ax25frame->ax25RcvFrame->preambleLen - 1;
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	6852      	ldr	r2, [r2, #4]
 8007128:	8b92      	ldrh	r2, [r2, #28]
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	3b01      	subs	r3, #1
 800712e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // prepare buffer for the unstuffed frame (only AX.25 frame)
  uint8_t* frameBuff = (uint8_t*)malloc(frameBuffLen * sizeof(uint8_t));
 8007130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007132:	f002 fc03 	bl	800993c <malloc>
 8007136:	4603      	mov	r3, r0
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  // initialize buffer to all zeros
  memset(frameBuff, '\0', frameBuffLen);
 800713a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800713c:	2100      	movs	r1, #0
 800713e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007140:	f003 fdde 	bl	800ad00 <memset>

  // stuff bits (skip preamble and front flag)
  uint16_t stuffedFrameBuffLenBits = 8*(ax25frame->ax25RcvFrame->preambleLen + 1);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	8b9b      	ldrh	r3, [r3, #28]
 800714a:	3301      	adds	r3, #1
 800714c:	b29b      	uxth	r3, r3
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

  uint8_t count = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  for(size_t i = 0; i < frameBuffLen * 8; i++)
 800715a:	2300      	movs	r3, #0
 800715c:	647b      	str	r3, [r7, #68]	@ 0x44
 800715e:	e0a2      	b.n	80072a6 <AX25Frame_HDLC_Parser+0x196>
  {
    uint16_t stuffedFrameBuffPos = stuffedFrameBuffLenBits + 7 - 2*(stuffedFrameBuffLenBits%8);
 8007160:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	b29b      	uxth	r3, r3
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	b29b      	uxth	r3, r3
 800716e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	b29b      	uxth	r3, r3
 8007176:	3307      	adds	r3, #7
 8007178:	84fb      	strh	r3, [r7, #38]	@ 0x26
    // check if HDLC frame in certain position is 1
    if(GET_BIT_IN_ARRAY(stuffedFrame, stuffedFrameBuffPos))
 800717a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	fa42 f303 	asr.w	r3, r2, r3
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d057      	beq.n	800724e <AX25Frame_HDLC_Parser+0x13e>
    {
      SET_BIT_IN_ARRAY(frameBuff, (i + 7 - 2*(i%8)));
 800719e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	3307      	adds	r3, #7
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071b0:	441a      	add	r2, r3
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	b251      	sxtb	r1, r2
 80071b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071b8:	f002 0207 	and.w	r2, r2, #7
 80071bc:	0052      	lsls	r2, r2, #1
 80071be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80071c0:	1a82      	subs	r2, r0, r2
 80071c2:	3207      	adds	r2, #7
 80071c4:	f002 0207 	and.w	r2, r2, #7
 80071c8:	2001      	movs	r0, #1
 80071ca:	fa00 f202 	lsl.w	r2, r0, r2
 80071ce:	b252      	sxtb	r2, r2
 80071d0:	430a      	orrs	r2, r1
 80071d2:	b251      	sxtb	r1, r2
 80071d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071d6:	4413      	add	r3, r2
 80071d8:	b2ca      	uxtb	r2, r1
 80071da:	701a      	strb	r2, [r3, #0]
      stuffedFrameBuffLenBits++;
 80071dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      count++;
 80071e6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80071ea:	3301      	adds	r3, #1
 80071ec:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

      // check 5 consecutive 1s
      if(count == 5) 
 80071f0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d153      	bne.n	80072a0 <AX25Frame_HDLC_Parser+0x190>
      {
        // get the new position in stuffed frame
        stuffedFrameBuffPos = stuffedFrameBuffLenBits + 7 - 2*(stuffedFrameBuffLenBits%8);
 80071f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	b29b      	uxth	r3, r3
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	b29b      	uxth	r3, r3
 8007206:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	b29b      	uxth	r3, r3
 800720e:	3307      	adds	r3, #7
 8007210:	84fb      	strh	r3, [r7, #38]	@ 0x26

        // check if HDLC frame in certain position is 0
        if(!GET_BIT_IN_ARRAY(stuffedFrame, stuffedFrameBuffPos))
 8007212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007214:	08db      	lsrs	r3, r3, #3
 8007216:	b29b      	uxth	r3, r3
 8007218:	461a      	mov	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4413      	add	r3, r2
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	fa42 f303 	asr.w	r3, r2, r3
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d108      	bne.n	8007246 <AX25Frame_HDLC_Parser+0x136>
        {
          stuffedFrameBuffLenBits++;
 8007234:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007238:	3301      	adds	r3, #1
 800723a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        {
          ax25frameBuffLen = i/8;
          break;
        }
          
        count = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8007244:	e02c      	b.n	80072a0 <AX25Frame_HDLC_Parser+0x190>
          ax25frameBuffLen = i/8;
 8007246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          break;
 800724c:	e031      	b.n	80072b2 <AX25Frame_HDLC_Parser+0x1a2>
      }
    } 
    else 
    {
      // copy 0 and reset counter
      CLEAR_BIT_IN_ARRAY(frameBuff, (i + 7 - 2*(i%8)));
 800724e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	3307      	adds	r3, #7
 800725c:	08db      	lsrs	r3, r3, #3
 800725e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007260:	441a      	add	r2, r3
 8007262:	7812      	ldrb	r2, [r2, #0]
 8007264:	b251      	sxtb	r1, r2
 8007266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007268:	f002 0207 	and.w	r2, r2, #7
 800726c:	0052      	lsls	r2, r2, #1
 800726e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007270:	1a82      	subs	r2, r0, r2
 8007272:	3207      	adds	r2, #7
 8007274:	f002 0207 	and.w	r2, r2, #7
 8007278:	2001      	movs	r0, #1
 800727a:	fa00 f202 	lsl.w	r2, r0, r2
 800727e:	b252      	sxtb	r2, r2
 8007280:	43d2      	mvns	r2, r2
 8007282:	b252      	sxtb	r2, r2
 8007284:	400a      	ands	r2, r1
 8007286:	b251      	sxtb	r1, r2
 8007288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800728a:	4413      	add	r3, r2
 800728c:	b2ca      	uxtb	r2, r1
 800728e:	701a      	strb	r2, [r3, #0]
      stuffedFrameBuffLenBits++;
 8007290:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007294:	3301      	adds	r3, #1
 8007296:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      count = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  for(size_t i = 0; i < frameBuffLen * 8; i++)
 80072a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072a2:	3301      	adds	r3, #1
 80072a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ac:	429a      	cmp	r2, r3
 80072ae:	f4ff af57 	bcc.w	8007160 <AX25Frame_HDLC_Parser+0x50>
    }
  }

  // Reallocate the AX.25 frame size
  uint8_t* ax25frameBuff = (uint8_t*)malloc(ax25frameBuffLen * sizeof(uint8_t));
 80072b2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80072b4:	f002 fb42 	bl	800993c <malloc>
 80072b8:	4603      	mov	r3, r0
 80072ba:	623b      	str	r3, [r7, #32]
  memcpy(ax25frameBuff, frameBuff, ax25frameBuffLen);
 80072bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072c0:	6a38      	ldr	r0, [r7, #32]
 80072c2:	f003 fdc8 	bl	800ae56 <memcpy>
  free(frameBuff);
 80072c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c8:	f002 fb40 	bl	800994c <free>

  printf("AX.25 frame\r\n");
 80072cc:	4882      	ldr	r0, [pc, #520]	@ (80074d8 <AX25Frame_HDLC_Parser+0x3c8>)
 80072ce:	f003 fc17 	bl	800ab00 <puts>
	printf("packet: ");
 80072d2:	4882      	ldr	r0, [pc, #520]	@ (80074dc <AX25Frame_HDLC_Parser+0x3cc>)
 80072d4:	f003 fba4 	bl	800aa20 <iprintf>
	for(int i = 0; i <  ax25frameBuffLen; i++)
 80072d8:	2300      	movs	r3, #0
 80072da:	643b      	str	r3, [r7, #64]	@ 0x40
 80072dc:	e00a      	b.n	80072f4 <AX25Frame_HDLC_Parser+0x1e4>
		printf("0x%02x ", ax25frameBuff[i]);
 80072de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	4413      	add	r3, r2
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	4619      	mov	r1, r3
 80072e8:	487d      	ldr	r0, [pc, #500]	@ (80074e0 <AX25Frame_HDLC_Parser+0x3d0>)
 80072ea:	f003 fb99 	bl	800aa20 <iprintf>
	for(int i = 0; i <  ax25frameBuffLen; i++)
 80072ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f0:	3301      	adds	r3, #1
 80072f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80072f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d8f0      	bhi.n	80072de <AX25Frame_HDLC_Parser+0x1ce>
	printf("\r\n");
 80072fc:	4879      	ldr	r0, [pc, #484]	@ (80074e4 <AX25Frame_HDLC_Parser+0x3d4>)
 80072fe:	f003 fbff 	bl	800ab00 <puts>

  // verify CRC result
  uint16_t verifyFcs = checksum(ax25frame, ax25frameBuff, ax25frameBuffLen - 2);
 8007302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007304:	3b02      	subs	r3, #2
 8007306:	461a      	mov	r2, r3
 8007308:	6a39      	ldr	r1, [r7, #32]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f915 	bl	800753a <checksum>
 8007310:	4603      	mov	r3, r0
 8007312:	83fb      	strh	r3, [r7, #30]
  uint16_t rcvFcs =  (uint16_t)((ax25frameBuff[ax25frameBuffLen-2] << 8) | ax25frameBuff[ax25frameBuffLen-1]);
 8007314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007316:	3b02      	subs	r3, #2
 8007318:	6a3a      	ldr	r2, [r7, #32]
 800731a:	4413      	add	r3, r2
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	b21a      	sxth	r2, r3
 8007322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007324:	3b01      	subs	r3, #1
 8007326:	6a39      	ldr	r1, [r7, #32]
 8007328:	440b      	add	r3, r1
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b21b      	sxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	b21b      	sxth	r3, r3
 8007332:	83bb      	strh	r3, [r7, #28]
  if(verifyFcs == rcvFcs)
 8007334:	8bfa      	ldrh	r2, [r7, #30]
 8007336:	8bbb      	ldrh	r3, [r7, #28]
 8007338:	429a      	cmp	r2, r3
 800733a:	d104      	bne.n	8007346 <AX25Frame_HDLC_Parser+0x236>
    ax25frame->ax25RcvFrame->isCrcOk = true;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	779a      	strb	r2, [r3, #30]
 8007344:	e003      	b.n	800734e <AX25Frame_HDLC_Parser+0x23e>
  else
    ax25frame->ax25RcvFrame->isCrcOk = false;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	779a      	strb	r2, [r3, #30]

  // flip bit order
  for(size_t i = 0; i < ax25frameBuffLen; i++) 
 800734e:	2300      	movs	r3, #0
 8007350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007352:	e010      	b.n	8007376 <AX25Frame_HDLC_Parser+0x266>
  {
      ax25frameBuff[i] = reflect(ax25frameBuff[i], 8);
 8007354:	6a3a      	ldr	r2, [r7, #32]
 8007356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007358:	4413      	add	r3, r2
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2108      	movs	r1, #8
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f8c2 	bl	80074e8 <reflect>
 8007364:	4601      	mov	r1, r0
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736a:	4413      	add	r3, r2
 800736c:	b2ca      	uxtb	r2, r1
 800736e:	701a      	strb	r2, [r3, #0]
  for(size_t i = 0; i < ax25frameBuffLen; i++) 
 8007370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007372:	3301      	adds	r3, #1
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007376:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737a:	429a      	cmp	r2, r3
 800737c:	d3ea      	bcc.n	8007354 <AX25Frame_HDLC_Parser+0x244>
  }

  // Set pointer to easily track AX.25 frame
  uint8_t* frameBuffPtr = ax25frameBuff;
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	63bb      	str	r3, [r7, #56]	@ 0x38

  // get destination callsign - all address field bytes are shifted by one bit to make room for HDLC address extension bit
  for(size_t i = 0; i < strlen(ax25frame->ax25RcvFrame->destCallsign); i++)
 8007382:	2300      	movs	r3, #0
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
 8007386:	e00e      	b.n	80073a6 <AX25Frame_HDLC_Parser+0x296>
  {
    ax25frame->ax25RcvFrame->destCallsign[i]= *(frameBuffPtr + i) >> 1;
 8007388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800738a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738c:	4413      	add	r3, r2
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	6852      	ldr	r2, [r2, #4]
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	b2d9      	uxtb	r1, r3
 8007398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739a:	4413      	add	r3, r2
 800739c:	460a      	mov	r2, r1
 800739e:	701a      	strb	r2, [r3, #0]
  for(size_t i = 0; i < strlen(ax25frame->ax25RcvFrame->destCallsign); i++)
 80073a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a2:	3301      	adds	r3, #1
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7f8 ff80 	bl	80002b0 <strlen>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d3e7      	bcc.n	8007388 <AX25Frame_HDLC_Parser+0x278>
  }
  frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	3306      	adds	r3, #6
 80073bc:	63bb      	str	r3, [r7, #56]	@ 0x38

  // get destination SSID
  ax25frame->ax25RcvFrame->destSSID = *(frameBuffPtr++) >> 1;
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80073c4:	781a      	ldrb	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	0852      	lsrs	r2, r2, #1
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	71da      	strb	r2, [r3, #7]

  // get source callsign - all address field bytes are shifted by one bit to make room for HDLC address extension bit
  for(size_t i = 0; i < strlen(ax25frame->ax25RcvFrame->srcCallsign); i++)
 80073d0:	2300      	movs	r3, #0
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d4:	e00f      	b.n	80073f6 <AX25Frame_HDLC_Parser+0x2e6>
  {
    ax25frame->ax25RcvFrame->srcCallsign[i] = *(frameBuffPtr + i) >> 1;
 80073d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	4413      	add	r3, r2
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	6852      	ldr	r2, [r2, #4]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	b2d9      	uxtb	r1, r3
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	4413      	add	r3, r2
 80073ea:	3308      	adds	r3, #8
 80073ec:	460a      	mov	r2, r1
 80073ee:	701a      	strb	r2, [r3, #0]
  for(size_t i = 0; i < strlen(ax25frame->ax25RcvFrame->srcCallsign); i++)
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	3301      	adds	r3, #1
 80073f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	3308      	adds	r3, #8
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7f8 ff57 	bl	80002b0 <strlen>
 8007402:	4602      	mov	r2, r0
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	4293      	cmp	r3, r2
 8007408:	d3e5      	bcc.n	80073d6 <AX25Frame_HDLC_Parser+0x2c6>
  }
  frameBuffPtr += RADIOLIB_AX25_MAX_CALLSIGN_LEN;
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	3306      	adds	r3, #6
 800740e:	63bb      	str	r3, [r7, #56]	@ 0x38

  // get source SSID
  ax25frame->ax25RcvFrame->srcSSID = *(frameBuffPtr++) >> 1;
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	0852      	lsrs	r2, r2, #1
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	73da      	strb	r2, [r3, #15]

  // get sequence numbers of the frames that have it
  uint8_t controlField = *(frameBuffPtr++);
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	76fb      	strb	r3, [r7, #27]
  if((controlField & 0x01) == 0) {
 800742c:	7efb      	ldrb	r3, [r7, #27]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10c      	bne.n	8007450 <AX25Frame_HDLC_Parser+0x340>
      // information frame, set both sequence numbers
      ax25frame->ax25RcvFrame->rcvSeqNumber = controlField >> 5;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	7efa      	ldrb	r2, [r7, #27]
 800743c:	0952      	lsrs	r2, r2, #5
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	751a      	strb	r2, [r3, #20]
      ax25frame->ax25RcvFrame->sendSeqNumber = controlField >> 1;
 8007442:	7efb      	ldrb	r3, [r7, #27]
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	82da      	strh	r2, [r3, #22]
 800744e:	e00a      	b.n	8007466 <AX25Frame_HDLC_Parser+0x356>
  } else if((controlField & 0x02) == 0) {
 8007450:	7efb      	ldrb	r3, [r7, #27]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <AX25Frame_HDLC_Parser+0x356>
      // supervisory frame, set only receive sequence number
      ax25frame->ax25RcvFrame->rcvSeqNumber = controlField >> 5;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	7efa      	ldrb	r2, [r7, #27]
 8007460:	0952      	lsrs	r2, r2, #5
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	751a      	strb	r2, [r3, #20]
  }

  // get PID field of the frames that have it
  if(*frameBuffPtr != 0x00) {
 8007466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d006      	beq.n	800747c <AX25Frame_HDLC_Parser+0x36c>
      ax25frame->ax25RcvFrame->protocolID = *(frameBuffPtr++);
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	7453      	strb	r3, [r2, #17]
  }

  // get info field of the frames that have it
  uint8_t infoLen = ax25frameBuffLen - ((2*(RADIOLIB_AX25_MAX_CALLSIGN_LEN + 1)) + 1 + 1 + 2);
 800747c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b12      	subs	r3, #18
 8007482:	76bb      	strb	r3, [r7, #26]
  uint8_t* info = (uint8_t*)malloc((infoLen + 1)*sizeof(uint8_t));
 8007484:	7ebb      	ldrb	r3, [r7, #26]
 8007486:	3301      	adds	r3, #1
 8007488:	4618      	mov	r0, r3
 800748a:	f002 fa57 	bl	800993c <malloc>
 800748e:	4603      	mov	r3, r0
 8007490:	617b      	str	r3, [r7, #20]
  memset(info, '\0', (infoLen + 1)*sizeof(uint8_t));
 8007492:	7ebb      	ldrb	r3, [r7, #26]
 8007494:	3301      	adds	r3, #1
 8007496:	461a      	mov	r2, r3
 8007498:	2100      	movs	r1, #0
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f003 fc30 	bl	800ad00 <memset>
  memcpy(info, frameBuffPtr, infoLen);
 80074a0:	7ebb      	ldrb	r3, [r7, #26]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074a6:	6978      	ldr	r0, [r7, #20]
 80074a8:	f003 fcd5 	bl	800ae56 <memcpy>
  ax25frame->ax25RcvFrame->infoLen = infoLen;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	7eba      	ldrb	r2, [r7, #26]
 80074b2:	b292      	uxth	r2, r2
 80074b4:	825a      	strh	r2, [r3, #18]
  ax25frame->ax25RcvFrame->info = info;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	619a      	str	r2, [r3, #24]

  if(ax25frame->ax25RcvFrame->isCrcOk == true)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	7f9b      	ldrb	r3, [r3, #30]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <AX25Frame_HDLC_Parser+0x3bc>
	  return RADIOLIB_ERR_NONE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e001      	b.n	80074d0 <AX25Frame_HDLC_Parser+0x3c0>
  else
	  return RADIOLIB_ERR_RX_CRC_CHECKSUM;
 80074cc:	f64f 43d8 	movw	r3, #64728	@ 0xfcd8
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3750      	adds	r7, #80	@ 0x50
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	0800f3c0 	.word	0x0800f3c0
 80074dc:	0800f3d0 	.word	0x0800f3d0
 80074e0:	0800f3dc 	.word	0x0800f3dc
 80074e4:	0800f3e4 	.word	0x0800f3e4

080074e8 <reflect>:

uint32_t reflect(uint32_t in, uint8_t bits) {
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  uint32_t res = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
  for(uint8_t i = 0; i < bits; i++) {
 80074f8:	2300      	movs	r3, #0
 80074fa:	72fb      	strb	r3, [r7, #11]
 80074fc:	e012      	b.n	8007524 <reflect+0x3c>
    res |= (((in & ((uint32_t)1 << i)) >> i) << (bits - i - 1));
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	401a      	ands	r2, r3
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	40da      	lsrs	r2, r3
 800750c:	78f9      	ldrb	r1, [r7, #3]
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	1acb      	subs	r3, r1, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
  for(uint8_t i = 0; i < bits; i++) {
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	3301      	adds	r3, #1
 8007522:	72fb      	strb	r3, [r7, #11]
 8007524:	7afa      	ldrb	r2, [r7, #11]
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	429a      	cmp	r2, r3
 800752a:	d3e8      	bcc.n	80074fe <reflect+0x16>
  }
  return(res);
 800752c:	68fb      	ldr	r3, [r7, #12]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <checksum>:

uint32_t checksum(ax25frame_t* ax25frame, uint8_t* buff, size_t len) {
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  uint32_t crc = ax25frame->crc.init;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	61fb      	str	r3, [r7, #28]
  size_t pos = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	61bb      	str	r3, [r7, #24]
  for(size_t i = 0; i < 8*len; i++) {
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	e036      	b.n	80075c4 <checksum+0x8a>
    if(i % 8 == 0) {
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d118      	bne.n	8007592 <checksum+0x58>
      uint32_t in = buff[pos++];
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	61ba      	str	r2, [r7, #24]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4413      	add	r3, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	613b      	str	r3, [r7, #16]
      if(ax25frame->crc.refIn) {
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7e1b      	ldrb	r3, [r3, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <checksum+0x46>
        in = reflect(in, 8);
 8007576:	2108      	movs	r1, #8
 8007578:	6938      	ldr	r0, [r7, #16]
 800757a:	f7ff ffb5 	bl	80074e8 <reflect>
 800757e:	6138      	str	r0, [r7, #16]
      }
      crc ^= (in << (ax25frame->crc.size - 8));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	7a1b      	ldrb	r3, [r3, #8]
 8007584:	3b08      	subs	r3, #8
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	4053      	eors	r3, r2
 8007590:	61fb      	str	r3, [r7, #28]
    }

    if(crc & ((uint32_t)1 << (ax25frame->crc.size - 1))) {
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	7a1b      	ldrb	r3, [r3, #8]
 8007596:	3b01      	subs	r3, #1
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	fa22 f303 	lsr.w	r3, r2, r3
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <checksum+0x7e>
      crc <<= (uint32_t)1;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	61fb      	str	r3, [r7, #28]
      crc ^= ax25frame->crc.poly;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	4053      	eors	r3, r2
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e002      	b.n	80075be <checksum+0x84>
    } else {
      crc <<= (uint32_t)1;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
  for(size_t i = 0; i < 8*len; i++) {
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	3301      	adds	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d3c3      	bcc.n	8007556 <checksum+0x1c>
    }
  }

  crc ^= ax25frame->crc.out;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	4053      	eors	r3, r2
 80075d6:	61fb      	str	r3, [r7, #28]
  if(ax25frame->crc.refOut) {
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	7e5b      	ldrb	r3, [r3, #25]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <checksum+0xb4>
    crc = reflect(crc, ax25frame->crc.size);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	7a1b      	ldrb	r3, [r3, #8]
 80075e4:	4619      	mov	r1, r3
 80075e6:	69f8      	ldr	r0, [r7, #28]
 80075e8:	f7ff ff7e 	bl	80074e8 <reflect>
 80075ec:	61f8      	str	r0, [r7, #28]
  }
  crc &= (uint32_t)0xFFFFFFFF >> (32 - ax25frame->crc.size);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	7a1b      	ldrb	r3, [r3, #8]
 80075f2:	f1c3 0320 	rsb	r3, r3, #32
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	4013      	ands	r3, r2
 8007602:	61fb      	str	r3, [r7, #28]
  return(crc);
 8007604:	69fb      	ldr	r3, [r7, #28]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <ax25_nrzi_encode>:

void ax25_nrzi_encode(uint8_t* input, uint8_t* output, uint16_t len)
{
 800760e:	b480      	push	{r7}
 8007610:	b087      	sub	sp, #28
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	4613      	mov	r3, r2
 800761a:	80fb      	strh	r3, [r7, #6]
//			} else {
//				SET_BIT_IN_ARRAY(output, currBitPos);
//			}
//		}
//	}
	uint8_t prev_nrzi_bit = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	75fb      	strb	r3, [r7, #23]
	uint8_t nrz_bit;
	uint8_t nrzi_bit;
	int16_t i, j;

	for (i=0; i<len; i++) {
 8007620:	2300      	movs	r3, #0
 8007622:	82bb      	strh	r3, [r7, #20]
 8007624:	e05a      	b.n	80076dc <ax25_nrzi_encode+0xce>
		for (j=7; j>=0; j--) {
 8007626:	2307      	movs	r3, #7
 8007628:	827b      	strh	r3, [r7, #18]
 800762a:	e04d      	b.n	80076c8 <ax25_nrzi_encode+0xba>
			nrz_bit = input[i]>>j & 0x01;
 800762c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800763c:	fa42 f303 	asr.w	r3, r2, r3
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	747b      	strb	r3, [r7, #17]

			if (nrz_bit == 0)
 8007648:	7c7b      	ldrb	r3, [r7, #17]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <ax25_nrzi_encode+0x4a>
				nrzi_bit = prev_nrzi_bit ^ 1;
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	f083 0301 	eor.w	r3, r3, #1
 8007654:	75bb      	strb	r3, [r7, #22]
 8007656:	e001      	b.n	800765c <ax25_nrzi_encode+0x4e>
			else
				nrzi_bit = prev_nrzi_bit;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	75bb      	strb	r3, [r7, #22]

			if (nrzi_bit)
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d014      	beq.n	800768c <ax25_nrzi_encode+0x7e>
				output[i] |= (1 << j);
 8007662:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b25a      	sxtb	r2, r3
 800766e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007672:	2101      	movs	r1, #1
 8007674:	fa01 f303 	lsl.w	r3, r1, r3
 8007678:	b25b      	sxtb	r3, r3
 800767a:	4313      	orrs	r3, r2
 800767c:	b259      	sxtb	r1, r3
 800767e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	b2ca      	uxtb	r2, r1
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	e015      	b.n	80076b8 <ax25_nrzi_encode+0xaa>
			else
				output[i] &= ~(1 << j);
 800768c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4413      	add	r3, r2
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	b25a      	sxtb	r2, r3
 8007698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800769c:	2101      	movs	r1, #1
 800769e:	fa01 f303 	lsl.w	r3, r1, r3
 80076a2:	b25b      	sxtb	r3, r3
 80076a4:	43db      	mvns	r3, r3
 80076a6:	b25b      	sxtb	r3, r3
 80076a8:	4013      	ands	r3, r2
 80076aa:	b259      	sxtb	r1, r3
 80076ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	4413      	add	r3, r2
 80076b4:	b2ca      	uxtb	r2, r1
 80076b6:	701a      	strb	r2, [r3, #0]

			prev_nrzi_bit = nrzi_bit;
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	75fb      	strb	r3, [r7, #23]
		for (j=7; j>=0; j--) {
 80076bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	827b      	strh	r3, [r7, #18]
 80076c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	daad      	bge.n	800762c <ax25_nrzi_encode+0x1e>
	for (i=0; i<len; i++) {
 80076d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3301      	adds	r3, #1
 80076d8:	b29b      	uxth	r3, r3
 80076da:	82bb      	strh	r3, [r7, #20]
 80076dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	db9f      	blt.n	8007626 <ax25_nrzi_encode+0x18>
		}
	}
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <ax25_nrzi_decode>:

void ax25_nrzi_decode(uint8_t* input, uint8_t* output, uint16_t len)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
//		// if current bit != previous bit, then output bit is 1.
//		} else {
//			CLEAR_BIT_IN_ARRAY(output, currBitPos);
//		}
//	}
    uint8_t prev_nrzi_bit = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]
    uint8_t nrz_bit;
    uint8_t nrzi_bit;
    int16_t i, j;

    for (i=0; i<len; i++) {
 8007706:	2300      	movs	r3, #0
 8007708:	82bb      	strh	r3, [r7, #20]
 800770a:	e059      	b.n	80077c0 <ax25_nrzi_decode+0xcc>
        for (j=7; j>=0; j--) {
 800770c:	2307      	movs	r3, #7
 800770e:	827b      	strh	r3, [r7, #18]
 8007710:	e04c      	b.n	80077ac <ax25_nrzi_decode+0xb8>
            nrzi_bit = input[i]>>j & 0x01;
 8007712:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007722:	fa42 f303 	asr.w	r3, r2, r3
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	747b      	strb	r3, [r7, #17]

            if (nrzi_bit != prev_nrzi_bit)
 800772e:	7c7a      	ldrb	r2, [r7, #17]
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	429a      	cmp	r2, r3
 8007734:	d002      	beq.n	800773c <ax25_nrzi_decode+0x48>
                nrz_bit = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	75bb      	strb	r3, [r7, #22]
 800773a:	e001      	b.n	8007740 <ax25_nrzi_decode+0x4c>
            else
                nrz_bit = 1;
 800773c:	2301      	movs	r3, #1
 800773e:	75bb      	strb	r3, [r7, #22]

            if (nrz_bit)
 8007740:	7dbb      	ldrb	r3, [r7, #22]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d014      	beq.n	8007770 <ax25_nrzi_decode+0x7c>
                output[i] |= (1 << j);
 8007746:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b25a      	sxtb	r2, r3
 8007752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007756:	2101      	movs	r1, #1
 8007758:	fa01 f303 	lsl.w	r3, r1, r3
 800775c:	b25b      	sxtb	r3, r3
 800775e:	4313      	orrs	r3, r2
 8007760:	b259      	sxtb	r1, r3
 8007762:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4413      	add	r3, r2
 800776a:	b2ca      	uxtb	r2, r1
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	e015      	b.n	800779c <ax25_nrzi_decode+0xa8>
            else
                output[i] &= ~(1 << j);
 8007770:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	4413      	add	r3, r2
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	b25a      	sxtb	r2, r3
 800777c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007780:	2101      	movs	r1, #1
 8007782:	fa01 f303 	lsl.w	r3, r1, r3
 8007786:	b25b      	sxtb	r3, r3
 8007788:	43db      	mvns	r3, r3
 800778a:	b25b      	sxtb	r3, r3
 800778c:	4013      	ands	r3, r2
 800778e:	b259      	sxtb	r1, r3
 8007790:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	4413      	add	r3, r2
 8007798:	b2ca      	uxtb	r2, r1
 800779a:	701a      	strb	r2, [r3, #0]

            prev_nrzi_bit = nrzi_bit;
 800779c:	7c7b      	ldrb	r3, [r7, #17]
 800779e:	75fb      	strb	r3, [r7, #23]
        for (j=7; j>=0; j--) {
 80077a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	827b      	strh	r3, [r7, #18]
 80077ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	daae      	bge.n	8007712 <ax25_nrzi_decode+0x1e>
    for (i=0; i<len; i++) {
 80077b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3301      	adds	r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	82bb      	strh	r3, [r7, #20]
 80077c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80077c4:	88fb      	ldrh	r3, [r7, #6]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	dba0      	blt.n	800770c <ax25_nrzi_decode+0x18>
        }
    }
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <ax25_g3ruh_scrambler_init>:

void ax25_g3ruh_scrambler_init(uint32_t tap_mask)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint8_t i;
  d_tap_count = 0;
 80077e0:	4b13      	ldr	r3, [pc, #76]	@ (8007830 <ax25_g3ruh_scrambler_init+0x58>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]

  for (i=0; i<32; i++) 
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	e015      	b.n	8007818 <ax25_g3ruh_scrambler_init+0x40>
  {
    if ((tap_mask & 0x01) == 1) 
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <ax25_g3ruh_scrambler_init+0x34>
    {
      d_taps[d_tap_count] = i;
 80077f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007830 <ax25_g3ruh_scrambler_init+0x58>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	7bfa      	ldrb	r2, [r7, #15]
 80077fc:	490d      	ldr	r1, [pc, #52]	@ (8007834 <ax25_g3ruh_scrambler_init+0x5c>)
 80077fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      d_tap_count++;
 8007802:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <ax25_g3ruh_scrambler_init+0x58>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a09      	ldr	r2, [pc, #36]	@ (8007830 <ax25_g3ruh_scrambler_init+0x58>)
 800780a:	6013      	str	r3, [r2, #0]
    }
    tap_mask = tap_mask >> 1;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	607b      	str	r3, [r7, #4]
  for (i=0; i<32; i++) 
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	3301      	adds	r3, #1
 8007816:	73fb      	strb	r3, [r7, #15]
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	2b1f      	cmp	r3, #31
 800781c:	d9e6      	bls.n	80077ec <ax25_g3ruh_scrambler_init+0x14>
  }

  d_shift_register = 0;
 800781e:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <ax25_g3ruh_scrambler_init+0x60>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000af8 	.word	0x20000af8
 8007834:	20000a78 	.word	0x20000a78
 8007838:	20000a74 	.word	0x20000a74

0800783c <ax25_g3ruh_scrambler>:

void ax25_g3ruh_scrambler(uint8_t* unscrambled, uint8_t* scrambled, uint16_t len)
{
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	@ 0x24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	80fb      	strh	r3, [r7, #6]
	uint8_t unscrambled_bit;
	uint8_t scrambled_bit;
	uint32_t tap_bit;
	int16_t i, j, t;

	for (i=0; i<len; i++)
 800784a:	2300      	movs	r3, #0
 800784c:	83bb      	strh	r3, [r7, #28]
 800784e:	e07b      	b.n	8007948 <ax25_g3ruh_scrambler+0x10c>
	{
		for (j=7; j>=0; j--)
 8007850:	2307      	movs	r3, #7
 8007852:	837b      	strh	r3, [r7, #26]
 8007854:	e06e      	b.n	8007934 <ax25_g3ruh_scrambler+0xf8>
		{
			unscrambled_bit = unscrambled[i]>>j & 0x01;
 8007856:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007866:	fa42 f303 	asr.w	r3, r2, r3
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
			d_shift_register <<= 1;
 8007872:	4b3c      	ldr	r3, [pc, #240]	@ (8007964 <ax25_g3ruh_scrambler+0x128>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4a3a      	ldr	r2, [pc, #232]	@ (8007964 <ax25_g3ruh_scrambler+0x128>)
 800787a:	6013      	str	r3, [r2, #0]

			scrambled_bit = unscrambled_bit;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	77fb      	strb	r3, [r7, #31]
			for (t=0; t<d_tap_count; t++)
 8007880:	2300      	movs	r3, #0
 8007882:	833b      	strh	r3, [r7, #24]
 8007884:	e016      	b.n	80078b4 <ax25_g3ruh_scrambler+0x78>
			{
				tap_bit = (d_shift_register >> d_taps[t]) & 0x01;
 8007886:	4b37      	ldr	r3, [pc, #220]	@ (8007964 <ax25_g3ruh_scrambler+0x128>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800788e:	4936      	ldr	r1, [pc, #216]	@ (8007968 <ax25_g3ruh_scrambler+0x12c>)
 8007890:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	613b      	str	r3, [r7, #16]
				scrambled_bit = scrambled_bit ^ tap_bit;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	7ffb      	ldrb	r3, [r7, #31]
 80078a4:	4053      	eors	r3, r2
 80078a6:	77fb      	strb	r3, [r7, #31]
			for (t=0; t<d_tap_count; t++)
 80078a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3301      	adds	r3, #1
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	833b      	strh	r3, [r7, #24]
 80078b4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80078b8:	4b2c      	ldr	r3, [pc, #176]	@ (800796c <ax25_g3ruh_scrambler+0x130>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d3e2      	bcc.n	8007886 <ax25_g3ruh_scrambler+0x4a>
			}

			d_shift_register |= scrambled_bit;
 80078c0:	7ffa      	ldrb	r2, [r7, #31]
 80078c2:	4b28      	ldr	r3, [pc, #160]	@ (8007964 <ax25_g3ruh_scrambler+0x128>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	4a26      	ldr	r2, [pc, #152]	@ (8007964 <ax25_g3ruh_scrambler+0x128>)
 80078ca:	6013      	str	r3, [r2, #0]

			if (scrambled_bit)
 80078cc:	7ffb      	ldrb	r3, [r7, #31]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d014      	beq.n	80078fc <ax25_g3ruh_scrambler+0xc0>
				scrambled[i] |= (1 << j);
 80078d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b25a      	sxtb	r2, r3
 80078de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80078e2:	2101      	movs	r1, #1
 80078e4:	fa01 f303 	lsl.w	r3, r1, r3
 80078e8:	b25b      	sxtb	r3, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	b259      	sxtb	r1, r3
 80078ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	b2ca      	uxtb	r2, r1
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e015      	b.n	8007928 <ax25_g3ruh_scrambler+0xec>
			else
				scrambled[i] &= ~(1 << j);
 80078fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4413      	add	r3, r2
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b25a      	sxtb	r2, r3
 8007908:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800790c:	2101      	movs	r1, #1
 800790e:	fa01 f303 	lsl.w	r3, r1, r3
 8007912:	b25b      	sxtb	r3, r3
 8007914:	43db      	mvns	r3, r3
 8007916:	b25b      	sxtb	r3, r3
 8007918:	4013      	ands	r3, r2
 800791a:	b259      	sxtb	r1, r3
 800791c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	4413      	add	r3, r2
 8007924:	b2ca      	uxtb	r2, r1
 8007926:	701a      	strb	r2, [r3, #0]
		for (j=7; j>=0; j--)
 8007928:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29b      	uxth	r3, r3
 8007932:	837b      	strh	r3, [r7, #26]
 8007934:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007938:	2b00      	cmp	r3, #0
 800793a:	da8c      	bge.n	8007856 <ax25_g3ruh_scrambler+0x1a>
	for (i=0; i<len; i++)
 800793c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007940:	b29b      	uxth	r3, r3
 8007942:	3301      	adds	r3, #1
 8007944:	b29b      	uxth	r3, r3
 8007946:	83bb      	strh	r3, [r7, #28]
 8007948:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	429a      	cmp	r2, r3
 8007950:	f6ff af7e 	blt.w	8007850 <ax25_g3ruh_scrambler+0x14>
		}
	}
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	3724      	adds	r7, #36	@ 0x24
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000a74 	.word	0x20000a74
 8007968:	20000a78 	.word	0x20000a78
 800796c:	20000af8 	.word	0x20000af8

08007970 <ax25_g3ruh_descrambler>:

void ax25_g3ruh_descrambler(uint8_t* scrambled, uint8_t* unscrambled, uint16_t len)
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	@ 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  uint8_t unscrambled_bit;
  uint8_t scrambled_bit;
  uint32_t tap_bit;
  int16_t i, j, t;

  for (i=0; i<len; i++) 
 800797e:	2300      	movs	r3, #0
 8007980:	83bb      	strh	r3, [r7, #28]
 8007982:	e07b      	b.n	8007a7c <ax25_g3ruh_descrambler+0x10c>
  {
    for (j=7; j>=0; j--) 
 8007984:	2307      	movs	r3, #7
 8007986:	837b      	strh	r3, [r7, #26]
 8007988:	e06e      	b.n	8007a68 <ax25_g3ruh_descrambler+0xf8>
    {
      scrambled_bit = scrambled[i]>>j & 0x01;
 800798a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800799a:	fa42 f303 	asr.w	r3, r2, r3
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	75fb      	strb	r3, [r7, #23]
      d_shift_register <<= 1;
 80079a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007a98 <ax25_g3ruh_descrambler+0x128>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4a3a      	ldr	r2, [pc, #232]	@ (8007a98 <ax25_g3ruh_descrambler+0x128>)
 80079ae:	6013      	str	r3, [r2, #0]

      unscrambled_bit = scrambled_bit;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	77fb      	strb	r3, [r7, #31]
      for (t=0; t<d_tap_count; t++) 
 80079b4:	2300      	movs	r3, #0
 80079b6:	833b      	strh	r3, [r7, #24]
 80079b8:	e016      	b.n	80079e8 <ax25_g3ruh_descrambler+0x78>
      {
        tap_bit = (d_shift_register >> d_taps[t]) & 0x01;
 80079ba:	4b37      	ldr	r3, [pc, #220]	@ (8007a98 <ax25_g3ruh_descrambler+0x128>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80079c2:	4936      	ldr	r1, [pc, #216]	@ (8007a9c <ax25_g3ruh_descrambler+0x12c>)
 80079c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	613b      	str	r3, [r7, #16]
        unscrambled_bit = unscrambled_bit ^ tap_bit;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	7ffb      	ldrb	r3, [r7, #31]
 80079d8:	4053      	eors	r3, r2
 80079da:	77fb      	strb	r3, [r7, #31]
      for (t=0; t<d_tap_count; t++) 
 80079dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3301      	adds	r3, #1
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	833b      	strh	r3, [r7, #24]
 80079e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80079ec:	4b2c      	ldr	r3, [pc, #176]	@ (8007aa0 <ax25_g3ruh_descrambler+0x130>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d3e2      	bcc.n	80079ba <ax25_g3ruh_descrambler+0x4a>
      }

      d_shift_register |= scrambled_bit;
 80079f4:	7dfa      	ldrb	r2, [r7, #23]
 80079f6:	4b28      	ldr	r3, [pc, #160]	@ (8007a98 <ax25_g3ruh_descrambler+0x128>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	4a26      	ldr	r2, [pc, #152]	@ (8007a98 <ax25_g3ruh_descrambler+0x128>)
 80079fe:	6013      	str	r3, [r2, #0]

      if (unscrambled_bit)
 8007a00:	7ffb      	ldrb	r3, [r7, #31]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d014      	beq.n	8007a30 <ax25_g3ruh_descrambler+0xc0>
        unscrambled[i] |= (1 << j);
 8007a06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b25a      	sxtb	r2, r3
 8007a12:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a16:	2101      	movs	r1, #1
 8007a18:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1c:	b25b      	sxtb	r3, r3
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b259      	sxtb	r1, r3
 8007a22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4413      	add	r3, r2
 8007a2a:	b2ca      	uxtb	r2, r1
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e015      	b.n	8007a5c <ax25_g3ruh_descrambler+0xec>
      else
        unscrambled[i] &= ~(1 << j);
 8007a30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4413      	add	r3, r2
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b25a      	sxtb	r2, r3
 8007a3c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a40:	2101      	movs	r1, #1
 8007a42:	fa01 f303 	lsl.w	r3, r1, r3
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	b25b      	sxtb	r3, r3
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	b259      	sxtb	r1, r3
 8007a50:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	4413      	add	r3, r2
 8007a58:	b2ca      	uxtb	r2, r1
 8007a5a:	701a      	strb	r2, [r3, #0]
    for (j=7; j>=0; j--) 
 8007a5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	837b      	strh	r3, [r7, #26]
 8007a68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da8c      	bge.n	800798a <ax25_g3ruh_descrambler+0x1a>
  for (i=0; i<len; i++) 
 8007a70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3301      	adds	r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	83bb      	strh	r3, [r7, #28]
 8007a7c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007a80:	88fb      	ldrh	r3, [r7, #6]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	f6ff af7e 	blt.w	8007984 <ax25_g3ruh_descrambler+0x14>
    }
  }
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	3724      	adds	r7, #36	@ 0x24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000a74 	.word	0x20000a74
 8007a9c:	20000a78 	.word	0x20000a78
 8007aa0:	20000af8 	.word	0x20000af8

08007aa4 <morse_setText>:
    'Z', MCODE(4,  0b1100 ),
    0,0
 };

void morse_setText(morse_t* morse, char* text)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
    size_t len = strlen(text);
 8007aae:	6838      	ldr	r0, [r7, #0]
 8007ab0:	f7f8 fbfe 	bl	80002b0 <strlen>
 8007ab4:	60f8      	str	r0, [r7, #12]
    if( len > MORSE_MAX_TEXT_LENGTH -1 )
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b4f      	cmp	r3, #79	@ 0x4f
 8007aba:	d901      	bls.n	8007ac0 <morse_setText+0x1c>
    {
        len = MORSE_MAX_TEXT_LENGTH - 1;
 8007abc:	234f      	movs	r3, #79	@ 0x4f
 8007abe:	60fb      	str	r3, [r7, #12]
    }
    strncpy(morse->text, text, len + 1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	1d18      	adds	r0, r3, #4
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	f003 f920 	bl	800ad10 <strncpy>
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <morse_handleTimeout>:

void morse_handleTimeout(morse_t* morse)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
    if(morse->currentState == msStopped)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d014      	beq.n	8007b14 <morse_handleTimeout+0x3c>
    {
        return;
    }

    if(morse->time.millisecondsElapsed(&(morse->time)) > morse->currentTimeoutInMS)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	3258      	adds	r2, #88	@ 0x58
 8007af2:	4610      	mov	r0, r2
 8007af4:	4798      	blx	r3
 8007af6:	4602      	mov	r2, r0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d90a      	bls.n	8007b16 <morse_handleTimeout+0x3e>
    {
        morse->time.resetToNow(&(morse->time));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	3258      	adds	r2, #88	@ 0x58
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
        morse_changeStateByTimeout(morse);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f8b5 	bl	8007c7c <morse_changeStateByTimeout>
 8007b12:	e000      	b.n	8007b16 <morse_handleTimeout+0x3e>
        return;
 8007b14:	bf00      	nop
    }
}
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <morse_prepareNextChar>:

morse_state morse_prepareNextChar(morse_t* morse)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
    char ch = morse->text[morse->currentPosInText];
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4413      	add	r3, r2
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	75fb      	strb	r3, [r7, #23]
    morse->currentPosInText++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

    if(ch == 0)
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <morse_prepareNextChar+0x3a>
    {
        // reset current position in text.
        morse->currentPosInText = 0;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
        return msEndOfText;
 8007b52:	2308      	movs	r3, #8
 8007b54:	e02e      	b.n	8007bb4 <morse_prepareNextChar+0x98>
    }
    else if(ch == ' ')
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d101      	bne.n	8007b60 <morse_prepareNextChar+0x44>
    {
        return msSendingSpace;
 8007b5c:	2306      	movs	r3, #6
 8007b5e:	e029      	b.n	8007bb4 <morse_prepareNextChar+0x98>
    }
    else if(ch == '_')
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b5f      	cmp	r3, #95	@ 0x5f
 8007b64:	d101      	bne.n	8007b6a <morse_prepareNextChar+0x4e>
    {
        return msSendingLongCarrier;
 8007b66:	2307      	movs	r3, #7
 8007b68:	e024      	b.n	8007bb4 <morse_prepareNextChar+0x98>
    }
    else
    {
        int length = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	613b      	str	r3, [r7, #16]
        unsigned char pattern = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
        if( morse_findCharInTable(ch, &length, &pattern) )
 8007b72:	f107 020f 	add.w	r2, r7, #15
 8007b76:	f107 0110 	add.w	r1, r7, #16
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f845 	bl	8007c0c <morse_findCharInTable>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d014      	beq.n	8007bb2 <morse_prepareNextChar+0x96>
        {
            // align pattern
            pattern <<= (8 - length);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f1c3 0308 	rsb	r3, r3, #8
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	73fb      	strb	r3, [r7, #15]

            morse->currentUnitPattern = pattern;
 8007b9a:	7bfa      	ldrb	r2, [r7, #15]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
            morse->numUnitRest = length;
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	671a      	str	r2, [r3, #112]	@ 0x70
            return morse_prepareNextDitDah(morse);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f807 	bl	8007bbc <morse_prepareNextDitDah>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	e000      	b.n	8007bb4 <morse_prepareNextChar+0x98>
        }
        else
        {
            // send space
            return msSendingSpace;
 8007bb2:	2306      	movs	r3, #6
        }
    }
    // It should never happen
    return msSendingSpace;
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <morse_prepareNextDitDah>:

morse_state morse_prepareNextDitDah(morse_t* morse)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
    if(morse->numUnitRest == 0 )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <morse_prepareNextDitDah+0x14>
    {
        return msSendingPauseBetweenLetters;
 8007bcc:	2305      	movs	r3, #5
 8007bce:	e017      	b.n	8007c00 <morse_prepareNextDitDah+0x44>
    }

    morse_state st = (morse->currentUnitPattern & 0x80)? msSendingDah : msSendingDit;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da01      	bge.n	8007be0 <morse_prepareNextDitDah+0x24>
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e000      	b.n	8007be2 <morse_prepareNextDitDah+0x26>
 8007be0:	2302      	movs	r3, #2
 8007be2:	73fb      	strb	r3, [r7, #15]
    morse->currentUnitPattern <<= 1;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    morse->numUnitRest -= 1;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf8:	1e5a      	subs	r2, r3, #1
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	671a      	str	r2, [r3, #112]	@ 0x70
    return st;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <morse_findCharInTable>:

bool morse_findCharInTable(char ch, int* outLength, uint8_t* outPattern)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b089      	sub	sp, #36	@ 0x24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	73fb      	strb	r3, [r7, #15]
    size_t idx=0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
    while( morseTable[idx] )
 8007c1e:	e01d      	b.n	8007c5c <morse_findCharInTable+0x50>
    {
        if( morseTable[idx] == ch )
 8007c20:	4a15      	ldr	r2, [pc, #84]	@ (8007c78 <morse_findCharInTable+0x6c>)
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	7bfa      	ldrb	r2, [r7, #15]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d113      	bne.n	8007c56 <morse_findCharInTable+0x4a>
        {
            unsigned char encodedPatter = morseTable[idx + 1];
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3301      	adds	r3, #1
 8007c32:	4a11      	ldr	r2, [pc, #68]	@ (8007c78 <morse_findCharInTable+0x6c>)
 8007c34:	5cd3      	ldrb	r3, [r2, r3]
 8007c36:	76fb      	strb	r3, [r7, #27]
            int len = M_LEN( encodedPatter );
 8007c38:	7efb      	ldrb	r3, [r7, #27]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	617b      	str	r3, [r7, #20]
            unsigned char pattern = M_PATTERN( encodedPatter );
 8007c40:	7efb      	ldrb	r3, [r7, #27]
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	74fb      	strb	r3, [r7, #19]

            *outLength = len;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	601a      	str	r2, [r3, #0]
            *outPattern = pattern;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7cfa      	ldrb	r2, [r7, #19]
 8007c50:	701a      	strb	r2, [r3, #0]
            return true;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e009      	b.n	8007c6a <morse_findCharInTable+0x5e>
        }

        idx += 2;
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3302      	adds	r3, #2
 8007c5a:	61fb      	str	r3, [r7, #28]
    while( morseTable[idx] )
 8007c5c:	4a06      	ldr	r2, [pc, #24]	@ (8007c78 <morse_findCharInTable+0x6c>)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1db      	bne.n	8007c20 <morse_findCharInTable+0x14>
    }
    return false;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3724      	adds	r7, #36	@ 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	0800f544 	.word	0x0800f544

08007c7c <morse_changeStateByTimeout>:

void morse_changeStateByTimeout(morse_t* morse)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	morse_state state;
    switch (morse->currentState)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	f200 808a 	bhi.w	8007da4 <morse_changeStateByTimeout+0x128>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <morse_changeStateByTimeout+0x1c>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007dc1 	.word	0x08007dc1
 8007c9c:	08007cc1 	.word	0x08007cc1
 8007ca0:	08007ceb 	.word	0x08007ceb
 8007ca4:	08007ceb 	.word	0x08007ceb
 8007ca8:	08007d07 	.word	0x08007d07
 8007cac:	08007d29 	.word	0x08007d29
 8007cb0:	08007d4b 	.word	0x08007d4b
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007d6d 	.word	0x08007d6d
 8007cbc:	08007d89 	.word	0x08007d89
    case msStopped:
        // nothing to do. (should never happen)
        break;
    case msWarmUpPause:
        // start sending
        morse->currentPosInText = 0;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
        state = morse_prepareNextChar(morse); // possible: dit, dah, space, longCarrier, endoftext
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff ff27 	bl	8007b1c <morse_prepareNextChar>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f879 	bl	8007dcc <morse_getTimeoutForState>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7bfa      	ldrb	r2, [r7, #15]
 8007ce4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007ce8:	e06b      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    case msSendingDit:
    case msSendingDah:
        state = msSendingPauseBetweenDitDah;
 8007cea:	2304      	movs	r3, #4
 8007cec:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 f86b 	bl	8007dcc <morse_getTimeoutForState>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7bfa      	ldrb	r2, [r7, #15]
 8007d00:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007d04:	e05d      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    case msSendingPauseBetweenDitDah:
        state = morse_prepareNextDitDah(morse); // possible: dit, dah, pause_letters
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff58 	bl	8007bbc <morse_prepareNextDitDah>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f85a 	bl	8007dcc <morse_getTimeoutForState>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007d26:	e04c      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    case msSendingPauseBetweenLetters:
        state = morse_prepareNextChar(morse);  // possible: dit, dah, space, longCarrier, endoftext
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fef7 	bl	8007b1c <morse_prepareNextChar>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 f849 	bl	8007dcc <morse_getTimeoutForState>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007d48:	e03b      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    case msSendingSpace:
    case msSendingLongCarrier:
        state = morse_prepareNextChar(morse);  // possible: dit, dah, space, longCarrier, endoftext
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fee6 	bl	8007b1c <morse_prepareNextChar>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f838 	bl	8007dcc <morse_getTimeoutForState>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7bfa      	ldrb	r2, [r7, #15]
 8007d66:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007d6a:	e02a      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    case msEndOfText:
        state = msLongPauseBetweenRepeat;
 8007d6c:	2309      	movs	r3, #9
 8007d6e:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f82a 	bl	8007dcc <morse_getTimeoutForState>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	7bfa      	ldrb	r2, [r7, #15]
 8007d82:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007d86:	e01c      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    case msLongPauseBetweenRepeat:
        state = msWarmUpPause;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f81c 	bl	8007dcc <morse_getTimeoutForState>
 8007d94:	4602      	mov	r2, r0
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7bfa      	ldrb	r2, [r7, #15]
 8007d9e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        break;
 8007da2:	e00e      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
    default:
        // never happen
        morse_state state = msWarmUpPause;
 8007da4:	2301      	movs	r3, #1
 8007da6:	73bb      	strb	r3, [r7, #14]
        morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f80e 	bl	8007dcc <morse_getTimeoutForState>
 8007db0:	4602      	mov	r2, r0
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	669a      	str	r2, [r3, #104]	@ 0x68
        morse->currentState = state;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7bba      	ldrb	r2, [r7, #14]
 8007dba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    }
}
 8007dbe:	e000      	b.n	8007dc2 <morse_changeStateByTimeout+0x146>
        break;
 8007dc0:	bf00      	nop
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <morse_getTimeoutForState>:

int32_t morse_getTimeoutForState(morse_state state)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	71fb      	strb	r3, [r7, #7]
    int32_t res = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]

    // UNITSIZE_IN_MS: dit duration
    switch(state)
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d833      	bhi.n	8007e4a <morse_getTimeoutForState+0x7e>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <morse_getTimeoutForState+0x1c>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e13 	.word	0x08007e13
 8007df0:	08007e1b 	.word	0x08007e1b
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	08007e29 	.word	0x08007e29
 8007dfc:	08007e2f 	.word	0x08007e2f
 8007e00:	08007e35 	.word	0x08007e35
 8007e04:	08007e3d 	.word	0x08007e3d
 8007e08:	08007e43 	.word	0x08007e43
    {
    case msWarmUpPause:
        res = WARMUP_PAUSE_IN_MS;
 8007e0c:	4b14      	ldr	r3, [pc, #80]	@ (8007e60 <morse_getTimeoutForState+0x94>)
 8007e0e:	60fb      	str	r3, [r7, #12]
        break;
 8007e10:	e01e      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msSendingDit:
        res = UNITSIZE_IN_MS;
 8007e12:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8007e16:	60fb      	str	r3, [r7, #12]
        break;
 8007e18:	e01a      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msSendingDah:
        res = 3 * UNITSIZE_IN_MS;
 8007e1a:	4b12      	ldr	r3, [pc, #72]	@ (8007e64 <morse_getTimeoutForState+0x98>)
 8007e1c:	60fb      	str	r3, [r7, #12]
        break;
 8007e1e:	e017      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msSendingPauseBetweenDitDah:
        res = UNITSIZE_IN_MS;
 8007e20:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8007e24:	60fb      	str	r3, [r7, #12]
        break;
 8007e26:	e013      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msSendingPauseBetweenLetters:
        res = 3 * UNITSIZE_IN_MS;
 8007e28:	4b0e      	ldr	r3, [pc, #56]	@ (8007e64 <morse_getTimeoutForState+0x98>)
 8007e2a:	60fb      	str	r3, [r7, #12]
        break;
 8007e2c:	e010      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msSendingSpace:
        res = 7 * UNITSIZE_IN_MS;
 8007e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e68 <morse_getTimeoutForState+0x9c>)
 8007e30:	60fb      	str	r3, [r7, #12]
        break;
 8007e32:	e00d      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msSendingLongCarrier:
        res = LONG_CARRIER_DURATION_IN_MS;
 8007e34:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8007e38:	60fb      	str	r3, [r7, #12]
        break;
 8007e3a:	e009      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msEndOfText:
        res = ENDOFTEXT_PAUSE_IN_MS;
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <morse_getTimeoutForState+0xa0>)
 8007e3e:	60fb      	str	r3, [r7, #12]
        break;
 8007e40:	e006      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    case msLongPauseBetweenRepeat:
        res = LONG_RETRY_PAUSE_IN_MS;
 8007e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e46:	60fb      	str	r3, [r7, #12]
        break;
 8007e48:	e002      	b.n	8007e50 <morse_getTimeoutForState+0x84>
    default:
        res = UNITSIZE_IN_MS;
 8007e4a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8007e4e:	60fb      	str	r3, [r7, #12]
    }
    return res;
 8007e50:	68fb      	ldr	r3, [r7, #12]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	000f4240 	.word	0x000f4240
 8007e64:	000249f0 	.word	0x000249f0
 8007e68:	00055730 	.word	0x00055730
 8007e6c:	000493e0 	.word	0x000493e0

08007e70 <morse_isToneActive>:

bool morse_isToneActive(morse_t* morse)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	return (morse->currentState == msSendingDit)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
			|| (morse->currentState == msSendingDah)
			|| (morse->currentState == msSendingLongCarrier);
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d009      	beq.n	8007e96 <morse_isToneActive+0x26>
			|| (morse->currentState == msSendingDah)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d004      	beq.n	8007e96 <morse_isToneActive+0x26>
			|| (morse->currentState == msSendingLongCarrier);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d101      	bne.n	8007e9a <morse_isToneActive+0x2a>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <morse_isToneActive+0x2c>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	b2db      	uxtb	r3, r3
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <morse_start>:

void morse_start(morse_t* morse)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
    morse_state state = msWarmUpPause;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	73fb      	strb	r3, [r7, #15]
    morse->currentTimeoutInMS = morse_getTimeoutForState(state);
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff ff85 	bl	8007dcc <morse_getTimeoutForState>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	669a      	str	r2, [r3, #104]	@ 0x68
    morse->currentState = state;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7bfa      	ldrb	r2, [r7, #15]
 8007ecc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <si4463_powerOnReset>:
uint8_t FSK_1200_TX[] = RADIO_CONFIGURATION_FSK_1200_TX;
uint8_t FSK_1200_RX[] = RADIO_CONFIGURATION_FSK_1200_RX;
uint8_t OOK_TX[] = RADIO_CONFIGURATION_OOK_TX;

int8_t si4463_powerOnReset(si4463_t* si4463)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
    si4463->SDN(true);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	4798      	blx	r3
    si4463->DelayUs(10);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	200a      	movs	r0, #10
 8007eee:	4798      	blx	r3
    si4463->SDN(false);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4798      	blx	r3

    // Wait for POR (Power on reset) on GPIO1. The delay threshold is 10 ms.
    int count = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
    while(si4463->gpios.GPIO1() == si4463->gpios.gpio_low)
 8007efc:	e00f      	b.n	8007f1e <si4463_powerOnReset+0x46>
    {
        if(count < 10000)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007f04:	4293      	cmp	r3, r2
 8007f06:	dc07      	bgt.n	8007f18 <si4463_powerOnReset+0x40>
        {
            count++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
            si4463->DelayUs(1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	2001      	movs	r0, #1
 8007f14:	4798      	blx	r3
 8007f16:	e002      	b.n	8007f1e <si4463_powerOnReset+0x46>
        }
        else
            return SI4463_INIT_TIMEOUT;
 8007f18:	f06f 0313 	mvn.w	r3, #19
 8007f1c:	e016      	b.n	8007f4c <si4463_powerOnReset+0x74>
    while(si4463->gpios.GPIO1() == si4463->gpios.gpio_low)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f22:	4798      	blx	r3
 8007f24:	4603      	mov	r3, r0
 8007f26:	461a      	mov	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d0e5      	beq.n	8007efe <si4463_powerOnReset+0x26>
    }
    // This first SPI transaction has to take less than 4ms (NSEL LOW time).
    // If it cannot be guaranteed, send a shorter command (e.g. NOP) first,
    // check CTS, then send POWER_UP or patch.
    if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fa79 	bl	800942a <si4463_waitforCTS>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d102      	bne.n	8007f44 <si4463_powerOnReset+0x6c>
 8007f3e:	f06f 0314 	mvn.w	r3, #20
 8007f42:	e003      	b.n	8007f4c <si4463_powerOnReset+0x74>
    return si4463_checkNop(si4463);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f837 	bl	8007fb8 <si4463_checkNop>
 8007f4a:	4603      	mov	r3, r0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <si4463_init>:

int8_t si4463_init(si4463_t* si4463)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
    int res = si4463_powerOnReset(si4463);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ffbb 	bl	8007ed8 <si4463_powerOnReset>
 8007f62:	4603      	mov	r3, r0
 8007f64:	60fb      	str	r3, [r7, #12]
    if(res != SI4463_OK) return res;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <si4463_init+0x1e>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	b25b      	sxtb	r3, r3
 8007f70:	e01c      	b.n	8007fac <si4463_init+0x58>
    // Start to configurate the radio
    res = si4463_configArray(si4463, SI4463_CONFIGURATION_DATA);
 8007f72:	4910      	ldr	r1, [pc, #64]	@ (8007fb4 <si4463_init+0x60>)
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 fb77 	bl	8009668 <si4463_configArray>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	60fb      	str	r3, [r7, #12]
    if(res != SI4463_OK) return res;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <si4463_init+0x36>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	b25b      	sxtb	r3, r3
 8007f88:	e010      	b.n	8007fac <si4463_init+0x58>

    si4463->settings.txDataRate = DR_9600;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    si4463->settings.rxDataRate = DR_9600;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2203      	movs	r2, #3
 8007f96:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    si4463->settings.txMod = MOD_2GFSK;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    si4463->settings.rxMod = MOD_2GFSK;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    return SI4463_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	2000000c 	.word	0x2000000c

08007fb8 <si4463_checkNop>:

int8_t si4463_checkNop(si4463_t* si4463)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
    uint8_t cmd = NOP;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]

    if(!si4463_sendCommand(si4463, &cmd, 1)) return SI4463_ERR_WRITE_REG;
 8007fc4:	f107 030f 	add.w	r3, r7, #15
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fa06 	bl	80093de <si4463_sendCommand>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <si4463_checkNop+0x26>
 8007fd8:	f06f 030a 	mvn.w	r3, #10
 8007fdc:	e009      	b.n	8007ff2 <si4463_checkNop+0x3a>
	if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fa23 	bl	800942a <si4463_waitforCTS>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <si4463_checkNop+0x38>
 8007fea:	f06f 0314 	mvn.w	r3, #20
 8007fee:	e000      	b.n	8007ff2 <si4463_checkNop+0x3a>

	return SI4463_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <si4463_getPartInfo>:

int8_t si4463_getPartInfo(si4463_t* si4463)
{
 8007ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffe:	b08d      	sub	sp, #52	@ 0x34
 8008000:	af06      	add	r7, sp, #24
 8008002:	6078      	str	r0, [r7, #4]
    uint8_t cmd = PART_INFO;
 8008004:	2301      	movs	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
    uint8_t rxbuff[8] = {0};
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	2300      	movs	r3, #0
 800800e:	613b      	str	r3, [r7, #16]
    if(!si4463_sendCommand(si4463, &cmd, 1)) return SI4463_ERR_WRITE_REG;
 8008010:	f107 0317 	add.w	r3, r7, #23
 8008014:	2201      	movs	r2, #1
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f9e0 	bl	80093de <si4463_sendCommand>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <si4463_getPartInfo+0x2e>
 8008024:	f06f 030a 	mvn.w	r3, #10
 8008028:	e057      	b.n	80080da <si4463_getPartInfo+0xde>
    if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	2208      	movs	r2, #8
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fa29 	bl	800948a <si4463_getResponse>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d102      	bne.n	8008044 <si4463_getPartInfo+0x48>
 800803e:	f06f 0309 	mvn.w	r3, #9
 8008042:	e04a      	b.n	80080da <si4463_getPartInfo+0xde>
    DEBUG_PRINTF("rxbuff: %02x %02x %02x %02x %02x %02x %02x %02x\r\n",
 8008044:	7b3b      	ldrb	r3, [r7, #12]
 8008046:	461d      	mov	r5, r3
 8008048:	7b7b      	ldrb	r3, [r7, #13]
 800804a:	461e      	mov	r6, r3
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	469c      	mov	ip, r3
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	7c3a      	ldrb	r2, [r7, #16]
 8008054:	7c79      	ldrb	r1, [r7, #17]
 8008056:	7cb8      	ldrb	r0, [r7, #18]
 8008058:	7cfc      	ldrb	r4, [r7, #19]
 800805a:	9404      	str	r4, [sp, #16]
 800805c:	9003      	str	r0, [sp, #12]
 800805e:	9102      	str	r1, [sp, #8]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	4663      	mov	r3, ip
 8008066:	4632      	mov	r2, r6
 8008068:	4629      	mov	r1, r5
 800806a:	481e      	ldr	r0, [pc, #120]	@ (80080e4 <si4463_getPartInfo+0xe8>)
 800806c:	f002 fcd8 	bl	800aa20 <iprintf>
			rxbuff[0], rxbuff[1], rxbuff[2], rxbuff[3], rxbuff[4], rxbuff[5], rxbuff[6], rxbuff[7]);
    if((uint16_t)((rxbuff[1] << 8) | rxbuff[2]) != 0x4463) return SI4463_ERR_CHIP_VERSION;
 8008070:	7b7b      	ldrb	r3, [r7, #13]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	b21a      	sxth	r2, r3
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	b21b      	sxth	r3, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	b21b      	sxth	r3, r3
 800807e:	f244 4263 	movw	r2, #17507	@ 0x4463
 8008082:	4293      	cmp	r3, r2
 8008084:	d002      	beq.n	800808c <si4463_getPartInfo+0x90>
 8008086:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800808a:	e026      	b.n	80080da <si4463_getPartInfo+0xde>
    si4463->partInfo.chipRev = rxbuff[0];
 800808c:	7b3a      	ldrb	r2, [r7, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    si4463->partInfo.partNum = (rxbuff[1] << 8) | rxbuff[2];
 8008094:	7b7b      	ldrb	r3, [r7, #13]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	b21a      	sxth	r2, r3
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	b21b      	sxth	r3, r3
 800809e:	4313      	orrs	r3, r2
 80080a0:	b21b      	sxth	r3, r3
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    si4463->partInfo.partBuild = rxbuff[3];
 80080aa:	7bfa      	ldrb	r2, [r7, #15]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    si4463->partInfo.Id = (rxbuff[4] << 8) | rxbuff[5];
 80080b2:	7c3b      	ldrb	r3, [r7, #16]
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	b21a      	sxth	r2, r3
 80080b8:	7c7b      	ldrb	r3, [r7, #17]
 80080ba:	b21b      	sxth	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b21b      	sxth	r3, r3
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    si4463->partInfo.CustomerId = rxbuff[6];
 80080c8:	7cba      	ldrb	r2, [r7, #18]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    si4463->partInfo.ROMId = rxbuff[7];
 80080d0:	7cfa      	ldrb	r2, [r7, #19]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    return SI4463_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e2:	bf00      	nop
 80080e4:	0800f3e8 	.word	0x0800f3e8

080080e8 <si4463_getFuncInfo>:

int8_t si4463_getFuncInfo(si4463_t* si4463)
{
 80080e8:	b5b0      	push	{r4, r5, r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af04      	add	r7, sp, #16
 80080ee:	6078      	str	r0, [r7, #4]
    uint8_t cmd = FUNC_INFO;
 80080f0:	2310      	movs	r3, #16
 80080f2:	73fb      	strb	r3, [r7, #15]
    uint8_t rxbuff[6] = {0};
 80080f4:	2300      	movs	r3, #0
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	2300      	movs	r3, #0
 80080fa:	81bb      	strh	r3, [r7, #12]
    if(!si4463_sendCommand(si4463, &cmd, 1)) return SI4463_ERR_WRITE_REG;
 80080fc:	f107 030f 	add.w	r3, r7, #15
 8008100:	2201      	movs	r2, #1
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f96a 	bl	80093de <si4463_sendCommand>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <si4463_getFuncInfo+0x2e>
 8008110:	f06f 030a 	mvn.w	r3, #10
 8008114:	e03a      	b.n	800818c <si4463_getFuncInfo+0xa4>
    if(!si4463_getResponse(si4463, rxbuff, 6)) return SI4463_ERR_READ_REG;
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	2206      	movs	r2, #6
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 f9b3 	bl	800948a <si4463_getResponse>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <si4463_getFuncInfo+0x48>
 800812a:	f06f 0309 	mvn.w	r3, #9
 800812e:	e02d      	b.n	800818c <si4463_getFuncInfo+0xa4>
    DEBUG_PRINTF("rxbuff: %02x %02x %02x %02x %02x %02x\r\n",
 8008130:	7a3b      	ldrb	r3, [r7, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	7a7b      	ldrb	r3, [r7, #9]
 8008136:	461c      	mov	r4, r3
 8008138:	7abb      	ldrb	r3, [r7, #10]
 800813a:	461d      	mov	r5, r3
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	7b3a      	ldrb	r2, [r7, #12]
 8008140:	7b79      	ldrb	r1, [r7, #13]
 8008142:	9102      	str	r1, [sp, #8]
 8008144:	9201      	str	r2, [sp, #4]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	462b      	mov	r3, r5
 800814a:	4622      	mov	r2, r4
 800814c:	4601      	mov	r1, r0
 800814e:	4811      	ldr	r0, [pc, #68]	@ (8008194 <si4463_getFuncInfo+0xac>)
 8008150:	f002 fc66 	bl	800aa20 <iprintf>
			rxbuff[0], rxbuff[1], rxbuff[2], rxbuff[3], rxbuff[4], rxbuff[5]);
    si4463->funInfo.revExt = rxbuff[0];
 8008154:	7a3a      	ldrb	r2, [r7, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    si4463->funInfo.revBranch = rxbuff[1];
 800815c:	7a7a      	ldrb	r2, [r7, #9]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    si4463->funInfo.revInt = rxbuff[2];
 8008164:	7aba      	ldrb	r2, [r7, #10]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    si4463->funInfo.patch = (rxbuff[3] << 8) | rxbuff[4];
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	b21a      	sxth	r2, r3
 8008172:	7b3b      	ldrb	r3, [r7, #12]
 8008174:	b21b      	sxth	r3, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	b21b      	sxth	r3, r3
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    si4463->funInfo.func = rxbuff[5];
 8008182:	7b7a      	ldrb	r2, [r7, #13]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    return SI4463_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bdb0      	pop	{r4, r5, r7, pc}
 8008194:	0800f41c 	.word	0x0800f41c

08008198 <si4463_getTxFifoInfo>:

int16_t si4463_getTxFifoInfo(si4463_t* si4463)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = {FIFO_INFO, 0x00};
 80081a0:	2315      	movs	r3, #21
 80081a2:	81bb      	strh	r3, [r7, #12]
    uint8_t rxbuff[2] = {0};
 80081a4:	2300      	movs	r3, #0
 80081a6:	813b      	strh	r3, [r7, #8]
    if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	2202      	movs	r2, #2
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f914 	bl	80093de <si4463_sendCommand>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <si4463_getTxFifoInfo+0x2a>
 80081bc:	f06f 030a 	mvn.w	r3, #10
 80081c0:	e00e      	b.n	80081e0 <si4463_getTxFifoInfo+0x48>
    if(!si4463_getResponse(si4463, rxbuff, 2)) return SI4463_ERR_READ_REG;
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	2202      	movs	r2, #2
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f95d 	bl	800948a <si4463_getResponse>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <si4463_getTxFifoInfo+0x44>
 80081d6:	f06f 0309 	mvn.w	r3, #9
 80081da:	e001      	b.n	80081e0 <si4463_getTxFifoInfo+0x48>

    return rxbuff[1];
 80081dc:	7a7b      	ldrb	r3, [r7, #9]
 80081de:	b21b      	sxth	r3, r3
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <si4463_getRxFifoInfo>:

int16_t si4463_getRxFifoInfo(si4463_t* si4463)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = {FIFO_INFO, 0x00};
 80081f0:	2315      	movs	r3, #21
 80081f2:	81bb      	strh	r3, [r7, #12]
    uint8_t rxbuff[2] = {0};
 80081f4:	2300      	movs	r3, #0
 80081f6:	813b      	strh	r3, [r7, #8]
    if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 80081f8:	f107 030c 	add.w	r3, r7, #12
 80081fc:	2202      	movs	r2, #2
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 f8ec 	bl	80093de <si4463_sendCommand>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <si4463_getRxFifoInfo+0x2a>
 800820c:	f06f 030a 	mvn.w	r3, #10
 8008210:	e00e      	b.n	8008230 <si4463_getRxFifoInfo+0x48>
    if(!si4463_getResponse(si4463, rxbuff, 2)) return SI4463_ERR_READ_REG;
 8008212:	f107 0308 	add.w	r3, r7, #8
 8008216:	2202      	movs	r2, #2
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f935 	bl	800948a <si4463_getResponse>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d102      	bne.n	800822c <si4463_getRxFifoInfo+0x44>
 8008226:	f06f 0309 	mvn.w	r3, #9
 800822a:	e001      	b.n	8008230 <si4463_getRxFifoInfo+0x48>

    return rxbuff[0];
 800822c:	7a3b      	ldrb	r3, [r7, #8]
 800822e:	b21b      	sxth	r3, r3
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <si4463_getCurrentRSSI>:

int8_t si4463_getCurrentRSSI(si4463_t* si4463)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = {GET_MODEM_STATUS, 0x00};
 8008240:	2322      	movs	r3, #34	@ 0x22
 8008242:	82bb      	strh	r3, [r7, #20]
	uint8_t rxbuff[8] = {0};
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
	if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	2202      	movs	r2, #2
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f8c2 	bl	80093de <si4463_sendCommand>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <si4463_getCurrentRSSI+0x2e>
 8008260:	f06f 030a 	mvn.w	r3, #10
 8008264:	e018      	b.n	8008298 <si4463_getCurrentRSSI+0x60>
	if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 8008266:	f107 030c 	add.w	r3, r7, #12
 800826a:	2208      	movs	r2, #8
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f90b 	bl	800948a <si4463_getResponse>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d102      	bne.n	8008280 <si4463_getCurrentRSSI+0x48>
 800827a:	f06f 0309 	mvn.w	r3, #9
 800827e:	e00b      	b.n	8008298 <si4463_getCurrentRSSI+0x60>

    si4463->status.currentRSSI = rxbuff[2]/2-120;
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	b2db      	uxtb	r3, r3
 8008286:	3b78      	subs	r3, #120	@ 0x78
 8008288:	b2db      	uxtb	r3, r3
 800828a:	b25a      	sxtb	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	return si4463->status.currentRSSI;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f993 3094 	ldrsb.w	r3, [r3, #148]	@ 0x94
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <si4463_getLatchRSSI>:

int8_t si4463_getLatchRSSI(si4463_t* si4463)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = {GET_MODEM_STATUS, 0x00};
 80082a8:	2322      	movs	r3, #34	@ 0x22
 80082aa:	82bb      	strh	r3, [r7, #20]
	uint8_t rxbuff[8] = {0};
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
	if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	2202      	movs	r2, #2
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f88e 	bl	80093de <si4463_sendCommand>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <si4463_getLatchRSSI+0x2e>
 80082c8:	f06f 030a 	mvn.w	r3, #10
 80082cc:	e018      	b.n	8008300 <si4463_getLatchRSSI+0x60>
	if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 80082ce:	f107 030c 	add.w	r3, r7, #12
 80082d2:	2208      	movs	r2, #8
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 f8d7 	bl	800948a <si4463_getResponse>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <si4463_getLatchRSSI+0x48>
 80082e2:	f06f 0309 	mvn.w	r3, #9
 80082e6:	e00b      	b.n	8008300 <si4463_getLatchRSSI+0x60>

    si4463->status.latchRSSI = rxbuff[3]/2-120;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	3b78      	subs	r3, #120	@ 0x78
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	b25a      	sxtb	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	return si4463->status.latchRSSI;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f993 3095 	ldrsb.w	r3, [r3, #149]	@ 0x95
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <si4463_clearRxFifo>:

    return SI4463_OK;
}

int8_t si4463_clearRxFifo(si4463_t* si4463)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = {FIFO_INFO, 0x02};
 8008310:	f240 2315 	movw	r3, #533	@ 0x215
 8008314:	81bb      	strh	r3, [r7, #12]
    if(!si4463_sendCommand(si4463, cmd, 2)) return SI4463_ERR_WRITE_REG;
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	2202      	movs	r2, #2
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f85d 	bl	80093de <si4463_sendCommand>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <si4463_clearRxFifo+0x28>
 800832a:	f06f 030a 	mvn.w	r3, #10
 800832e:	e009      	b.n	8008344 <si4463_clearRxFifo+0x3c>
    if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f87a 	bl	800942a <si4463_waitforCTS>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <si4463_clearRxFifo+0x3a>
 800833c:	f06f 0314 	mvn.w	r3, #20
 8008340:	e000      	b.n	8008344 <si4463_clearRxFifo+0x3c>

    return SI4463_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <si4463_clearInterrupts>:

int8_t si4463_clearInterrupts(si4463_t* si4463)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4] = {GET_INT_STATUS, 0x00, 0x00, 0x00};
 8008354:	2320      	movs	r3, #32
 8008356:	617b      	str	r3, [r7, #20]
    uint8_t rxbuff[8] = {0};
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
    if(!si4463_sendCommand(si4463, cmd, 4)) return SI4463_ERR_WRITE_REG;
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	2204      	movs	r2, #4
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f838 	bl	80093de <si4463_sendCommand>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <si4463_clearInterrupts+0x2e>
 8008374:	f06f 030a 	mvn.w	r3, #10
 8008378:	e00d      	b.n	8008396 <si4463_clearInterrupts+0x4a>
    if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 800837a:	f107 030c 	add.w	r3, r7, #12
 800837e:	2208      	movs	r2, #8
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 f881 	bl	800948a <si4463_getResponse>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <si4463_clearInterrupts+0x48>
 800838e:	f06f 0309 	mvn.w	r3, #9
 8008392:	e000      	b.n	8008396 <si4463_clearInterrupts+0x4a>

    return SI4463_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <si4463_getInterrupts>:

int8_t si4463_getInterrupts(si4463_t* si4463)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4] = {GET_INT_STATUS, 0xFF, 0xFF, 0xFF};
 80083a6:	f06f 03df 	mvn.w	r3, #223	@ 0xdf
 80083aa:	613b      	str	r3, [r7, #16]
    uint8_t rxbuff[8] = {0};
 80083ac:	2300      	movs	r3, #0
 80083ae:	60bb      	str	r3, [r7, #8]
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
    if(!si4463_sendCommand(si4463, cmd, 4)) return SI4463_ERR_WRITE_REG;
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	2204      	movs	r2, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f80e 	bl	80093de <si4463_sendCommand>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <si4463_getInterrupts+0x30>
 80083c8:	f06f 030a 	mvn.w	r3, #10
 80083cc:	e11e      	b.n	800860c <si4463_getInterrupts+0x26e>
    if(!si4463_getResponse(si4463, rxbuff, 8)) return SI4463_ERR_READ_REG;
 80083ce:	f107 0308 	add.w	r3, r7, #8
 80083d2:	2208      	movs	r2, #8
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 f857 	bl	800948a <si4463_getResponse>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <si4463_getInterrupts+0x4a>
 80083e2:	f06f 0309 	mvn.w	r3, #9
 80083e6:	e111      	b.n	800860c <si4463_getInterrupts+0x26e>

    /* Get pend bytes */
    uint8_t phPend = rxbuff[2];
 80083e8:	7abb      	ldrb	r3, [r7, #10]
 80083ea:	75fb      	strb	r3, [r7, #23]
    uint8_t modemPend = rxbuff[4];
 80083ec:	7b3b      	ldrb	r3, [r7, #12]
 80083ee:	75bb      	strb	r3, [r7, #22]
    uint8_t chipPend = rxbuff[6];
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	757b      	strb	r3, [r7, #21]

    si4463->interrupts.filterMatch = (phPend >> 7) & 0x1;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	09db      	lsrs	r3, r3, #7
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bf14      	ite	ne
 8008402:	2301      	movne	r3, #1
 8008404:	2300      	moveq	r3, #0
 8008406:	b2da      	uxtb	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    si4463->interrupts.filterMiss = (phPend >> 6) & 0x1;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	099b      	lsrs	r3, r3, #6
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	bf14      	ite	ne
 800841c:	2301      	movne	r3, #1
 800841e:	2300      	moveq	r3, #0
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    si4463->interrupts.packetSent = (phPend >> 5) & 0x1;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	bf14      	ite	ne
 8008436:	2301      	movne	r3, #1
 8008438:	2300      	moveq	r3, #0
 800843a:	b2da      	uxtb	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    si4463->interrupts.packetRx = (phPend >> 4) & 0x1;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	bf14      	ite	ne
 8008450:	2301      	movne	r3, #1
 8008452:	2300      	moveq	r3, #0
 8008454:	b2da      	uxtb	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    si4463->interrupts.crcError = (phPend >> 3) & 0x1;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	08db      	lsrs	r3, r3, #3
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	bf14      	ite	ne
 800846a:	2301      	movne	r3, #1
 800846c:	2300      	moveq	r3, #0
 800846e:	b2da      	uxtb	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    si4463->interrupts.txFifoAlmostEmpty = (phPend >> 1) & 0x1;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2da      	uxtb	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    si4463->interrupts.rxFifoAlmostFull = phPend & 0x1;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2301      	movne	r3, #1
 800849c:	2300      	moveq	r3, #0
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    si4463->interrupts.postambleDetect = (modemPend >> 6) & 0x1;
 80084a6:	7dbb      	ldrb	r3, [r7, #22]
 80084a8:	099b      	lsrs	r3, r3, #6
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bf14      	ite	ne
 80084b4:	2301      	movne	r3, #1
 80084b6:	2300      	moveq	r3, #0
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    si4463->interrupts.invalidSync = (modemPend >> 5) & 0x1;
 80084c0:	7dbb      	ldrb	r3, [r7, #22]
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bf14      	ite	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	2300      	moveq	r3, #0
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    si4463->interrupts.rssiJump = (modemPend >> 4) & 0x1;
 80084da:	7dbb      	ldrb	r3, [r7, #22]
 80084dc:	091b      	lsrs	r3, r3, #4
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	bf14      	ite	ne
 80084e8:	2301      	movne	r3, #1
 80084ea:	2300      	moveq	r3, #0
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    si4463->interrupts.rssi = (modemPend >> 3) & 0x1;
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
 80084f6:	08db      	lsrs	r3, r3, #3
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bf14      	ite	ne
 8008502:	2301      	movne	r3, #1
 8008504:	2300      	moveq	r3, #0
 8008506:	b2da      	uxtb	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    si4463->interrupts.invalidPreamble = (modemPend >> 2) & 0x1;
 800850e:	7dbb      	ldrb	r3, [r7, #22]
 8008510:	089b      	lsrs	r3, r3, #2
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2da      	uxtb	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    si4463->interrupts.preambleDetect = (modemPend >> 1) & 0x1;
 8008528:	7dbb      	ldrb	r3, [r7, #22]
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf14      	ite	ne
 8008536:	2301      	movne	r3, #1
 8008538:	2300      	moveq	r3, #0
 800853a:	b2da      	uxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    si4463->interrupts.packetSent = modemPend & 0x1;
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	bf14      	ite	ne
 800854c:	2301      	movne	r3, #1
 800854e:	2300      	moveq	r3, #0
 8008550:	b2da      	uxtb	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

    si4463->interrupts.cal = (chipPend >> 6) & 0x1;
 8008558:	7d7b      	ldrb	r3, [r7, #21]
 800855a:	099b      	lsrs	r3, r3, #6
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	bf14      	ite	ne
 8008566:	2301      	movne	r3, #1
 8008568:	2300      	moveq	r3, #0
 800856a:	b2da      	uxtb	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    si4463->interrupts.fifoUnderflowOverflowError = (chipPend >> 5) & 0x1;
 8008572:	7d7b      	ldrb	r3, [r7, #21]
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	b2db      	uxtb	r3, r3
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	bf14      	ite	ne
 8008580:	2301      	movne	r3, #1
 8008582:	2300      	moveq	r3, #0
 8008584:	b2da      	uxtb	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    si4463->interrupts.stateChange = (chipPend >> 4) & 0x1;
 800858c:	7d7b      	ldrb	r3, [r7, #21]
 800858e:	091b      	lsrs	r3, r3, #4
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	bf14      	ite	ne
 800859a:	2301      	movne	r3, #1
 800859c:	2300      	moveq	r3, #0
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    si4463->interrupts.cmdError = (chipPend >> 3) & 0x1;
 80085a6:	7d7b      	ldrb	r3, [r7, #21]
 80085a8:	08db      	lsrs	r3, r3, #3
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bf14      	ite	ne
 80085b4:	2301      	movne	r3, #1
 80085b6:	2300      	moveq	r3, #0
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    si4463->interrupts.chipReady = (chipPend >> 2) & 0x1;
 80085c0:	7d7b      	ldrb	r3, [r7, #21]
 80085c2:	089b      	lsrs	r3, r3, #2
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf14      	ite	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	2300      	moveq	r3, #0
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    si4463->interrupts.lowBatt = (chipPend >> 1) & 0x1;
 80085da:	7d7b      	ldrb	r3, [r7, #21]
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bf14      	ite	ne
 80085e8:	2301      	movne	r3, #1
 80085ea:	2300      	moveq	r3, #0
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    si4463->interrupts.wut = chipPend & 0x1;
 80085f4:	7d7b      	ldrb	r3, [r7, #21]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bf14      	ite	ne
 80085fe:	2301      	movne	r3, #1
 8008600:	2300      	moveq	r3, #0
 8008602:	b2da      	uxtb	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    return SI4463_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <si4463_transmit>:

    return SI4463_OK;
}

int8_t si4463_transmit(si4463_t* si4463, uint8_t* txData, uint8_t txDataLen, si4463_state nextState)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	460b      	mov	r3, r1
 8008624:	71fb      	strb	r3, [r7, #7]
 8008626:	4613      	mov	r3, r2
 8008628:	71bb      	strb	r3, [r7, #6]
    int8_t result = si4463_txInterrupt(si4463);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 f930 	bl	8009890 <si4463_txInterrupt>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]
    if(result != SI4463_OK) return result;
 8008634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <si4463_transmit+0x2e>
 800863c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008640:	e059      	b.n	80086f6 <si4463_transmit+0xe2>
    result = si4463_clearInterrupts(si4463);
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f7ff fe82 	bl	800834c <si4463_clearInterrupts>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
    if(result != SI4463_OK) return result;
 800864c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <si4463_transmit+0x46>
 8008654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008658:	e04d      	b.n	80086f6 <si4463_transmit+0xe2>
    result = si4463_getTxFifoInfo(si4463);
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fd9c 	bl	8008198 <si4463_getTxFifoInfo>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]
    if(result >= txDataLen)
 8008664:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	429a      	cmp	r2, r3
 800866c:	db3a      	blt.n	80086e4 <si4463_transmit+0xd0>
    {
        result = si4463_writeTxFiFo(si4463, txData, txDataLen);
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	461a      	mov	r2, r3
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 ff50 	bl	800951a <si4463_writeTxFiFo>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]
        if(result != SI4463_OK) return result;
 800867e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <si4463_transmit+0x78>
 8008686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800868a:	e034      	b.n	80086f6 <si4463_transmit+0xe2>
        result = si4463_startTx(si4463, txDataLen, nextState);
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	b29b      	uxth	r3, r3
 8008690:	79ba      	ldrb	r2, [r7, #6]
 8008692:	4619      	mov	r1, r3
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 ff81 	bl	800959c <si4463_startTx>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]
        if(result != SI4463_OK) return result;
 800869e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <si4463_transmit+0x98>
 80086a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086aa:	e024      	b.n	80086f6 <si4463_transmit+0xe2>
        int counter = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
        // Check if IRQ pin is pulled down
        while(counter < SI4463_TRANSMIT_TIMEOUT)
 80086b0:	e013      	b.n	80086da <si4463_transmit+0xc6>
        {
            if(si4463->gpios.IRQ() == si4463->gpios.gpio_low) return SI4463_OK;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b6:	4798      	blx	r3
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d101      	bne.n	80086ca <si4463_transmit+0xb6>
 80086c6:	2300      	movs	r3, #0
 80086c8:	e015      	b.n	80086f6 <si4463_transmit+0xe2>
            si4463->DelayUs(1000);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80086d2:	4798      	blx	r3
            counter++;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	3301      	adds	r3, #1
 80086d8:	613b      	str	r3, [r7, #16]
        while(counter < SI4463_TRANSMIT_TIMEOUT)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80086e0:	dbe7      	blt.n	80086b2 <si4463_transmit+0x9e>
 80086e2:	e006      	b.n	80086f2 <si4463_transmit+0xde>
        }
    }
    else if(result >= 0)
 80086e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	db02      	blt.n	80086f2 <si4463_transmit+0xde>
        return SI4463_ERR_OVER_TX_FIFO;
 80086ec:	f06f 031e 	mvn.w	r3, #30
 80086f0:	e001      	b.n	80086f6 <si4463_transmit+0xe2>

    return result;
 80086f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <si4463_initRx>:

int8_t si4463_initRx(si4463_t* si4463, uint16_t dataLen, si4463_state nextStateAfterTimeOut, si4463_state nextStateAfterValid, si4463_state nextStateAfterInvalid)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b086      	sub	sp, #24
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	4608      	mov	r0, r1
 8008708:	4611      	mov	r1, r2
 800870a:	461a      	mov	r2, r3
 800870c:	4603      	mov	r3, r0
 800870e:	807b      	strh	r3, [r7, #2]
 8008710:	460b      	mov	r3, r1
 8008712:	707b      	strb	r3, [r7, #1]
 8008714:	4613      	mov	r3, r2
 8008716:	703b      	strb	r3, [r7, #0]
    int result = si4463_clearRxFifo(si4463);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fdf5 	bl	8008308 <si4463_clearRxFifo>
 800871e:	4603      	mov	r3, r0
 8008720:	617b      	str	r3, [r7, #20]
    if(result != SI4463_OK) return result;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <si4463_initRx+0x30>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	b25b      	sxtb	r3, r3
 800872c:	e044      	b.n	80087b8 <si4463_initRx+0xba>
    result = si4463_rxInterrupt(si4463);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f8c9 	bl	80098c6 <si4463_rxInterrupt>
 8008734:	4603      	mov	r3, r0
 8008736:	617b      	str	r3, [r7, #20]
    if(result != SI4463_OK) return result;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <si4463_initRx+0x46>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	b25b      	sxtb	r3, r3
 8008742:	e039      	b.n	80087b8 <si4463_initRx+0xba>
    result = si4463_clearInterrupts(si4463);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff fe01 	bl	800834c <si4463_clearInterrupts>
 800874a:	4603      	mov	r3, r0
 800874c:	617b      	str	r3, [r7, #20]
    if(result != SI4463_OK) return result;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <si4463_initRx+0x5c>
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	b25b      	sxtb	r3, r3
 8008758:	e02e      	b.n	80087b8 <si4463_initRx+0xba>

    uint8_t cmd[8] = {START_RX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 0x00, ((dataLen >> 8) & 0x1F),  
 800875a:	2332      	movs	r3, #50	@ 0x32
 800875c:	733b      	strb	r3, [r7, #12]
 800875e:	2300      	movs	r3, #0
 8008760:	737b      	strb	r3, [r7, #13]
 8008762:	2300      	movs	r3, #0
 8008764:	73bb      	strb	r3, [r7, #14]
 8008766:	887b      	ldrh	r3, [r7, #2]
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	b29b      	uxth	r3, r3
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 031f 	and.w	r3, r3, #31
 8008772:	b2db      	uxtb	r3, r3
 8008774:	73fb      	strb	r3, [r7, #15]
 8008776:	887b      	ldrh	r3, [r7, #2]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	743b      	strb	r3, [r7, #16]
 800877c:	787b      	ldrb	r3, [r7, #1]
 800877e:	747b      	strb	r3, [r7, #17]
 8008780:	783b      	ldrb	r3, [r7, #0]
 8008782:	74bb      	strb	r3, [r7, #18]
 8008784:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008788:	74fb      	strb	r3, [r7, #19]
            (dataLen & 0x00FF), nextStateAfterTimeOut, nextStateAfterValid, nextStateAfterInvalid};
    if(!si4463_sendCommand(si4463, cmd, 8)) return SI4463_ERR_WRITE_REG;
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	2208      	movs	r2, #8
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fe23 	bl	80093de <si4463_sendCommand>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <si4463_initRx+0xa6>
 800879e:	f06f 030a 	mvn.w	r3, #10
 80087a2:	e009      	b.n	80087b8 <si4463_initRx+0xba>
    if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fe40 	bl	800942a <si4463_waitforCTS>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <si4463_initRx+0xb8>
 80087b0:	f06f 0314 	mvn.w	r3, #20
 80087b4:	e000      	b.n	80087b8 <si4463_initRx+0xba>

    return SI4463_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <si4463_receive>:

int8_t si4463_receive(si4463_t* si4463, uint8_t* rxData, uint8_t rxDataLen)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4613      	mov	r3, r2
 80087cc:	71fb      	strb	r3, [r7, #7]
	int result = si4463_clearInterrupts(si4463);
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f7ff fdbc 	bl	800834c <si4463_clearInterrupts>
 80087d4:	4603      	mov	r3, r0
 80087d6:	617b      	str	r3, [r7, #20]
	if(result != SI4463_OK) return result;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <si4463_receive+0x24>
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	b25b      	sxtb	r3, r3
 80087e2:	e00f      	b.n	8008804 <si4463_receive+0x44>
	if(!si4463_readRxDataBuff(si4463, rxData, rxDataLen)) return SI4463_ERR_READ_RXBUFF;
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	461a      	mov	r2, r3
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 ff0c 	bl	8009608 <si4463_readRxDataBuff>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d102      	bne.n	80087fc <si4463_receive+0x3c>
 80087f6:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
 80087fa:	e003      	b.n	8008804 <si4463_receive+0x44>
	return si4463_clearRxFifo(si4463);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fd83 	bl	8008308 <si4463_clearRxFifo>
 8008802:	4603      	mov	r3, r0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <si4463_setTxPower>:

int8_t si4463_setTxPower(si4463_t* si4463, uint8_t power)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
    // Range: 0-127
    if(power > 127 || power < 5) return SI4463_ERR_BAD_PARAM;
 8008818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800881c:	2b00      	cmp	r3, #0
 800881e:	db02      	blt.n	8008826 <si4463_setTxPower+0x1a>
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	2b04      	cmp	r3, #4
 8008824:	d802      	bhi.n	800882c <si4463_setTxPower+0x20>
 8008826:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 800882a:	e00a      	b.n	8008842 <si4463_setTxPower+0x36>
    uint8_t cmd = power;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	73fb      	strb	r3, [r7, #15]

    return si4463_setProperties(si4463, &cmd, 1, PROP_PA_PWR_LVL);
 8008830:	f107 010f 	add.w	r1, r7, #15
 8008834:	f242 2301 	movw	r3, #8705	@ 0x2201
 8008838:	2201      	movs	r2, #1
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 ff7c 	bl	8009738 <si4463_setProperties>
 8008840:	4603      	mov	r3, r0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <si4463_getTxPower>:

int8_t si4463_getTxPower(si4463_t* si4463)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_PA_PWR_LVL;
 8008852:	f242 2301 	movw	r3, #8705	@ 0x2201
 8008856:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
    int res = si4463_getProperties(si4463, &rxbuff, 1, propNum);
 800885c:	8afb      	ldrh	r3, [r7, #22]
 800885e:	f107 010f 	add.w	r1, r7, #15
 8008862:	2201      	movs	r2, #1
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 ffbb 	bl	80097e0 <si4463_getProperties>
 800886a:	4603      	mov	r3, r0
 800886c:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d129      	bne.n	80088c8 <si4463_getTxPower+0x7e>
    {
        if(rxbuff >= 80)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b4f      	cmp	r3, #79	@ 0x4f
 8008878:	d904      	bls.n	8008884 <si4463_getTxPower+0x3a>
            si4463->settings.power = PWR_20_dBm;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008882:	e01e      	b.n	80088c2 <si4463_getTxPower+0x78>
        else if(rxbuff >= 25)
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2b18      	cmp	r3, #24
 8008888:	d904      	bls.n	8008894 <si4463_getTxPower+0x4a>
            si4463->settings.power = PWR_14_dBm;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2203      	movs	r2, #3
 800888e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008892:	e016      	b.n	80088c2 <si4463_getTxPower+0x78>
        else if(rxbuff >= 17)
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	2b10      	cmp	r3, #16
 8008898:	d904      	bls.n	80088a4 <si4463_getTxPower+0x5a>
            si4463->settings.power = PWR_10_dBm;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80088a2:	e00e      	b.n	80088c2 <si4463_getTxPower+0x78>
        else if(rxbuff >= 9)
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d904      	bls.n	80088b4 <si4463_getTxPower+0x6a>
            si4463->settings.power = PWR_4_dBm;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80088b2:	e006      	b.n	80088c2 <si4463_getTxPower+0x78>
        else if(rxbuff >= 5)
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d903      	bls.n	80088c2 <si4463_getTxPower+0x78>
            si4463->settings.power = PWR_0_dBm;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        return rxbuff;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	e001      	b.n	80088cc <si4463_getTxPower+0x82>
    }
    else
        return res;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	b25b      	sxtb	r3, r3
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <si4463_setPreamble>:

int8_t si4463_setPreamble(si4463_t* si4463, uint8_t preambleLen)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
    if(preambleLen < 5) return SI4463_ERR_BAD_PARAM;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d802      	bhi.n	80088ec <si4463_setPreamble+0x18>
 80088e6:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80088ea:	e00a      	b.n	8008902 <si4463_setPreamble+0x2e>
    uint8_t cmd = preambleLen;
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	73fb      	strb	r3, [r7, #15]

    return si4463_setProperties(si4463, &cmd, 1, PROP_PREAMBLE_TX_LENGTH);
 80088f0:	f107 010f 	add.w	r1, r7, #15
 80088f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80088f8:	2201      	movs	r2, #1
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 ff1c 	bl	8009738 <si4463_setProperties>
 8008900:	4603      	mov	r3, r0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <si4463_getPreamble>:

int16_t si4463_getPreamble(si4463_t* si4463)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_PREAMBLE_TX_LENGTH;
 8008912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008916:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]
    int res = si4463_getProperties(si4463, &rxbuff, 1, propNum);
 800891c:	8afb      	ldrh	r3, [r7, #22]
 800891e:	f107 010f 	add.w	r1, r7, #15
 8008922:	2201      	movs	r2, #1
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 ff5b 	bl	80097e0 <si4463_getProperties>
 800892a:	4603      	mov	r3, r0
 800892c:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d108      	bne.n	8008946 <si4463_getPreamble+0x3c>
    {
        si4463->settings.preambleNum = rxbuff;
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
        return si4463->settings.preambleNum;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8008942:	b21b      	sxth	r3, r3
 8008944:	e001      	b.n	800894a <si4463_getPreamble+0x40>
    }
    else
        return res;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	b21b      	sxth	r3, r3
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <si4463_getSyncWords>:
    free(cmd);
    return res;
}

int8_t si4463_getSyncWords(si4463_t* si4463)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b088      	sub	sp, #32
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_SYNC_CONFIG;
 800895a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800895e:	837b      	strh	r3, [r7, #26]
    uint8_t rxbuff[5] = {0};
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	2300      	movs	r3, #0
 8008966:	743b      	strb	r3, [r7, #16]
    int res = si4463_getProperties(si4463, rxbuff, 5, propNum);
 8008968:	8b7b      	ldrh	r3, [r7, #26]
 800896a:	f107 010c 	add.w	r1, r7, #12
 800896e:	2205      	movs	r2, #5
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 ff35 	bl	80097e0 <si4463_getProperties>
 8008976:	4603      	mov	r3, r0
 8008978:	617b      	str	r3, [r7, #20]
    if(res == SI4463_OK)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d11e      	bne.n	80089be <si4463_getSyncWords+0x6c>
    {
        uint8_t syncLen = (0x03 & rxbuff[0]) + 1;
 8008980:	7b3b      	ldrb	r3, [r7, #12]
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	b2db      	uxtb	r3, r3
 8008988:	3301      	adds	r3, #1
 800898a:	74fb      	strb	r3, [r7, #19]
        for(int i = 0; i < syncLen; i++)
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
 8008990:	e00e      	b.n	80089b0 <si4463_getSyncWords+0x5e>
            si4463->settings.syncWords[i] = rxbuff[i+1];
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	3301      	adds	r3, #1
 8008996:	3320      	adds	r3, #32
 8008998:	443b      	add	r3, r7
 800899a:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	338d      	adds	r3, #141	@ 0x8d
 80089a6:	460a      	mov	r2, r1
 80089a8:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < syncLen; i++)
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	3301      	adds	r3, #1
 80089ae:	61fb      	str	r3, [r7, #28]
 80089b0:	7cfb      	ldrb	r3, [r7, #19]
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	dbec      	blt.n	8008992 <si4463_getSyncWords+0x40>
        
        return syncLen;
 80089b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089bc:	e001      	b.n	80089c2 <si4463_getSyncWords+0x70>
    }
    else
        return res;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	b25b      	sxtb	r3, r3
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3720      	adds	r7, #32
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <si4463_setCRC>:

int8_t si4463_setCRC(si4463_t* si4463, bool crcSeed, si4463_crc_poly crcPoly)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
 80089d6:	4613      	mov	r3, r2
 80089d8:	70bb      	strb	r3, [r7, #2]
	if((0x0F & crcPoly) > 8) return 0;
 80089da:	78bb      	ldrb	r3, [r7, #2]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d901      	bls.n	80089ea <si4463_setCRC+0x20>
 80089e6:	2300      	movs	r3, #0
 80089e8:	e017      	b.n	8008a1a <si4463_setCRC+0x50>
	uint8_t cmd = (0x80 & (crcSeed << 3))  | (0x0F & crcPoly);
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	b25b      	sxtb	r3, r3
 80089f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089f4:	b25a      	sxtb	r2, r3
 80089f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	b25b      	sxtb	r3, r3
 8008a00:	4313      	orrs	r3, r2
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	73fb      	strb	r3, [r7, #15]
 
    return si4463_setProperties(si4463, &cmd, 1, PROP_PKT_CRC_CONFIG);
 8008a08:	f107 010f 	add.w	r1, r7, #15
 8008a0c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8008a10:	2201      	movs	r2, #1
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fe90 	bl	8009738 <si4463_setProperties>
 8008a18:	4603      	mov	r3, r0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <si4463_getCRC>:

int8_t si4463_getCRC(si4463_t* si4463)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_PKT_CRC_CONFIG;
 8008a2a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8008a2e:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
    int res = si4463_getProperties(si4463, &rxbuff, 1, propNum);
 8008a34:	8afb      	ldrh	r3, [r7, #22]
 8008a36:	f107 010f 	add.w	r1, r7, #15
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fecf 	bl	80097e0 <si4463_getProperties>
 8008a42:	4603      	mov	r3, r0
 8008a44:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d113      	bne.n	8008a74 <si4463_getCRC+0x52>
    {
        si4463->settings.crcSeed = (0x80 & rxbuff) >> 7;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	09db      	lsrs	r3, r3, #7
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bf14      	ite	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	2300      	moveq	r3, #0
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        si4463->settings.crcPoly = 0x0F & rxbuff;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
        return SI4463_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e001      	b.n	8008a78 <si4463_getCRC+0x56>
    }
    else
        return res;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	b25b      	sxtb	r3, r3
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <si4463_getFreqConfig>:

int8_t si4463_getFreqConfig(si4463_t* si4463)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_FREQ_CONTROL_INTE;
 8008a88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a8c:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff[4] = {0};
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]

    int res = si4463_getProperties(si4463, rxbuff, 4, propNum);
 8008a92:	8afb      	ldrh	r3, [r7, #22]
 8008a94:	f107 010c 	add.w	r1, r7, #12
 8008a98:	2204      	movs	r2, #4
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fea0 	bl	80097e0 <si4463_getProperties>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10f      	bne.n	8008aca <si4463_getFreqConfig+0x4a>
    {
        si4463->freq.freq_inte = rxbuff[0];
 8008aaa:	7b3a      	ldrb	r2, [r7, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        si4463->freq.freq_frac = ((0x0F & rxbuff[1]) << 16) | (rxbuff[2] << 8) | rxbuff[3];
 8008ab2:	7b7b      	ldrb	r3, [r7, #13]
 8008ab4:	041b      	lsls	r3, r3, #16
 8008ab6:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	021b      	lsls	r3, r3, #8
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	7bfa      	ldrb	r2, [r7, #15]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    propNum = PROP_MODEM_CLKGEN_BAND;
 8008aca:	f242 0351 	movw	r3, #8273	@ 0x2051
 8008ace:	82fb      	strh	r3, [r7, #22]
    memset(rxbuff, '\0', 4);
 8008ad0:	f107 030c 	add.w	r3, r7, #12
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f002 f911 	bl	800ad00 <memset>
    res = si4463_getProperties(si4463, rxbuff, 1, propNum);
 8008ade:	8afb      	ldrh	r3, [r7, #22]
 8008ae0:	f107 010c 	add.w	r1, r7, #12
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fe7a 	bl	80097e0 <si4463_getProperties>
 8008aec:	4603      	mov	r3, r0
 8008aee:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14e      	bne.n	8008b94 <si4463_getFreqConfig+0x114>
    {
        // ENUM_1 or ENUM 0
        if(0x08 & rxbuff[0])
 8008af6:	7b3b      	ldrb	r3, [r7, #12]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <si4463_getFreqConfig+0x8c>
            si4463->freq.n_presc = 2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008b0a:	e003      	b.n	8008b14 <si4463_getFreqConfig+0x94>
        else
            si4463->freq.n_presc = 4;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        switch(0x07 & rxbuff[0])
 8008b14:	7b3b      	ldrb	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	d83a      	bhi.n	8008b94 <si4463_getFreqConfig+0x114>
 8008b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b24 <si4463_getFreqConfig+0xa4>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b45 	.word	0x08008b45
 8008b28:	08008b4f 	.word	0x08008b4f
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	08008b63 	.word	0x08008b63
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b77 	.word	0x08008b77
 8008b3c:	08008b81 	.word	0x08008b81
 8008b40:	08008b8b 	.word	0x08008b8b
        {
            case FVCO_DIV_4:
                si4463->freq.outdiv = 4;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2204      	movs	r2, #4
 8008b48:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b4c:	e022      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_6:
                si4463->freq.outdiv = 6;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2206      	movs	r2, #6
 8008b52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b56:	e01d      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_8:
                si4463->freq.outdiv = 8;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2208      	movs	r2, #8
 8008b5c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b60:	e018      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_12:
                si4463->freq.outdiv = 12;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	220c      	movs	r2, #12
 8008b66:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b6a:	e013      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_16:
                si4463->freq.outdiv = 16;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b74:	e00e      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_24:
                si4463->freq.outdiv = 24;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2218      	movs	r2, #24
 8008b7a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b7e:	e009      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_24_2:
                si4463->freq.outdiv = 24;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2218      	movs	r2, #24
 8008b84:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b88:	e004      	b.n	8008b94 <si4463_getFreqConfig+0x114>
            case FVCO_DIV_24_3:
                si4463->freq.outdiv = 24;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2218      	movs	r2, #24
 8008b8e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
                break;
 8008b92:	bf00      	nop
        }
    }

    return res;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	b25b      	sxtb	r3, r3
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <si4463_setFrequency>:

int8_t si4463_setFrequency(si4463_t* si4463, uint32_t freq)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
    int res = si4463_getFreqConfig(si4463);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff ff68 	bl	8008a80 <si4463_getFreqConfig>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	617b      	str	r3, [r7, #20]
    if(res == SI4463_OK)
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d155      	bne.n	8008c66 <si4463_setFrequency+0xc6>
    {
        uint8_t cmd[3] = {0};
 8008bba:	4b2e      	ldr	r3, [pc, #184]	@ (8008c74 <si4463_setFrequency+0xd4>)
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	813b      	strh	r3, [r7, #8]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	72bb      	strb	r3, [r7, #10]
        float temp = (float)freq / ((si4463->freq.n_presc * (float)RADIO_CONFIGURATION_DATA_RADIO_XO_FREQ)/ si4463->freq.outdiv);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8008bd4:	ee07 3a90 	vmov	s15, r3
 8008bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bdc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008c78 <si4463_setFrequency+0xd8>
 8008be0:	ee27 6a87 	vmul.f32	s12, s15, s14
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bf2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8008bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bfa:	edc7 7a04 	vstr	s15, [r7, #16]
        uint32_t fc_frac = (temp - si4463->freq.freq_inte)*pow(2, 19);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8008c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c14:	ee17 0a90 	vmov	r0, s15
 8008c18:	f7f7 fcb6 	bl	8000588 <__aeabi_f2d>
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	4b16      	ldr	r3, [pc, #88]	@ (8008c7c <si4463_setFrequency+0xdc>)
 8008c22:	f7f7 fd09 	bl	8000638 <__aeabi_dmul>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f7f7 ffdb 	bl	8000be8 <__aeabi_d2uiz>
 8008c32:	4603      	mov	r3, r0
 8008c34:	60fb      	str	r3, [r7, #12]
        cmd[0] = 0x0F & (fc_frac >> 16);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	0c1b      	lsrs	r3, r3, #16
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	723b      	strb	r3, [r7, #8]
        cmd[1] = 0xFF & fc_frac >> 8;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	727b      	strb	r3, [r7, #9]
        cmd[2] = 0xFF & fc_frac;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	72bb      	strb	r3, [r7, #10]
        return si4463_setProperties(si4463, cmd, 3, PROP_FREQ_CONTROL_FRAC);
 8008c52:	f107 0108 	add.w	r1, r7, #8
 8008c56:	f244 0301 	movw	r3, #16385	@ 0x4001
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fd6b 	bl	8009738 <si4463_setProperties>
 8008c62:	4603      	mov	r3, r0
 8008c64:	e001      	b.n	8008c6a <si4463_setFrequency+0xca>
    }
    else
        return res;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	b25b      	sxtb	r3, r3
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	0800f444 	.word	0x0800f444
 8008c78:	4be4e1c0 	.word	0x4be4e1c0
 8008c7c:	41200000 	.word	0x41200000

08008c80 <si4463_getFrequency>:

int32_t si4463_getFrequency(si4463_t* si4463)
{
 8008c80:	b5b0      	push	{r4, r5, r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
    int res = si4463_getFreqConfig(si4463);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff fef9 	bl	8008a80 <si4463_getFreqConfig>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	617b      	str	r3, [r7, #20]
    if(res == SI4463_OK)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d170      	bne.n	8008d7a <si4463_getFrequency+0xfa>
    {
        float frequecny = ((float)si4463->freq.freq_inte + (float)si4463->freq.freq_frac/pow(2, 19))*(si4463->freq.n_presc*(float)RADIO_CONFIGURATION_DATA_RADIO_XO_FREQ/si4463->freq.outdiv);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca6:	ee17 0a90 	vmov	r0, s15
 8008caa:	f7f7 fc6d 	bl	8000588 <__aeabi_f2d>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	ee17 0a90 	vmov	r0, s15
 8008cc2:	f7f7 fc61 	bl	8000588 <__aeabi_f2d>
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	4b31      	ldr	r3, [pc, #196]	@ (8008d90 <si4463_getFrequency+0x110>)
 8008ccc:	f7f7 fdde 	bl	800088c <__aeabi_ddiv>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f7f7 faf8 	bl	80002cc <__adddf3>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	461d      	mov	r5, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008d94 <si4463_getFrequency+0x114>
 8008cf6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008d0c:	ee16 0a90 	vmov	r0, s13
 8008d10:	f7f7 fc3a 	bl	8000588 <__aeabi_f2d>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4620      	mov	r0, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	f7f7 fc8c 	bl	8000638 <__aeabi_dmul>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4610      	mov	r0, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	f7f7 ff7e 	bl	8000c28 <__aeabi_d2f>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	613b      	str	r3, [r7, #16]
        int32_t rounded_freq = (int)(frequecny * 0.001 + 0.5)*1000;
 8008d30:	6938      	ldr	r0, [r7, #16]
 8008d32:	f7f7 fc29 	bl	8000588 <__aeabi_f2d>
 8008d36:	a314      	add	r3, pc, #80	@ (adr r3, 8008d88 <si4463_getFrequency+0x108>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fc7c 	bl	8000638 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4610      	mov	r0, r2
 8008d46:	4619      	mov	r1, r3
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <si4463_getFrequency+0x118>)
 8008d4e:	f7f7 fabd 	bl	80002cc <__adddf3>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4610      	mov	r0, r2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	f7f7 ff1d 	bl	8000b98 <__aeabi_d2iz>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d64:	fb02 f303 	mul.w	r3, r2, r3
 8008d68:	60fb      	str	r3, [r7, #12]
        si4463->settings.frequency = rounded_freq;
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        return si4463->settings.frequency;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d78:	e000      	b.n	8008d7c <si4463_getFrequency+0xfc>
    }
    else
        return res;
 8008d7a:	697b      	ldr	r3, [r7, #20]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bdb0      	pop	{r4, r5, r7, pc}
 8008d84:	f3af 8000 	nop.w
 8008d88:	d2f1a9fc 	.word	0xd2f1a9fc
 8008d8c:	3f50624d 	.word	0x3f50624d
 8008d90:	41200000 	.word	0x41200000
 8008d94:	4be4e1c0 	.word	0x4be4e1c0
 8008d98:	3fe00000 	.word	0x3fe00000

08008d9c <si4463_setTxModulation>:

int8_t si4463_setTxModulation(si4463_t* si4463, si4463_mod_type mod)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
    int res = SI4463_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]
    // OOK for beacons
    if(mod == MOD_OOK)
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d10c      	bne.n	8008dcc <si4463_setTxModulation+0x30>
    {
        res = si4463_configArray(si4463, OOK_TX);
 8008db2:	4948      	ldr	r1, [pc, #288]	@ (8008ed4 <si4463_setTxModulation+0x138>)
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fc57 	bl	8009668 <si4463_configArray>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	60fb      	str	r3, [r7, #12]
        si4463->settings.txMod = mod;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        return res;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	e07e      	b.n	8008eca <si4463_setTxModulation+0x12e>
    }

    // GMSK and FSK for telemetries
    switch (si4463->settings.txDataRate)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d86a      	bhi.n	8008eac <si4463_setTxModulation+0x110>
 8008dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <si4463_setTxModulation+0x40>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e7d 	.word	0x08008e7d
 8008de0:	08008e4d 	.word	0x08008e4d
 8008de4:	08008e1d 	.word	0x08008e1d
 8008de8:	08008ded 	.word	0x08008ded
    {
    case DR_9600:
        if(mod == MOD_2GFSK)
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d106      	bne.n	8008e00 <si4463_setTxModulation+0x64>
            res = si4463_configArray(si4463, GMSK_9600_TX);
 8008df2:	4939      	ldr	r1, [pc, #228]	@ (8008ed8 <si4463_setTxModulation+0x13c>)
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fc37 	bl	8009668 <si4463_configArray>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_9600_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008dfe:	e05b      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
        else if(mod == MOD_2FSK)
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d106      	bne.n	8008e14 <si4463_setTxModulation+0x78>
            res = si4463_configArray(si4463, FSK_9600_TX);
 8008e06:	4935      	ldr	r1, [pc, #212]	@ (8008edc <si4463_setTxModulation+0x140>)
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fc2d 	bl	8009668 <si4463_configArray>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	60fb      	str	r3, [r7, #12]
        break;
 8008e12:	e051      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
            res = SI4463_ERR_INVALID_MOD;
 8008e14:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008e18:	60fb      	str	r3, [r7, #12]
        break;
 8008e1a:	e04d      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
    case DR_4800:
        if(mod == MOD_2GFSK)
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d106      	bne.n	8008e30 <si4463_setTxModulation+0x94>
            res = si4463_configArray(si4463, GMSK_4800_TX);
 8008e22:	492f      	ldr	r1, [pc, #188]	@ (8008ee0 <si4463_setTxModulation+0x144>)
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fc1f 	bl	8009668 <si4463_configArray>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_4800_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008e2e:	e043      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
        else if(mod == MOD_2FSK)
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d106      	bne.n	8008e44 <si4463_setTxModulation+0xa8>
            res = si4463_configArray(si4463, FSK_4800_TX);
 8008e36:	492b      	ldr	r1, [pc, #172]	@ (8008ee4 <si4463_setTxModulation+0x148>)
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fc15 	bl	8009668 <si4463_configArray>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	60fb      	str	r3, [r7, #12]
        break;
 8008e42:	e039      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
            res = SI4463_ERR_INVALID_MOD;
 8008e44:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008e48:	60fb      	str	r3, [r7, #12]
        break;
 8008e4a:	e035      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
    case DR_2400:
        if(mod == MOD_2GFSK)
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d106      	bne.n	8008e60 <si4463_setTxModulation+0xc4>
            res = si4463_configArray(si4463, GMSK_2400_TX);
 8008e52:	4925      	ldr	r1, [pc, #148]	@ (8008ee8 <si4463_setTxModulation+0x14c>)
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc07 	bl	8009668 <si4463_configArray>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_2400_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008e5e:	e02b      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
        else if(mod == MOD_2FSK)
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d106      	bne.n	8008e74 <si4463_setTxModulation+0xd8>
            res = si4463_configArray(si4463, FSK_2400_TX);
 8008e66:	4921      	ldr	r1, [pc, #132]	@ (8008eec <si4463_setTxModulation+0x150>)
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fbfd 	bl	8009668 <si4463_configArray>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	60fb      	str	r3, [r7, #12]
        break;
 8008e72:	e021      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
            res = SI4463_ERR_INVALID_MOD;
 8008e74:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008e78:	60fb      	str	r3, [r7, #12]
        break;
 8008e7a:	e01d      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
    case DR_1200:
        if(mod == MOD_2GFSK)
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d106      	bne.n	8008e90 <si4463_setTxModulation+0xf4>
            res = si4463_configArray(si4463, GMSK_1200_TX);
 8008e82:	491b      	ldr	r1, [pc, #108]	@ (8008ef0 <si4463_setTxModulation+0x154>)
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fbef 	bl	8009668 <si4463_configArray>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_1200_TX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008e8e:	e013      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
        else if(mod == MOD_2FSK)
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d106      	bne.n	8008ea4 <si4463_setTxModulation+0x108>
            res = si4463_configArray(si4463, FSK_1200_TX);
 8008e96:	4917      	ldr	r1, [pc, #92]	@ (8008ef4 <si4463_setTxModulation+0x158>)
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fbe5 	bl	8009668 <si4463_configArray>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	60fb      	str	r3, [r7, #12]
        break;
 8008ea2:	e009      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
            res = SI4463_ERR_INVALID_MOD;
 8008ea4:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008ea8:	60fb      	str	r3, [r7, #12]
        break;
 8008eaa:	e005      	b.n	8008eb8 <si4463_setTxModulation+0x11c>
    default:
        DEBUG_PRINTF("Invalid Tx data rate ! \r\n");
 8008eac:	4812      	ldr	r0, [pc, #72]	@ (8008ef8 <si4463_setTxModulation+0x15c>)
 8008eae:	f001 fe27 	bl	800ab00 <puts>
        res = SI4463_ERR_BAD_PARAM;
 8008eb2:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8008eb6:	60fb      	str	r3, [r7, #12]
    }
    if(res == SI4463_OK)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <si4463_setTxModulation+0x12a>
        si4463->settings.txMod = mod;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return res;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	b25b      	sxtb	r3, r3
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	2000057c 	.word	0x2000057c
 8008ed8:	2000017c 	.word	0x2000017c
 8008edc:	2000037c 	.word	0x2000037c
 8008ee0:	200001fc 	.word	0x200001fc
 8008ee4:	200003fc 	.word	0x200003fc
 8008ee8:	2000027c 	.word	0x2000027c
 8008eec:	2000047c 	.word	0x2000047c
 8008ef0:	200002fc 	.word	0x200002fc
 8008ef4:	200004fc 	.word	0x200004fc
 8008ef8:	0800f448 	.word	0x0800f448

08008efc <si4463_setRxModulation>:

int8_t si4463_setRxModulation(si4463_t* si4463, si4463_mod_type mod)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
    int res = SI4463_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
    switch (si4463->settings.rxDataRate)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d86a      	bhi.n	8008fec <si4463_setRxModulation+0xf0>
 8008f16:	a201      	add	r2, pc, #4	@ (adr r2, 8008f1c <si4463_setRxModulation+0x20>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008fbd 	.word	0x08008fbd
 8008f20:	08008f8d 	.word	0x08008f8d
 8008f24:	08008f5d 	.word	0x08008f5d
 8008f28:	08008f2d 	.word	0x08008f2d
    {
    case DR_9600:
        if(mod == MOD_2GFSK)
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d106      	bne.n	8008f40 <si4463_setRxModulation+0x44>
            res = si4463_configArray(si4463, GMSK_9600_RX);
 8008f32:	4938      	ldr	r1, [pc, #224]	@ (8009014 <si4463_setRxModulation+0x118>)
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fb97 	bl	8009668 <si4463_configArray>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_9600_RX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008f3e:	e05b      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
        else if(mod == MOD_2FSK)
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d106      	bne.n	8008f54 <si4463_setRxModulation+0x58>
            res = si4463_configArray(si4463, FSK_9600_RX);
 8008f46:	4934      	ldr	r1, [pc, #208]	@ (8009018 <si4463_setRxModulation+0x11c>)
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fb8d 	bl	8009668 <si4463_configArray>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	60fb      	str	r3, [r7, #12]
        break;
 8008f52:	e051      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 8008f54:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008f58:	60fb      	str	r3, [r7, #12]
        break;
 8008f5a:	e04d      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
    case DR_4800:
        if(mod == MOD_2GFSK)
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d106      	bne.n	8008f70 <si4463_setRxModulation+0x74>
            res = si4463_configArray(si4463, GMSK_4800_RX);
 8008f62:	492e      	ldr	r1, [pc, #184]	@ (800901c <si4463_setRxModulation+0x120>)
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fb7f 	bl	8009668 <si4463_configArray>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_4800_RX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008f6e:	e043      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
        else if(mod == MOD_2FSK)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d106      	bne.n	8008f84 <si4463_setRxModulation+0x88>
            res = si4463_configArray(si4463, FSK_4800_RX);
 8008f76:	492a      	ldr	r1, [pc, #168]	@ (8009020 <si4463_setRxModulation+0x124>)
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fb75 	bl	8009668 <si4463_configArray>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	60fb      	str	r3, [r7, #12]
        break;
 8008f82:	e039      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 8008f84:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008f88:	60fb      	str	r3, [r7, #12]
        break;
 8008f8a:	e035      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
    case DR_2400:
        if(mod == MOD_2GFSK)
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d106      	bne.n	8008fa0 <si4463_setRxModulation+0xa4>
            res = si4463_configArray(si4463, GMSK_2400_RX);
 8008f92:	4924      	ldr	r1, [pc, #144]	@ (8009024 <si4463_setRxModulation+0x128>)
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fb67 	bl	8009668 <si4463_configArray>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_2400_RX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008f9e:	e02b      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
        else if(mod == MOD_2FSK)
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d106      	bne.n	8008fb4 <si4463_setRxModulation+0xb8>
            res = si4463_configArray(si4463, FSK_2400_RX);
 8008fa6:	4920      	ldr	r1, [pc, #128]	@ (8009028 <si4463_setRxModulation+0x12c>)
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fb5d 	bl	8009668 <si4463_configArray>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	60fb      	str	r3, [r7, #12]
        break;
 8008fb2:	e021      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 8008fb4:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008fb8:	60fb      	str	r3, [r7, #12]
        break;
 8008fba:	e01d      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
    case DR_1200:
        if(mod == MOD_2GFSK)
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d106      	bne.n	8008fd0 <si4463_setRxModulation+0xd4>
            res = si4463_configArray(si4463, GMSK_1200_RX);
 8008fc2:	491a      	ldr	r1, [pc, #104]	@ (800902c <si4463_setRxModulation+0x130>)
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fb4f 	bl	8009668 <si4463_configArray>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	60fb      	str	r3, [r7, #12]
        else if(mod == MOD_2FSK)
            res = si4463_configArray(si4463, FSK_1200_RX);
        else
            res = SI4463_ERR_INVALID_MOD;
        break;
 8008fce:	e013      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
        else if(mod == MOD_2FSK)
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d106      	bne.n	8008fe4 <si4463_setRxModulation+0xe8>
            res = si4463_configArray(si4463, FSK_1200_RX);
 8008fd6:	4916      	ldr	r1, [pc, #88]	@ (8009030 <si4463_setRxModulation+0x134>)
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fb45 	bl	8009668 <si4463_configArray>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	60fb      	str	r3, [r7, #12]
        break;
 8008fe2:	e009      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
            res = SI4463_ERR_INVALID_MOD;
 8008fe4:	f06f 0332 	mvn.w	r3, #50	@ 0x32
 8008fe8:	60fb      	str	r3, [r7, #12]
        break;
 8008fea:	e005      	b.n	8008ff8 <si4463_setRxModulation+0xfc>
    default:
        DEBUG_PRINTF("Invalid Rx data rate ! \r\n");
 8008fec:	4811      	ldr	r0, [pc, #68]	@ (8009034 <si4463_setRxModulation+0x138>)
 8008fee:	f001 fd87 	bl	800ab00 <puts>
        res = SI4463_ERR_BAD_PARAM;
 8008ff2:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8008ff6:	60fb      	str	r3, [r7, #12]
    }
    if(res == SI4463_OK)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <si4463_setRxModulation+0x10a>
        si4463->settings.rxMod = mod;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    return res;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	b25b      	sxtb	r3, r3
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000194 	.word	0x20000194
 8009018:	20000394 	.word	0x20000394
 800901c:	20000214 	.word	0x20000214
 8009020:	20000414 	.word	0x20000414
 8009024:	20000294 	.word	0x20000294
 8009028:	20000494 	.word	0x20000494
 800902c:	20000314 	.word	0x20000314
 8009030:	20000514 	.word	0x20000514
 8009034:	0800f464 	.word	0x0800f464

08009038 <si4463_getModulation>:

int8_t si4463_getModulation(si4463_t* si4463)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_MODEM_MOD_TYPE;
 8009040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009044:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	73bb      	strb	r3, [r7, #14]
    int res = si4463_getProperties(si4463, &rxbuff, 1, propNum);
 800904a:	8afb      	ldrh	r3, [r7, #22]
 800904c:	f107 010e 	add.w	r1, r7, #14
 8009050:	2201      	movs	r2, #1
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fbc4 	bl	80097e0 <si4463_getProperties>
 8009058:	4603      	mov	r3, r0
 800905a:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <si4463_getModulation+0x38>
    {
        uint8_t modType = 0x07 & rxbuff;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	73fb      	strb	r3, [r7, #15]
        return modType;
 800906a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906e:	e001      	b.n	8009074 <si4463_getModulation+0x3c>
    }
    else
        return res;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	b25b      	sxtb	r3, r3
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <si4463_setTxDataRate>:

int8_t si4463_setTxDataRate(si4463_t* si4463, si4463_data_rate dataRate)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
    int res = SI4463_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
    switch (si4463->settings.txMod)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009092:	2b02      	cmp	r3, #2
 8009094:	d02d      	beq.n	80090f2 <si4463_setTxDataRate+0x76>
 8009096:	2b03      	cmp	r3, #3
 8009098:	d157      	bne.n	800914a <si4463_setTxDataRate+0xce>
    {
    case MOD_2GFSK:
        if(dataRate == DR_9600)
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	2b03      	cmp	r3, #3
 800909e:	d106      	bne.n	80090ae <si4463_setTxDataRate+0x32>
            res = si4463_configArray(si4463, GMSK_9600_TX);
 80090a0:	4933      	ldr	r1, [pc, #204]	@ (8009170 <si4463_setTxDataRate+0xf4>)
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fae0 	bl	8009668 <si4463_configArray>
 80090a8:	4603      	mov	r3, r0
 80090aa:	60fb      	str	r3, [r7, #12]
            res = si4463_configArray(si4463, GMSK_2400_TX);
        else if(dataRate == DR_1200)
            res = si4463_configArray(si4463, GMSK_1200_TX);
        else
            res = SI4463_ERR_INVALID_DR;
        break;
 80090ac:	e053      	b.n	8009156 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_4800)
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d106      	bne.n	80090c2 <si4463_setTxDataRate+0x46>
            res = si4463_configArray(si4463, GMSK_4800_TX);
 80090b4:	492f      	ldr	r1, [pc, #188]	@ (8009174 <si4463_setTxDataRate+0xf8>)
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fad6 	bl	8009668 <si4463_configArray>
 80090bc:	4603      	mov	r3, r0
 80090be:	60fb      	str	r3, [r7, #12]
        break;
 80090c0:	e049      	b.n	8009156 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_2400)
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d106      	bne.n	80090d6 <si4463_setTxDataRate+0x5a>
            res = si4463_configArray(si4463, GMSK_2400_TX);
 80090c8:	492b      	ldr	r1, [pc, #172]	@ (8009178 <si4463_setTxDataRate+0xfc>)
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 facc 	bl	8009668 <si4463_configArray>
 80090d0:	4603      	mov	r3, r0
 80090d2:	60fb      	str	r3, [r7, #12]
        break;
 80090d4:	e03f      	b.n	8009156 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_1200)
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <si4463_setTxDataRate+0x6e>
            res = si4463_configArray(si4463, GMSK_1200_TX);
 80090dc:	4927      	ldr	r1, [pc, #156]	@ (800917c <si4463_setTxDataRate+0x100>)
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fac2 	bl	8009668 <si4463_configArray>
 80090e4:	4603      	mov	r3, r0
 80090e6:	60fb      	str	r3, [r7, #12]
        break;
 80090e8:	e035      	b.n	8009156 <si4463_setTxDataRate+0xda>
            res = SI4463_ERR_INVALID_DR;
 80090ea:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 80090ee:	60fb      	str	r3, [r7, #12]
        break;
 80090f0:	e031      	b.n	8009156 <si4463_setTxDataRate+0xda>
    case MOD_2FSK:
        if(dataRate == DR_9600)
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d106      	bne.n	8009106 <si4463_setTxDataRate+0x8a>
            res = si4463_configArray(si4463, FSK_9600_TX);
 80090f8:	4921      	ldr	r1, [pc, #132]	@ (8009180 <si4463_setTxDataRate+0x104>)
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fab4 	bl	8009668 <si4463_configArray>
 8009100:	4603      	mov	r3, r0
 8009102:	60fb      	str	r3, [r7, #12]
            res = si4463_configArray(si4463, FSK_2400_TX);
        else if(dataRate == DR_1200)
            res = si4463_configArray(si4463, FSK_1200_TX);
        else
            res = SI4463_ERR_INVALID_DR;
        break;
 8009104:	e027      	b.n	8009156 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_4800)
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d106      	bne.n	800911a <si4463_setTxDataRate+0x9e>
            res = si4463_configArray(si4463, FSK_4800_TX);
 800910c:	491d      	ldr	r1, [pc, #116]	@ (8009184 <si4463_setTxDataRate+0x108>)
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 faaa 	bl	8009668 <si4463_configArray>
 8009114:	4603      	mov	r3, r0
 8009116:	60fb      	str	r3, [r7, #12]
        break;
 8009118:	e01d      	b.n	8009156 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_2400)
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d106      	bne.n	800912e <si4463_setTxDataRate+0xb2>
            res = si4463_configArray(si4463, FSK_2400_TX);
 8009120:	4919      	ldr	r1, [pc, #100]	@ (8009188 <si4463_setTxDataRate+0x10c>)
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 faa0 	bl	8009668 <si4463_configArray>
 8009128:	4603      	mov	r3, r0
 800912a:	60fb      	str	r3, [r7, #12]
        break;
 800912c:	e013      	b.n	8009156 <si4463_setTxDataRate+0xda>
        else if(dataRate == DR_1200)
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <si4463_setTxDataRate+0xc6>
            res = si4463_configArray(si4463, FSK_1200_TX);
 8009134:	4915      	ldr	r1, [pc, #84]	@ (800918c <si4463_setTxDataRate+0x110>)
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa96 	bl	8009668 <si4463_configArray>
 800913c:	4603      	mov	r3, r0
 800913e:	60fb      	str	r3, [r7, #12]
        break;
 8009140:	e009      	b.n	8009156 <si4463_setTxDataRate+0xda>
            res = SI4463_ERR_INVALID_DR;
 8009142:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 8009146:	60fb      	str	r3, [r7, #12]
        break;
 8009148:	e005      	b.n	8009156 <si4463_setTxDataRate+0xda>
    default:
        DEBUG_PRINTF("Invalid Tx modulation ! \r\n");
 800914a:	4811      	ldr	r0, [pc, #68]	@ (8009190 <si4463_setTxDataRate+0x114>)
 800914c:	f001 fcd8 	bl	800ab00 <puts>
        res = SI4463_ERR_BAD_PARAM;
 8009150:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8009154:	60fb      	str	r3, [r7, #12]
    }
    if(res == SI4463_OK)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <si4463_setTxDataRate+0xe8>
        si4463->settings.txDataRate = dataRate;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    return res;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	b25b      	sxtb	r3, r3
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	2000017c 	.word	0x2000017c
 8009174:	200001fc 	.word	0x200001fc
 8009178:	2000027c 	.word	0x2000027c
 800917c:	200002fc 	.word	0x200002fc
 8009180:	2000037c 	.word	0x2000037c
 8009184:	200003fc 	.word	0x200003fc
 8009188:	2000047c 	.word	0x2000047c
 800918c:	200004fc 	.word	0x200004fc
 8009190:	0800f480 	.word	0x0800f480

08009194 <si4463_setRxDataRate>:

int8_t si4463_setRxDataRate(si4463_t* si4463, si4463_data_rate dataRate)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
    int res = SI4463_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
    switch (si4463->settings.rxMod)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d02d      	beq.n	800920a <si4463_setRxDataRate+0x76>
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d157      	bne.n	8009262 <si4463_setRxDataRate+0xce>
    {
    case MOD_2GFSK:
        if(dataRate == DR_9600)
 80091b2:	78fb      	ldrb	r3, [r7, #3]
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d106      	bne.n	80091c6 <si4463_setRxDataRate+0x32>
            res = si4463_configArray(si4463, GMSK_9600_RX);
 80091b8:	4933      	ldr	r1, [pc, #204]	@ (8009288 <si4463_setRxDataRate+0xf4>)
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa54 	bl	8009668 <si4463_configArray>
 80091c0:	4603      	mov	r3, r0
 80091c2:	60fb      	str	r3, [r7, #12]
            res = si4463_configArray(si4463, GMSK_2400_RX);
        else if(dataRate == DR_1200)
            res = si4463_configArray(si4463, GMSK_1200_RX);
        else
            res = SI4463_ERR_INVALID_DR;
        break;
 80091c4:	e053      	b.n	800926e <si4463_setRxDataRate+0xda>
        else if(dataRate == DR_4800)
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d106      	bne.n	80091da <si4463_setRxDataRate+0x46>
            res = si4463_configArray(si4463, GMSK_4800_RX);
 80091cc:	492f      	ldr	r1, [pc, #188]	@ (800928c <si4463_setRxDataRate+0xf8>)
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa4a 	bl	8009668 <si4463_configArray>
 80091d4:	4603      	mov	r3, r0
 80091d6:	60fb      	str	r3, [r7, #12]
        break;
 80091d8:	e049      	b.n	800926e <si4463_setRxDataRate+0xda>
        else if(dataRate == DR_2400)
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d106      	bne.n	80091ee <si4463_setRxDataRate+0x5a>
            res = si4463_configArray(si4463, GMSK_2400_RX);
 80091e0:	492b      	ldr	r1, [pc, #172]	@ (8009290 <si4463_setRxDataRate+0xfc>)
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa40 	bl	8009668 <si4463_configArray>
 80091e8:	4603      	mov	r3, r0
 80091ea:	60fb      	str	r3, [r7, #12]
        break;
 80091ec:	e03f      	b.n	800926e <si4463_setRxDataRate+0xda>
        else if(dataRate == DR_1200)
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <si4463_setRxDataRate+0x6e>
            res = si4463_configArray(si4463, GMSK_1200_RX);
 80091f4:	4927      	ldr	r1, [pc, #156]	@ (8009294 <si4463_setRxDataRate+0x100>)
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa36 	bl	8009668 <si4463_configArray>
 80091fc:	4603      	mov	r3, r0
 80091fe:	60fb      	str	r3, [r7, #12]
        break;
 8009200:	e035      	b.n	800926e <si4463_setRxDataRate+0xda>
            res = SI4463_ERR_INVALID_DR;
 8009202:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 8009206:	60fb      	str	r3, [r7, #12]
        break;
 8009208:	e031      	b.n	800926e <si4463_setRxDataRate+0xda>
    case MOD_2FSK:
        if(dataRate == DR_9600)
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	2b03      	cmp	r3, #3
 800920e:	d106      	bne.n	800921e <si4463_setRxDataRate+0x8a>
            res = si4463_configArray(si4463, FSK_9600_RX);
 8009210:	4921      	ldr	r1, [pc, #132]	@ (8009298 <si4463_setRxDataRate+0x104>)
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa28 	bl	8009668 <si4463_configArray>
 8009218:	4603      	mov	r3, r0
 800921a:	60fb      	str	r3, [r7, #12]
            res = si4463_configArray(si4463, FSK_2400_RX);
        else if(dataRate == DR_1200)
            res = si4463_configArray(si4463, FSK_1200_RX);
        else
            res = SI4463_ERR_INVALID_DR;
        break;
 800921c:	e027      	b.n	800926e <si4463_setRxDataRate+0xda>
        else if(dataRate == DR_4800)
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d106      	bne.n	8009232 <si4463_setRxDataRate+0x9e>
            res = si4463_configArray(si4463, FSK_4800_RX);
 8009224:	491d      	ldr	r1, [pc, #116]	@ (800929c <si4463_setRxDataRate+0x108>)
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa1e 	bl	8009668 <si4463_configArray>
 800922c:	4603      	mov	r3, r0
 800922e:	60fb      	str	r3, [r7, #12]
        break;
 8009230:	e01d      	b.n	800926e <si4463_setRxDataRate+0xda>
        else if(dataRate == DR_2400)
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d106      	bne.n	8009246 <si4463_setRxDataRate+0xb2>
            res = si4463_configArray(si4463, FSK_2400_RX);
 8009238:	4919      	ldr	r1, [pc, #100]	@ (80092a0 <si4463_setRxDataRate+0x10c>)
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fa14 	bl	8009668 <si4463_configArray>
 8009240:	4603      	mov	r3, r0
 8009242:	60fb      	str	r3, [r7, #12]
        break;
 8009244:	e013      	b.n	800926e <si4463_setRxDataRate+0xda>
        else if(dataRate == DR_1200)
 8009246:	78fb      	ldrb	r3, [r7, #3]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <si4463_setRxDataRate+0xc6>
            res = si4463_configArray(si4463, FSK_1200_RX);
 800924c:	4915      	ldr	r1, [pc, #84]	@ (80092a4 <si4463_setRxDataRate+0x110>)
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa0a 	bl	8009668 <si4463_configArray>
 8009254:	4603      	mov	r3, r0
 8009256:	60fb      	str	r3, [r7, #12]
        break;
 8009258:	e009      	b.n	800926e <si4463_setRxDataRate+0xda>
            res = SI4463_ERR_INVALID_DR;
 800925a:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 800925e:	60fb      	str	r3, [r7, #12]
        break;
 8009260:	e005      	b.n	800926e <si4463_setRxDataRate+0xda>
    default:
        DEBUG_PRINTF("Invalid Rx modulation ! \r\n");
 8009262:	4811      	ldr	r0, [pc, #68]	@ (80092a8 <si4463_setRxDataRate+0x114>)
 8009264:	f001 fc4c 	bl	800ab00 <puts>
        res = SI4463_ERR_BAD_PARAM;
 8009268:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 800926c:	60fb      	str	r3, [r7, #12]
    }
    if(res == SI4463_OK)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <si4463_setRxDataRate+0xe8>
        si4463->settings.rxDataRate = dataRate;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    return res;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	b25b      	sxtb	r3, r3
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000194 	.word	0x20000194
 800928c:	20000214 	.word	0x20000214
 8009290:	20000294 	.word	0x20000294
 8009294:	20000314 	.word	0x20000314
 8009298:	20000394 	.word	0x20000394
 800929c:	20000414 	.word	0x20000414
 80092a0:	20000494 	.word	0x20000494
 80092a4:	20000514 	.word	0x20000514
 80092a8:	0800f49c 	.word	0x0800f49c

080092ac <si4463_getDataRate>:

int16_t si4463_getDataRate(si4463_t* si4463)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
    int res = si4463_getDataRateConfig(si4463);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f84b 	bl	8009350 <si4463_getDataRateConfig>
 80092ba:	4603      	mov	r3, r0
 80092bc:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d13c      	bne.n	800933e <si4463_getDataRate+0x92>
    {
        uint8_t TXOSR = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]
        switch(si4463->dr.TxOSR)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d00c      	beq.n	80092ec <si4463_getDataRate+0x40>
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	dc0d      	bgt.n	80092f2 <si4463_getDataRate+0x46>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <si4463_getDataRate+0x34>
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d003      	beq.n	80092e6 <si4463_getDataRate+0x3a>
 80092de:	e008      	b.n	80092f2 <si4463_getDataRate+0x46>
        {
        case OVERSAMPLING_RATIO_10:
            TXOSR = 10;
 80092e0:	230a      	movs	r3, #10
 80092e2:	75fb      	strb	r3, [r7, #23]
            break;
 80092e4:	e008      	b.n	80092f8 <si4463_getDataRate+0x4c>
        case OVERSAMPLING_RATIO_40:
            TXOSR = 40;
 80092e6:	2328      	movs	r3, #40	@ 0x28
 80092e8:	75fb      	strb	r3, [r7, #23]
            break;
 80092ea:	e005      	b.n	80092f8 <si4463_getDataRate+0x4c>
        case OVERSAMPLING_RATIO_20:
            TXOSR = 20;
 80092ec:	2314      	movs	r3, #20
 80092ee:	75fb      	strb	r3, [r7, #23]
            break;
 80092f0:	e002      	b.n	80092f8 <si4463_getDataRate+0x4c>
        default:
            return SI4463_ERR_INVALID_TXOSR;
 80092f2:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 80092f6:	e024      	b.n	8009342 <si4463_getDataRate+0x96>
        }
        float datarate = (si4463->dr.modemDataRate * (float)RADIO_CONFIGURATION_DATA_RADIO_XO_FREQ)/(float)(si4463->dr.modemTxNCOMode)/TXOSR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009304:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800934c <si4463_getDataRate+0xa0>
 8009308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009310:	ee07 3a90 	vmov	s15, r3
 8009314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009318:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800932a:	edc7 7a03 	vstr	s15, [r7, #12]
        return (int16_t)datarate;
 800932e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009336:	ee17 3a90 	vmov	r3, s15
 800933a:	b21b      	sxth	r3, r3
 800933c:	e001      	b.n	8009342 <si4463_getDataRate+0x96>
    }
    else
        return res;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	b21b      	sxth	r3, r3
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	4be4e1c0 	.word	0x4be4e1c0

08009350 <si4463_getDataRateConfig>:

int8_t si4463_getDataRateConfig(si4463_t* si4463)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
    uint16_t propNum = PROP_MODEM_DATA_RATE;
 8009358:	f242 0303 	movw	r3, #8195	@ 0x2003
 800935c:	82fb      	strh	r3, [r7, #22]
    uint8_t rxbuff[7] = {0};
 800935e:	2300      	movs	r3, #0
 8009360:	60bb      	str	r3, [r7, #8]
 8009362:	f107 030c 	add.w	r3, r7, #12
 8009366:	2100      	movs	r1, #0
 8009368:	460a      	mov	r2, r1
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	460a      	mov	r2, r1
 800936e:	709a      	strb	r2, [r3, #2]
    int res = si4463_getProperties(si4463, rxbuff, 7, propNum);
 8009370:	8afb      	ldrh	r3, [r7, #22]
 8009372:	f107 0108 	add.w	r1, r7, #8
 8009376:	2207      	movs	r2, #7
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fa31 	bl	80097e0 <si4463_getProperties>
 800937e:	4603      	mov	r3, r0
 8009380:	613b      	str	r3, [r7, #16]
    if(res == SI4463_OK)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d124      	bne.n	80093d2 <si4463_getDataRateConfig+0x82>
    {
        si4463->dr.modemDataRate = (rxbuff[0] << 16) | (rxbuff[1] << 8) | rxbuff[2];
 8009388:	7a3b      	ldrb	r3, [r7, #8]
 800938a:	041a      	lsls	r2, r3, #16
 800938c:	7a7b      	ldrb	r3, [r7, #9]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	4313      	orrs	r3, r2
 8009392:	7aba      	ldrb	r2, [r7, #10]
 8009394:	4313      	orrs	r3, r2
 8009396:	461a      	mov	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	675a      	str	r2, [r3, #116]	@ 0x74
        si4463->dr.modemTxNCOMode = ((rxbuff[3] & 0x03) << 24) | (rxbuff[4] << 16) | (rxbuff[5] << 8) | rxbuff[6];
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	061b      	lsls	r3, r3, #24
 80093a0:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80093a4:	7b3b      	ldrb	r3, [r7, #12]
 80093a6:	041b      	lsls	r3, r3, #16
 80093a8:	431a      	orrs	r2, r3
 80093aa:	7b7b      	ldrb	r3, [r7, #13]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	4313      	orrs	r3, r2
 80093b0:	7bba      	ldrb	r2, [r7, #14]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	461a      	mov	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	679a      	str	r2, [r3, #120]	@ 0x78
        si4463->dr.TxOSR = (rxbuff[3] & 0x0C) >> 2;
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	109b      	asrs	r3, r3, #2
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        return res;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	b25b      	sxtb	r3, r3
 80093d0:	e001      	b.n	80093d6 <si4463_getDataRateConfig+0x86>
    }
    else
        return res;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	b25b      	sxtb	r3, r3
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <si4463_sendCommand>:

int8_t si4463_sendCommand(si4463_t* si4463, uint8_t* cmdData, uint8_t cmdLen)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	4613      	mov	r3, r2
 80093ea:	71fb      	strb	r3, [r7, #7]
    si4463->NSEL(false);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	2000      	movs	r0, #0
 80093f2:	4798      	blx	r3
    si4463->SPI_Write(cmdData, cmdLen, SI4463_SPI_TIMEOUT);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	79f9      	ldrb	r1, [r7, #7]
 80093fa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80093fe:	68b8      	ldr	r0, [r7, #8]
 8009400:	4798      	blx	r3
    si4463->NSEL(true);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	2001      	movs	r0, #1
 8009408:	4798      	blx	r3
    if(si4463->SPI_CheckState() != si4463->spi_state_ready)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	7c1b      	ldrb	r3, [r3, #16]
 8009418:	429a      	cmp	r2, r3
 800941a:	d001      	beq.n	8009420 <si4463_sendCommand+0x42>
        return 0;
 800941c:	2300      	movs	r3, #0
 800941e:	e000      	b.n	8009422 <si4463_sendCommand+0x44>
    else
        return 1;
 8009420:	2301      	movs	r3, #1
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <si4463_waitforCTS>:

int8_t si4463_waitforCTS(si4463_t* si4463)
{
 800942a:	b590      	push	{r4, r7, lr}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
    uint8_t output_address[2] = {0};
 8009432:	2300      	movs	r3, #0
 8009434:	81bb      	strh	r3, [r7, #12]
    uint8_t ctsValue[2] = {0};
 8009436:	2300      	movs	r3, #0
 8009438:	813b      	strh	r3, [r7, #8]
    uint16_t errCnt = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	81fb      	strh	r3, [r7, #14]

    while(ctsValue[1] != 0xFF)
 800943e:	e01c      	b.n	800947a <si4463_waitforCTS+0x50>
    {
        if(++errCnt > MAX_CTS_RETRY)
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	3301      	adds	r3, #1
 8009444:	81fb      	strh	r3, [r7, #14]
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800944c:	d901      	bls.n	8009452 <si4463_waitforCTS+0x28>
            return 0;
 800944e:	2300      	movs	r3, #0
 8009450:	e017      	b.n	8009482 <si4463_waitforCTS+0x58>
        output_address[0] = READ_CMD_BUFFER;
 8009452:	2344      	movs	r3, #68	@ 0x44
 8009454:	733b      	strb	r3, [r7, #12]
        si4463->NSEL(false);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	2000      	movs	r0, #0
 800945c:	4798      	blx	r3
        si4463->SPI_WriteRead(&output_address[0], &ctsValue[0], 2, SI4463_SPI_TIMEOUT);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689c      	ldr	r4, [r3, #8]
 8009462:	f107 0108 	add.w	r1, r7, #8
 8009466:	f107 000c 	add.w	r0, r7, #12
 800946a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800946e:	2202      	movs	r2, #2
 8009470:	47a0      	blx	r4
        si4463->NSEL(true);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	2001      	movs	r0, #1
 8009478:	4798      	blx	r3
    while(ctsValue[1] != 0xFF)
 800947a:	7a7b      	ldrb	r3, [r7, #9]
 800947c:	2bff      	cmp	r3, #255	@ 0xff
 800947e:	d1df      	bne.n	8009440 <si4463_waitforCTS+0x16>
    }
    return 1;
 8009480:	2301      	movs	r3, #1
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}

0800948a <si4463_getResponse>:

int8_t si4463_getResponse(si4463_t* si4463, uint8_t* respData, uint8_t respLen)
{
 800948a:	b590      	push	{r4, r7, lr}
 800948c:	b087      	sub	sp, #28
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	4613      	mov	r3, r2
 8009496:	71fb      	strb	r3, [r7, #7]
	uint8_t output_address[2] = {0};
 8009498:	2300      	movs	r3, #0
 800949a:	82bb      	strh	r3, [r7, #20]
	uint8_t ctsValue[2] = {0};
 800949c:	2300      	movs	r3, #0
 800949e:	823b      	strh	r3, [r7, #16]
	uint16_t errCnt = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	82fb      	strh	r3, [r7, #22]

	while(ctsValue[1] != 0xFF)
 80094a4:	e026      	b.n	80094f4 <si4463_getResponse+0x6a>
	{
		if(++errCnt > MAX_CTS_RETRY)
 80094a6:	8afb      	ldrh	r3, [r7, #22]
 80094a8:	3301      	adds	r3, #1
 80094aa:	82fb      	strh	r3, [r7, #22]
 80094ac:	8afb      	ldrh	r3, [r7, #22]
 80094ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80094b2:	d901      	bls.n	80094b8 <si4463_getResponse+0x2e>
			return 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e02c      	b.n	8009512 <si4463_getResponse+0x88>
		output_address[0] = READ_CMD_BUFFER;
 80094b8:	2344      	movs	r3, #68	@ 0x44
 80094ba:	753b      	strb	r3, [r7, #20]
		si4463->NSEL(false);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	2000      	movs	r0, #0
 80094c2:	4798      	blx	r3
		si4463->SPI_WriteRead(&output_address[0], &ctsValue[0], 2, SI4463_SPI_TIMEOUT);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689c      	ldr	r4, [r3, #8]
 80094c8:	f107 0110 	add.w	r1, r7, #16
 80094cc:	f107 0014 	add.w	r0, r7, #20
 80094d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80094d4:	2202      	movs	r2, #2
 80094d6:	47a0      	blx	r4
		if(ctsValue[1] == 0xFF)
 80094d8:	7c7b      	ldrb	r3, [r7, #17]
 80094da:	2bff      	cmp	r3, #255	@ 0xff
 80094dc:	d106      	bne.n	80094ec <si4463_getResponse+0x62>
			si4463->SPI_Read(respData, respLen, SI4463_SPI_TIMEOUT);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	79f9      	ldrb	r1, [r7, #7]
 80094e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80094e8:	68b8      	ldr	r0, [r7, #8]
 80094ea:	4798      	blx	r3
		si4463->NSEL(true);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	2001      	movs	r0, #1
 80094f2:	4798      	blx	r3
	while(ctsValue[1] != 0xFF)
 80094f4:	7c7b      	ldrb	r3, [r7, #17]
 80094f6:	2bff      	cmp	r3, #255	@ 0xff
 80094f8:	d1d5      	bne.n	80094a6 <si4463_getResponse+0x1c>
	}
    if(si4463->SPI_CheckState() != si4463->spi_state_ready)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	4798      	blx	r3
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	7c1b      	ldrb	r3, [r3, #16]
 8009508:	429a      	cmp	r2, r3
 800950a:	d001      	beq.n	8009510 <si4463_getResponse+0x86>
        return 0;
 800950c:	2300      	movs	r3, #0
 800950e:	e000      	b.n	8009512 <si4463_getResponse+0x88>
    else
        return 1;
 8009510:	2301      	movs	r3, #1
}
 8009512:	4618      	mov	r0, r3
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	bd90      	pop	{r4, r7, pc}

0800951a <si4463_writeTxFiFo>:

int8_t si4463_writeTxFiFo(si4463_t* si4463, uint8_t* txFifoData, uint8_t txFifoLen)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	4613      	mov	r3, r2
 8009526:	71fb      	strb	r3, [r7, #7]
    int res = SI4463_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
    uint8_t* cmd = (uint8_t*)malloc((txFifoLen + 1)*sizeof(uint8_t));
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	3301      	adds	r3, #1
 8009530:	4618      	mov	r0, r3
 8009532:	f000 fa03 	bl	800993c <malloc>
 8009536:	4603      	mov	r3, r0
 8009538:	613b      	str	r3, [r7, #16]
    memset(cmd, '\0', txFifoLen + 1);
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	3301      	adds	r3, #1
 800953e:	461a      	mov	r2, r3
 8009540:	2100      	movs	r1, #0
 8009542:	6938      	ldr	r0, [r7, #16]
 8009544:	f001 fbdc 	bl	800ad00 <memset>
    cmd[0] = WRITE_TX_FIFO;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2266      	movs	r2, #102	@ 0x66
 800954c:	701a      	strb	r2, [r3, #0]
    memcpy(&cmd[1], txFifoData, txFifoLen);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	79fa      	ldrb	r2, [r7, #7]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fc7d 	bl	800ae56 <memcpy>
    if(!si4463_sendCommand(si4463, cmd, txFifoLen + 1)) res = SI4463_ERR_WRITE_REG;
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	3301      	adds	r3, #1
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	6939      	ldr	r1, [r7, #16]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff ff39 	bl	80093de <si4463_sendCommand>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <si4463_writeTxFiFo+0x5e>
 8009572:	f06f 030a 	mvn.w	r3, #10
 8009576:	617b      	str	r3, [r7, #20]
    if(!si4463_waitforCTS(si4463)) res = SI4463_CTS_TIMEOUT;
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff ff56 	bl	800942a <si4463_waitforCTS>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <si4463_writeTxFiFo+0x70>
 8009584:	f06f 0314 	mvn.w	r3, #20
 8009588:	617b      	str	r3, [r7, #20]

    free(cmd);
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f000 f9de 	bl	800994c <free>
    return res;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	b25b      	sxtb	r3, r3
}
 8009594:	4618      	mov	r0, r3
 8009596:	3718      	adds	r7, #24
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <si4463_startTx>:

int8_t si4463_startTx(si4463_t* si4463, uint16_t dataLen, si4463_state nextState)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	807b      	strh	r3, [r7, #2]
 80095a8:	4613      	mov	r3, r2
 80095aa:	707b      	strb	r3, [r7, #1]
    uint8_t cmd[5] = {START_TX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 
 80095ac:	2331      	movs	r3, #49	@ 0x31
 80095ae:	723b      	strb	r3, [r7, #8]
 80095b0:	2300      	movs	r3, #0
 80095b2:	727b      	strb	r3, [r7, #9]
            (nextState << 4), ((dataLen >> 8) & 0x001F), (dataLen & 0x00FF)};
 80095b4:	787b      	ldrb	r3, [r7, #1]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	b2db      	uxtb	r3, r3
    uint8_t cmd[5] = {START_TX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 
 80095ba:	72bb      	strb	r3, [r7, #10]
            (nextState << 4), ((dataLen >> 8) & 0x001F), (dataLen & 0x00FF)};
 80095bc:	887b      	ldrh	r3, [r7, #2]
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 031f 	and.w	r3, r3, #31
 80095c8:	b2db      	uxtb	r3, r3
    uint8_t cmd[5] = {START_TX, RADIO_CONFIGURATION_DATA_CHANNEL_NUMBER, 
 80095ca:	72fb      	strb	r3, [r7, #11]
 80095cc:	887b      	ldrh	r3, [r7, #2]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	733b      	strb	r3, [r7, #12]
    if(!si4463_sendCommand(si4463, cmd, sizeof(cmd))) return SI4463_ERR_WRITE_REG;
 80095d2:	f107 0308 	add.w	r3, r7, #8
 80095d6:	2205      	movs	r2, #5
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff feff 	bl	80093de <si4463_sendCommand>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <si4463_startTx+0x50>
 80095e6:	f06f 030a 	mvn.w	r3, #10
 80095ea:	e009      	b.n	8009600 <si4463_startTx+0x64>
    if(!si4463_waitforCTS(si4463)) return SI4463_CTS_TIMEOUT;
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff1c 	bl	800942a <si4463_waitforCTS>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d102      	bne.n	80095fe <si4463_startTx+0x62>
 80095f8:	f06f 0314 	mvn.w	r3, #20
 80095fc:	e000      	b.n	8009600 <si4463_startTx+0x64>

    return SI4463_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <si4463_readRxDataBuff>:

int8_t si4463_readRxDataBuff(si4463_t* si4463, uint8_t* rxFifoData, uint8_t rxFifoLength)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = READ_RX_FIFO;
 8009616:	2377      	movs	r3, #119	@ 0x77
 8009618:	75fb      	strb	r3, [r7, #23]

	si4463->NSEL(false);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	2000      	movs	r0, #0
 8009620:	4798      	blx	r3
	si4463->SPI_Write(&cmd, 1, SI4463_SPI_TIMEOUT);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f107 0017 	add.w	r0, r7, #23
 800962a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800962e:	2101      	movs	r1, #1
 8009630:	4798      	blx	r3
	si4463->SPI_Read(rxFifoData, rxFifoLength, SI4463_SPI_TIMEOUT);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	79f9      	ldrb	r1, [r7, #7]
 8009638:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800963c:	68b8      	ldr	r0, [r7, #8]
 800963e:	4798      	blx	r3
	si4463->NSEL(true);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	2001      	movs	r0, #1
 8009646:	4798      	blx	r3

	if(si4463->SPI_CheckState() != si4463->spi_state_ready)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	461a      	mov	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	7c1b      	ldrb	r3, [r3, #16]
 8009656:	429a      	cmp	r2, r3
 8009658:	d001      	beq.n	800965e <si4463_readRxDataBuff+0x56>
		return 0;
 800965a:	2300      	movs	r3, #0
 800965c:	e000      	b.n	8009660 <si4463_readRxDataBuff+0x58>
	else
		return 1;
 800965e:	2301      	movs	r3, #1
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <si4463_configArray>:

int8_t si4463_configArray(si4463_t* si4463, uint8_t* configArray)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
    uint16_t index = 0, currentNum = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	81fb      	strh	r3, [r7, #14]
 8009676:	2300      	movs	r3, #0
 8009678:	81bb      	strh	r3, [r7, #12]
    uint16_t propertyNum = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	817b      	strh	r3, [r7, #10]
    while(configArray[index])
 800967e:	e04b      	b.n	8009718 <si4463_configArray+0xb0>
    {
        currentNum = configArray[index];
 8009680:	89fb      	ldrh	r3, [r7, #14]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4413      	add	r3, r2
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	81bb      	strh	r3, [r7, #12]
        if(!si4463_sendCommand(si4463, &configArray[index + 1], currentNum))
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	3301      	adds	r3, #1
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4413      	add	r3, r2
 8009692:	89ba      	ldrh	r2, [r7, #12]
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff fea0 	bl	80093de <si4463_sendCommand>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <si4463_configArray+0x42>
            return SI4463_ERR_WRITE_REG;
 80096a4:	f06f 030a 	mvn.w	r3, #10
 80096a8:	e03d      	b.n	8009726 <si4463_configArray+0xbe>
        if(!si4463_waitforCTS(si4463))
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff febd 	bl	800942a <si4463_waitforCTS>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <si4463_configArray+0x54>
            return SI4463_CTS_TIMEOUT;
 80096b6:	f06f 0314 	mvn.w	r3, #20
 80096ba:	e034      	b.n	8009726 <si4463_configArray+0xbe>
        if(configArray[index + 1] == 0x11)
 80096bc:	89fb      	ldrh	r3, [r7, #14]
 80096be:	3301      	adds	r3, #1
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	4413      	add	r3, r2
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b11      	cmp	r3, #17
 80096c8:	d115      	bne.n	80096f6 <si4463_configArray+0x8e>
        {
            propertyNum = (configArray[index + 2] << 8) | configArray[index + 4];
 80096ca:	89fb      	ldrh	r3, [r7, #14]
 80096cc:	3302      	adds	r3, #2
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4413      	add	r3, r2
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	b21a      	sxth	r2, r3
 80096d8:	89fb      	ldrh	r3, [r7, #14]
 80096da:	3304      	adds	r3, #4
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	440b      	add	r3, r1
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b21b      	sxth	r3, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	817b      	strh	r3, [r7, #10]
            DEBUG_PRINTF("Property number: 0x%04x\r\n", propertyNum);
 80096ea:	897b      	ldrh	r3, [r7, #10]
 80096ec:	4619      	mov	r1, r3
 80096ee:	4810      	ldr	r0, [pc, #64]	@ (8009730 <si4463_configArray+0xc8>)
 80096f0:	f001 f996 	bl	800aa20 <iprintf>
 80096f4:	e00a      	b.n	800970c <si4463_configArray+0xa4>
        }
		else
		{
            propertyNum = configArray[index + 1];
 80096f6:	89fb      	ldrh	r3, [r7, #14]
 80096f8:	3301      	adds	r3, #1
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	4413      	add	r3, r2
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	817b      	strh	r3, [r7, #10]
            DEBUG_PRINTF("Command number: 0x%02x\r\n", propertyNum);
 8009702:	897b      	ldrh	r3, [r7, #10]
 8009704:	4619      	mov	r1, r3
 8009706:	480b      	ldr	r0, [pc, #44]	@ (8009734 <si4463_configArray+0xcc>)
 8009708:	f001 f98a 	bl	800aa20 <iprintf>
        }
		index = index + currentNum + 1;
 800970c:	89fa      	ldrh	r2, [r7, #14]
 800970e:	89bb      	ldrh	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	b29b      	uxth	r3, r3
 8009714:	3301      	adds	r3, #1
 8009716:	81fb      	strh	r3, [r7, #14]
    while(configArray[index])
 8009718:	89fb      	ldrh	r3, [r7, #14]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	4413      	add	r3, r2
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1ad      	bne.n	8009680 <si4463_configArray+0x18>
    }
    return SI4463_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	0800f4b8 	.word	0x0800f4b8
 8009734:	0800f4d4 	.word	0x0800f4d4

08009738 <si4463_setProperties>:

int8_t si4463_setProperties(si4463_t* si4463, uint8_t* setData, uint8_t setDataLen, uint16_t propNum)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4611      	mov	r1, r2
 8009744:	461a      	mov	r2, r3
 8009746:	460b      	mov	r3, r1
 8009748:	71fb      	strb	r3, [r7, #7]
 800974a:	4613      	mov	r3, r2
 800974c:	80bb      	strh	r3, [r7, #4]
    uint8_t res = SI4463_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
    uint8_t* cmd = (uint8_t*)malloc((setDataLen + 4)*sizeof(uint8_t));
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f8f0 	bl	800993c <malloc>
 800975c:	4603      	mov	r3, r0
 800975e:	613b      	str	r3, [r7, #16]
    memset(cmd, '\0', setDataLen + 4);
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	3304      	adds	r3, #4
 8009764:	461a      	mov	r2, r3
 8009766:	2100      	movs	r1, #0
 8009768:	6938      	ldr	r0, [r7, #16]
 800976a:	f001 fac9 	bl	800ad00 <memset>
    cmd[0] = SET_PROPERTY;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2211      	movs	r2, #17
 8009772:	701a      	strb	r2, [r3, #0]
    cmd[1] = (uint8_t)(propNum >> 8);
 8009774:	88bb      	ldrh	r3, [r7, #4]
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b29a      	uxth	r2, r3
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3301      	adds	r3, #1
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]
    cmd[2] = setDataLen;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	3302      	adds	r3, #2
 8009786:	79fa      	ldrb	r2, [r7, #7]
 8009788:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t)(propNum & 0x00FF);
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	3303      	adds	r3, #3
 800978e:	88ba      	ldrh	r2, [r7, #4]
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	701a      	strb	r2, [r3, #0]
    memcpy(&cmd[4], setData, setDataLen);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	3304      	adds	r3, #4
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fb5a 	bl	800ae56 <memcpy>
    if(!si4463_sendCommand(si4463, cmd, setDataLen + 4)) res = SI4463_ERR_WRITE_REG;
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	3304      	adds	r3, #4
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	461a      	mov	r2, r3
 80097aa:	6939      	ldr	r1, [r7, #16]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff fe16 	bl	80093de <si4463_sendCommand>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <si4463_setProperties+0x84>
 80097b8:	23f5      	movs	r3, #245	@ 0xf5
 80097ba:	75fb      	strb	r3, [r7, #23]
    if(!si4463_waitforCTS(si4463)) res = SI4463_CTS_TIMEOUT;
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff fe34 	bl	800942a <si4463_waitforCTS>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <si4463_setProperties+0x94>
 80097c8:	23eb      	movs	r3, #235	@ 0xeb
 80097ca:	75fb      	strb	r3, [r7, #23]

    free(cmd);
 80097cc:	6938      	ldr	r0, [r7, #16]
 80097ce:	f000 f8bd 	bl	800994c <free>
    return res;
 80097d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <si4463_getProperties>:

int8_t si4463_getProperties(si4463_t* si4463, uint8_t* getData, uint8_t getDataLen, uint16_t propNum)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4611      	mov	r1, r2
 80097ec:	461a      	mov	r2, r3
 80097ee:	460b      	mov	r3, r1
 80097f0:	71fb      	strb	r3, [r7, #7]
 80097f2:	4613      	mov	r3, r2
 80097f4:	80bb      	strh	r3, [r7, #4]
    uint8_t cmd[4] = {GET_PROPERTY, (uint8_t)(propNum >> 8), getDataLen, (uint8_t)(propNum & 0x00FF)};
 80097f6:	2312      	movs	r3, #18
 80097f8:	743b      	strb	r3, [r7, #16]
 80097fa:	88bb      	ldrh	r3, [r7, #4]
 80097fc:	0a1b      	lsrs	r3, r3, #8
 80097fe:	b29b      	uxth	r3, r3
 8009800:	b2db      	uxtb	r3, r3
 8009802:	747b      	strb	r3, [r7, #17]
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	74bb      	strb	r3, [r7, #18]
 8009808:	88bb      	ldrh	r3, [r7, #4]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	74fb      	strb	r3, [r7, #19]
    if(!si4463_sendCommand(si4463, cmd, 4)) return SI4463_ERR_WRITE_REG;
 800980e:	f107 0310 	add.w	r3, r7, #16
 8009812:	2204      	movs	r2, #4
 8009814:	4619      	mov	r1, r3
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff fde1 	bl	80093de <si4463_sendCommand>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <si4463_getProperties+0x48>
 8009822:	f06f 030a 	mvn.w	r3, #10
 8009826:	e027      	b.n	8009878 <si4463_getProperties+0x98>
    if(!si4463_getResponse(si4463, getData, getDataLen)) return SI4463_ERR_READ_REG;
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	461a      	mov	r2, r3
 800982c:	68b9      	ldr	r1, [r7, #8]
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7ff fe2b 	bl	800948a <si4463_getResponse>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <si4463_getProperties+0x60>
 800983a:	f06f 0309 	mvn.w	r3, #9
 800983e:	e01b      	b.n	8009878 <si4463_getProperties+0x98>

    DEBUG_PRINTF("--------------------------\r\n");
 8009840:	480f      	ldr	r0, [pc, #60]	@ (8009880 <si4463_getProperties+0xa0>)
 8009842:	f001 f95d 	bl	800ab00 <puts>
		DEBUG_PRINTF("Get property data: ");
 8009846:	480f      	ldr	r0, [pc, #60]	@ (8009884 <si4463_getProperties+0xa4>)
 8009848:	f001 f8ea 	bl	800aa20 <iprintf>
		for(int i = 0; i < getDataLen;i++)
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e00a      	b.n	8009868 <si4463_getProperties+0x88>
		{
			DEBUG_PRINTF("0x%02x ", getData[i]);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	4413      	add	r3, r2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	4619      	mov	r1, r3
 800985c:	480a      	ldr	r0, [pc, #40]	@ (8009888 <si4463_getProperties+0xa8>)
 800985e:	f001 f8df 	bl	800aa20 <iprintf>
		for(int i = 0; i < getDataLen;i++)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	3301      	adds	r3, #1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	429a      	cmp	r2, r3
 800986e:	dbf0      	blt.n	8009852 <si4463_getProperties+0x72>
		}
    DEBUG_PRINTF("\r\n");
 8009870:	4806      	ldr	r0, [pc, #24]	@ (800988c <si4463_getProperties+0xac>)
 8009872:	f001 f945 	bl	800ab00 <puts>

    return SI4463_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	0800f4f0 	.word	0x0800f4f0
 8009884:	0800f50c 	.word	0x0800f50c
 8009888:	0800f520 	.word	0x0800f520
 800988c:	0800f528 	.word	0x0800f528

08009890 <si4463_txInterrupt>:

int8_t si4463_txInterrupt(si4463_t* si4463)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	uint8_t buff[4] = {0};
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
	buff[0] = PH_INT_STATUS_EN;
 800989c:	2301      	movs	r3, #1
 800989e:	733b      	strb	r3, [r7, #12]
	buff[1] = PACKET_SENT_EN;
 80098a0:	2320      	movs	r3, #32
 80098a2:	737b      	strb	r3, [r7, #13]
	buff[2] = 0x00;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73bb      	strb	r3, [r7, #14]
	buff[3] = CHIP_READY_EN;
 80098a8:	2304      	movs	r3, #4
 80098aa:	73fb      	strb	r3, [r7, #15]
	return si4463_setProperties(si4463, buff, 4, PROP_INT_CTL_ENABLE);
 80098ac:	f107 010c 	add.w	r1, r7, #12
 80098b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098b4:	2204      	movs	r2, #4
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff ff3e 	bl	8009738 <si4463_setProperties>
 80098bc:	4603      	mov	r3, r0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <si4463_rxInterrupt>:

int8_t si4463_rxInterrupt(si4463_t* si4463)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
	uint8_t buff[4] = {0};
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
	buff[0] = MODEM_INT_STATUS_EN | PH_INT_STATUS_EN;
 80098d2:	2303      	movs	r3, #3
 80098d4:	733b      	strb	r3, [r7, #12]
	buff[1] = PACKET_RX_EN | CRC_ERROR_EN;
 80098d6:	2318      	movs	r3, #24
 80098d8:	737b      	strb	r3, [r7, #13]
	buff[2] = 0x00;
 80098da:	2300      	movs	r3, #0
 80098dc:	73bb      	strb	r3, [r7, #14]
	buff[3] = CHIP_READY_EN;
 80098de:	2304      	movs	r3, #4
 80098e0:	73fb      	strb	r3, [r7, #15]
	return si4463_setProperties(si4463, buff, 4, PROP_INT_CTL_ENABLE);
 80098e2:	f107 010c 	add.w	r1, r7, #12
 80098e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098ea:	2204      	movs	r2, #4
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff ff23 	bl	8009738 <si4463_setProperties>
 80098f2:	4603      	mov	r3, r0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <si4463_controlOOK>:

void si4463_controlOOK(si4463_t* si4463, bool toneOn)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
    if(toneOn)
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d007      	beq.n	800991e <si4463_controlOOK+0x22>
        si4463->OOK(si4463->gpios.gpio_high);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
    else
        si4463->OOK(si4463->gpios.gpio_low);
}
 800991c:	e006      	b.n	800992c <si4463_controlOOK+0x30>
        si4463->OOK(si4463->gpios.gpio_low);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	f892 2051 	ldrb.w	r2, [r2, #81]	@ 0x51
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <atoi>:
 8009934:	220a      	movs	r2, #10
 8009936:	2100      	movs	r1, #0
 8009938:	f000 b93a 	b.w	8009bb0 <strtol>

0800993c <malloc>:
 800993c:	4b02      	ldr	r3, [pc, #8]	@ (8009948 <malloc+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f000 b82d 	b.w	80099a0 <_malloc_r>
 8009946:	bf00      	nop
 8009948:	200005ac 	.word	0x200005ac

0800994c <free>:
 800994c:	4b02      	ldr	r3, [pc, #8]	@ (8009958 <free+0xc>)
 800994e:	4601      	mov	r1, r0
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	f002 b8e1 	b.w	800bb18 <_free_r>
 8009956:	bf00      	nop
 8009958:	200005ac 	.word	0x200005ac

0800995c <sbrk_aligned>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	4e0f      	ldr	r6, [pc, #60]	@ (800999c <sbrk_aligned+0x40>)
 8009960:	460c      	mov	r4, r1
 8009962:	6831      	ldr	r1, [r6, #0]
 8009964:	4605      	mov	r5, r0
 8009966:	b911      	cbnz	r1, 800996e <sbrk_aligned+0x12>
 8009968:	f001 fa1e 	bl	800ada8 <_sbrk_r>
 800996c:	6030      	str	r0, [r6, #0]
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f001 fa19 	bl	800ada8 <_sbrk_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d103      	bne.n	8009982 <sbrk_aligned+0x26>
 800997a:	f04f 34ff 	mov.w	r4, #4294967295
 800997e:	4620      	mov	r0, r4
 8009980:	bd70      	pop	{r4, r5, r6, pc}
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d0f8      	beq.n	800997e <sbrk_aligned+0x22>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4628      	mov	r0, r5
 8009990:	f001 fa0a 	bl	800ada8 <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d1f2      	bne.n	800997e <sbrk_aligned+0x22>
 8009998:	e7ef      	b.n	800997a <sbrk_aligned+0x1e>
 800999a:	bf00      	nop
 800999c:	20000afc 	.word	0x20000afc

080099a0 <_malloc_r>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	1ccd      	adds	r5, r1, #3
 80099a6:	f025 0503 	bic.w	r5, r5, #3
 80099aa:	3508      	adds	r5, #8
 80099ac:	2d0c      	cmp	r5, #12
 80099ae:	bf38      	it	cc
 80099b0:	250c      	movcc	r5, #12
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	4606      	mov	r6, r0
 80099b6:	db01      	blt.n	80099bc <_malloc_r+0x1c>
 80099b8:	42a9      	cmp	r1, r5
 80099ba:	d904      	bls.n	80099c6 <_malloc_r+0x26>
 80099bc:	230c      	movs	r3, #12
 80099be:	6033      	str	r3, [r6, #0]
 80099c0:	2000      	movs	r0, #0
 80099c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a9c <_malloc_r+0xfc>
 80099ca:	f000 f869 	bl	8009aa0 <__malloc_lock>
 80099ce:	f8d8 3000 	ldr.w	r3, [r8]
 80099d2:	461c      	mov	r4, r3
 80099d4:	bb44      	cbnz	r4, 8009a28 <_malloc_r+0x88>
 80099d6:	4629      	mov	r1, r5
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff ffbf 	bl	800995c <sbrk_aligned>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	4604      	mov	r4, r0
 80099e2:	d158      	bne.n	8009a96 <_malloc_r+0xf6>
 80099e4:	f8d8 4000 	ldr.w	r4, [r8]
 80099e8:	4627      	mov	r7, r4
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	d143      	bne.n	8009a76 <_malloc_r+0xd6>
 80099ee:	2c00      	cmp	r4, #0
 80099f0:	d04b      	beq.n	8009a8a <_malloc_r+0xea>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	4639      	mov	r1, r7
 80099f6:	4630      	mov	r0, r6
 80099f8:	eb04 0903 	add.w	r9, r4, r3
 80099fc:	f001 f9d4 	bl	800ada8 <_sbrk_r>
 8009a00:	4581      	cmp	r9, r0
 8009a02:	d142      	bne.n	8009a8a <_malloc_r+0xea>
 8009a04:	6821      	ldr	r1, [r4, #0]
 8009a06:	1a6d      	subs	r5, r5, r1
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ffa6 	bl	800995c <sbrk_aligned>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d03a      	beq.n	8009a8a <_malloc_r+0xea>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	442b      	add	r3, r5
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	bb62      	cbnz	r2, 8009a7c <_malloc_r+0xdc>
 8009a22:	f8c8 7000 	str.w	r7, [r8]
 8009a26:	e00f      	b.n	8009a48 <_malloc_r+0xa8>
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	1b52      	subs	r2, r2, r5
 8009a2c:	d420      	bmi.n	8009a70 <_malloc_r+0xd0>
 8009a2e:	2a0b      	cmp	r2, #11
 8009a30:	d917      	bls.n	8009a62 <_malloc_r+0xc2>
 8009a32:	1961      	adds	r1, r4, r5
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	6025      	str	r5, [r4, #0]
 8009a38:	bf18      	it	ne
 8009a3a:	6059      	strne	r1, [r3, #4]
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	bf08      	it	eq
 8009a40:	f8c8 1000 	streq.w	r1, [r8]
 8009a44:	5162      	str	r2, [r4, r5]
 8009a46:	604b      	str	r3, [r1, #4]
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f000 f82f 	bl	8009aac <__malloc_unlock>
 8009a4e:	f104 000b 	add.w	r0, r4, #11
 8009a52:	1d23      	adds	r3, r4, #4
 8009a54:	f020 0007 	bic.w	r0, r0, #7
 8009a58:	1ac2      	subs	r2, r0, r3
 8009a5a:	bf1c      	itt	ne
 8009a5c:	1a1b      	subne	r3, r3, r0
 8009a5e:	50a3      	strne	r3, [r4, r2]
 8009a60:	e7af      	b.n	80099c2 <_malloc_r+0x22>
 8009a62:	6862      	ldr	r2, [r4, #4]
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	bf0c      	ite	eq
 8009a68:	f8c8 2000 	streq.w	r2, [r8]
 8009a6c:	605a      	strne	r2, [r3, #4]
 8009a6e:	e7eb      	b.n	8009a48 <_malloc_r+0xa8>
 8009a70:	4623      	mov	r3, r4
 8009a72:	6864      	ldr	r4, [r4, #4]
 8009a74:	e7ae      	b.n	80099d4 <_malloc_r+0x34>
 8009a76:	463c      	mov	r4, r7
 8009a78:	687f      	ldr	r7, [r7, #4]
 8009a7a:	e7b6      	b.n	80099ea <_malloc_r+0x4a>
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	d1fb      	bne.n	8009a7c <_malloc_r+0xdc>
 8009a84:	2300      	movs	r3, #0
 8009a86:	6053      	str	r3, [r2, #4]
 8009a88:	e7de      	b.n	8009a48 <_malloc_r+0xa8>
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	6033      	str	r3, [r6, #0]
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f000 f80c 	bl	8009aac <__malloc_unlock>
 8009a94:	e794      	b.n	80099c0 <_malloc_r+0x20>
 8009a96:	6005      	str	r5, [r0, #0]
 8009a98:	e7d6      	b.n	8009a48 <_malloc_r+0xa8>
 8009a9a:	bf00      	nop
 8009a9c:	20000b00 	.word	0x20000b00

08009aa0 <__malloc_lock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	@ (8009aa8 <__malloc_lock+0x8>)
 8009aa2:	f001 b9ce 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	20000c44 	.word	0x20000c44

08009aac <__malloc_unlock>:
 8009aac:	4801      	ldr	r0, [pc, #4]	@ (8009ab4 <__malloc_unlock+0x8>)
 8009aae:	f001 b9c9 	b.w	800ae44 <__retarget_lock_release_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	20000c44 	.word	0x20000c44

08009ab8 <_strtol_l.constprop.0>:
 8009ab8:	2b24      	cmp	r3, #36	@ 0x24
 8009aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abe:	4686      	mov	lr, r0
 8009ac0:	4690      	mov	r8, r2
 8009ac2:	d801      	bhi.n	8009ac8 <_strtol_l.constprop.0+0x10>
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d106      	bne.n	8009ad6 <_strtol_l.constprop.0+0x1e>
 8009ac8:	f001 f990 	bl	800adec <__errno>
 8009acc:	2316      	movs	r3, #22
 8009ace:	6003      	str	r3, [r0, #0]
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad6:	4834      	ldr	r0, [pc, #208]	@ (8009ba8 <_strtol_l.constprop.0+0xf0>)
 8009ad8:	460d      	mov	r5, r1
 8009ada:	462a      	mov	r2, r5
 8009adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae0:	5d06      	ldrb	r6, [r0, r4]
 8009ae2:	f016 0608 	ands.w	r6, r6, #8
 8009ae6:	d1f8      	bne.n	8009ada <_strtol_l.constprop.0+0x22>
 8009ae8:	2c2d      	cmp	r4, #45	@ 0x2d
 8009aea:	d12d      	bne.n	8009b48 <_strtol_l.constprop.0+0x90>
 8009aec:	782c      	ldrb	r4, [r5, #0]
 8009aee:	2601      	movs	r6, #1
 8009af0:	1c95      	adds	r5, r2, #2
 8009af2:	f033 0210 	bics.w	r2, r3, #16
 8009af6:	d109      	bne.n	8009b0c <_strtol_l.constprop.0+0x54>
 8009af8:	2c30      	cmp	r4, #48	@ 0x30
 8009afa:	d12a      	bne.n	8009b52 <_strtol_l.constprop.0+0x9a>
 8009afc:	782a      	ldrb	r2, [r5, #0]
 8009afe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b02:	2a58      	cmp	r2, #88	@ 0x58
 8009b04:	d125      	bne.n	8009b52 <_strtol_l.constprop.0+0x9a>
 8009b06:	786c      	ldrb	r4, [r5, #1]
 8009b08:	2310      	movs	r3, #16
 8009b0a:	3502      	adds	r5, #2
 8009b0c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b10:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b14:	2200      	movs	r2, #0
 8009b16:	fbbc f9f3 	udiv	r9, ip, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b20:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b24:	2f09      	cmp	r7, #9
 8009b26:	d81b      	bhi.n	8009b60 <_strtol_l.constprop.0+0xa8>
 8009b28:	463c      	mov	r4, r7
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	dd27      	ble.n	8009b7e <_strtol_l.constprop.0+0xc6>
 8009b2e:	1c57      	adds	r7, r2, #1
 8009b30:	d007      	beq.n	8009b42 <_strtol_l.constprop.0+0x8a>
 8009b32:	4581      	cmp	r9, r0
 8009b34:	d320      	bcc.n	8009b78 <_strtol_l.constprop.0+0xc0>
 8009b36:	d101      	bne.n	8009b3c <_strtol_l.constprop.0+0x84>
 8009b38:	45a2      	cmp	sl, r4
 8009b3a:	db1d      	blt.n	8009b78 <_strtol_l.constprop.0+0xc0>
 8009b3c:	fb00 4003 	mla	r0, r0, r3, r4
 8009b40:	2201      	movs	r2, #1
 8009b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b46:	e7eb      	b.n	8009b20 <_strtol_l.constprop.0+0x68>
 8009b48:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b4a:	bf04      	itt	eq
 8009b4c:	782c      	ldrbeq	r4, [r5, #0]
 8009b4e:	1c95      	addeq	r5, r2, #2
 8009b50:	e7cf      	b.n	8009af2 <_strtol_l.constprop.0+0x3a>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1da      	bne.n	8009b0c <_strtol_l.constprop.0+0x54>
 8009b56:	2c30      	cmp	r4, #48	@ 0x30
 8009b58:	bf0c      	ite	eq
 8009b5a:	2308      	moveq	r3, #8
 8009b5c:	230a      	movne	r3, #10
 8009b5e:	e7d5      	b.n	8009b0c <_strtol_l.constprop.0+0x54>
 8009b60:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b64:	2f19      	cmp	r7, #25
 8009b66:	d801      	bhi.n	8009b6c <_strtol_l.constprop.0+0xb4>
 8009b68:	3c37      	subs	r4, #55	@ 0x37
 8009b6a:	e7de      	b.n	8009b2a <_strtol_l.constprop.0+0x72>
 8009b6c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b70:	2f19      	cmp	r7, #25
 8009b72:	d804      	bhi.n	8009b7e <_strtol_l.constprop.0+0xc6>
 8009b74:	3c57      	subs	r4, #87	@ 0x57
 8009b76:	e7d8      	b.n	8009b2a <_strtol_l.constprop.0+0x72>
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	e7e1      	b.n	8009b42 <_strtol_l.constprop.0+0x8a>
 8009b7e:	1c53      	adds	r3, r2, #1
 8009b80:	d108      	bne.n	8009b94 <_strtol_l.constprop.0+0xdc>
 8009b82:	2322      	movs	r3, #34	@ 0x22
 8009b84:	f8ce 3000 	str.w	r3, [lr]
 8009b88:	4660      	mov	r0, ip
 8009b8a:	f1b8 0f00 	cmp.w	r8, #0
 8009b8e:	d0a0      	beq.n	8009ad2 <_strtol_l.constprop.0+0x1a>
 8009b90:	1e69      	subs	r1, r5, #1
 8009b92:	e006      	b.n	8009ba2 <_strtol_l.constprop.0+0xea>
 8009b94:	b106      	cbz	r6, 8009b98 <_strtol_l.constprop.0+0xe0>
 8009b96:	4240      	negs	r0, r0
 8009b98:	f1b8 0f00 	cmp.w	r8, #0
 8009b9c:	d099      	beq.n	8009ad2 <_strtol_l.constprop.0+0x1a>
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	d1f6      	bne.n	8009b90 <_strtol_l.constprop.0+0xd8>
 8009ba2:	f8c8 1000 	str.w	r1, [r8]
 8009ba6:	e794      	b.n	8009ad2 <_strtol_l.constprop.0+0x1a>
 8009ba8:	0800f591 	.word	0x0800f591

08009bac <_strtol_r>:
 8009bac:	f7ff bf84 	b.w	8009ab8 <_strtol_l.constprop.0>

08009bb0 <strtol>:
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	460a      	mov	r2, r1
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	4802      	ldr	r0, [pc, #8]	@ (8009bc0 <strtol+0x10>)
 8009bb8:	6800      	ldr	r0, [r0, #0]
 8009bba:	f7ff bf7d 	b.w	8009ab8 <_strtol_l.constprop.0>
 8009bbe:	bf00      	nop
 8009bc0:	200005ac 	.word	0x200005ac

08009bc4 <__cvt>:
 8009bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	ec57 6b10 	vmov	r6, r7, d0
 8009bcc:	2f00      	cmp	r7, #0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	bfbb      	ittet	lt
 8009bd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009bda:	461f      	movlt	r7, r3
 8009bdc:	2300      	movge	r3, #0
 8009bde:	232d      	movlt	r3, #45	@ 0x2d
 8009be0:	700b      	strb	r3, [r1, #0]
 8009be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009be4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009be8:	4691      	mov	r9, r2
 8009bea:	f023 0820 	bic.w	r8, r3, #32
 8009bee:	bfbc      	itt	lt
 8009bf0:	4632      	movlt	r2, r6
 8009bf2:	4616      	movlt	r6, r2
 8009bf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bf8:	d005      	beq.n	8009c06 <__cvt+0x42>
 8009bfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bfe:	d100      	bne.n	8009c02 <__cvt+0x3e>
 8009c00:	3401      	adds	r4, #1
 8009c02:	2102      	movs	r1, #2
 8009c04:	e000      	b.n	8009c08 <__cvt+0x44>
 8009c06:	2103      	movs	r1, #3
 8009c08:	ab03      	add	r3, sp, #12
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	ab02      	add	r3, sp, #8
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	ec47 6b10 	vmov	d0, r6, r7
 8009c14:	4653      	mov	r3, sl
 8009c16:	4622      	mov	r2, r4
 8009c18:	f001 f9ba 	bl	800af90 <_dtoa_r>
 8009c1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c20:	4605      	mov	r5, r0
 8009c22:	d119      	bne.n	8009c58 <__cvt+0x94>
 8009c24:	f019 0f01 	tst.w	r9, #1
 8009c28:	d00e      	beq.n	8009c48 <__cvt+0x84>
 8009c2a:	eb00 0904 	add.w	r9, r0, r4
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 ff67 	bl	8000b08 <__aeabi_dcmpeq>
 8009c3a:	b108      	cbz	r0, 8009c40 <__cvt+0x7c>
 8009c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c40:	2230      	movs	r2, #48	@ 0x30
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	454b      	cmp	r3, r9
 8009c46:	d31e      	bcc.n	8009c86 <__cvt+0xc2>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c4c:	1b5b      	subs	r3, r3, r5
 8009c4e:	4628      	mov	r0, r5
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	b004      	add	sp, #16
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c5c:	eb00 0904 	add.w	r9, r0, r4
 8009c60:	d1e5      	bne.n	8009c2e <__cvt+0x6a>
 8009c62:	7803      	ldrb	r3, [r0, #0]
 8009c64:	2b30      	cmp	r3, #48	@ 0x30
 8009c66:	d10a      	bne.n	8009c7e <__cvt+0xba>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8009c74:	b918      	cbnz	r0, 8009c7e <__cvt+0xba>
 8009c76:	f1c4 0401 	rsb	r4, r4, #1
 8009c7a:	f8ca 4000 	str.w	r4, [sl]
 8009c7e:	f8da 3000 	ldr.w	r3, [sl]
 8009c82:	4499      	add	r9, r3
 8009c84:	e7d3      	b.n	8009c2e <__cvt+0x6a>
 8009c86:	1c59      	adds	r1, r3, #1
 8009c88:	9103      	str	r1, [sp, #12]
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	e7d9      	b.n	8009c42 <__cvt+0x7e>

08009c8e <__exponent>:
 8009c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c90:	2900      	cmp	r1, #0
 8009c92:	bfba      	itte	lt
 8009c94:	4249      	neglt	r1, r1
 8009c96:	232d      	movlt	r3, #45	@ 0x2d
 8009c98:	232b      	movge	r3, #43	@ 0x2b
 8009c9a:	2909      	cmp	r1, #9
 8009c9c:	7002      	strb	r2, [r0, #0]
 8009c9e:	7043      	strb	r3, [r0, #1]
 8009ca0:	dd29      	ble.n	8009cf6 <__exponent+0x68>
 8009ca2:	f10d 0307 	add.w	r3, sp, #7
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	270a      	movs	r7, #10
 8009caa:	461a      	mov	r2, r3
 8009cac:	fbb1 f6f7 	udiv	r6, r1, r7
 8009cb0:	fb07 1416 	mls	r4, r7, r6, r1
 8009cb4:	3430      	adds	r4, #48	@ 0x30
 8009cb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009cba:	460c      	mov	r4, r1
 8009cbc:	2c63      	cmp	r4, #99	@ 0x63
 8009cbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	dcf1      	bgt.n	8009caa <__exponent+0x1c>
 8009cc6:	3130      	adds	r1, #48	@ 0x30
 8009cc8:	1e94      	subs	r4, r2, #2
 8009cca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009cce:	1c41      	adds	r1, r0, #1
 8009cd0:	4623      	mov	r3, r4
 8009cd2:	42ab      	cmp	r3, r5
 8009cd4:	d30a      	bcc.n	8009cec <__exponent+0x5e>
 8009cd6:	f10d 0309 	add.w	r3, sp, #9
 8009cda:	1a9b      	subs	r3, r3, r2
 8009cdc:	42ac      	cmp	r4, r5
 8009cde:	bf88      	it	hi
 8009ce0:	2300      	movhi	r3, #0
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	4403      	add	r3, r0
 8009ce6:	1a18      	subs	r0, r3, r0
 8009ce8:	b003      	add	sp, #12
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009cf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009cf4:	e7ed      	b.n	8009cd2 <__exponent+0x44>
 8009cf6:	2330      	movs	r3, #48	@ 0x30
 8009cf8:	3130      	adds	r1, #48	@ 0x30
 8009cfa:	7083      	strb	r3, [r0, #2]
 8009cfc:	70c1      	strb	r1, [r0, #3]
 8009cfe:	1d03      	adds	r3, r0, #4
 8009d00:	e7f1      	b.n	8009ce6 <__exponent+0x58>
	...

08009d04 <_printf_float>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	b08d      	sub	sp, #52	@ 0x34
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d10:	4616      	mov	r6, r2
 8009d12:	461f      	mov	r7, r3
 8009d14:	4605      	mov	r5, r0
 8009d16:	f001 f80f 	bl	800ad38 <_localeconv_r>
 8009d1a:	6803      	ldr	r3, [r0, #0]
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f6 fac6 	bl	80002b0 <strlen>
 8009d24:	2300      	movs	r3, #0
 8009d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d28:	f8d8 3000 	ldr.w	r3, [r8]
 8009d2c:	9005      	str	r0, [sp, #20]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	f023 0307 	bic.w	r3, r3, #7
 8009d34:	f103 0208 	add.w	r2, r3, #8
 8009d38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8009d40:	f8c8 2000 	str.w	r2, [r8]
 8009d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d4c:	9307      	str	r3, [sp, #28]
 8009d4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8009fcc <_printf_float+0x2c8>)
 8009d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d60:	f7f6 ff04 	bl	8000b6c <__aeabi_dcmpun>
 8009d64:	bb70      	cbnz	r0, 8009dc4 <_printf_float+0xc0>
 8009d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d6a:	4b98      	ldr	r3, [pc, #608]	@ (8009fcc <_printf_float+0x2c8>)
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d70:	f7f6 fede 	bl	8000b30 <__aeabi_dcmple>
 8009d74:	bb30      	cbnz	r0, 8009dc4 <_printf_float+0xc0>
 8009d76:	2200      	movs	r2, #0
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fecd 	bl	8000b1c <__aeabi_dcmplt>
 8009d82:	b110      	cbz	r0, 8009d8a <_printf_float+0x86>
 8009d84:	232d      	movs	r3, #45	@ 0x2d
 8009d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d8a:	4a91      	ldr	r2, [pc, #580]	@ (8009fd0 <_printf_float+0x2cc>)
 8009d8c:	4b91      	ldr	r3, [pc, #580]	@ (8009fd4 <_printf_float+0x2d0>)
 8009d8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d92:	bf94      	ite	ls
 8009d94:	4690      	movls	r8, r2
 8009d96:	4698      	movhi	r8, r3
 8009d98:	2303      	movs	r3, #3
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	f02b 0304 	bic.w	r3, fp, #4
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	9700      	str	r7, [sp, #0]
 8009da8:	4633      	mov	r3, r6
 8009daa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f9d2 	bl	800a158 <_printf_common>
 8009db4:	3001      	adds	r0, #1
 8009db6:	f040 808d 	bne.w	8009ed4 <_printf_float+0x1d0>
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbe:	b00d      	add	sp, #52	@ 0x34
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fece 	bl	8000b6c <__aeabi_dcmpun>
 8009dd0:	b140      	cbz	r0, 8009de4 <_printf_float+0xe0>
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfbc      	itt	lt
 8009dd8:	232d      	movlt	r3, #45	@ 0x2d
 8009dda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009dde:	4a7e      	ldr	r2, [pc, #504]	@ (8009fd8 <_printf_float+0x2d4>)
 8009de0:	4b7e      	ldr	r3, [pc, #504]	@ (8009fdc <_printf_float+0x2d8>)
 8009de2:	e7d4      	b.n	8009d8e <_printf_float+0x8a>
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009dea:	9206      	str	r2, [sp, #24]
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	d13b      	bne.n	8009e68 <_printf_float+0x164>
 8009df0:	2306      	movs	r3, #6
 8009df2:	6063      	str	r3, [r4, #4]
 8009df4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009df8:	2300      	movs	r3, #0
 8009dfa:	6022      	str	r2, [r4, #0]
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009e04:	ab09      	add	r3, sp, #36	@ 0x24
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	6861      	ldr	r1, [r4, #4]
 8009e0a:	ec49 8b10 	vmov	d0, r8, r9
 8009e0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7ff fed6 	bl	8009bc4 <__cvt>
 8009e18:	9b06      	ldr	r3, [sp, #24]
 8009e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e1c:	2b47      	cmp	r3, #71	@ 0x47
 8009e1e:	4680      	mov	r8, r0
 8009e20:	d129      	bne.n	8009e76 <_printf_float+0x172>
 8009e22:	1cc8      	adds	r0, r1, #3
 8009e24:	db02      	blt.n	8009e2c <_printf_float+0x128>
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	dd41      	ble.n	8009eb0 <_printf_float+0x1ac>
 8009e2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e30:	fa5f fa8a 	uxtb.w	sl, sl
 8009e34:	3901      	subs	r1, #1
 8009e36:	4652      	mov	r2, sl
 8009e38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e3e:	f7ff ff26 	bl	8009c8e <__exponent>
 8009e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e44:	1813      	adds	r3, r2, r0
 8009e46:	2a01      	cmp	r2, #1
 8009e48:	4681      	mov	r9, r0
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	dc02      	bgt.n	8009e54 <_printf_float+0x150>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	07d2      	lsls	r2, r2, #31
 8009e52:	d501      	bpl.n	8009e58 <_printf_float+0x154>
 8009e54:	3301      	adds	r3, #1
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0a2      	beq.n	8009da6 <_printf_float+0xa2>
 8009e60:	232d      	movs	r3, #45	@ 0x2d
 8009e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e66:	e79e      	b.n	8009da6 <_printf_float+0xa2>
 8009e68:	9a06      	ldr	r2, [sp, #24]
 8009e6a:	2a47      	cmp	r2, #71	@ 0x47
 8009e6c:	d1c2      	bne.n	8009df4 <_printf_float+0xf0>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1c0      	bne.n	8009df4 <_printf_float+0xf0>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e7bd      	b.n	8009df2 <_printf_float+0xee>
 8009e76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e7a:	d9db      	bls.n	8009e34 <_printf_float+0x130>
 8009e7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e80:	d118      	bne.n	8009eb4 <_printf_float+0x1b0>
 8009e82:	2900      	cmp	r1, #0
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	dd0b      	ble.n	8009ea0 <_printf_float+0x19c>
 8009e88:	6121      	str	r1, [r4, #16]
 8009e8a:	b913      	cbnz	r3, 8009e92 <_printf_float+0x18e>
 8009e8c:	6822      	ldr	r2, [r4, #0]
 8009e8e:	07d0      	lsls	r0, r2, #31
 8009e90:	d502      	bpl.n	8009e98 <_printf_float+0x194>
 8009e92:	3301      	adds	r3, #1
 8009e94:	440b      	add	r3, r1
 8009e96:	6123      	str	r3, [r4, #16]
 8009e98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e9a:	f04f 0900 	mov.w	r9, #0
 8009e9e:	e7db      	b.n	8009e58 <_printf_float+0x154>
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_printf_float+0x1a4>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	07d2      	lsls	r2, r2, #31
 8009ea6:	d501      	bpl.n	8009eac <_printf_float+0x1a8>
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	e7f4      	b.n	8009e96 <_printf_float+0x192>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e7f2      	b.n	8009e96 <_printf_float+0x192>
 8009eb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	db05      	blt.n	8009ec6 <_printf_float+0x1c2>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	6121      	str	r1, [r4, #16]
 8009ebe:	07d8      	lsls	r0, r3, #31
 8009ec0:	d5ea      	bpl.n	8009e98 <_printf_float+0x194>
 8009ec2:	1c4b      	adds	r3, r1, #1
 8009ec4:	e7e7      	b.n	8009e96 <_printf_float+0x192>
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	bfd4      	ite	le
 8009eca:	f1c1 0202 	rsble	r2, r1, #2
 8009ece:	2201      	movgt	r2, #1
 8009ed0:	4413      	add	r3, r2
 8009ed2:	e7e0      	b.n	8009e96 <_printf_float+0x192>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	055a      	lsls	r2, r3, #21
 8009ed8:	d407      	bmi.n	8009eea <_printf_float+0x1e6>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	4642      	mov	r2, r8
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d12b      	bne.n	8009f40 <_printf_float+0x23c>
 8009ee8:	e767      	b.n	8009dba <_printf_float+0xb6>
 8009eea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009eee:	f240 80dd 	bls.w	800a0ac <_printf_float+0x3a8>
 8009ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f7f6 fe05 	bl	8000b08 <__aeabi_dcmpeq>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d033      	beq.n	8009f6a <_printf_float+0x266>
 8009f02:	4a37      	ldr	r2, [pc, #220]	@ (8009fe0 <_printf_float+0x2dc>)
 8009f04:	2301      	movs	r3, #1
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f af54 	beq.w	8009dba <_printf_float+0xb6>
 8009f12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f16:	4543      	cmp	r3, r8
 8009f18:	db02      	blt.n	8009f20 <_printf_float+0x21c>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	07d8      	lsls	r0, r3, #31
 8009f1e:	d50f      	bpl.n	8009f40 <_printf_float+0x23c>
 8009f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af45 	beq.w	8009dba <_printf_float+0xb6>
 8009f30:	f04f 0900 	mov.w	r9, #0
 8009f34:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f38:	f104 0a1a 	add.w	sl, r4, #26
 8009f3c:	45c8      	cmp	r8, r9
 8009f3e:	dc09      	bgt.n	8009f54 <_printf_float+0x250>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	079b      	lsls	r3, r3, #30
 8009f44:	f100 8103 	bmi.w	800a14e <_printf_float+0x44a>
 8009f48:	68e0      	ldr	r0, [r4, #12]
 8009f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f4c:	4298      	cmp	r0, r3
 8009f4e:	bfb8      	it	lt
 8009f50:	4618      	movlt	r0, r3
 8009f52:	e734      	b.n	8009dbe <_printf_float+0xba>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4652      	mov	r2, sl
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f af2b 	beq.w	8009dba <_printf_float+0xb6>
 8009f64:	f109 0901 	add.w	r9, r9, #1
 8009f68:	e7e8      	b.n	8009f3c <_printf_float+0x238>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dc39      	bgt.n	8009fe4 <_printf_float+0x2e0>
 8009f70:	4a1b      	ldr	r2, [pc, #108]	@ (8009fe0 <_printf_float+0x2dc>)
 8009f72:	2301      	movs	r3, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f43f af1d 	beq.w	8009dba <_printf_float+0xb6>
 8009f80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f84:	ea59 0303 	orrs.w	r3, r9, r3
 8009f88:	d102      	bne.n	8009f90 <_printf_float+0x28c>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	07d9      	lsls	r1, r3, #31
 8009f8e:	d5d7      	bpl.n	8009f40 <_printf_float+0x23c>
 8009f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f af0d 	beq.w	8009dba <_printf_float+0xb6>
 8009fa0:	f04f 0a00 	mov.w	sl, #0
 8009fa4:	f104 0b1a 	add.w	fp, r4, #26
 8009fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009faa:	425b      	negs	r3, r3
 8009fac:	4553      	cmp	r3, sl
 8009fae:	dc01      	bgt.n	8009fb4 <_printf_float+0x2b0>
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	e793      	b.n	8009edc <_printf_float+0x1d8>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	465a      	mov	r2, fp
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f aefb 	beq.w	8009dba <_printf_float+0xb6>
 8009fc4:	f10a 0a01 	add.w	sl, sl, #1
 8009fc8:	e7ee      	b.n	8009fa8 <_printf_float+0x2a4>
 8009fca:	bf00      	nop
 8009fcc:	7fefffff 	.word	0x7fefffff
 8009fd0:	0800f691 	.word	0x0800f691
 8009fd4:	0800f695 	.word	0x0800f695
 8009fd8:	0800f699 	.word	0x0800f699
 8009fdc:	0800f69d 	.word	0x0800f69d
 8009fe0:	0800f6a1 	.word	0x0800f6a1
 8009fe4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fe6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fea:	4553      	cmp	r3, sl
 8009fec:	bfa8      	it	ge
 8009fee:	4653      	movge	r3, sl
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	4699      	mov	r9, r3
 8009ff4:	dc36      	bgt.n	800a064 <_printf_float+0x360>
 8009ff6:	f04f 0b00 	mov.w	fp, #0
 8009ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffe:	f104 021a 	add.w	r2, r4, #26
 800a002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	eba3 0309 	sub.w	r3, r3, r9
 800a00a:	455b      	cmp	r3, fp
 800a00c:	dc31      	bgt.n	800a072 <_printf_float+0x36e>
 800a00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a010:	459a      	cmp	sl, r3
 800a012:	dc3a      	bgt.n	800a08a <_printf_float+0x386>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	07da      	lsls	r2, r3, #31
 800a018:	d437      	bmi.n	800a08a <_printf_float+0x386>
 800a01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a01c:	ebaa 0903 	sub.w	r9, sl, r3
 800a020:	9b06      	ldr	r3, [sp, #24]
 800a022:	ebaa 0303 	sub.w	r3, sl, r3
 800a026:	4599      	cmp	r9, r3
 800a028:	bfa8      	it	ge
 800a02a:	4699      	movge	r9, r3
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	dc33      	bgt.n	800a09a <_printf_float+0x396>
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a03a:	f104 0b1a 	add.w	fp, r4, #26
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	ebaa 0303 	sub.w	r3, sl, r3
 800a044:	eba3 0309 	sub.w	r3, r3, r9
 800a048:	4543      	cmp	r3, r8
 800a04a:	f77f af79 	ble.w	8009f40 <_printf_float+0x23c>
 800a04e:	2301      	movs	r3, #1
 800a050:	465a      	mov	r2, fp
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f aeae 	beq.w	8009dba <_printf_float+0xb6>
 800a05e:	f108 0801 	add.w	r8, r8, #1
 800a062:	e7ec      	b.n	800a03e <_printf_float+0x33a>
 800a064:	4642      	mov	r2, r8
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	47b8      	blx	r7
 800a06c:	3001      	adds	r0, #1
 800a06e:	d1c2      	bne.n	8009ff6 <_printf_float+0x2f2>
 800a070:	e6a3      	b.n	8009dba <_printf_float+0xb6>
 800a072:	2301      	movs	r3, #1
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	9206      	str	r2, [sp, #24]
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f ae9c 	beq.w	8009dba <_printf_float+0xb6>
 800a082:	9a06      	ldr	r2, [sp, #24]
 800a084:	f10b 0b01 	add.w	fp, fp, #1
 800a088:	e7bb      	b.n	800a002 <_printf_float+0x2fe>
 800a08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	47b8      	blx	r7
 800a094:	3001      	adds	r0, #1
 800a096:	d1c0      	bne.n	800a01a <_printf_float+0x316>
 800a098:	e68f      	b.n	8009dba <_printf_float+0xb6>
 800a09a:	9a06      	ldr	r2, [sp, #24]
 800a09c:	464b      	mov	r3, r9
 800a09e:	4442      	add	r2, r8
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d1c3      	bne.n	800a032 <_printf_float+0x32e>
 800a0aa:	e686      	b.n	8009dba <_printf_float+0xb6>
 800a0ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0b0:	f1ba 0f01 	cmp.w	sl, #1
 800a0b4:	dc01      	bgt.n	800a0ba <_printf_float+0x3b6>
 800a0b6:	07db      	lsls	r3, r3, #31
 800a0b8:	d536      	bpl.n	800a128 <_printf_float+0x424>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4642      	mov	r2, r8
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f ae78 	beq.w	8009dba <_printf_float+0xb6>
 800a0ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae70 	beq.w	8009dba <_printf_float+0xb6>
 800a0da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0e6:	f7f6 fd0f 	bl	8000b08 <__aeabi_dcmpeq>
 800a0ea:	b9c0      	cbnz	r0, 800a11e <_printf_float+0x41a>
 800a0ec:	4653      	mov	r3, sl
 800a0ee:	f108 0201 	add.w	r2, r8, #1
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d10c      	bne.n	800a116 <_printf_float+0x412>
 800a0fc:	e65d      	b.n	8009dba <_printf_float+0xb6>
 800a0fe:	2301      	movs	r3, #1
 800a100:	465a      	mov	r2, fp
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae56 	beq.w	8009dba <_printf_float+0xb6>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	45d0      	cmp	r8, sl
 800a114:	dbf3      	blt.n	800a0fe <_printf_float+0x3fa>
 800a116:	464b      	mov	r3, r9
 800a118:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a11c:	e6df      	b.n	8009ede <_printf_float+0x1da>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f104 0b1a 	add.w	fp, r4, #26
 800a126:	e7f4      	b.n	800a112 <_printf_float+0x40e>
 800a128:	2301      	movs	r3, #1
 800a12a:	4642      	mov	r2, r8
 800a12c:	e7e1      	b.n	800a0f2 <_printf_float+0x3ee>
 800a12e:	2301      	movs	r3, #1
 800a130:	464a      	mov	r2, r9
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f ae3e 	beq.w	8009dba <_printf_float+0xb6>
 800a13e:	f108 0801 	add.w	r8, r8, #1
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a146:	1a5b      	subs	r3, r3, r1
 800a148:	4543      	cmp	r3, r8
 800a14a:	dcf0      	bgt.n	800a12e <_printf_float+0x42a>
 800a14c:	e6fc      	b.n	8009f48 <_printf_float+0x244>
 800a14e:	f04f 0800 	mov.w	r8, #0
 800a152:	f104 0919 	add.w	r9, r4, #25
 800a156:	e7f4      	b.n	800a142 <_printf_float+0x43e>

0800a158 <_printf_common>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	4616      	mov	r6, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	688a      	ldr	r2, [r1, #8]
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a168:	4293      	cmp	r3, r2
 800a16a:	bfb8      	it	lt
 800a16c:	4613      	movlt	r3, r2
 800a16e:	6033      	str	r3, [r6, #0]
 800a170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a174:	4607      	mov	r7, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b10a      	cbz	r2, 800a17e <_printf_common+0x26>
 800a17a:	3301      	adds	r3, #1
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	0699      	lsls	r1, r3, #26
 800a182:	bf42      	ittt	mi
 800a184:	6833      	ldrmi	r3, [r6, #0]
 800a186:	3302      	addmi	r3, #2
 800a188:	6033      	strmi	r3, [r6, #0]
 800a18a:	6825      	ldr	r5, [r4, #0]
 800a18c:	f015 0506 	ands.w	r5, r5, #6
 800a190:	d106      	bne.n	800a1a0 <_printf_common+0x48>
 800a192:	f104 0a19 	add.w	sl, r4, #25
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	6832      	ldr	r2, [r6, #0]
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dc26      	bgt.n	800a1ee <_printf_common+0x96>
 800a1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	3b00      	subs	r3, #0
 800a1a8:	bf18      	it	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	0692      	lsls	r2, r2, #26
 800a1ae:	d42b      	bmi.n	800a208 <_printf_common+0xb0>
 800a1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c8      	blx	r9
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d01e      	beq.n	800a1fc <_printf_common+0xa4>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	f003 0306 	and.w	r3, r3, #6
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	bf02      	ittt	eq
 800a1ca:	68e5      	ldreq	r5, [r4, #12]
 800a1cc:	6833      	ldreq	r3, [r6, #0]
 800a1ce:	1aed      	subeq	r5, r5, r3
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	bf0c      	ite	eq
 800a1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d8:	2500      	movne	r5, #0
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	bfc4      	itt	gt
 800a1de:	1a9b      	subgt	r3, r3, r2
 800a1e0:	18ed      	addgt	r5, r5, r3
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	341a      	adds	r4, #26
 800a1e6:	42b5      	cmp	r5, r6
 800a1e8:	d11a      	bne.n	800a220 <_printf_common+0xc8>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e008      	b.n	800a200 <_printf_common+0xa8>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	47c8      	blx	r9
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d103      	bne.n	800a204 <_printf_common+0xac>
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a204:	3501      	adds	r5, #1
 800a206:	e7c6      	b.n	800a196 <_printf_common+0x3e>
 800a208:	18e1      	adds	r1, r4, r3
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	2030      	movs	r0, #48	@ 0x30
 800a20e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a212:	4422      	add	r2, r4
 800a214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a21c:	3302      	adds	r3, #2
 800a21e:	e7c7      	b.n	800a1b0 <_printf_common+0x58>
 800a220:	2301      	movs	r3, #1
 800a222:	4622      	mov	r2, r4
 800a224:	4641      	mov	r1, r8
 800a226:	4638      	mov	r0, r7
 800a228:	47c8      	blx	r9
 800a22a:	3001      	adds	r0, #1
 800a22c:	d0e6      	beq.n	800a1fc <_printf_common+0xa4>
 800a22e:	3601      	adds	r6, #1
 800a230:	e7d9      	b.n	800a1e6 <_printf_common+0x8e>
	...

0800a234 <_printf_i>:
 800a234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	7e0f      	ldrb	r7, [r1, #24]
 800a23a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a23c:	2f78      	cmp	r7, #120	@ 0x78
 800a23e:	4691      	mov	r9, r2
 800a240:	4680      	mov	r8, r0
 800a242:	460c      	mov	r4, r1
 800a244:	469a      	mov	sl, r3
 800a246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a24a:	d807      	bhi.n	800a25c <_printf_i+0x28>
 800a24c:	2f62      	cmp	r7, #98	@ 0x62
 800a24e:	d80a      	bhi.n	800a266 <_printf_i+0x32>
 800a250:	2f00      	cmp	r7, #0
 800a252:	f000 80d2 	beq.w	800a3fa <_printf_i+0x1c6>
 800a256:	2f58      	cmp	r7, #88	@ 0x58
 800a258:	f000 80b9 	beq.w	800a3ce <_printf_i+0x19a>
 800a25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a264:	e03a      	b.n	800a2dc <_printf_i+0xa8>
 800a266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a26a:	2b15      	cmp	r3, #21
 800a26c:	d8f6      	bhi.n	800a25c <_printf_i+0x28>
 800a26e:	a101      	add	r1, pc, #4	@ (adr r1, 800a274 <_printf_i+0x40>)
 800a270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a274:	0800a2cd 	.word	0x0800a2cd
 800a278:	0800a2e1 	.word	0x0800a2e1
 800a27c:	0800a25d 	.word	0x0800a25d
 800a280:	0800a25d 	.word	0x0800a25d
 800a284:	0800a25d 	.word	0x0800a25d
 800a288:	0800a25d 	.word	0x0800a25d
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a25d 	.word	0x0800a25d
 800a294:	0800a25d 	.word	0x0800a25d
 800a298:	0800a25d 	.word	0x0800a25d
 800a29c:	0800a25d 	.word	0x0800a25d
 800a2a0:	0800a3e1 	.word	0x0800a3e1
 800a2a4:	0800a30b 	.word	0x0800a30b
 800a2a8:	0800a39b 	.word	0x0800a39b
 800a2ac:	0800a25d 	.word	0x0800a25d
 800a2b0:	0800a25d 	.word	0x0800a25d
 800a2b4:	0800a403 	.word	0x0800a403
 800a2b8:	0800a25d 	.word	0x0800a25d
 800a2bc:	0800a30b 	.word	0x0800a30b
 800a2c0:	0800a25d 	.word	0x0800a25d
 800a2c4:	0800a25d 	.word	0x0800a25d
 800a2c8:	0800a3a3 	.word	0x0800a3a3
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6032      	str	r2, [r6, #0]
 800a2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e09d      	b.n	800a41c <_printf_i+0x1e8>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	6820      	ldr	r0, [r4, #0]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	6031      	str	r1, [r6, #0]
 800a2e8:	0606      	lsls	r6, r0, #24
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_i+0xbc>
 800a2ec:	681d      	ldr	r5, [r3, #0]
 800a2ee:	e003      	b.n	800a2f8 <_printf_i+0xc4>
 800a2f0:	0645      	lsls	r5, r0, #25
 800a2f2:	d5fb      	bpl.n	800a2ec <_printf_i+0xb8>
 800a2f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	da03      	bge.n	800a304 <_printf_i+0xd0>
 800a2fc:	232d      	movs	r3, #45	@ 0x2d
 800a2fe:	426d      	negs	r5, r5
 800a300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a304:	4859      	ldr	r0, [pc, #356]	@ (800a46c <_printf_i+0x238>)
 800a306:	230a      	movs	r3, #10
 800a308:	e011      	b.n	800a32e <_printf_i+0xfa>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	6833      	ldr	r3, [r6, #0]
 800a30e:	0608      	lsls	r0, r1, #24
 800a310:	f853 5b04 	ldr.w	r5, [r3], #4
 800a314:	d402      	bmi.n	800a31c <_printf_i+0xe8>
 800a316:	0649      	lsls	r1, r1, #25
 800a318:	bf48      	it	mi
 800a31a:	b2ad      	uxthmi	r5, r5
 800a31c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a31e:	4853      	ldr	r0, [pc, #332]	@ (800a46c <_printf_i+0x238>)
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	bf14      	ite	ne
 800a324:	230a      	movne	r3, #10
 800a326:	2308      	moveq	r3, #8
 800a328:	2100      	movs	r1, #0
 800a32a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a32e:	6866      	ldr	r6, [r4, #4]
 800a330:	60a6      	str	r6, [r4, #8]
 800a332:	2e00      	cmp	r6, #0
 800a334:	bfa2      	ittt	ge
 800a336:	6821      	ldrge	r1, [r4, #0]
 800a338:	f021 0104 	bicge.w	r1, r1, #4
 800a33c:	6021      	strge	r1, [r4, #0]
 800a33e:	b90d      	cbnz	r5, 800a344 <_printf_i+0x110>
 800a340:	2e00      	cmp	r6, #0
 800a342:	d04b      	beq.n	800a3dc <_printf_i+0x1a8>
 800a344:	4616      	mov	r6, r2
 800a346:	fbb5 f1f3 	udiv	r1, r5, r3
 800a34a:	fb03 5711 	mls	r7, r3, r1, r5
 800a34e:	5dc7      	ldrb	r7, [r0, r7]
 800a350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a354:	462f      	mov	r7, r5
 800a356:	42bb      	cmp	r3, r7
 800a358:	460d      	mov	r5, r1
 800a35a:	d9f4      	bls.n	800a346 <_printf_i+0x112>
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d10b      	bne.n	800a378 <_printf_i+0x144>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	07df      	lsls	r7, r3, #31
 800a364:	d508      	bpl.n	800a378 <_printf_i+0x144>
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	6861      	ldr	r1, [r4, #4]
 800a36a:	4299      	cmp	r1, r3
 800a36c:	bfde      	ittt	le
 800a36e:	2330      	movle	r3, #48	@ 0x30
 800a370:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a374:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a378:	1b92      	subs	r2, r2, r6
 800a37a:	6122      	str	r2, [r4, #16]
 800a37c:	f8cd a000 	str.w	sl, [sp]
 800a380:	464b      	mov	r3, r9
 800a382:	aa03      	add	r2, sp, #12
 800a384:	4621      	mov	r1, r4
 800a386:	4640      	mov	r0, r8
 800a388:	f7ff fee6 	bl	800a158 <_printf_common>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d14a      	bne.n	800a426 <_printf_i+0x1f2>
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	b004      	add	sp, #16
 800a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	f043 0320 	orr.w	r3, r3, #32
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	4833      	ldr	r0, [pc, #204]	@ (800a470 <_printf_i+0x23c>)
 800a3a4:	2778      	movs	r7, #120	@ 0x78
 800a3a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	6831      	ldr	r1, [r6, #0]
 800a3ae:	061f      	lsls	r7, r3, #24
 800a3b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3b4:	d402      	bmi.n	800a3bc <_printf_i+0x188>
 800a3b6:	065f      	lsls	r7, r3, #25
 800a3b8:	bf48      	it	mi
 800a3ba:	b2ad      	uxthmi	r5, r5
 800a3bc:	6031      	str	r1, [r6, #0]
 800a3be:	07d9      	lsls	r1, r3, #31
 800a3c0:	bf44      	itt	mi
 800a3c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c6:	6023      	strmi	r3, [r4, #0]
 800a3c8:	b11d      	cbz	r5, 800a3d2 <_printf_i+0x19e>
 800a3ca:	2310      	movs	r3, #16
 800a3cc:	e7ac      	b.n	800a328 <_printf_i+0xf4>
 800a3ce:	4827      	ldr	r0, [pc, #156]	@ (800a46c <_printf_i+0x238>)
 800a3d0:	e7e9      	b.n	800a3a6 <_printf_i+0x172>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	f023 0320 	bic.w	r3, r3, #32
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	e7f6      	b.n	800a3ca <_printf_i+0x196>
 800a3dc:	4616      	mov	r6, r2
 800a3de:	e7bd      	b.n	800a35c <_printf_i+0x128>
 800a3e0:	6833      	ldr	r3, [r6, #0]
 800a3e2:	6825      	ldr	r5, [r4, #0]
 800a3e4:	6961      	ldr	r1, [r4, #20]
 800a3e6:	1d18      	adds	r0, r3, #4
 800a3e8:	6030      	str	r0, [r6, #0]
 800a3ea:	062e      	lsls	r6, r5, #24
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	d501      	bpl.n	800a3f4 <_printf_i+0x1c0>
 800a3f0:	6019      	str	r1, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <_printf_i+0x1c6>
 800a3f4:	0668      	lsls	r0, r5, #25
 800a3f6:	d5fb      	bpl.n	800a3f0 <_printf_i+0x1bc>
 800a3f8:	8019      	strh	r1, [r3, #0]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	6123      	str	r3, [r4, #16]
 800a3fe:	4616      	mov	r6, r2
 800a400:	e7bc      	b.n	800a37c <_printf_i+0x148>
 800a402:	6833      	ldr	r3, [r6, #0]
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	6032      	str	r2, [r6, #0]
 800a408:	681e      	ldr	r6, [r3, #0]
 800a40a:	6862      	ldr	r2, [r4, #4]
 800a40c:	2100      	movs	r1, #0
 800a40e:	4630      	mov	r0, r6
 800a410:	f7f5 fefe 	bl	8000210 <memchr>
 800a414:	b108      	cbz	r0, 800a41a <_printf_i+0x1e6>
 800a416:	1b80      	subs	r0, r0, r6
 800a418:	6060      	str	r0, [r4, #4]
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	6123      	str	r3, [r4, #16]
 800a41e:	2300      	movs	r3, #0
 800a420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a424:	e7aa      	b.n	800a37c <_printf_i+0x148>
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	4632      	mov	r2, r6
 800a42a:	4649      	mov	r1, r9
 800a42c:	4640      	mov	r0, r8
 800a42e:	47d0      	blx	sl
 800a430:	3001      	adds	r0, #1
 800a432:	d0ad      	beq.n	800a390 <_printf_i+0x15c>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	079b      	lsls	r3, r3, #30
 800a438:	d413      	bmi.n	800a462 <_printf_i+0x22e>
 800a43a:	68e0      	ldr	r0, [r4, #12]
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	4298      	cmp	r0, r3
 800a440:	bfb8      	it	lt
 800a442:	4618      	movlt	r0, r3
 800a444:	e7a6      	b.n	800a394 <_printf_i+0x160>
 800a446:	2301      	movs	r3, #1
 800a448:	4632      	mov	r2, r6
 800a44a:	4649      	mov	r1, r9
 800a44c:	4640      	mov	r0, r8
 800a44e:	47d0      	blx	sl
 800a450:	3001      	adds	r0, #1
 800a452:	d09d      	beq.n	800a390 <_printf_i+0x15c>
 800a454:	3501      	adds	r5, #1
 800a456:	68e3      	ldr	r3, [r4, #12]
 800a458:	9903      	ldr	r1, [sp, #12]
 800a45a:	1a5b      	subs	r3, r3, r1
 800a45c:	42ab      	cmp	r3, r5
 800a45e:	dcf2      	bgt.n	800a446 <_printf_i+0x212>
 800a460:	e7eb      	b.n	800a43a <_printf_i+0x206>
 800a462:	2500      	movs	r5, #0
 800a464:	f104 0619 	add.w	r6, r4, #25
 800a468:	e7f5      	b.n	800a456 <_printf_i+0x222>
 800a46a:	bf00      	nop
 800a46c:	0800f6a3 	.word	0x0800f6a3
 800a470:	0800f6b4 	.word	0x0800f6b4

0800a474 <_scanf_float>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	b087      	sub	sp, #28
 800a47a:	4617      	mov	r7, r2
 800a47c:	9303      	str	r3, [sp, #12]
 800a47e:	688b      	ldr	r3, [r1, #8]
 800a480:	1e5a      	subs	r2, r3, #1
 800a482:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a486:	bf81      	itttt	hi
 800a488:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a48c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a490:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a494:	608b      	strhi	r3, [r1, #8]
 800a496:	680b      	ldr	r3, [r1, #0]
 800a498:	460a      	mov	r2, r1
 800a49a:	f04f 0500 	mov.w	r5, #0
 800a49e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a4a2:	f842 3b1c 	str.w	r3, [r2], #28
 800a4a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	bf98      	it	ls
 800a4b0:	f04f 0b00 	movls.w	fp, #0
 800a4b4:	9201      	str	r2, [sp, #4]
 800a4b6:	4616      	mov	r6, r2
 800a4b8:	46aa      	mov	sl, r5
 800a4ba:	46a9      	mov	r9, r5
 800a4bc:	9502      	str	r5, [sp, #8]
 800a4be:	68a2      	ldr	r2, [r4, #8]
 800a4c0:	b152      	cbz	r2, 800a4d8 <_scanf_float+0x64>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b4e      	cmp	r3, #78	@ 0x4e
 800a4c8:	d864      	bhi.n	800a594 <_scanf_float+0x120>
 800a4ca:	2b40      	cmp	r3, #64	@ 0x40
 800a4cc:	d83c      	bhi.n	800a548 <_scanf_float+0xd4>
 800a4ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a4d2:	b2c8      	uxtb	r0, r1
 800a4d4:	280e      	cmp	r0, #14
 800a4d6:	d93a      	bls.n	800a54e <_scanf_float+0xda>
 800a4d8:	f1b9 0f00 	cmp.w	r9, #0
 800a4dc:	d003      	beq.n	800a4e6 <_scanf_float+0x72>
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ea:	f1ba 0f01 	cmp.w	sl, #1
 800a4ee:	f200 8117 	bhi.w	800a720 <_scanf_float+0x2ac>
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	429e      	cmp	r6, r3
 800a4f6:	f200 8108 	bhi.w	800a70a <_scanf_float+0x296>
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	b007      	add	sp, #28
 800a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a502:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a506:	2a0d      	cmp	r2, #13
 800a508:	d8e6      	bhi.n	800a4d8 <_scanf_float+0x64>
 800a50a:	a101      	add	r1, pc, #4	@ (adr r1, 800a510 <_scanf_float+0x9c>)
 800a50c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a510:	0800a657 	.word	0x0800a657
 800a514:	0800a4d9 	.word	0x0800a4d9
 800a518:	0800a4d9 	.word	0x0800a4d9
 800a51c:	0800a4d9 	.word	0x0800a4d9
 800a520:	0800a6b7 	.word	0x0800a6b7
 800a524:	0800a68f 	.word	0x0800a68f
 800a528:	0800a4d9 	.word	0x0800a4d9
 800a52c:	0800a4d9 	.word	0x0800a4d9
 800a530:	0800a665 	.word	0x0800a665
 800a534:	0800a4d9 	.word	0x0800a4d9
 800a538:	0800a4d9 	.word	0x0800a4d9
 800a53c:	0800a4d9 	.word	0x0800a4d9
 800a540:	0800a4d9 	.word	0x0800a4d9
 800a544:	0800a61d 	.word	0x0800a61d
 800a548:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a54c:	e7db      	b.n	800a506 <_scanf_float+0x92>
 800a54e:	290e      	cmp	r1, #14
 800a550:	d8c2      	bhi.n	800a4d8 <_scanf_float+0x64>
 800a552:	a001      	add	r0, pc, #4	@ (adr r0, 800a558 <_scanf_float+0xe4>)
 800a554:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a558:	0800a60d 	.word	0x0800a60d
 800a55c:	0800a4d9 	.word	0x0800a4d9
 800a560:	0800a60d 	.word	0x0800a60d
 800a564:	0800a6a3 	.word	0x0800a6a3
 800a568:	0800a4d9 	.word	0x0800a4d9
 800a56c:	0800a5b5 	.word	0x0800a5b5
 800a570:	0800a5f3 	.word	0x0800a5f3
 800a574:	0800a5f3 	.word	0x0800a5f3
 800a578:	0800a5f3 	.word	0x0800a5f3
 800a57c:	0800a5f3 	.word	0x0800a5f3
 800a580:	0800a5f3 	.word	0x0800a5f3
 800a584:	0800a5f3 	.word	0x0800a5f3
 800a588:	0800a5f3 	.word	0x0800a5f3
 800a58c:	0800a5f3 	.word	0x0800a5f3
 800a590:	0800a5f3 	.word	0x0800a5f3
 800a594:	2b6e      	cmp	r3, #110	@ 0x6e
 800a596:	d809      	bhi.n	800a5ac <_scanf_float+0x138>
 800a598:	2b60      	cmp	r3, #96	@ 0x60
 800a59a:	d8b2      	bhi.n	800a502 <_scanf_float+0x8e>
 800a59c:	2b54      	cmp	r3, #84	@ 0x54
 800a59e:	d07b      	beq.n	800a698 <_scanf_float+0x224>
 800a5a0:	2b59      	cmp	r3, #89	@ 0x59
 800a5a2:	d199      	bne.n	800a4d8 <_scanf_float+0x64>
 800a5a4:	2d07      	cmp	r5, #7
 800a5a6:	d197      	bne.n	800a4d8 <_scanf_float+0x64>
 800a5a8:	2508      	movs	r5, #8
 800a5aa:	e02c      	b.n	800a606 <_scanf_float+0x192>
 800a5ac:	2b74      	cmp	r3, #116	@ 0x74
 800a5ae:	d073      	beq.n	800a698 <_scanf_float+0x224>
 800a5b0:	2b79      	cmp	r3, #121	@ 0x79
 800a5b2:	e7f6      	b.n	800a5a2 <_scanf_float+0x12e>
 800a5b4:	6821      	ldr	r1, [r4, #0]
 800a5b6:	05c8      	lsls	r0, r1, #23
 800a5b8:	d51b      	bpl.n	800a5f2 <_scanf_float+0x17e>
 800a5ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a5be:	6021      	str	r1, [r4, #0]
 800a5c0:	f109 0901 	add.w	r9, r9, #1
 800a5c4:	f1bb 0f00 	cmp.w	fp, #0
 800a5c8:	d003      	beq.n	800a5d2 <_scanf_float+0x15e>
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5d0:	60a2      	str	r2, [r4, #8]
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	60a3      	str	r3, [r4, #8]
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	607b      	str	r3, [r7, #4]
 800a5e6:	f340 8087 	ble.w	800a6f8 <_scanf_float+0x284>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	e765      	b.n	800a4be <_scanf_float+0x4a>
 800a5f2:	eb1a 0105 	adds.w	r1, sl, r5
 800a5f6:	f47f af6f 	bne.w	800a4d8 <_scanf_float+0x64>
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	460d      	mov	r5, r1
 800a604:	468a      	mov	sl, r1
 800a606:	f806 3b01 	strb.w	r3, [r6], #1
 800a60a:	e7e2      	b.n	800a5d2 <_scanf_float+0x15e>
 800a60c:	6822      	ldr	r2, [r4, #0]
 800a60e:	0610      	lsls	r0, r2, #24
 800a610:	f57f af62 	bpl.w	800a4d8 <_scanf_float+0x64>
 800a614:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	e7f4      	b.n	800a606 <_scanf_float+0x192>
 800a61c:	f1ba 0f00 	cmp.w	sl, #0
 800a620:	d10e      	bne.n	800a640 <_scanf_float+0x1cc>
 800a622:	f1b9 0f00 	cmp.w	r9, #0
 800a626:	d10e      	bne.n	800a646 <_scanf_float+0x1d2>
 800a628:	6822      	ldr	r2, [r4, #0]
 800a62a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a62e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a632:	d108      	bne.n	800a646 <_scanf_float+0x1d2>
 800a634:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a638:	6022      	str	r2, [r4, #0]
 800a63a:	f04f 0a01 	mov.w	sl, #1
 800a63e:	e7e2      	b.n	800a606 <_scanf_float+0x192>
 800a640:	f1ba 0f02 	cmp.w	sl, #2
 800a644:	d055      	beq.n	800a6f2 <_scanf_float+0x27e>
 800a646:	2d01      	cmp	r5, #1
 800a648:	d002      	beq.n	800a650 <_scanf_float+0x1dc>
 800a64a:	2d04      	cmp	r5, #4
 800a64c:	f47f af44 	bne.w	800a4d8 <_scanf_float+0x64>
 800a650:	3501      	adds	r5, #1
 800a652:	b2ed      	uxtb	r5, r5
 800a654:	e7d7      	b.n	800a606 <_scanf_float+0x192>
 800a656:	f1ba 0f01 	cmp.w	sl, #1
 800a65a:	f47f af3d 	bne.w	800a4d8 <_scanf_float+0x64>
 800a65e:	f04f 0a02 	mov.w	sl, #2
 800a662:	e7d0      	b.n	800a606 <_scanf_float+0x192>
 800a664:	b97d      	cbnz	r5, 800a686 <_scanf_float+0x212>
 800a666:	f1b9 0f00 	cmp.w	r9, #0
 800a66a:	f47f af38 	bne.w	800a4de <_scanf_float+0x6a>
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a674:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a678:	f040 8108 	bne.w	800a88c <_scanf_float+0x418>
 800a67c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	2501      	movs	r5, #1
 800a684:	e7bf      	b.n	800a606 <_scanf_float+0x192>
 800a686:	2d03      	cmp	r5, #3
 800a688:	d0e2      	beq.n	800a650 <_scanf_float+0x1dc>
 800a68a:	2d05      	cmp	r5, #5
 800a68c:	e7de      	b.n	800a64c <_scanf_float+0x1d8>
 800a68e:	2d02      	cmp	r5, #2
 800a690:	f47f af22 	bne.w	800a4d8 <_scanf_float+0x64>
 800a694:	2503      	movs	r5, #3
 800a696:	e7b6      	b.n	800a606 <_scanf_float+0x192>
 800a698:	2d06      	cmp	r5, #6
 800a69a:	f47f af1d 	bne.w	800a4d8 <_scanf_float+0x64>
 800a69e:	2507      	movs	r5, #7
 800a6a0:	e7b1      	b.n	800a606 <_scanf_float+0x192>
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	0591      	lsls	r1, r2, #22
 800a6a6:	f57f af17 	bpl.w	800a4d8 <_scanf_float+0x64>
 800a6aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a6ae:	6022      	str	r2, [r4, #0]
 800a6b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6b4:	e7a7      	b.n	800a606 <_scanf_float+0x192>
 800a6b6:	6822      	ldr	r2, [r4, #0]
 800a6b8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a6bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a6c0:	d006      	beq.n	800a6d0 <_scanf_float+0x25c>
 800a6c2:	0550      	lsls	r0, r2, #21
 800a6c4:	f57f af08 	bpl.w	800a4d8 <_scanf_float+0x64>
 800a6c8:	f1b9 0f00 	cmp.w	r9, #0
 800a6cc:	f000 80de 	beq.w	800a88c <_scanf_float+0x418>
 800a6d0:	0591      	lsls	r1, r2, #22
 800a6d2:	bf58      	it	pl
 800a6d4:	9902      	ldrpl	r1, [sp, #8]
 800a6d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a6da:	bf58      	it	pl
 800a6dc:	eba9 0101 	subpl.w	r1, r9, r1
 800a6e0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a6e4:	bf58      	it	pl
 800a6e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6ea:	6022      	str	r2, [r4, #0]
 800a6ec:	f04f 0900 	mov.w	r9, #0
 800a6f0:	e789      	b.n	800a606 <_scanf_float+0x192>
 800a6f2:	f04f 0a03 	mov.w	sl, #3
 800a6f6:	e786      	b.n	800a606 <_scanf_float+0x192>
 800a6f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	4640      	mov	r0, r8
 800a700:	4798      	blx	r3
 800a702:	2800      	cmp	r0, #0
 800a704:	f43f aedb 	beq.w	800a4be <_scanf_float+0x4a>
 800a708:	e6e6      	b.n	800a4d8 <_scanf_float+0x64>
 800a70a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a70e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a712:	463a      	mov	r2, r7
 800a714:	4640      	mov	r0, r8
 800a716:	4798      	blx	r3
 800a718:	6923      	ldr	r3, [r4, #16]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	6123      	str	r3, [r4, #16]
 800a71e:	e6e8      	b.n	800a4f2 <_scanf_float+0x7e>
 800a720:	1e6b      	subs	r3, r5, #1
 800a722:	2b06      	cmp	r3, #6
 800a724:	d824      	bhi.n	800a770 <_scanf_float+0x2fc>
 800a726:	2d02      	cmp	r5, #2
 800a728:	d836      	bhi.n	800a798 <_scanf_float+0x324>
 800a72a:	9b01      	ldr	r3, [sp, #4]
 800a72c:	429e      	cmp	r6, r3
 800a72e:	f67f aee4 	bls.w	800a4fa <_scanf_float+0x86>
 800a732:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a73a:	463a      	mov	r2, r7
 800a73c:	4640      	mov	r0, r8
 800a73e:	4798      	blx	r3
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	3b01      	subs	r3, #1
 800a744:	6123      	str	r3, [r4, #16]
 800a746:	e7f0      	b.n	800a72a <_scanf_float+0x2b6>
 800a748:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a74c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a750:	463a      	mov	r2, r7
 800a752:	4640      	mov	r0, r8
 800a754:	4798      	blx	r3
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a760:	fa5f fa8a 	uxtb.w	sl, sl
 800a764:	f1ba 0f02 	cmp.w	sl, #2
 800a768:	d1ee      	bne.n	800a748 <_scanf_float+0x2d4>
 800a76a:	3d03      	subs	r5, #3
 800a76c:	b2ed      	uxtb	r5, r5
 800a76e:	1b76      	subs	r6, r6, r5
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	05da      	lsls	r2, r3, #23
 800a774:	d530      	bpl.n	800a7d8 <_scanf_float+0x364>
 800a776:	055b      	lsls	r3, r3, #21
 800a778:	d511      	bpl.n	800a79e <_scanf_float+0x32a>
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	429e      	cmp	r6, r3
 800a77e:	f67f aebc 	bls.w	800a4fa <_scanf_float+0x86>
 800a782:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a786:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a78a:	463a      	mov	r2, r7
 800a78c:	4640      	mov	r0, r8
 800a78e:	4798      	blx	r3
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	3b01      	subs	r3, #1
 800a794:	6123      	str	r3, [r4, #16]
 800a796:	e7f0      	b.n	800a77a <_scanf_float+0x306>
 800a798:	46aa      	mov	sl, r5
 800a79a:	46b3      	mov	fp, r6
 800a79c:	e7de      	b.n	800a75c <_scanf_float+0x2e8>
 800a79e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	2965      	cmp	r1, #101	@ 0x65
 800a7a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7aa:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7ae:	6123      	str	r3, [r4, #16]
 800a7b0:	d00c      	beq.n	800a7cc <_scanf_float+0x358>
 800a7b2:	2945      	cmp	r1, #69	@ 0x45
 800a7b4:	d00a      	beq.n	800a7cc <_scanf_float+0x358>
 800a7b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7ba:	463a      	mov	r2, r7
 800a7bc:	4640      	mov	r0, r8
 800a7be:	4798      	blx	r3
 800a7c0:	6923      	ldr	r3, [r4, #16]
 800a7c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	1eb5      	subs	r5, r6, #2
 800a7ca:	6123      	str	r3, [r4, #16]
 800a7cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7d0:	463a      	mov	r2, r7
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4798      	blx	r3
 800a7d6:	462e      	mov	r6, r5
 800a7d8:	6822      	ldr	r2, [r4, #0]
 800a7da:	f012 0210 	ands.w	r2, r2, #16
 800a7de:	d001      	beq.n	800a7e4 <_scanf_float+0x370>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e68b      	b.n	800a4fc <_scanf_float+0x88>
 800a7e4:	7032      	strb	r2, [r6, #0]
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a7ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7f0:	d11c      	bne.n	800a82c <_scanf_float+0x3b8>
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	454b      	cmp	r3, r9
 800a7f6:	eba3 0209 	sub.w	r2, r3, r9
 800a7fa:	d123      	bne.n	800a844 <_scanf_float+0x3d0>
 800a7fc:	9901      	ldr	r1, [sp, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	4640      	mov	r0, r8
 800a802:	f002 fc89 	bl	800d118 <_strtod_r>
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	6821      	ldr	r1, [r4, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f011 0f02 	tst.w	r1, #2
 800a810:	ec57 6b10 	vmov	r6, r7, d0
 800a814:	f103 0204 	add.w	r2, r3, #4
 800a818:	d01f      	beq.n	800a85a <_scanf_float+0x3e6>
 800a81a:	9903      	ldr	r1, [sp, #12]
 800a81c:	600a      	str	r2, [r1, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	e9c3 6700 	strd	r6, r7, [r3]
 800a824:	68e3      	ldr	r3, [r4, #12]
 800a826:	3301      	adds	r3, #1
 800a828:	60e3      	str	r3, [r4, #12]
 800a82a:	e7d9      	b.n	800a7e0 <_scanf_float+0x36c>
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0e4      	beq.n	800a7fc <_scanf_float+0x388>
 800a832:	9905      	ldr	r1, [sp, #20]
 800a834:	230a      	movs	r3, #10
 800a836:	3101      	adds	r1, #1
 800a838:	4640      	mov	r0, r8
 800a83a:	f7ff f9b7 	bl	8009bac <_strtol_r>
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	9e05      	ldr	r6, [sp, #20]
 800a842:	1ac2      	subs	r2, r0, r3
 800a844:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a848:	429e      	cmp	r6, r3
 800a84a:	bf28      	it	cs
 800a84c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a850:	4910      	ldr	r1, [pc, #64]	@ (800a894 <_scanf_float+0x420>)
 800a852:	4630      	mov	r0, r6
 800a854:	f000 f95c 	bl	800ab10 <siprintf>
 800a858:	e7d0      	b.n	800a7fc <_scanf_float+0x388>
 800a85a:	f011 0f04 	tst.w	r1, #4
 800a85e:	9903      	ldr	r1, [sp, #12]
 800a860:	600a      	str	r2, [r1, #0]
 800a862:	d1dc      	bne.n	800a81e <_scanf_float+0x3aa>
 800a864:	681d      	ldr	r5, [r3, #0]
 800a866:	4632      	mov	r2, r6
 800a868:	463b      	mov	r3, r7
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f6 f97d 	bl	8000b6c <__aeabi_dcmpun>
 800a872:	b128      	cbz	r0, 800a880 <_scanf_float+0x40c>
 800a874:	4808      	ldr	r0, [pc, #32]	@ (800a898 <_scanf_float+0x424>)
 800a876:	f000 fafd 	bl	800ae74 <nanf>
 800a87a:	ed85 0a00 	vstr	s0, [r5]
 800a87e:	e7d1      	b.n	800a824 <_scanf_float+0x3b0>
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f6 f9d0 	bl	8000c28 <__aeabi_d2f>
 800a888:	6028      	str	r0, [r5, #0]
 800a88a:	e7cb      	b.n	800a824 <_scanf_float+0x3b0>
 800a88c:	f04f 0900 	mov.w	r9, #0
 800a890:	e629      	b.n	800a4e6 <_scanf_float+0x72>
 800a892:	bf00      	nop
 800a894:	0800f6c5 	.word	0x0800f6c5
 800a898:	0800f95c 	.word	0x0800f95c

0800a89c <std>:
 800a89c:	2300      	movs	r3, #0
 800a89e:	b510      	push	{r4, lr}
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a8a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8aa:	6083      	str	r3, [r0, #8]
 800a8ac:	8181      	strh	r1, [r0, #12]
 800a8ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8b0:	81c2      	strh	r2, [r0, #14]
 800a8b2:	6183      	str	r3, [r0, #24]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	2208      	movs	r2, #8
 800a8b8:	305c      	adds	r0, #92	@ 0x5c
 800a8ba:	f000 fa21 	bl	800ad00 <memset>
 800a8be:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <std+0x58>)
 800a8c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f8 <std+0x5c>)
 800a8c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a8fc <std+0x60>)
 800a8c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a900 <std+0x64>)
 800a8cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a904 <std+0x68>)
 800a8d0:	6224      	str	r4, [r4, #32]
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	d006      	beq.n	800a8e4 <std+0x48>
 800a8d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8da:	4294      	cmp	r4, r2
 800a8dc:	d002      	beq.n	800a8e4 <std+0x48>
 800a8de:	33d0      	adds	r3, #208	@ 0xd0
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	d105      	bne.n	800a8f0 <std+0x54>
 800a8e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ec:	f000 baa8 	b.w	800ae40 <__retarget_lock_init_recursive>
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	bf00      	nop
 800a8f4:	0800ab51 	.word	0x0800ab51
 800a8f8:	0800ab73 	.word	0x0800ab73
 800a8fc:	0800abab 	.word	0x0800abab
 800a900:	0800abcf 	.word	0x0800abcf
 800a904:	20000b04 	.word	0x20000b04

0800a908 <stdio_exit_handler>:
 800a908:	4a02      	ldr	r2, [pc, #8]	@ (800a914 <stdio_exit_handler+0xc>)
 800a90a:	4903      	ldr	r1, [pc, #12]	@ (800a918 <stdio_exit_handler+0x10>)
 800a90c:	4803      	ldr	r0, [pc, #12]	@ (800a91c <stdio_exit_handler+0x14>)
 800a90e:	f000 b869 	b.w	800a9e4 <_fwalk_sglue>
 800a912:	bf00      	nop
 800a914:	200005a0 	.word	0x200005a0
 800a918:	0800d761 	.word	0x0800d761
 800a91c:	200005b0 	.word	0x200005b0

0800a920 <cleanup_stdio>:
 800a920:	6841      	ldr	r1, [r0, #4]
 800a922:	4b0c      	ldr	r3, [pc, #48]	@ (800a954 <cleanup_stdio+0x34>)
 800a924:	4299      	cmp	r1, r3
 800a926:	b510      	push	{r4, lr}
 800a928:	4604      	mov	r4, r0
 800a92a:	d001      	beq.n	800a930 <cleanup_stdio+0x10>
 800a92c:	f002 ff18 	bl	800d760 <_fflush_r>
 800a930:	68a1      	ldr	r1, [r4, #8]
 800a932:	4b09      	ldr	r3, [pc, #36]	@ (800a958 <cleanup_stdio+0x38>)
 800a934:	4299      	cmp	r1, r3
 800a936:	d002      	beq.n	800a93e <cleanup_stdio+0x1e>
 800a938:	4620      	mov	r0, r4
 800a93a:	f002 ff11 	bl	800d760 <_fflush_r>
 800a93e:	68e1      	ldr	r1, [r4, #12]
 800a940:	4b06      	ldr	r3, [pc, #24]	@ (800a95c <cleanup_stdio+0x3c>)
 800a942:	4299      	cmp	r1, r3
 800a944:	d004      	beq.n	800a950 <cleanup_stdio+0x30>
 800a946:	4620      	mov	r0, r4
 800a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a94c:	f002 bf08 	b.w	800d760 <_fflush_r>
 800a950:	bd10      	pop	{r4, pc}
 800a952:	bf00      	nop
 800a954:	20000b04 	.word	0x20000b04
 800a958:	20000b6c 	.word	0x20000b6c
 800a95c:	20000bd4 	.word	0x20000bd4

0800a960 <global_stdio_init.part.0>:
 800a960:	b510      	push	{r4, lr}
 800a962:	4b0b      	ldr	r3, [pc, #44]	@ (800a990 <global_stdio_init.part.0+0x30>)
 800a964:	4c0b      	ldr	r4, [pc, #44]	@ (800a994 <global_stdio_init.part.0+0x34>)
 800a966:	4a0c      	ldr	r2, [pc, #48]	@ (800a998 <global_stdio_init.part.0+0x38>)
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	4620      	mov	r0, r4
 800a96c:	2200      	movs	r2, #0
 800a96e:	2104      	movs	r1, #4
 800a970:	f7ff ff94 	bl	800a89c <std>
 800a974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a978:	2201      	movs	r2, #1
 800a97a:	2109      	movs	r1, #9
 800a97c:	f7ff ff8e 	bl	800a89c <std>
 800a980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a984:	2202      	movs	r2, #2
 800a986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a98a:	2112      	movs	r1, #18
 800a98c:	f7ff bf86 	b.w	800a89c <std>
 800a990:	20000c3c 	.word	0x20000c3c
 800a994:	20000b04 	.word	0x20000b04
 800a998:	0800a909 	.word	0x0800a909

0800a99c <__sfp_lock_acquire>:
 800a99c:	4801      	ldr	r0, [pc, #4]	@ (800a9a4 <__sfp_lock_acquire+0x8>)
 800a99e:	f000 ba50 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800a9a2:	bf00      	nop
 800a9a4:	20000c45 	.word	0x20000c45

0800a9a8 <__sfp_lock_release>:
 800a9a8:	4801      	ldr	r0, [pc, #4]	@ (800a9b0 <__sfp_lock_release+0x8>)
 800a9aa:	f000 ba4b 	b.w	800ae44 <__retarget_lock_release_recursive>
 800a9ae:	bf00      	nop
 800a9b0:	20000c45 	.word	0x20000c45

0800a9b4 <__sinit>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	f7ff fff0 	bl	800a99c <__sfp_lock_acquire>
 800a9bc:	6a23      	ldr	r3, [r4, #32]
 800a9be:	b11b      	cbz	r3, 800a9c8 <__sinit+0x14>
 800a9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c4:	f7ff bff0 	b.w	800a9a8 <__sfp_lock_release>
 800a9c8:	4b04      	ldr	r3, [pc, #16]	@ (800a9dc <__sinit+0x28>)
 800a9ca:	6223      	str	r3, [r4, #32]
 800a9cc:	4b04      	ldr	r3, [pc, #16]	@ (800a9e0 <__sinit+0x2c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1f5      	bne.n	800a9c0 <__sinit+0xc>
 800a9d4:	f7ff ffc4 	bl	800a960 <global_stdio_init.part.0>
 800a9d8:	e7f2      	b.n	800a9c0 <__sinit+0xc>
 800a9da:	bf00      	nop
 800a9dc:	0800a921 	.word	0x0800a921
 800a9e0:	20000c3c 	.word	0x20000c3c

0800a9e4 <_fwalk_sglue>:
 800a9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e8:	4607      	mov	r7, r0
 800a9ea:	4688      	mov	r8, r1
 800a9ec:	4614      	mov	r4, r2
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a9f8:	d505      	bpl.n	800aa06 <_fwalk_sglue+0x22>
 800a9fa:	6824      	ldr	r4, [r4, #0]
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	d1f7      	bne.n	800a9f0 <_fwalk_sglue+0xc>
 800aa00:	4630      	mov	r0, r6
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d907      	bls.n	800aa1c <_fwalk_sglue+0x38>
 800aa0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa10:	3301      	adds	r3, #1
 800aa12:	d003      	beq.n	800aa1c <_fwalk_sglue+0x38>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4638      	mov	r0, r7
 800aa18:	47c0      	blx	r8
 800aa1a:	4306      	orrs	r6, r0
 800aa1c:	3568      	adds	r5, #104	@ 0x68
 800aa1e:	e7e9      	b.n	800a9f4 <_fwalk_sglue+0x10>

0800aa20 <iprintf>:
 800aa20:	b40f      	push	{r0, r1, r2, r3}
 800aa22:	b507      	push	{r0, r1, r2, lr}
 800aa24:	4906      	ldr	r1, [pc, #24]	@ (800aa40 <iprintf+0x20>)
 800aa26:	ab04      	add	r3, sp, #16
 800aa28:	6808      	ldr	r0, [r1, #0]
 800aa2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa2e:	6881      	ldr	r1, [r0, #8]
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	f002 fcf9 	bl	800d428 <_vfiprintf_r>
 800aa36:	b003      	add	sp, #12
 800aa38:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa3c:	b004      	add	sp, #16
 800aa3e:	4770      	bx	lr
 800aa40:	200005ac 	.word	0x200005ac

0800aa44 <putchar>:
 800aa44:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <putchar+0xc>)
 800aa46:	4601      	mov	r1, r0
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	6882      	ldr	r2, [r0, #8]
 800aa4c:	f002 bf12 	b.w	800d874 <_putc_r>
 800aa50:	200005ac 	.word	0x200005ac

0800aa54 <_puts_r>:
 800aa54:	6a03      	ldr	r3, [r0, #32]
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	6884      	ldr	r4, [r0, #8]
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	b90b      	cbnz	r3, 800aa64 <_puts_r+0x10>
 800aa60:	f7ff ffa8 	bl	800a9b4 <__sinit>
 800aa64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa66:	07db      	lsls	r3, r3, #31
 800aa68:	d405      	bmi.n	800aa76 <_puts_r+0x22>
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	0598      	lsls	r0, r3, #22
 800aa6e:	d402      	bmi.n	800aa76 <_puts_r+0x22>
 800aa70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa72:	f000 f9e6 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	0719      	lsls	r1, r3, #28
 800aa7a:	d502      	bpl.n	800aa82 <_puts_r+0x2e>
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d135      	bne.n	800aaee <_puts_r+0x9a>
 800aa82:	4621      	mov	r1, r4
 800aa84:	4628      	mov	r0, r5
 800aa86:	f000 f8e5 	bl	800ac54 <__swsetup_r>
 800aa8a:	b380      	cbz	r0, 800aaee <_puts_r+0x9a>
 800aa8c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa92:	07da      	lsls	r2, r3, #31
 800aa94:	d405      	bmi.n	800aaa2 <_puts_r+0x4e>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	059b      	lsls	r3, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_puts_r+0x4e>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa9e:	f000 f9d1 	bl	800ae44 <__retarget_lock_release_recursive>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da04      	bge.n	800aab4 <_puts_r+0x60>
 800aaaa:	69a2      	ldr	r2, [r4, #24]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	dc17      	bgt.n	800aae0 <_puts_r+0x8c>
 800aab0:	290a      	cmp	r1, #10
 800aab2:	d015      	beq.n	800aae0 <_puts_r+0x8c>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	6022      	str	r2, [r4, #0]
 800aaba:	7019      	strb	r1, [r3, #0]
 800aabc:	68a3      	ldr	r3, [r4, #8]
 800aabe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aac2:	3b01      	subs	r3, #1
 800aac4:	60a3      	str	r3, [r4, #8]
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d1ed      	bne.n	800aaa6 <_puts_r+0x52>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	da11      	bge.n	800aaf2 <_puts_r+0x9e>
 800aace:	4622      	mov	r2, r4
 800aad0:	210a      	movs	r1, #10
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 f87f 	bl	800abd6 <__swbuf_r>
 800aad8:	3001      	adds	r0, #1
 800aada:	d0d7      	beq.n	800aa8c <_puts_r+0x38>
 800aadc:	250a      	movs	r5, #10
 800aade:	e7d7      	b.n	800aa90 <_puts_r+0x3c>
 800aae0:	4622      	mov	r2, r4
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 f877 	bl	800abd6 <__swbuf_r>
 800aae8:	3001      	adds	r0, #1
 800aaea:	d1e7      	bne.n	800aabc <_puts_r+0x68>
 800aaec:	e7ce      	b.n	800aa8c <_puts_r+0x38>
 800aaee:	3e01      	subs	r6, #1
 800aaf0:	e7e4      	b.n	800aabc <_puts_r+0x68>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	220a      	movs	r2, #10
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	e7ee      	b.n	800aadc <_puts_r+0x88>
	...

0800ab00 <puts>:
 800ab00:	4b02      	ldr	r3, [pc, #8]	@ (800ab0c <puts+0xc>)
 800ab02:	4601      	mov	r1, r0
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	f7ff bfa5 	b.w	800aa54 <_puts_r>
 800ab0a:	bf00      	nop
 800ab0c:	200005ac 	.word	0x200005ac

0800ab10 <siprintf>:
 800ab10:	b40e      	push	{r1, r2, r3}
 800ab12:	b500      	push	{lr}
 800ab14:	b09c      	sub	sp, #112	@ 0x70
 800ab16:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab18:	9002      	str	r0, [sp, #8]
 800ab1a:	9006      	str	r0, [sp, #24]
 800ab1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab20:	4809      	ldr	r0, [pc, #36]	@ (800ab48 <siprintf+0x38>)
 800ab22:	9107      	str	r1, [sp, #28]
 800ab24:	9104      	str	r1, [sp, #16]
 800ab26:	4909      	ldr	r1, [pc, #36]	@ (800ab4c <siprintf+0x3c>)
 800ab28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2c:	9105      	str	r1, [sp, #20]
 800ab2e:	6800      	ldr	r0, [r0, #0]
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	a902      	add	r1, sp, #8
 800ab34:	f002 fb52 	bl	800d1dc <_svfiprintf_r>
 800ab38:	9b02      	ldr	r3, [sp, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	b01c      	add	sp, #112	@ 0x70
 800ab40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab44:	b003      	add	sp, #12
 800ab46:	4770      	bx	lr
 800ab48:	200005ac 	.word	0x200005ac
 800ab4c:	ffff0208 	.word	0xffff0208

0800ab50 <__sread>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	f000 f914 	bl	800ad84 <_read_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	bfab      	itete	ge
 800ab60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab62:	89a3      	ldrhlt	r3, [r4, #12]
 800ab64:	181b      	addge	r3, r3, r0
 800ab66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab6a:	bfac      	ite	ge
 800ab6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab6e:	81a3      	strhlt	r3, [r4, #12]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__swrite>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	461f      	mov	r7, r3
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	05db      	lsls	r3, r3, #23
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	4616      	mov	r6, r2
 800ab82:	d505      	bpl.n	800ab90 <__swrite+0x1e>
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f000 f8e8 	bl	800ad60 <_lseek_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	463b      	mov	r3, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	f000 b90f 	b.w	800adc8 <_write_r>

0800abaa <__sseek>:
 800abaa:	b510      	push	{r4, lr}
 800abac:	460c      	mov	r4, r1
 800abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb2:	f000 f8d5 	bl	800ad60 <_lseek_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	bf15      	itete	ne
 800abbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abc6:	81a3      	strheq	r3, [r4, #12]
 800abc8:	bf18      	it	ne
 800abca:	81a3      	strhne	r3, [r4, #12]
 800abcc:	bd10      	pop	{r4, pc}

0800abce <__sclose>:
 800abce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd2:	f000 b8b5 	b.w	800ad40 <_close_r>

0800abd6 <__swbuf_r>:
 800abd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd8:	460e      	mov	r6, r1
 800abda:	4614      	mov	r4, r2
 800abdc:	4605      	mov	r5, r0
 800abde:	b118      	cbz	r0, 800abe8 <__swbuf_r+0x12>
 800abe0:	6a03      	ldr	r3, [r0, #32]
 800abe2:	b90b      	cbnz	r3, 800abe8 <__swbuf_r+0x12>
 800abe4:	f7ff fee6 	bl	800a9b4 <__sinit>
 800abe8:	69a3      	ldr	r3, [r4, #24]
 800abea:	60a3      	str	r3, [r4, #8]
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	071a      	lsls	r2, r3, #28
 800abf0:	d501      	bpl.n	800abf6 <__swbuf_r+0x20>
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	b943      	cbnz	r3, 800ac08 <__swbuf_r+0x32>
 800abf6:	4621      	mov	r1, r4
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 f82b 	bl	800ac54 <__swsetup_r>
 800abfe:	b118      	cbz	r0, 800ac08 <__swbuf_r+0x32>
 800ac00:	f04f 37ff 	mov.w	r7, #4294967295
 800ac04:	4638      	mov	r0, r7
 800ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	6922      	ldr	r2, [r4, #16]
 800ac0c:	1a98      	subs	r0, r3, r2
 800ac0e:	6963      	ldr	r3, [r4, #20]
 800ac10:	b2f6      	uxtb	r6, r6
 800ac12:	4283      	cmp	r3, r0
 800ac14:	4637      	mov	r7, r6
 800ac16:	dc05      	bgt.n	800ac24 <__swbuf_r+0x4e>
 800ac18:	4621      	mov	r1, r4
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f002 fda0 	bl	800d760 <_fflush_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d1ed      	bne.n	800ac00 <__swbuf_r+0x2a>
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	60a3      	str	r3, [r4, #8]
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	6022      	str	r2, [r4, #0]
 800ac30:	701e      	strb	r6, [r3, #0]
 800ac32:	6962      	ldr	r2, [r4, #20]
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d004      	beq.n	800ac44 <__swbuf_r+0x6e>
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	07db      	lsls	r3, r3, #31
 800ac3e:	d5e1      	bpl.n	800ac04 <__swbuf_r+0x2e>
 800ac40:	2e0a      	cmp	r6, #10
 800ac42:	d1df      	bne.n	800ac04 <__swbuf_r+0x2e>
 800ac44:	4621      	mov	r1, r4
 800ac46:	4628      	mov	r0, r5
 800ac48:	f002 fd8a 	bl	800d760 <_fflush_r>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d0d9      	beq.n	800ac04 <__swbuf_r+0x2e>
 800ac50:	e7d6      	b.n	800ac00 <__swbuf_r+0x2a>
	...

0800ac54 <__swsetup_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4b29      	ldr	r3, [pc, #164]	@ (800acfc <__swsetup_r+0xa8>)
 800ac58:	4605      	mov	r5, r0
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	b118      	cbz	r0, 800ac68 <__swsetup_r+0x14>
 800ac60:	6a03      	ldr	r3, [r0, #32]
 800ac62:	b90b      	cbnz	r3, 800ac68 <__swsetup_r+0x14>
 800ac64:	f7ff fea6 	bl	800a9b4 <__sinit>
 800ac68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6c:	0719      	lsls	r1, r3, #28
 800ac6e:	d422      	bmi.n	800acb6 <__swsetup_r+0x62>
 800ac70:	06da      	lsls	r2, r3, #27
 800ac72:	d407      	bmi.n	800ac84 <__swsetup_r+0x30>
 800ac74:	2209      	movs	r2, #9
 800ac76:	602a      	str	r2, [r5, #0]
 800ac78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac7c:	81a3      	strh	r3, [r4, #12]
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac82:	e033      	b.n	800acec <__swsetup_r+0x98>
 800ac84:	0758      	lsls	r0, r3, #29
 800ac86:	d512      	bpl.n	800acae <__swsetup_r+0x5a>
 800ac88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac8a:	b141      	cbz	r1, 800ac9e <__swsetup_r+0x4a>
 800ac8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac90:	4299      	cmp	r1, r3
 800ac92:	d002      	beq.n	800ac9a <__swsetup_r+0x46>
 800ac94:	4628      	mov	r0, r5
 800ac96:	f000 ff3f 	bl	800bb18 <_free_r>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	2300      	movs	r3, #0
 800aca8:	6063      	str	r3, [r4, #4]
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f043 0308 	orr.w	r3, r3, #8
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	b94b      	cbnz	r3, 800acce <__swsetup_r+0x7a>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acc4:	d003      	beq.n	800acce <__swsetup_r+0x7a>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f002 fd97 	bl	800d7fc <__smakebuf_r>
 800acce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd2:	f013 0201 	ands.w	r2, r3, #1
 800acd6:	d00a      	beq.n	800acee <__swsetup_r+0x9a>
 800acd8:	2200      	movs	r2, #0
 800acda:	60a2      	str	r2, [r4, #8]
 800acdc:	6962      	ldr	r2, [r4, #20]
 800acde:	4252      	negs	r2, r2
 800ace0:	61a2      	str	r2, [r4, #24]
 800ace2:	6922      	ldr	r2, [r4, #16]
 800ace4:	b942      	cbnz	r2, 800acf8 <__swsetup_r+0xa4>
 800ace6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acea:	d1c5      	bne.n	800ac78 <__swsetup_r+0x24>
 800acec:	bd38      	pop	{r3, r4, r5, pc}
 800acee:	0799      	lsls	r1, r3, #30
 800acf0:	bf58      	it	pl
 800acf2:	6962      	ldrpl	r2, [r4, #20]
 800acf4:	60a2      	str	r2, [r4, #8]
 800acf6:	e7f4      	b.n	800ace2 <__swsetup_r+0x8e>
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7f7      	b.n	800acec <__swsetup_r+0x98>
 800acfc:	200005ac 	.word	0x200005ac

0800ad00 <memset>:
 800ad00:	4402      	add	r2, r0
 800ad02:	4603      	mov	r3, r0
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d100      	bne.n	800ad0a <memset+0xa>
 800ad08:	4770      	bx	lr
 800ad0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad0e:	e7f9      	b.n	800ad04 <memset+0x4>

0800ad10 <strncpy>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	3901      	subs	r1, #1
 800ad14:	4603      	mov	r3, r0
 800ad16:	b132      	cbz	r2, 800ad26 <strncpy+0x16>
 800ad18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad1c:	f803 4b01 	strb.w	r4, [r3], #1
 800ad20:	3a01      	subs	r2, #1
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	d1f7      	bne.n	800ad16 <strncpy+0x6>
 800ad26:	441a      	add	r2, r3
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d100      	bne.n	800ad30 <strncpy+0x20>
 800ad2e:	bd10      	pop	{r4, pc}
 800ad30:	f803 1b01 	strb.w	r1, [r3], #1
 800ad34:	e7f9      	b.n	800ad2a <strncpy+0x1a>
	...

0800ad38 <_localeconv_r>:
 800ad38:	4800      	ldr	r0, [pc, #0]	@ (800ad3c <_localeconv_r+0x4>)
 800ad3a:	4770      	bx	lr
 800ad3c:	200006ec 	.word	0x200006ec

0800ad40 <_close_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d06      	ldr	r5, [pc, #24]	@ (800ad5c <_close_r+0x1c>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f8 fa26 	bl	800319c <_close>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_close_r+0x1a>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_close_r+0x1a>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000c40 	.word	0x20000c40

0800ad60 <_lseek_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_lseek_r+0x20>)
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f8 fa3b 	bl	80031ea <_lseek>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_lseek_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_lseek_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20000c40 	.word	0x20000c40

0800ad84 <_read_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	@ (800ada4 <_read_r+0x20>)
 800ad88:	4604      	mov	r4, r0
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f8 f9c9 	bl	800312a <_read>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_read_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_read_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20000c40 	.word	0x20000c40

0800ada8 <_sbrk_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d06      	ldr	r5, [pc, #24]	@ (800adc4 <_sbrk_r+0x1c>)
 800adac:	2300      	movs	r3, #0
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	602b      	str	r3, [r5, #0]
 800adb4:	f7f8 fa26 	bl	8003204 <_sbrk>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_sbrk_r+0x1a>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_sbrk_r+0x1a>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	20000c40 	.word	0x20000c40

0800adc8 <_write_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	@ (800ade8 <_write_r+0x20>)
 800adcc:	4604      	mov	r4, r0
 800adce:	4608      	mov	r0, r1
 800add0:	4611      	mov	r1, r2
 800add2:	2200      	movs	r2, #0
 800add4:	602a      	str	r2, [r5, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f7f8 f9c4 	bl	8003164 <_write>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_write_r+0x1e>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_write_r+0x1e>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20000c40 	.word	0x20000c40

0800adec <__errno>:
 800adec:	4b01      	ldr	r3, [pc, #4]	@ (800adf4 <__errno+0x8>)
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	200005ac 	.word	0x200005ac

0800adf8 <__libc_init_array>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ae30 <__libc_init_array+0x38>)
 800adfc:	4c0d      	ldr	r4, [pc, #52]	@ (800ae34 <__libc_init_array+0x3c>)
 800adfe:	1b64      	subs	r4, r4, r5
 800ae00:	10a4      	asrs	r4, r4, #2
 800ae02:	2600      	movs	r6, #0
 800ae04:	42a6      	cmp	r6, r4
 800ae06:	d109      	bne.n	800ae1c <__libc_init_array+0x24>
 800ae08:	4d0b      	ldr	r5, [pc, #44]	@ (800ae38 <__libc_init_array+0x40>)
 800ae0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae3c <__libc_init_array+0x44>)
 800ae0c:	f003 f9da 	bl	800e1c4 <_init>
 800ae10:	1b64      	subs	r4, r4, r5
 800ae12:	10a4      	asrs	r4, r4, #2
 800ae14:	2600      	movs	r6, #0
 800ae16:	42a6      	cmp	r6, r4
 800ae18:	d105      	bne.n	800ae26 <__libc_init_array+0x2e>
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae20:	4798      	blx	r3
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7ee      	b.n	800ae04 <__libc_init_array+0xc>
 800ae26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2a:	4798      	blx	r3
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	e7f2      	b.n	800ae16 <__libc_init_array+0x1e>
 800ae30:	0800f9c8 	.word	0x0800f9c8
 800ae34:	0800f9c8 	.word	0x0800f9c8
 800ae38:	0800f9c8 	.word	0x0800f9c8
 800ae3c:	0800f9cc 	.word	0x0800f9cc

0800ae40 <__retarget_lock_init_recursive>:
 800ae40:	4770      	bx	lr

0800ae42 <__retarget_lock_acquire_recursive>:
 800ae42:	4770      	bx	lr

0800ae44 <__retarget_lock_release_recursive>:
 800ae44:	4770      	bx	lr

0800ae46 <strcpy>:
 800ae46:	4603      	mov	r3, r0
 800ae48:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae4c:	f803 2b01 	strb.w	r2, [r3], #1
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	d1f9      	bne.n	800ae48 <strcpy+0x2>
 800ae54:	4770      	bx	lr

0800ae56 <memcpy>:
 800ae56:	440a      	add	r2, r1
 800ae58:	4291      	cmp	r1, r2
 800ae5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae5e:	d100      	bne.n	800ae62 <memcpy+0xc>
 800ae60:	4770      	bx	lr
 800ae62:	b510      	push	{r4, lr}
 800ae64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6c:	4291      	cmp	r1, r2
 800ae6e:	d1f9      	bne.n	800ae64 <memcpy+0xe>
 800ae70:	bd10      	pop	{r4, pc}
	...

0800ae74 <nanf>:
 800ae74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ae7c <nanf+0x8>
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	7fc00000 	.word	0x7fc00000

0800ae80 <quorem>:
 800ae80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	6903      	ldr	r3, [r0, #16]
 800ae86:	690c      	ldr	r4, [r1, #16]
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	db7e      	blt.n	800af8c <quorem+0x10c>
 800ae8e:	3c01      	subs	r4, #1
 800ae90:	f101 0814 	add.w	r8, r1, #20
 800ae94:	00a3      	lsls	r3, r4, #2
 800ae96:	f100 0514 	add.w	r5, r0, #20
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aea6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	429a      	cmp	r2, r3
 800aeae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aeb2:	fbb2 f6f3 	udiv	r6, r2, r3
 800aeb6:	d32e      	bcc.n	800af16 <quorem+0x96>
 800aeb8:	f04f 0a00 	mov.w	sl, #0
 800aebc:	46c4      	mov	ip, r8
 800aebe:	46ae      	mov	lr, r5
 800aec0:	46d3      	mov	fp, sl
 800aec2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aec6:	b298      	uxth	r0, r3
 800aec8:	fb06 a000 	mla	r0, r6, r0, sl
 800aecc:	0c02      	lsrs	r2, r0, #16
 800aece:	0c1b      	lsrs	r3, r3, #16
 800aed0:	fb06 2303 	mla	r3, r6, r3, r2
 800aed4:	f8de 2000 	ldr.w	r2, [lr]
 800aed8:	b280      	uxth	r0, r0
 800aeda:	b292      	uxth	r2, r2
 800aedc:	1a12      	subs	r2, r2, r0
 800aede:	445a      	add	r2, fp
 800aee0:	f8de 0000 	ldr.w	r0, [lr]
 800aee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aeee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aef2:	b292      	uxth	r2, r2
 800aef4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aef8:	45e1      	cmp	r9, ip
 800aefa:	f84e 2b04 	str.w	r2, [lr], #4
 800aefe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af02:	d2de      	bcs.n	800aec2 <quorem+0x42>
 800af04:	9b00      	ldr	r3, [sp, #0]
 800af06:	58eb      	ldr	r3, [r5, r3]
 800af08:	b92b      	cbnz	r3, 800af16 <quorem+0x96>
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	429d      	cmp	r5, r3
 800af10:	461a      	mov	r2, r3
 800af12:	d32f      	bcc.n	800af74 <quorem+0xf4>
 800af14:	613c      	str	r4, [r7, #16]
 800af16:	4638      	mov	r0, r7
 800af18:	f001 f90c 	bl	800c134 <__mcmp>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	db25      	blt.n	800af6c <quorem+0xec>
 800af20:	4629      	mov	r1, r5
 800af22:	2000      	movs	r0, #0
 800af24:	f858 2b04 	ldr.w	r2, [r8], #4
 800af28:	f8d1 c000 	ldr.w	ip, [r1]
 800af2c:	fa1f fe82 	uxth.w	lr, r2
 800af30:	fa1f f38c 	uxth.w	r3, ip
 800af34:	eba3 030e 	sub.w	r3, r3, lr
 800af38:	4403      	add	r3, r0
 800af3a:	0c12      	lsrs	r2, r2, #16
 800af3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af44:	b29b      	uxth	r3, r3
 800af46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af4a:	45c1      	cmp	r9, r8
 800af4c:	f841 3b04 	str.w	r3, [r1], #4
 800af50:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af54:	d2e6      	bcs.n	800af24 <quorem+0xa4>
 800af56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af5e:	b922      	cbnz	r2, 800af6a <quorem+0xea>
 800af60:	3b04      	subs	r3, #4
 800af62:	429d      	cmp	r5, r3
 800af64:	461a      	mov	r2, r3
 800af66:	d30b      	bcc.n	800af80 <quorem+0x100>
 800af68:	613c      	str	r4, [r7, #16]
 800af6a:	3601      	adds	r6, #1
 800af6c:	4630      	mov	r0, r6
 800af6e:	b003      	add	sp, #12
 800af70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af74:	6812      	ldr	r2, [r2, #0]
 800af76:	3b04      	subs	r3, #4
 800af78:	2a00      	cmp	r2, #0
 800af7a:	d1cb      	bne.n	800af14 <quorem+0x94>
 800af7c:	3c01      	subs	r4, #1
 800af7e:	e7c6      	b.n	800af0e <quorem+0x8e>
 800af80:	6812      	ldr	r2, [r2, #0]
 800af82:	3b04      	subs	r3, #4
 800af84:	2a00      	cmp	r2, #0
 800af86:	d1ef      	bne.n	800af68 <quorem+0xe8>
 800af88:	3c01      	subs	r4, #1
 800af8a:	e7ea      	b.n	800af62 <quorem+0xe2>
 800af8c:	2000      	movs	r0, #0
 800af8e:	e7ee      	b.n	800af6e <quorem+0xee>

0800af90 <_dtoa_r>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	69c7      	ldr	r7, [r0, #28]
 800af96:	b099      	sub	sp, #100	@ 0x64
 800af98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af9c:	ec55 4b10 	vmov	r4, r5, d0
 800afa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800afa2:	9109      	str	r1, [sp, #36]	@ 0x24
 800afa4:	4683      	mov	fp, r0
 800afa6:	920e      	str	r2, [sp, #56]	@ 0x38
 800afa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afaa:	b97f      	cbnz	r7, 800afcc <_dtoa_r+0x3c>
 800afac:	2010      	movs	r0, #16
 800afae:	f7fe fcc5 	bl	800993c <malloc>
 800afb2:	4602      	mov	r2, r0
 800afb4:	f8cb 001c 	str.w	r0, [fp, #28]
 800afb8:	b920      	cbnz	r0, 800afc4 <_dtoa_r+0x34>
 800afba:	4ba7      	ldr	r3, [pc, #668]	@ (800b258 <_dtoa_r+0x2c8>)
 800afbc:	21ef      	movs	r1, #239	@ 0xef
 800afbe:	48a7      	ldr	r0, [pc, #668]	@ (800b25c <_dtoa_r+0x2cc>)
 800afc0:	f002 fce2 	bl	800d988 <__assert_func>
 800afc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800afc8:	6007      	str	r7, [r0, #0]
 800afca:	60c7      	str	r7, [r0, #12]
 800afcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afd0:	6819      	ldr	r1, [r3, #0]
 800afd2:	b159      	cbz	r1, 800afec <_dtoa_r+0x5c>
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	604a      	str	r2, [r1, #4]
 800afd8:	2301      	movs	r3, #1
 800afda:	4093      	lsls	r3, r2
 800afdc:	608b      	str	r3, [r1, #8]
 800afde:	4658      	mov	r0, fp
 800afe0:	f000 fe24 	bl	800bc2c <_Bfree>
 800afe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	1e2b      	subs	r3, r5, #0
 800afee:	bfb9      	ittee	lt
 800aff0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aff4:	9303      	strlt	r3, [sp, #12]
 800aff6:	2300      	movge	r3, #0
 800aff8:	6033      	strge	r3, [r6, #0]
 800affa:	9f03      	ldr	r7, [sp, #12]
 800affc:	4b98      	ldr	r3, [pc, #608]	@ (800b260 <_dtoa_r+0x2d0>)
 800affe:	bfbc      	itt	lt
 800b000:	2201      	movlt	r2, #1
 800b002:	6032      	strlt	r2, [r6, #0]
 800b004:	43bb      	bics	r3, r7
 800b006:	d112      	bne.n	800b02e <_dtoa_r+0x9e>
 800b008:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b00a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b014:	4323      	orrs	r3, r4
 800b016:	f000 854d 	beq.w	800bab4 <_dtoa_r+0xb24>
 800b01a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b01c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b274 <_dtoa_r+0x2e4>
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 854f 	beq.w	800bac4 <_dtoa_r+0xb34>
 800b026:	f10a 0303 	add.w	r3, sl, #3
 800b02a:	f000 bd49 	b.w	800bac0 <_dtoa_r+0xb30>
 800b02e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b032:	2200      	movs	r2, #0
 800b034:	ec51 0b17 	vmov	r0, r1, d7
 800b038:	2300      	movs	r3, #0
 800b03a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b03e:	f7f5 fd63 	bl	8000b08 <__aeabi_dcmpeq>
 800b042:	4680      	mov	r8, r0
 800b044:	b158      	cbz	r0, 800b05e <_dtoa_r+0xce>
 800b046:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b048:	2301      	movs	r3, #1
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b04e:	b113      	cbz	r3, 800b056 <_dtoa_r+0xc6>
 800b050:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b052:	4b84      	ldr	r3, [pc, #528]	@ (800b264 <_dtoa_r+0x2d4>)
 800b054:	6013      	str	r3, [r2, #0]
 800b056:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b278 <_dtoa_r+0x2e8>
 800b05a:	f000 bd33 	b.w	800bac4 <_dtoa_r+0xb34>
 800b05e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b062:	aa16      	add	r2, sp, #88	@ 0x58
 800b064:	a917      	add	r1, sp, #92	@ 0x5c
 800b066:	4658      	mov	r0, fp
 800b068:	f001 f984 	bl	800c374 <__d2b>
 800b06c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b070:	4681      	mov	r9, r0
 800b072:	2e00      	cmp	r6, #0
 800b074:	d077      	beq.n	800b166 <_dtoa_r+0x1d6>
 800b076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b078:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b07c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b084:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b088:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b08c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b090:	4619      	mov	r1, r3
 800b092:	2200      	movs	r2, #0
 800b094:	4b74      	ldr	r3, [pc, #464]	@ (800b268 <_dtoa_r+0x2d8>)
 800b096:	f7f5 f917 	bl	80002c8 <__aeabi_dsub>
 800b09a:	a369      	add	r3, pc, #420	@ (adr r3, 800b240 <_dtoa_r+0x2b0>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 faca 	bl	8000638 <__aeabi_dmul>
 800b0a4:	a368      	add	r3, pc, #416	@ (adr r3, 800b248 <_dtoa_r+0x2b8>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f90f 	bl	80002cc <__adddf3>
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	f7f5 fa56 	bl	8000564 <__aeabi_i2d>
 800b0b8:	a365      	add	r3, pc, #404	@ (adr r3, 800b250 <_dtoa_r+0x2c0>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 fabb 	bl	8000638 <__aeabi_dmul>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	f7f5 f8ff 	bl	80002cc <__adddf3>
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	f7f5 fd61 	bl	8000b98 <__aeabi_d2iz>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4607      	mov	r7, r0
 800b0da:	2300      	movs	r3, #0
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7f5 fd1c 	bl	8000b1c <__aeabi_dcmplt>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_dtoa_r+0x168>
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f7f5 fa3c 	bl	8000564 <__aeabi_i2d>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	f7f5 fd0a 	bl	8000b08 <__aeabi_dcmpeq>
 800b0f4:	b900      	cbnz	r0, 800b0f8 <_dtoa_r+0x168>
 800b0f6:	3f01      	subs	r7, #1
 800b0f8:	2f16      	cmp	r7, #22
 800b0fa:	d851      	bhi.n	800b1a0 <_dtoa_r+0x210>
 800b0fc:	4b5b      	ldr	r3, [pc, #364]	@ (800b26c <_dtoa_r+0x2dc>)
 800b0fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b10a:	f7f5 fd07 	bl	8000b1c <__aeabi_dcmplt>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d048      	beq.n	800b1a4 <_dtoa_r+0x214>
 800b112:	3f01      	subs	r7, #1
 800b114:	2300      	movs	r3, #0
 800b116:	9312      	str	r3, [sp, #72]	@ 0x48
 800b118:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b11a:	1b9b      	subs	r3, r3, r6
 800b11c:	1e5a      	subs	r2, r3, #1
 800b11e:	bf44      	itt	mi
 800b120:	f1c3 0801 	rsbmi	r8, r3, #1
 800b124:	2300      	movmi	r3, #0
 800b126:	9208      	str	r2, [sp, #32]
 800b128:	bf54      	ite	pl
 800b12a:	f04f 0800 	movpl.w	r8, #0
 800b12e:	9308      	strmi	r3, [sp, #32]
 800b130:	2f00      	cmp	r7, #0
 800b132:	db39      	blt.n	800b1a8 <_dtoa_r+0x218>
 800b134:	9b08      	ldr	r3, [sp, #32]
 800b136:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b138:	443b      	add	r3, r7
 800b13a:	9308      	str	r3, [sp, #32]
 800b13c:	2300      	movs	r3, #0
 800b13e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b142:	2b09      	cmp	r3, #9
 800b144:	d864      	bhi.n	800b210 <_dtoa_r+0x280>
 800b146:	2b05      	cmp	r3, #5
 800b148:	bfc4      	itt	gt
 800b14a:	3b04      	subgt	r3, #4
 800b14c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b150:	f1a3 0302 	sub.w	r3, r3, #2
 800b154:	bfcc      	ite	gt
 800b156:	2400      	movgt	r4, #0
 800b158:	2401      	movle	r4, #1
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d863      	bhi.n	800b226 <_dtoa_r+0x296>
 800b15e:	e8df f003 	tbb	[pc, r3]
 800b162:	372a      	.short	0x372a
 800b164:	5535      	.short	0x5535
 800b166:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b16a:	441e      	add	r6, r3
 800b16c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b170:	2b20      	cmp	r3, #32
 800b172:	bfc1      	itttt	gt
 800b174:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b178:	409f      	lslgt	r7, r3
 800b17a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b17e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b182:	bfd6      	itet	le
 800b184:	f1c3 0320 	rsble	r3, r3, #32
 800b188:	ea47 0003 	orrgt.w	r0, r7, r3
 800b18c:	fa04 f003 	lslle.w	r0, r4, r3
 800b190:	f7f5 f9d8 	bl	8000544 <__aeabi_ui2d>
 800b194:	2201      	movs	r2, #1
 800b196:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b19a:	3e01      	subs	r6, #1
 800b19c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b19e:	e777      	b.n	800b090 <_dtoa_r+0x100>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e7b8      	b.n	800b116 <_dtoa_r+0x186>
 800b1a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1a6:	e7b7      	b.n	800b118 <_dtoa_r+0x188>
 800b1a8:	427b      	negs	r3, r7
 800b1aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	eba8 0807 	sub.w	r8, r8, r7
 800b1b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1b4:	e7c4      	b.n	800b140 <_dtoa_r+0x1b0>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dc35      	bgt.n	800b22c <_dtoa_r+0x29c>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	9307      	str	r3, [sp, #28]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1ca:	e00b      	b.n	800b1e4 <_dtoa_r+0x254>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e7f3      	b.n	800b1b8 <_dtoa_r+0x228>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1d6:	18fb      	adds	r3, r7, r3
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	9307      	str	r3, [sp, #28]
 800b1e0:	bfb8      	it	lt
 800b1e2:	2301      	movlt	r3, #1
 800b1e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	f102 0514 	add.w	r5, r2, #20
 800b1f0:	429d      	cmp	r5, r3
 800b1f2:	d91f      	bls.n	800b234 <_dtoa_r+0x2a4>
 800b1f4:	6041      	str	r1, [r0, #4]
 800b1f6:	4658      	mov	r0, fp
 800b1f8:	f000 fcd8 	bl	800bbac <_Balloc>
 800b1fc:	4682      	mov	sl, r0
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d13c      	bne.n	800b27c <_dtoa_r+0x2ec>
 800b202:	4b1b      	ldr	r3, [pc, #108]	@ (800b270 <_dtoa_r+0x2e0>)
 800b204:	4602      	mov	r2, r0
 800b206:	f240 11af 	movw	r1, #431	@ 0x1af
 800b20a:	e6d8      	b.n	800afbe <_dtoa_r+0x2e>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e7e0      	b.n	800b1d2 <_dtoa_r+0x242>
 800b210:	2401      	movs	r4, #1
 800b212:	2300      	movs	r3, #0
 800b214:	9309      	str	r3, [sp, #36]	@ 0x24
 800b216:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b218:	f04f 33ff 	mov.w	r3, #4294967295
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	9307      	str	r3, [sp, #28]
 800b220:	2200      	movs	r2, #0
 800b222:	2312      	movs	r3, #18
 800b224:	e7d0      	b.n	800b1c8 <_dtoa_r+0x238>
 800b226:	2301      	movs	r3, #1
 800b228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b22a:	e7f5      	b.n	800b218 <_dtoa_r+0x288>
 800b22c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9307      	str	r3, [sp, #28]
 800b232:	e7d7      	b.n	800b1e4 <_dtoa_r+0x254>
 800b234:	3101      	adds	r1, #1
 800b236:	0052      	lsls	r2, r2, #1
 800b238:	e7d8      	b.n	800b1ec <_dtoa_r+0x25c>
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w
 800b240:	636f4361 	.word	0x636f4361
 800b244:	3fd287a7 	.word	0x3fd287a7
 800b248:	8b60c8b3 	.word	0x8b60c8b3
 800b24c:	3fc68a28 	.word	0x3fc68a28
 800b250:	509f79fb 	.word	0x509f79fb
 800b254:	3fd34413 	.word	0x3fd34413
 800b258:	0800f6d7 	.word	0x0800f6d7
 800b25c:	0800f6ee 	.word	0x0800f6ee
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	0800f6a2 	.word	0x0800f6a2
 800b268:	3ff80000 	.word	0x3ff80000
 800b26c:	0800f7e8 	.word	0x0800f7e8
 800b270:	0800f746 	.word	0x0800f746
 800b274:	0800f6d3 	.word	0x0800f6d3
 800b278:	0800f6a1 	.word	0x0800f6a1
 800b27c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b280:	6018      	str	r0, [r3, #0]
 800b282:	9b07      	ldr	r3, [sp, #28]
 800b284:	2b0e      	cmp	r3, #14
 800b286:	f200 80a4 	bhi.w	800b3d2 <_dtoa_r+0x442>
 800b28a:	2c00      	cmp	r4, #0
 800b28c:	f000 80a1 	beq.w	800b3d2 <_dtoa_r+0x442>
 800b290:	2f00      	cmp	r7, #0
 800b292:	dd33      	ble.n	800b2fc <_dtoa_r+0x36c>
 800b294:	4bad      	ldr	r3, [pc, #692]	@ (800b54c <_dtoa_r+0x5bc>)
 800b296:	f007 020f 	and.w	r2, r7, #15
 800b29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b29e:	ed93 7b00 	vldr	d7, [r3]
 800b2a2:	05f8      	lsls	r0, r7, #23
 800b2a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2ac:	d516      	bpl.n	800b2dc <_dtoa_r+0x34c>
 800b2ae:	4ba8      	ldr	r3, [pc, #672]	@ (800b550 <_dtoa_r+0x5c0>)
 800b2b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2b8:	f7f5 fae8 	bl	800088c <__aeabi_ddiv>
 800b2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c0:	f004 040f 	and.w	r4, r4, #15
 800b2c4:	2603      	movs	r6, #3
 800b2c6:	4da2      	ldr	r5, [pc, #648]	@ (800b550 <_dtoa_r+0x5c0>)
 800b2c8:	b954      	cbnz	r4, 800b2e0 <_dtoa_r+0x350>
 800b2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2d2:	f7f5 fadb 	bl	800088c <__aeabi_ddiv>
 800b2d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2da:	e028      	b.n	800b32e <_dtoa_r+0x39e>
 800b2dc:	2602      	movs	r6, #2
 800b2de:	e7f2      	b.n	800b2c6 <_dtoa_r+0x336>
 800b2e0:	07e1      	lsls	r1, r4, #31
 800b2e2:	d508      	bpl.n	800b2f6 <_dtoa_r+0x366>
 800b2e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2ec:	f7f5 f9a4 	bl	8000638 <__aeabi_dmul>
 800b2f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2f4:	3601      	adds	r6, #1
 800b2f6:	1064      	asrs	r4, r4, #1
 800b2f8:	3508      	adds	r5, #8
 800b2fa:	e7e5      	b.n	800b2c8 <_dtoa_r+0x338>
 800b2fc:	f000 80d2 	beq.w	800b4a4 <_dtoa_r+0x514>
 800b300:	427c      	negs	r4, r7
 800b302:	4b92      	ldr	r3, [pc, #584]	@ (800b54c <_dtoa_r+0x5bc>)
 800b304:	4d92      	ldr	r5, [pc, #584]	@ (800b550 <_dtoa_r+0x5c0>)
 800b306:	f004 020f 	and.w	r2, r4, #15
 800b30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b316:	f7f5 f98f 	bl	8000638 <__aeabi_dmul>
 800b31a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b31e:	1124      	asrs	r4, r4, #4
 800b320:	2300      	movs	r3, #0
 800b322:	2602      	movs	r6, #2
 800b324:	2c00      	cmp	r4, #0
 800b326:	f040 80b2 	bne.w	800b48e <_dtoa_r+0x4fe>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1d3      	bne.n	800b2d6 <_dtoa_r+0x346>
 800b32e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b330:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 80b7 	beq.w	800b4a8 <_dtoa_r+0x518>
 800b33a:	4b86      	ldr	r3, [pc, #536]	@ (800b554 <_dtoa_r+0x5c4>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f5 fbeb 	bl	8000b1c <__aeabi_dcmplt>
 800b346:	2800      	cmp	r0, #0
 800b348:	f000 80ae 	beq.w	800b4a8 <_dtoa_r+0x518>
 800b34c:	9b07      	ldr	r3, [sp, #28]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 80aa 	beq.w	800b4a8 <_dtoa_r+0x518>
 800b354:	9b00      	ldr	r3, [sp, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	dd37      	ble.n	800b3ca <_dtoa_r+0x43a>
 800b35a:	1e7b      	subs	r3, r7, #1
 800b35c:	9304      	str	r3, [sp, #16]
 800b35e:	4620      	mov	r0, r4
 800b360:	4b7d      	ldr	r3, [pc, #500]	@ (800b558 <_dtoa_r+0x5c8>)
 800b362:	2200      	movs	r2, #0
 800b364:	4629      	mov	r1, r5
 800b366:	f7f5 f967 	bl	8000638 <__aeabi_dmul>
 800b36a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b36e:	9c00      	ldr	r4, [sp, #0]
 800b370:	3601      	adds	r6, #1
 800b372:	4630      	mov	r0, r6
 800b374:	f7f5 f8f6 	bl	8000564 <__aeabi_i2d>
 800b378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b37c:	f7f5 f95c 	bl	8000638 <__aeabi_dmul>
 800b380:	4b76      	ldr	r3, [pc, #472]	@ (800b55c <_dtoa_r+0x5cc>)
 800b382:	2200      	movs	r2, #0
 800b384:	f7f4 ffa2 	bl	80002cc <__adddf3>
 800b388:	4605      	mov	r5, r0
 800b38a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b38e:	2c00      	cmp	r4, #0
 800b390:	f040 808d 	bne.w	800b4ae <_dtoa_r+0x51e>
 800b394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b398:	4b71      	ldr	r3, [pc, #452]	@ (800b560 <_dtoa_r+0x5d0>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f4 ff94 	bl	80002c8 <__aeabi_dsub>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	4633      	mov	r3, r6
 800b3ac:	f7f5 fbd4 	bl	8000b58 <__aeabi_dcmpgt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f040 828b 	bne.w	800b8cc <_dtoa_r+0x93c>
 800b3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ba:	462a      	mov	r2, r5
 800b3bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3c0:	f7f5 fbac 	bl	8000b1c <__aeabi_dcmplt>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	f040 8128 	bne.w	800b61a <_dtoa_r+0x68a>
 800b3ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b3ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b3d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f2c0 815a 	blt.w	800b68e <_dtoa_r+0x6fe>
 800b3da:	2f0e      	cmp	r7, #14
 800b3dc:	f300 8157 	bgt.w	800b68e <_dtoa_r+0x6fe>
 800b3e0:	4b5a      	ldr	r3, [pc, #360]	@ (800b54c <_dtoa_r+0x5bc>)
 800b3e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3e6:	ed93 7b00 	vldr	d7, [r3]
 800b3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	ed8d 7b00 	vstr	d7, [sp]
 800b3f2:	da03      	bge.n	800b3fc <_dtoa_r+0x46c>
 800b3f4:	9b07      	ldr	r3, [sp, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f340 8101 	ble.w	800b5fe <_dtoa_r+0x66e>
 800b3fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b400:	4656      	mov	r6, sl
 800b402:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 fa3f 	bl	800088c <__aeabi_ddiv>
 800b40e:	f7f5 fbc3 	bl	8000b98 <__aeabi_d2iz>
 800b412:	4680      	mov	r8, r0
 800b414:	f7f5 f8a6 	bl	8000564 <__aeabi_i2d>
 800b418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b41c:	f7f5 f90c 	bl	8000638 <__aeabi_dmul>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b42c:	f7f4 ff4c 	bl	80002c8 <__aeabi_dsub>
 800b430:	f806 4b01 	strb.w	r4, [r6], #1
 800b434:	9d07      	ldr	r5, [sp, #28]
 800b436:	eba6 040a 	sub.w	r4, r6, sl
 800b43a:	42a5      	cmp	r5, r4
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	f040 8117 	bne.w	800b672 <_dtoa_r+0x6e2>
 800b444:	f7f4 ff42 	bl	80002cc <__adddf3>
 800b448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b44c:	4604      	mov	r4, r0
 800b44e:	460d      	mov	r5, r1
 800b450:	f7f5 fb82 	bl	8000b58 <__aeabi_dcmpgt>
 800b454:	2800      	cmp	r0, #0
 800b456:	f040 80f9 	bne.w	800b64c <_dtoa_r+0x6bc>
 800b45a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b45e:	4620      	mov	r0, r4
 800b460:	4629      	mov	r1, r5
 800b462:	f7f5 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 800b466:	b118      	cbz	r0, 800b470 <_dtoa_r+0x4e0>
 800b468:	f018 0f01 	tst.w	r8, #1
 800b46c:	f040 80ee 	bne.w	800b64c <_dtoa_r+0x6bc>
 800b470:	4649      	mov	r1, r9
 800b472:	4658      	mov	r0, fp
 800b474:	f000 fbda 	bl	800bc2c <_Bfree>
 800b478:	2300      	movs	r3, #0
 800b47a:	7033      	strb	r3, [r6, #0]
 800b47c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b47e:	3701      	adds	r7, #1
 800b480:	601f      	str	r7, [r3, #0]
 800b482:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 831d 	beq.w	800bac4 <_dtoa_r+0xb34>
 800b48a:	601e      	str	r6, [r3, #0]
 800b48c:	e31a      	b.n	800bac4 <_dtoa_r+0xb34>
 800b48e:	07e2      	lsls	r2, r4, #31
 800b490:	d505      	bpl.n	800b49e <_dtoa_r+0x50e>
 800b492:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b496:	f7f5 f8cf 	bl	8000638 <__aeabi_dmul>
 800b49a:	3601      	adds	r6, #1
 800b49c:	2301      	movs	r3, #1
 800b49e:	1064      	asrs	r4, r4, #1
 800b4a0:	3508      	adds	r5, #8
 800b4a2:	e73f      	b.n	800b324 <_dtoa_r+0x394>
 800b4a4:	2602      	movs	r6, #2
 800b4a6:	e742      	b.n	800b32e <_dtoa_r+0x39e>
 800b4a8:	9c07      	ldr	r4, [sp, #28]
 800b4aa:	9704      	str	r7, [sp, #16]
 800b4ac:	e761      	b.n	800b372 <_dtoa_r+0x3e2>
 800b4ae:	4b27      	ldr	r3, [pc, #156]	@ (800b54c <_dtoa_r+0x5bc>)
 800b4b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4ba:	4454      	add	r4, sl
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d053      	beq.n	800b568 <_dtoa_r+0x5d8>
 800b4c0:	4928      	ldr	r1, [pc, #160]	@ (800b564 <_dtoa_r+0x5d4>)
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	f7f5 f9e2 	bl	800088c <__aeabi_ddiv>
 800b4c8:	4633      	mov	r3, r6
 800b4ca:	462a      	mov	r2, r5
 800b4cc:	f7f4 fefc 	bl	80002c8 <__aeabi_dsub>
 800b4d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4d4:	4656      	mov	r6, sl
 800b4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4da:	f7f5 fb5d 	bl	8000b98 <__aeabi_d2iz>
 800b4de:	4605      	mov	r5, r0
 800b4e0:	f7f5 f840 	bl	8000564 <__aeabi_i2d>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ec:	f7f4 feec 	bl	80002c8 <__aeabi_dsub>
 800b4f0:	3530      	adds	r5, #48	@ 0x30
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4fa:	f806 5b01 	strb.w	r5, [r6], #1
 800b4fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b502:	f7f5 fb0b 	bl	8000b1c <__aeabi_dcmplt>
 800b506:	2800      	cmp	r0, #0
 800b508:	d171      	bne.n	800b5ee <_dtoa_r+0x65e>
 800b50a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b50e:	4911      	ldr	r1, [pc, #68]	@ (800b554 <_dtoa_r+0x5c4>)
 800b510:	2000      	movs	r0, #0
 800b512:	f7f4 fed9 	bl	80002c8 <__aeabi_dsub>
 800b516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b51a:	f7f5 faff 	bl	8000b1c <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f040 8095 	bne.w	800b64e <_dtoa_r+0x6be>
 800b524:	42a6      	cmp	r6, r4
 800b526:	f43f af50 	beq.w	800b3ca <_dtoa_r+0x43a>
 800b52a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b52e:	4b0a      	ldr	r3, [pc, #40]	@ (800b558 <_dtoa_r+0x5c8>)
 800b530:	2200      	movs	r2, #0
 800b532:	f7f5 f881 	bl	8000638 <__aeabi_dmul>
 800b536:	4b08      	ldr	r3, [pc, #32]	@ (800b558 <_dtoa_r+0x5c8>)
 800b538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b53c:	2200      	movs	r2, #0
 800b53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b542:	f7f5 f879 	bl	8000638 <__aeabi_dmul>
 800b546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b54a:	e7c4      	b.n	800b4d6 <_dtoa_r+0x546>
 800b54c:	0800f7e8 	.word	0x0800f7e8
 800b550:	0800f7c0 	.word	0x0800f7c0
 800b554:	3ff00000 	.word	0x3ff00000
 800b558:	40240000 	.word	0x40240000
 800b55c:	401c0000 	.word	0x401c0000
 800b560:	40140000 	.word	0x40140000
 800b564:	3fe00000 	.word	0x3fe00000
 800b568:	4631      	mov	r1, r6
 800b56a:	4628      	mov	r0, r5
 800b56c:	f7f5 f864 	bl	8000638 <__aeabi_dmul>
 800b570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b574:	9415      	str	r4, [sp, #84]	@ 0x54
 800b576:	4656      	mov	r6, sl
 800b578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b57c:	f7f5 fb0c 	bl	8000b98 <__aeabi_d2iz>
 800b580:	4605      	mov	r5, r0
 800b582:	f7f4 ffef 	bl	8000564 <__aeabi_i2d>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	3530      	adds	r5, #48	@ 0x30
 800b594:	f806 5b01 	strb.w	r5, [r6], #1
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	42a6      	cmp	r6, r4
 800b59e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5a2:	f04f 0200 	mov.w	r2, #0
 800b5a6:	d124      	bne.n	800b5f2 <_dtoa_r+0x662>
 800b5a8:	4bac      	ldr	r3, [pc, #688]	@ (800b85c <_dtoa_r+0x8cc>)
 800b5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5ae:	f7f4 fe8d 	bl	80002cc <__adddf3>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ba:	f7f5 facd 	bl	8000b58 <__aeabi_dcmpgt>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d145      	bne.n	800b64e <_dtoa_r+0x6be>
 800b5c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5c6:	49a5      	ldr	r1, [pc, #660]	@ (800b85c <_dtoa_r+0x8cc>)
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f7f4 fe7d 	bl	80002c8 <__aeabi_dsub>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d6:	f7f5 faa1 	bl	8000b1c <__aeabi_dcmplt>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f43f aef5 	beq.w	800b3ca <_dtoa_r+0x43a>
 800b5e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b5e2:	1e73      	subs	r3, r6, #1
 800b5e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5ea:	2b30      	cmp	r3, #48	@ 0x30
 800b5ec:	d0f8      	beq.n	800b5e0 <_dtoa_r+0x650>
 800b5ee:	9f04      	ldr	r7, [sp, #16]
 800b5f0:	e73e      	b.n	800b470 <_dtoa_r+0x4e0>
 800b5f2:	4b9b      	ldr	r3, [pc, #620]	@ (800b860 <_dtoa_r+0x8d0>)
 800b5f4:	f7f5 f820 	bl	8000638 <__aeabi_dmul>
 800b5f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5fc:	e7bc      	b.n	800b578 <_dtoa_r+0x5e8>
 800b5fe:	d10c      	bne.n	800b61a <_dtoa_r+0x68a>
 800b600:	4b98      	ldr	r3, [pc, #608]	@ (800b864 <_dtoa_r+0x8d4>)
 800b602:	2200      	movs	r2, #0
 800b604:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b608:	f7f5 f816 	bl	8000638 <__aeabi_dmul>
 800b60c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b610:	f7f5 fa98 	bl	8000b44 <__aeabi_dcmpge>
 800b614:	2800      	cmp	r0, #0
 800b616:	f000 8157 	beq.w	800b8c8 <_dtoa_r+0x938>
 800b61a:	2400      	movs	r4, #0
 800b61c:	4625      	mov	r5, r4
 800b61e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b620:	43db      	mvns	r3, r3
 800b622:	9304      	str	r3, [sp, #16]
 800b624:	4656      	mov	r6, sl
 800b626:	2700      	movs	r7, #0
 800b628:	4621      	mov	r1, r4
 800b62a:	4658      	mov	r0, fp
 800b62c:	f000 fafe 	bl	800bc2c <_Bfree>
 800b630:	2d00      	cmp	r5, #0
 800b632:	d0dc      	beq.n	800b5ee <_dtoa_r+0x65e>
 800b634:	b12f      	cbz	r7, 800b642 <_dtoa_r+0x6b2>
 800b636:	42af      	cmp	r7, r5
 800b638:	d003      	beq.n	800b642 <_dtoa_r+0x6b2>
 800b63a:	4639      	mov	r1, r7
 800b63c:	4658      	mov	r0, fp
 800b63e:	f000 faf5 	bl	800bc2c <_Bfree>
 800b642:	4629      	mov	r1, r5
 800b644:	4658      	mov	r0, fp
 800b646:	f000 faf1 	bl	800bc2c <_Bfree>
 800b64a:	e7d0      	b.n	800b5ee <_dtoa_r+0x65e>
 800b64c:	9704      	str	r7, [sp, #16]
 800b64e:	4633      	mov	r3, r6
 800b650:	461e      	mov	r6, r3
 800b652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b656:	2a39      	cmp	r2, #57	@ 0x39
 800b658:	d107      	bne.n	800b66a <_dtoa_r+0x6da>
 800b65a:	459a      	cmp	sl, r3
 800b65c:	d1f8      	bne.n	800b650 <_dtoa_r+0x6c0>
 800b65e:	9a04      	ldr	r2, [sp, #16]
 800b660:	3201      	adds	r2, #1
 800b662:	9204      	str	r2, [sp, #16]
 800b664:	2230      	movs	r2, #48	@ 0x30
 800b666:	f88a 2000 	strb.w	r2, [sl]
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	3201      	adds	r2, #1
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	e7bd      	b.n	800b5ee <_dtoa_r+0x65e>
 800b672:	4b7b      	ldr	r3, [pc, #492]	@ (800b860 <_dtoa_r+0x8d0>)
 800b674:	2200      	movs	r2, #0
 800b676:	f7f4 ffdf 	bl	8000638 <__aeabi_dmul>
 800b67a:	2200      	movs	r2, #0
 800b67c:	2300      	movs	r3, #0
 800b67e:	4604      	mov	r4, r0
 800b680:	460d      	mov	r5, r1
 800b682:	f7f5 fa41 	bl	8000b08 <__aeabi_dcmpeq>
 800b686:	2800      	cmp	r0, #0
 800b688:	f43f aebb 	beq.w	800b402 <_dtoa_r+0x472>
 800b68c:	e6f0      	b.n	800b470 <_dtoa_r+0x4e0>
 800b68e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b690:	2a00      	cmp	r2, #0
 800b692:	f000 80db 	beq.w	800b84c <_dtoa_r+0x8bc>
 800b696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b698:	2a01      	cmp	r2, #1
 800b69a:	f300 80bf 	bgt.w	800b81c <_dtoa_r+0x88c>
 800b69e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	f000 80b7 	beq.w	800b814 <_dtoa_r+0x884>
 800b6a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6ac:	4646      	mov	r6, r8
 800b6ae:	9a08      	ldr	r2, [sp, #32]
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	441a      	add	r2, r3
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	4498      	add	r8, r3
 800b6b8:	9208      	str	r2, [sp, #32]
 800b6ba:	f000 fbb5 	bl	800be28 <__i2b>
 800b6be:	4605      	mov	r5, r0
 800b6c0:	b15e      	cbz	r6, 800b6da <_dtoa_r+0x74a>
 800b6c2:	9b08      	ldr	r3, [sp, #32]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dd08      	ble.n	800b6da <_dtoa_r+0x74a>
 800b6c8:	42b3      	cmp	r3, r6
 800b6ca:	9a08      	ldr	r2, [sp, #32]
 800b6cc:	bfa8      	it	ge
 800b6ce:	4633      	movge	r3, r6
 800b6d0:	eba8 0803 	sub.w	r8, r8, r3
 800b6d4:	1af6      	subs	r6, r6, r3
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	9308      	str	r3, [sp, #32]
 800b6da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6dc:	b1f3      	cbz	r3, 800b71c <_dtoa_r+0x78c>
 800b6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 80b7 	beq.w	800b854 <_dtoa_r+0x8c4>
 800b6e6:	b18c      	cbz	r4, 800b70c <_dtoa_r+0x77c>
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	4658      	mov	r0, fp
 800b6ee:	f000 fc5b 	bl	800bfa8 <__pow5mult>
 800b6f2:	464a      	mov	r2, r9
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	4658      	mov	r0, fp
 800b6fa:	f000 fbab 	bl	800be54 <__multiply>
 800b6fe:	4649      	mov	r1, r9
 800b700:	9004      	str	r0, [sp, #16]
 800b702:	4658      	mov	r0, fp
 800b704:	f000 fa92 	bl	800bc2c <_Bfree>
 800b708:	9b04      	ldr	r3, [sp, #16]
 800b70a:	4699      	mov	r9, r3
 800b70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b70e:	1b1a      	subs	r2, r3, r4
 800b710:	d004      	beq.n	800b71c <_dtoa_r+0x78c>
 800b712:	4649      	mov	r1, r9
 800b714:	4658      	mov	r0, fp
 800b716:	f000 fc47 	bl	800bfa8 <__pow5mult>
 800b71a:	4681      	mov	r9, r0
 800b71c:	2101      	movs	r1, #1
 800b71e:	4658      	mov	r0, fp
 800b720:	f000 fb82 	bl	800be28 <__i2b>
 800b724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b726:	4604      	mov	r4, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 81cf 	beq.w	800bacc <_dtoa_r+0xb3c>
 800b72e:	461a      	mov	r2, r3
 800b730:	4601      	mov	r1, r0
 800b732:	4658      	mov	r0, fp
 800b734:	f000 fc38 	bl	800bfa8 <__pow5mult>
 800b738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	4604      	mov	r4, r0
 800b73e:	f300 8095 	bgt.w	800b86c <_dtoa_r+0x8dc>
 800b742:	9b02      	ldr	r3, [sp, #8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f040 8087 	bne.w	800b858 <_dtoa_r+0x8c8>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b750:	2b00      	cmp	r3, #0
 800b752:	f040 8089 	bne.w	800b868 <_dtoa_r+0x8d8>
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b75c:	0d1b      	lsrs	r3, r3, #20
 800b75e:	051b      	lsls	r3, r3, #20
 800b760:	b12b      	cbz	r3, 800b76e <_dtoa_r+0x7de>
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	3301      	adds	r3, #1
 800b766:	9308      	str	r3, [sp, #32]
 800b768:	f108 0801 	add.w	r8, r8, #1
 800b76c:	2301      	movs	r3, #1
 800b76e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 81b0 	beq.w	800bad8 <_dtoa_r+0xb48>
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b77e:	6918      	ldr	r0, [r3, #16]
 800b780:	f000 fb06 	bl	800bd90 <__hi0bits>
 800b784:	f1c0 0020 	rsb	r0, r0, #32
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	4418      	add	r0, r3
 800b78c:	f010 001f 	ands.w	r0, r0, #31
 800b790:	d077      	beq.n	800b882 <_dtoa_r+0x8f2>
 800b792:	f1c0 0320 	rsb	r3, r0, #32
 800b796:	2b04      	cmp	r3, #4
 800b798:	dd6b      	ble.n	800b872 <_dtoa_r+0x8e2>
 800b79a:	9b08      	ldr	r3, [sp, #32]
 800b79c:	f1c0 001c 	rsb	r0, r0, #28
 800b7a0:	4403      	add	r3, r0
 800b7a2:	4480      	add	r8, r0
 800b7a4:	4406      	add	r6, r0
 800b7a6:	9308      	str	r3, [sp, #32]
 800b7a8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ac:	dd05      	ble.n	800b7ba <_dtoa_r+0x82a>
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	4658      	mov	r0, fp
 800b7b4:	f000 fc52 	bl	800c05c <__lshift>
 800b7b8:	4681      	mov	r9, r0
 800b7ba:	9b08      	ldr	r3, [sp, #32]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dd05      	ble.n	800b7cc <_dtoa_r+0x83c>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	4658      	mov	r0, fp
 800b7c6:	f000 fc49 	bl	800c05c <__lshift>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d059      	beq.n	800b886 <_dtoa_r+0x8f6>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4648      	mov	r0, r9
 800b7d6:	f000 fcad 	bl	800c134 <__mcmp>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	da53      	bge.n	800b886 <_dtoa_r+0x8f6>
 800b7de:	1e7b      	subs	r3, r7, #1
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	220a      	movs	r2, #10
 800b7e8:	4658      	mov	r0, fp
 800b7ea:	f000 fa41 	bl	800bc70 <__multadd>
 800b7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7f0:	4681      	mov	r9, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 8172 	beq.w	800badc <_dtoa_r+0xb4c>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	220a      	movs	r2, #10
 800b7fe:	4658      	mov	r0, fp
 800b800:	f000 fa36 	bl	800bc70 <__multadd>
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	4605      	mov	r5, r0
 800b80a:	dc67      	bgt.n	800b8dc <_dtoa_r+0x94c>
 800b80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b80e:	2b02      	cmp	r3, #2
 800b810:	dc41      	bgt.n	800b896 <_dtoa_r+0x906>
 800b812:	e063      	b.n	800b8dc <_dtoa_r+0x94c>
 800b814:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b816:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b81a:	e746      	b.n	800b6aa <_dtoa_r+0x71a>
 800b81c:	9b07      	ldr	r3, [sp, #28]
 800b81e:	1e5c      	subs	r4, r3, #1
 800b820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b822:	42a3      	cmp	r3, r4
 800b824:	bfbf      	itttt	lt
 800b826:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b828:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b82a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b82c:	1ae3      	sublt	r3, r4, r3
 800b82e:	bfb4      	ite	lt
 800b830:	18d2      	addlt	r2, r2, r3
 800b832:	1b1c      	subge	r4, r3, r4
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	bfbc      	itt	lt
 800b838:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b83a:	2400      	movlt	r4, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	bfb5      	itete	lt
 800b840:	eba8 0603 	sublt.w	r6, r8, r3
 800b844:	9b07      	ldrge	r3, [sp, #28]
 800b846:	2300      	movlt	r3, #0
 800b848:	4646      	movge	r6, r8
 800b84a:	e730      	b.n	800b6ae <_dtoa_r+0x71e>
 800b84c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b84e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b850:	4646      	mov	r6, r8
 800b852:	e735      	b.n	800b6c0 <_dtoa_r+0x730>
 800b854:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b856:	e75c      	b.n	800b712 <_dtoa_r+0x782>
 800b858:	2300      	movs	r3, #0
 800b85a:	e788      	b.n	800b76e <_dtoa_r+0x7de>
 800b85c:	3fe00000 	.word	0x3fe00000
 800b860:	40240000 	.word	0x40240000
 800b864:	40140000 	.word	0x40140000
 800b868:	9b02      	ldr	r3, [sp, #8]
 800b86a:	e780      	b.n	800b76e <_dtoa_r+0x7de>
 800b86c:	2300      	movs	r3, #0
 800b86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b870:	e782      	b.n	800b778 <_dtoa_r+0x7e8>
 800b872:	d099      	beq.n	800b7a8 <_dtoa_r+0x818>
 800b874:	9a08      	ldr	r2, [sp, #32]
 800b876:	331c      	adds	r3, #28
 800b878:	441a      	add	r2, r3
 800b87a:	4498      	add	r8, r3
 800b87c:	441e      	add	r6, r3
 800b87e:	9208      	str	r2, [sp, #32]
 800b880:	e792      	b.n	800b7a8 <_dtoa_r+0x818>
 800b882:	4603      	mov	r3, r0
 800b884:	e7f6      	b.n	800b874 <_dtoa_r+0x8e4>
 800b886:	9b07      	ldr	r3, [sp, #28]
 800b888:	9704      	str	r7, [sp, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	dc20      	bgt.n	800b8d0 <_dtoa_r+0x940>
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b892:	2b02      	cmp	r3, #2
 800b894:	dd1e      	ble.n	800b8d4 <_dtoa_r+0x944>
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f47f aec0 	bne.w	800b61e <_dtoa_r+0x68e>
 800b89e:	4621      	mov	r1, r4
 800b8a0:	2205      	movs	r2, #5
 800b8a2:	4658      	mov	r0, fp
 800b8a4:	f000 f9e4 	bl	800bc70 <__multadd>
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4648      	mov	r0, r9
 800b8ae:	f000 fc41 	bl	800c134 <__mcmp>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	f77f aeb3 	ble.w	800b61e <_dtoa_r+0x68e>
 800b8b8:	4656      	mov	r6, sl
 800b8ba:	2331      	movs	r3, #49	@ 0x31
 800b8bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b8c0:	9b04      	ldr	r3, [sp, #16]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	e6ae      	b.n	800b626 <_dtoa_r+0x696>
 800b8c8:	9c07      	ldr	r4, [sp, #28]
 800b8ca:	9704      	str	r7, [sp, #16]
 800b8cc:	4625      	mov	r5, r4
 800b8ce:	e7f3      	b.n	800b8b8 <_dtoa_r+0x928>
 800b8d0:	9b07      	ldr	r3, [sp, #28]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8104 	beq.w	800bae4 <_dtoa_r+0xb54>
 800b8dc:	2e00      	cmp	r6, #0
 800b8de:	dd05      	ble.n	800b8ec <_dtoa_r+0x95c>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4632      	mov	r2, r6
 800b8e4:	4658      	mov	r0, fp
 800b8e6:	f000 fbb9 	bl	800c05c <__lshift>
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d05a      	beq.n	800b9a8 <_dtoa_r+0xa18>
 800b8f2:	6869      	ldr	r1, [r5, #4]
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	f000 f959 	bl	800bbac <_Balloc>
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	b928      	cbnz	r0, 800b90a <_dtoa_r+0x97a>
 800b8fe:	4b84      	ldr	r3, [pc, #528]	@ (800bb10 <_dtoa_r+0xb80>)
 800b900:	4602      	mov	r2, r0
 800b902:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b906:	f7ff bb5a 	b.w	800afbe <_dtoa_r+0x2e>
 800b90a:	692a      	ldr	r2, [r5, #16]
 800b90c:	3202      	adds	r2, #2
 800b90e:	0092      	lsls	r2, r2, #2
 800b910:	f105 010c 	add.w	r1, r5, #12
 800b914:	300c      	adds	r0, #12
 800b916:	f7ff fa9e 	bl	800ae56 <memcpy>
 800b91a:	2201      	movs	r2, #1
 800b91c:	4631      	mov	r1, r6
 800b91e:	4658      	mov	r0, fp
 800b920:	f000 fb9c 	bl	800c05c <__lshift>
 800b924:	f10a 0301 	add.w	r3, sl, #1
 800b928:	9307      	str	r3, [sp, #28]
 800b92a:	9b00      	ldr	r3, [sp, #0]
 800b92c:	4453      	add	r3, sl
 800b92e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b930:	9b02      	ldr	r3, [sp, #8]
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	462f      	mov	r7, r5
 800b938:	930a      	str	r3, [sp, #40]	@ 0x28
 800b93a:	4605      	mov	r5, r0
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	4621      	mov	r1, r4
 800b940:	3b01      	subs	r3, #1
 800b942:	4648      	mov	r0, r9
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	f7ff fa9b 	bl	800ae80 <quorem>
 800b94a:	4639      	mov	r1, r7
 800b94c:	9002      	str	r0, [sp, #8]
 800b94e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b952:	4648      	mov	r0, r9
 800b954:	f000 fbee 	bl	800c134 <__mcmp>
 800b958:	462a      	mov	r2, r5
 800b95a:	9008      	str	r0, [sp, #32]
 800b95c:	4621      	mov	r1, r4
 800b95e:	4658      	mov	r0, fp
 800b960:	f000 fc04 	bl	800c16c <__mdiff>
 800b964:	68c2      	ldr	r2, [r0, #12]
 800b966:	4606      	mov	r6, r0
 800b968:	bb02      	cbnz	r2, 800b9ac <_dtoa_r+0xa1c>
 800b96a:	4601      	mov	r1, r0
 800b96c:	4648      	mov	r0, r9
 800b96e:	f000 fbe1 	bl	800c134 <__mcmp>
 800b972:	4602      	mov	r2, r0
 800b974:	4631      	mov	r1, r6
 800b976:	4658      	mov	r0, fp
 800b978:	920e      	str	r2, [sp, #56]	@ 0x38
 800b97a:	f000 f957 	bl	800bc2c <_Bfree>
 800b97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b980:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b982:	9e07      	ldr	r6, [sp, #28]
 800b984:	ea43 0102 	orr.w	r1, r3, r2
 800b988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b98a:	4319      	orrs	r1, r3
 800b98c:	d110      	bne.n	800b9b0 <_dtoa_r+0xa20>
 800b98e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b992:	d029      	beq.n	800b9e8 <_dtoa_r+0xa58>
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd02      	ble.n	800b9a0 <_dtoa_r+0xa10>
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b9a0:	9b00      	ldr	r3, [sp, #0]
 800b9a2:	f883 8000 	strb.w	r8, [r3]
 800b9a6:	e63f      	b.n	800b628 <_dtoa_r+0x698>
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e7bb      	b.n	800b924 <_dtoa_r+0x994>
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	e7e1      	b.n	800b974 <_dtoa_r+0x9e4>
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	db04      	blt.n	800b9c0 <_dtoa_r+0xa30>
 800b9b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	d120      	bne.n	800ba02 <_dtoa_r+0xa72>
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	dded      	ble.n	800b9a0 <_dtoa_r+0xa10>
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	4658      	mov	r0, fp
 800b9ca:	f000 fb47 	bl	800c05c <__lshift>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4681      	mov	r9, r0
 800b9d2:	f000 fbaf 	bl	800c134 <__mcmp>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	dc03      	bgt.n	800b9e2 <_dtoa_r+0xa52>
 800b9da:	d1e1      	bne.n	800b9a0 <_dtoa_r+0xa10>
 800b9dc:	f018 0f01 	tst.w	r8, #1
 800b9e0:	d0de      	beq.n	800b9a0 <_dtoa_r+0xa10>
 800b9e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9e6:	d1d8      	bne.n	800b99a <_dtoa_r+0xa0a>
 800b9e8:	9a00      	ldr	r2, [sp, #0]
 800b9ea:	2339      	movs	r3, #57	@ 0x39
 800b9ec:	7013      	strb	r3, [r2, #0]
 800b9ee:	4633      	mov	r3, r6
 800b9f0:	461e      	mov	r6, r3
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9f8:	2a39      	cmp	r2, #57	@ 0x39
 800b9fa:	d052      	beq.n	800baa2 <_dtoa_r+0xb12>
 800b9fc:	3201      	adds	r2, #1
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	e612      	b.n	800b628 <_dtoa_r+0x698>
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	dd07      	ble.n	800ba16 <_dtoa_r+0xa86>
 800ba06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba0a:	d0ed      	beq.n	800b9e8 <_dtoa_r+0xa58>
 800ba0c:	9a00      	ldr	r2, [sp, #0]
 800ba0e:	f108 0301 	add.w	r3, r8, #1
 800ba12:	7013      	strb	r3, [r2, #0]
 800ba14:	e608      	b.n	800b628 <_dtoa_r+0x698>
 800ba16:	9b07      	ldr	r3, [sp, #28]
 800ba18:	9a07      	ldr	r2, [sp, #28]
 800ba1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d028      	beq.n	800ba76 <_dtoa_r+0xae6>
 800ba24:	4649      	mov	r1, r9
 800ba26:	2300      	movs	r3, #0
 800ba28:	220a      	movs	r2, #10
 800ba2a:	4658      	mov	r0, fp
 800ba2c:	f000 f920 	bl	800bc70 <__multadd>
 800ba30:	42af      	cmp	r7, r5
 800ba32:	4681      	mov	r9, r0
 800ba34:	f04f 0300 	mov.w	r3, #0
 800ba38:	f04f 020a 	mov.w	r2, #10
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	4658      	mov	r0, fp
 800ba40:	d107      	bne.n	800ba52 <_dtoa_r+0xac2>
 800ba42:	f000 f915 	bl	800bc70 <__multadd>
 800ba46:	4607      	mov	r7, r0
 800ba48:	4605      	mov	r5, r0
 800ba4a:	9b07      	ldr	r3, [sp, #28]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	9307      	str	r3, [sp, #28]
 800ba50:	e774      	b.n	800b93c <_dtoa_r+0x9ac>
 800ba52:	f000 f90d 	bl	800bc70 <__multadd>
 800ba56:	4629      	mov	r1, r5
 800ba58:	4607      	mov	r7, r0
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	220a      	movs	r2, #10
 800ba5e:	4658      	mov	r0, fp
 800ba60:	f000 f906 	bl	800bc70 <__multadd>
 800ba64:	4605      	mov	r5, r0
 800ba66:	e7f0      	b.n	800ba4a <_dtoa_r+0xaba>
 800ba68:	9b00      	ldr	r3, [sp, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	bfcc      	ite	gt
 800ba6e:	461e      	movgt	r6, r3
 800ba70:	2601      	movle	r6, #1
 800ba72:	4456      	add	r6, sl
 800ba74:	2700      	movs	r7, #0
 800ba76:	4649      	mov	r1, r9
 800ba78:	2201      	movs	r2, #1
 800ba7a:	4658      	mov	r0, fp
 800ba7c:	f000 faee 	bl	800c05c <__lshift>
 800ba80:	4621      	mov	r1, r4
 800ba82:	4681      	mov	r9, r0
 800ba84:	f000 fb56 	bl	800c134 <__mcmp>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	dcb0      	bgt.n	800b9ee <_dtoa_r+0xa5e>
 800ba8c:	d102      	bne.n	800ba94 <_dtoa_r+0xb04>
 800ba8e:	f018 0f01 	tst.w	r8, #1
 800ba92:	d1ac      	bne.n	800b9ee <_dtoa_r+0xa5e>
 800ba94:	4633      	mov	r3, r6
 800ba96:	461e      	mov	r6, r3
 800ba98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba9c:	2a30      	cmp	r2, #48	@ 0x30
 800ba9e:	d0fa      	beq.n	800ba96 <_dtoa_r+0xb06>
 800baa0:	e5c2      	b.n	800b628 <_dtoa_r+0x698>
 800baa2:	459a      	cmp	sl, r3
 800baa4:	d1a4      	bne.n	800b9f0 <_dtoa_r+0xa60>
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	3301      	adds	r3, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	2331      	movs	r3, #49	@ 0x31
 800baae:	f88a 3000 	strb.w	r3, [sl]
 800bab2:	e5b9      	b.n	800b628 <_dtoa_r+0x698>
 800bab4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bab6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb14 <_dtoa_r+0xb84>
 800baba:	b11b      	cbz	r3, 800bac4 <_dtoa_r+0xb34>
 800babc:	f10a 0308 	add.w	r3, sl, #8
 800bac0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	4650      	mov	r0, sl
 800bac6:	b019      	add	sp, #100	@ 0x64
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bace:	2b01      	cmp	r3, #1
 800bad0:	f77f ae37 	ble.w	800b742 <_dtoa_r+0x7b2>
 800bad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bad6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bad8:	2001      	movs	r0, #1
 800bada:	e655      	b.n	800b788 <_dtoa_r+0x7f8>
 800badc:	9b00      	ldr	r3, [sp, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f77f aed6 	ble.w	800b890 <_dtoa_r+0x900>
 800bae4:	4656      	mov	r6, sl
 800bae6:	4621      	mov	r1, r4
 800bae8:	4648      	mov	r0, r9
 800baea:	f7ff f9c9 	bl	800ae80 <quorem>
 800baee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800baf2:	f806 8b01 	strb.w	r8, [r6], #1
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	eba6 020a 	sub.w	r2, r6, sl
 800bafc:	4293      	cmp	r3, r2
 800bafe:	ddb3      	ble.n	800ba68 <_dtoa_r+0xad8>
 800bb00:	4649      	mov	r1, r9
 800bb02:	2300      	movs	r3, #0
 800bb04:	220a      	movs	r2, #10
 800bb06:	4658      	mov	r0, fp
 800bb08:	f000 f8b2 	bl	800bc70 <__multadd>
 800bb0c:	4681      	mov	r9, r0
 800bb0e:	e7ea      	b.n	800bae6 <_dtoa_r+0xb56>
 800bb10:	0800f746 	.word	0x0800f746
 800bb14:	0800f6ca 	.word	0x0800f6ca

0800bb18 <_free_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	2900      	cmp	r1, #0
 800bb1e:	d041      	beq.n	800bba4 <_free_r+0x8c>
 800bb20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb24:	1f0c      	subs	r4, r1, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfb8      	it	lt
 800bb2a:	18e4      	addlt	r4, r4, r3
 800bb2c:	f7fd ffb8 	bl	8009aa0 <__malloc_lock>
 800bb30:	4a1d      	ldr	r2, [pc, #116]	@ (800bba8 <_free_r+0x90>)
 800bb32:	6813      	ldr	r3, [r2, #0]
 800bb34:	b933      	cbnz	r3, 800bb44 <_free_r+0x2c>
 800bb36:	6063      	str	r3, [r4, #4]
 800bb38:	6014      	str	r4, [r2, #0]
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb40:	f7fd bfb4 	b.w	8009aac <__malloc_unlock>
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	d908      	bls.n	800bb5a <_free_r+0x42>
 800bb48:	6820      	ldr	r0, [r4, #0]
 800bb4a:	1821      	adds	r1, r4, r0
 800bb4c:	428b      	cmp	r3, r1
 800bb4e:	bf01      	itttt	eq
 800bb50:	6819      	ldreq	r1, [r3, #0]
 800bb52:	685b      	ldreq	r3, [r3, #4]
 800bb54:	1809      	addeq	r1, r1, r0
 800bb56:	6021      	streq	r1, [r4, #0]
 800bb58:	e7ed      	b.n	800bb36 <_free_r+0x1e>
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	b10b      	cbz	r3, 800bb64 <_free_r+0x4c>
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	d9fa      	bls.n	800bb5a <_free_r+0x42>
 800bb64:	6811      	ldr	r1, [r2, #0]
 800bb66:	1850      	adds	r0, r2, r1
 800bb68:	42a0      	cmp	r0, r4
 800bb6a:	d10b      	bne.n	800bb84 <_free_r+0x6c>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	4401      	add	r1, r0
 800bb70:	1850      	adds	r0, r2, r1
 800bb72:	4283      	cmp	r3, r0
 800bb74:	6011      	str	r1, [r2, #0]
 800bb76:	d1e0      	bne.n	800bb3a <_free_r+0x22>
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	6053      	str	r3, [r2, #4]
 800bb7e:	4408      	add	r0, r1
 800bb80:	6010      	str	r0, [r2, #0]
 800bb82:	e7da      	b.n	800bb3a <_free_r+0x22>
 800bb84:	d902      	bls.n	800bb8c <_free_r+0x74>
 800bb86:	230c      	movs	r3, #12
 800bb88:	602b      	str	r3, [r5, #0]
 800bb8a:	e7d6      	b.n	800bb3a <_free_r+0x22>
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	1821      	adds	r1, r4, r0
 800bb90:	428b      	cmp	r3, r1
 800bb92:	bf04      	itt	eq
 800bb94:	6819      	ldreq	r1, [r3, #0]
 800bb96:	685b      	ldreq	r3, [r3, #4]
 800bb98:	6063      	str	r3, [r4, #4]
 800bb9a:	bf04      	itt	eq
 800bb9c:	1809      	addeq	r1, r1, r0
 800bb9e:	6021      	streq	r1, [r4, #0]
 800bba0:	6054      	str	r4, [r2, #4]
 800bba2:	e7ca      	b.n	800bb3a <_free_r+0x22>
 800bba4:	bd38      	pop	{r3, r4, r5, pc}
 800bba6:	bf00      	nop
 800bba8:	20000b00 	.word	0x20000b00

0800bbac <_Balloc>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	69c6      	ldr	r6, [r0, #28]
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	b976      	cbnz	r6, 800bbd4 <_Balloc+0x28>
 800bbb6:	2010      	movs	r0, #16
 800bbb8:	f7fd fec0 	bl	800993c <malloc>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	61e0      	str	r0, [r4, #28]
 800bbc0:	b920      	cbnz	r0, 800bbcc <_Balloc+0x20>
 800bbc2:	4b18      	ldr	r3, [pc, #96]	@ (800bc24 <_Balloc+0x78>)
 800bbc4:	4818      	ldr	r0, [pc, #96]	@ (800bc28 <_Balloc+0x7c>)
 800bbc6:	216b      	movs	r1, #107	@ 0x6b
 800bbc8:	f001 fede 	bl	800d988 <__assert_func>
 800bbcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbd0:	6006      	str	r6, [r0, #0]
 800bbd2:	60c6      	str	r6, [r0, #12]
 800bbd4:	69e6      	ldr	r6, [r4, #28]
 800bbd6:	68f3      	ldr	r3, [r6, #12]
 800bbd8:	b183      	cbz	r3, 800bbfc <_Balloc+0x50>
 800bbda:	69e3      	ldr	r3, [r4, #28]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbe2:	b9b8      	cbnz	r0, 800bc14 <_Balloc+0x68>
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	fa01 f605 	lsl.w	r6, r1, r5
 800bbea:	1d72      	adds	r2, r6, #5
 800bbec:	0092      	lsls	r2, r2, #2
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f001 fee8 	bl	800d9c4 <_calloc_r>
 800bbf4:	b160      	cbz	r0, 800bc10 <_Balloc+0x64>
 800bbf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbfa:	e00e      	b.n	800bc1a <_Balloc+0x6e>
 800bbfc:	2221      	movs	r2, #33	@ 0x21
 800bbfe:	2104      	movs	r1, #4
 800bc00:	4620      	mov	r0, r4
 800bc02:	f001 fedf 	bl	800d9c4 <_calloc_r>
 800bc06:	69e3      	ldr	r3, [r4, #28]
 800bc08:	60f0      	str	r0, [r6, #12]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e4      	bne.n	800bbda <_Balloc+0x2e>
 800bc10:	2000      	movs	r0, #0
 800bc12:	bd70      	pop	{r4, r5, r6, pc}
 800bc14:	6802      	ldr	r2, [r0, #0]
 800bc16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc20:	e7f7      	b.n	800bc12 <_Balloc+0x66>
 800bc22:	bf00      	nop
 800bc24:	0800f6d7 	.word	0x0800f6d7
 800bc28:	0800f757 	.word	0x0800f757

0800bc2c <_Bfree>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	69c6      	ldr	r6, [r0, #28]
 800bc30:	4605      	mov	r5, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	b976      	cbnz	r6, 800bc54 <_Bfree+0x28>
 800bc36:	2010      	movs	r0, #16
 800bc38:	f7fd fe80 	bl	800993c <malloc>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	61e8      	str	r0, [r5, #28]
 800bc40:	b920      	cbnz	r0, 800bc4c <_Bfree+0x20>
 800bc42:	4b09      	ldr	r3, [pc, #36]	@ (800bc68 <_Bfree+0x3c>)
 800bc44:	4809      	ldr	r0, [pc, #36]	@ (800bc6c <_Bfree+0x40>)
 800bc46:	218f      	movs	r1, #143	@ 0x8f
 800bc48:	f001 fe9e 	bl	800d988 <__assert_func>
 800bc4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc50:	6006      	str	r6, [r0, #0]
 800bc52:	60c6      	str	r6, [r0, #12]
 800bc54:	b13c      	cbz	r4, 800bc66 <_Bfree+0x3a>
 800bc56:	69eb      	ldr	r3, [r5, #28]
 800bc58:	6862      	ldr	r2, [r4, #4]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc60:	6021      	str	r1, [r4, #0]
 800bc62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	0800f6d7 	.word	0x0800f6d7
 800bc6c:	0800f757 	.word	0x0800f757

0800bc70 <__multadd>:
 800bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc74:	690d      	ldr	r5, [r1, #16]
 800bc76:	4607      	mov	r7, r0
 800bc78:	460c      	mov	r4, r1
 800bc7a:	461e      	mov	r6, r3
 800bc7c:	f101 0c14 	add.w	ip, r1, #20
 800bc80:	2000      	movs	r0, #0
 800bc82:	f8dc 3000 	ldr.w	r3, [ip]
 800bc86:	b299      	uxth	r1, r3
 800bc88:	fb02 6101 	mla	r1, r2, r1, r6
 800bc8c:	0c1e      	lsrs	r6, r3, #16
 800bc8e:	0c0b      	lsrs	r3, r1, #16
 800bc90:	fb02 3306 	mla	r3, r2, r6, r3
 800bc94:	b289      	uxth	r1, r1
 800bc96:	3001      	adds	r0, #1
 800bc98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc9c:	4285      	cmp	r5, r0
 800bc9e:	f84c 1b04 	str.w	r1, [ip], #4
 800bca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bca6:	dcec      	bgt.n	800bc82 <__multadd+0x12>
 800bca8:	b30e      	cbz	r6, 800bcee <__multadd+0x7e>
 800bcaa:	68a3      	ldr	r3, [r4, #8]
 800bcac:	42ab      	cmp	r3, r5
 800bcae:	dc19      	bgt.n	800bce4 <__multadd+0x74>
 800bcb0:	6861      	ldr	r1, [r4, #4]
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	3101      	adds	r1, #1
 800bcb6:	f7ff ff79 	bl	800bbac <_Balloc>
 800bcba:	4680      	mov	r8, r0
 800bcbc:	b928      	cbnz	r0, 800bcca <__multadd+0x5a>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf4 <__multadd+0x84>)
 800bcc2:	480d      	ldr	r0, [pc, #52]	@ (800bcf8 <__multadd+0x88>)
 800bcc4:	21ba      	movs	r1, #186	@ 0xba
 800bcc6:	f001 fe5f 	bl	800d988 <__assert_func>
 800bcca:	6922      	ldr	r2, [r4, #16]
 800bccc:	3202      	adds	r2, #2
 800bcce:	f104 010c 	add.w	r1, r4, #12
 800bcd2:	0092      	lsls	r2, r2, #2
 800bcd4:	300c      	adds	r0, #12
 800bcd6:	f7ff f8be 	bl	800ae56 <memcpy>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff ffa5 	bl	800bc2c <_Bfree>
 800bce2:	4644      	mov	r4, r8
 800bce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bce8:	3501      	adds	r5, #1
 800bcea:	615e      	str	r6, [r3, #20]
 800bcec:	6125      	str	r5, [r4, #16]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf4:	0800f746 	.word	0x0800f746
 800bcf8:	0800f757 	.word	0x0800f757

0800bcfc <__s2b>:
 800bcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd00:	460c      	mov	r4, r1
 800bd02:	4615      	mov	r5, r2
 800bd04:	461f      	mov	r7, r3
 800bd06:	2209      	movs	r2, #9
 800bd08:	3308      	adds	r3, #8
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd10:	2100      	movs	r1, #0
 800bd12:	2201      	movs	r2, #1
 800bd14:	429a      	cmp	r2, r3
 800bd16:	db09      	blt.n	800bd2c <__s2b+0x30>
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f7ff ff47 	bl	800bbac <_Balloc>
 800bd1e:	b940      	cbnz	r0, 800bd32 <__s2b+0x36>
 800bd20:	4602      	mov	r2, r0
 800bd22:	4b19      	ldr	r3, [pc, #100]	@ (800bd88 <__s2b+0x8c>)
 800bd24:	4819      	ldr	r0, [pc, #100]	@ (800bd8c <__s2b+0x90>)
 800bd26:	21d3      	movs	r1, #211	@ 0xd3
 800bd28:	f001 fe2e 	bl	800d988 <__assert_func>
 800bd2c:	0052      	lsls	r2, r2, #1
 800bd2e:	3101      	adds	r1, #1
 800bd30:	e7f0      	b.n	800bd14 <__s2b+0x18>
 800bd32:	9b08      	ldr	r3, [sp, #32]
 800bd34:	6143      	str	r3, [r0, #20]
 800bd36:	2d09      	cmp	r5, #9
 800bd38:	f04f 0301 	mov.w	r3, #1
 800bd3c:	6103      	str	r3, [r0, #16]
 800bd3e:	dd16      	ble.n	800bd6e <__s2b+0x72>
 800bd40:	f104 0909 	add.w	r9, r4, #9
 800bd44:	46c8      	mov	r8, r9
 800bd46:	442c      	add	r4, r5
 800bd48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	3b30      	subs	r3, #48	@ 0x30
 800bd50:	220a      	movs	r2, #10
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ff8c 	bl	800bc70 <__multadd>
 800bd58:	45a0      	cmp	r8, r4
 800bd5a:	d1f5      	bne.n	800bd48 <__s2b+0x4c>
 800bd5c:	f1a5 0408 	sub.w	r4, r5, #8
 800bd60:	444c      	add	r4, r9
 800bd62:	1b2d      	subs	r5, r5, r4
 800bd64:	1963      	adds	r3, r4, r5
 800bd66:	42bb      	cmp	r3, r7
 800bd68:	db04      	blt.n	800bd74 <__s2b+0x78>
 800bd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6e:	340a      	adds	r4, #10
 800bd70:	2509      	movs	r5, #9
 800bd72:	e7f6      	b.n	800bd62 <__s2b+0x66>
 800bd74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd78:	4601      	mov	r1, r0
 800bd7a:	3b30      	subs	r3, #48	@ 0x30
 800bd7c:	220a      	movs	r2, #10
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff ff76 	bl	800bc70 <__multadd>
 800bd84:	e7ee      	b.n	800bd64 <__s2b+0x68>
 800bd86:	bf00      	nop
 800bd88:	0800f746 	.word	0x0800f746
 800bd8c:	0800f757 	.word	0x0800f757

0800bd90 <__hi0bits>:
 800bd90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd94:	4603      	mov	r3, r0
 800bd96:	bf36      	itet	cc
 800bd98:	0403      	lslcc	r3, r0, #16
 800bd9a:	2000      	movcs	r0, #0
 800bd9c:	2010      	movcc	r0, #16
 800bd9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bda2:	bf3c      	itt	cc
 800bda4:	021b      	lslcc	r3, r3, #8
 800bda6:	3008      	addcc	r0, #8
 800bda8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdac:	bf3c      	itt	cc
 800bdae:	011b      	lslcc	r3, r3, #4
 800bdb0:	3004      	addcc	r0, #4
 800bdb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdb6:	bf3c      	itt	cc
 800bdb8:	009b      	lslcc	r3, r3, #2
 800bdba:	3002      	addcc	r0, #2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	db05      	blt.n	800bdcc <__hi0bits+0x3c>
 800bdc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdc4:	f100 0001 	add.w	r0, r0, #1
 800bdc8:	bf08      	it	eq
 800bdca:	2020      	moveq	r0, #32
 800bdcc:	4770      	bx	lr

0800bdce <__lo0bits>:
 800bdce:	6803      	ldr	r3, [r0, #0]
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	f013 0007 	ands.w	r0, r3, #7
 800bdd6:	d00b      	beq.n	800bdf0 <__lo0bits+0x22>
 800bdd8:	07d9      	lsls	r1, r3, #31
 800bdda:	d421      	bmi.n	800be20 <__lo0bits+0x52>
 800bddc:	0798      	lsls	r0, r3, #30
 800bdde:	bf49      	itett	mi
 800bde0:	085b      	lsrmi	r3, r3, #1
 800bde2:	089b      	lsrpl	r3, r3, #2
 800bde4:	2001      	movmi	r0, #1
 800bde6:	6013      	strmi	r3, [r2, #0]
 800bde8:	bf5c      	itt	pl
 800bdea:	6013      	strpl	r3, [r2, #0]
 800bdec:	2002      	movpl	r0, #2
 800bdee:	4770      	bx	lr
 800bdf0:	b299      	uxth	r1, r3
 800bdf2:	b909      	cbnz	r1, 800bdf8 <__lo0bits+0x2a>
 800bdf4:	0c1b      	lsrs	r3, r3, #16
 800bdf6:	2010      	movs	r0, #16
 800bdf8:	b2d9      	uxtb	r1, r3
 800bdfa:	b909      	cbnz	r1, 800be00 <__lo0bits+0x32>
 800bdfc:	3008      	adds	r0, #8
 800bdfe:	0a1b      	lsrs	r3, r3, #8
 800be00:	0719      	lsls	r1, r3, #28
 800be02:	bf04      	itt	eq
 800be04:	091b      	lsreq	r3, r3, #4
 800be06:	3004      	addeq	r0, #4
 800be08:	0799      	lsls	r1, r3, #30
 800be0a:	bf04      	itt	eq
 800be0c:	089b      	lsreq	r3, r3, #2
 800be0e:	3002      	addeq	r0, #2
 800be10:	07d9      	lsls	r1, r3, #31
 800be12:	d403      	bmi.n	800be1c <__lo0bits+0x4e>
 800be14:	085b      	lsrs	r3, r3, #1
 800be16:	f100 0001 	add.w	r0, r0, #1
 800be1a:	d003      	beq.n	800be24 <__lo0bits+0x56>
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	4770      	bx	lr
 800be20:	2000      	movs	r0, #0
 800be22:	4770      	bx	lr
 800be24:	2020      	movs	r0, #32
 800be26:	4770      	bx	lr

0800be28 <__i2b>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	460c      	mov	r4, r1
 800be2c:	2101      	movs	r1, #1
 800be2e:	f7ff febd 	bl	800bbac <_Balloc>
 800be32:	4602      	mov	r2, r0
 800be34:	b928      	cbnz	r0, 800be42 <__i2b+0x1a>
 800be36:	4b05      	ldr	r3, [pc, #20]	@ (800be4c <__i2b+0x24>)
 800be38:	4805      	ldr	r0, [pc, #20]	@ (800be50 <__i2b+0x28>)
 800be3a:	f240 1145 	movw	r1, #325	@ 0x145
 800be3e:	f001 fda3 	bl	800d988 <__assert_func>
 800be42:	2301      	movs	r3, #1
 800be44:	6144      	str	r4, [r0, #20]
 800be46:	6103      	str	r3, [r0, #16]
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	0800f746 	.word	0x0800f746
 800be50:	0800f757 	.word	0x0800f757

0800be54 <__multiply>:
 800be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be58:	4614      	mov	r4, r2
 800be5a:	690a      	ldr	r2, [r1, #16]
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	429a      	cmp	r2, r3
 800be60:	bfa8      	it	ge
 800be62:	4623      	movge	r3, r4
 800be64:	460f      	mov	r7, r1
 800be66:	bfa4      	itt	ge
 800be68:	460c      	movge	r4, r1
 800be6a:	461f      	movge	r7, r3
 800be6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	6861      	ldr	r1, [r4, #4]
 800be78:	eb0a 0609 	add.w	r6, sl, r9
 800be7c:	42b3      	cmp	r3, r6
 800be7e:	b085      	sub	sp, #20
 800be80:	bfb8      	it	lt
 800be82:	3101      	addlt	r1, #1
 800be84:	f7ff fe92 	bl	800bbac <_Balloc>
 800be88:	b930      	cbnz	r0, 800be98 <__multiply+0x44>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b44      	ldr	r3, [pc, #272]	@ (800bfa0 <__multiply+0x14c>)
 800be8e:	4845      	ldr	r0, [pc, #276]	@ (800bfa4 <__multiply+0x150>)
 800be90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be94:	f001 fd78 	bl	800d988 <__assert_func>
 800be98:	f100 0514 	add.w	r5, r0, #20
 800be9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bea0:	462b      	mov	r3, r5
 800bea2:	2200      	movs	r2, #0
 800bea4:	4543      	cmp	r3, r8
 800bea6:	d321      	bcc.n	800beec <__multiply+0x98>
 800bea8:	f107 0114 	add.w	r1, r7, #20
 800beac:	f104 0214 	add.w	r2, r4, #20
 800beb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800beb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800beb8:	9302      	str	r3, [sp, #8]
 800beba:	1b13      	subs	r3, r2, r4
 800bebc:	3b15      	subs	r3, #21
 800bebe:	f023 0303 	bic.w	r3, r3, #3
 800bec2:	3304      	adds	r3, #4
 800bec4:	f104 0715 	add.w	r7, r4, #21
 800bec8:	42ba      	cmp	r2, r7
 800beca:	bf38      	it	cc
 800becc:	2304      	movcc	r3, #4
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	9b02      	ldr	r3, [sp, #8]
 800bed2:	9103      	str	r1, [sp, #12]
 800bed4:	428b      	cmp	r3, r1
 800bed6:	d80c      	bhi.n	800bef2 <__multiply+0x9e>
 800bed8:	2e00      	cmp	r6, #0
 800beda:	dd03      	ble.n	800bee4 <__multiply+0x90>
 800bedc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d05b      	beq.n	800bf9c <__multiply+0x148>
 800bee4:	6106      	str	r6, [r0, #16]
 800bee6:	b005      	add	sp, #20
 800bee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beec:	f843 2b04 	str.w	r2, [r3], #4
 800bef0:	e7d8      	b.n	800bea4 <__multiply+0x50>
 800bef2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bef6:	f1ba 0f00 	cmp.w	sl, #0
 800befa:	d024      	beq.n	800bf46 <__multiply+0xf2>
 800befc:	f104 0e14 	add.w	lr, r4, #20
 800bf00:	46a9      	mov	r9, r5
 800bf02:	f04f 0c00 	mov.w	ip, #0
 800bf06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf0a:	f8d9 3000 	ldr.w	r3, [r9]
 800bf0e:	fa1f fb87 	uxth.w	fp, r7
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bf1c:	f8d9 7000 	ldr.w	r7, [r9]
 800bf20:	4463      	add	r3, ip
 800bf22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf26:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf34:	4572      	cmp	r2, lr
 800bf36:	f849 3b04 	str.w	r3, [r9], #4
 800bf3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf3e:	d8e2      	bhi.n	800bf06 <__multiply+0xb2>
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	f845 c003 	str.w	ip, [r5, r3]
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf4c:	3104      	adds	r1, #4
 800bf4e:	f1b9 0f00 	cmp.w	r9, #0
 800bf52:	d021      	beq.n	800bf98 <__multiply+0x144>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	f104 0c14 	add.w	ip, r4, #20
 800bf5a:	46ae      	mov	lr, r5
 800bf5c:	f04f 0a00 	mov.w	sl, #0
 800bf60:	f8bc b000 	ldrh.w	fp, [ip]
 800bf64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf68:	fb09 770b 	mla	r7, r9, fp, r7
 800bf6c:	4457      	add	r7, sl
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf74:	f84e 3b04 	str.w	r3, [lr], #4
 800bf78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf80:	f8be 3000 	ldrh.w	r3, [lr]
 800bf84:	fb09 330a 	mla	r3, r9, sl, r3
 800bf88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf8c:	4562      	cmp	r2, ip
 800bf8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf92:	d8e5      	bhi.n	800bf60 <__multiply+0x10c>
 800bf94:	9f01      	ldr	r7, [sp, #4]
 800bf96:	51eb      	str	r3, [r5, r7]
 800bf98:	3504      	adds	r5, #4
 800bf9a:	e799      	b.n	800bed0 <__multiply+0x7c>
 800bf9c:	3e01      	subs	r6, #1
 800bf9e:	e79b      	b.n	800bed8 <__multiply+0x84>
 800bfa0:	0800f746 	.word	0x0800f746
 800bfa4:	0800f757 	.word	0x0800f757

0800bfa8 <__pow5mult>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	4615      	mov	r5, r2
 800bfae:	f012 0203 	ands.w	r2, r2, #3
 800bfb2:	4607      	mov	r7, r0
 800bfb4:	460e      	mov	r6, r1
 800bfb6:	d007      	beq.n	800bfc8 <__pow5mult+0x20>
 800bfb8:	4c25      	ldr	r4, [pc, #148]	@ (800c050 <__pow5mult+0xa8>)
 800bfba:	3a01      	subs	r2, #1
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfc2:	f7ff fe55 	bl	800bc70 <__multadd>
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	10ad      	asrs	r5, r5, #2
 800bfca:	d03d      	beq.n	800c048 <__pow5mult+0xa0>
 800bfcc:	69fc      	ldr	r4, [r7, #28]
 800bfce:	b97c      	cbnz	r4, 800bff0 <__pow5mult+0x48>
 800bfd0:	2010      	movs	r0, #16
 800bfd2:	f7fd fcb3 	bl	800993c <malloc>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	61f8      	str	r0, [r7, #28]
 800bfda:	b928      	cbnz	r0, 800bfe8 <__pow5mult+0x40>
 800bfdc:	4b1d      	ldr	r3, [pc, #116]	@ (800c054 <__pow5mult+0xac>)
 800bfde:	481e      	ldr	r0, [pc, #120]	@ (800c058 <__pow5mult+0xb0>)
 800bfe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfe4:	f001 fcd0 	bl	800d988 <__assert_func>
 800bfe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfec:	6004      	str	r4, [r0, #0]
 800bfee:	60c4      	str	r4, [r0, #12]
 800bff0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bff8:	b94c      	cbnz	r4, 800c00e <__pow5mult+0x66>
 800bffa:	f240 2171 	movw	r1, #625	@ 0x271
 800bffe:	4638      	mov	r0, r7
 800c000:	f7ff ff12 	bl	800be28 <__i2b>
 800c004:	2300      	movs	r3, #0
 800c006:	f8c8 0008 	str.w	r0, [r8, #8]
 800c00a:	4604      	mov	r4, r0
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	f04f 0900 	mov.w	r9, #0
 800c012:	07eb      	lsls	r3, r5, #31
 800c014:	d50a      	bpl.n	800c02c <__pow5mult+0x84>
 800c016:	4631      	mov	r1, r6
 800c018:	4622      	mov	r2, r4
 800c01a:	4638      	mov	r0, r7
 800c01c:	f7ff ff1a 	bl	800be54 <__multiply>
 800c020:	4631      	mov	r1, r6
 800c022:	4680      	mov	r8, r0
 800c024:	4638      	mov	r0, r7
 800c026:	f7ff fe01 	bl	800bc2c <_Bfree>
 800c02a:	4646      	mov	r6, r8
 800c02c:	106d      	asrs	r5, r5, #1
 800c02e:	d00b      	beq.n	800c048 <__pow5mult+0xa0>
 800c030:	6820      	ldr	r0, [r4, #0]
 800c032:	b938      	cbnz	r0, 800c044 <__pow5mult+0x9c>
 800c034:	4622      	mov	r2, r4
 800c036:	4621      	mov	r1, r4
 800c038:	4638      	mov	r0, r7
 800c03a:	f7ff ff0b 	bl	800be54 <__multiply>
 800c03e:	6020      	str	r0, [r4, #0]
 800c040:	f8c0 9000 	str.w	r9, [r0]
 800c044:	4604      	mov	r4, r0
 800c046:	e7e4      	b.n	800c012 <__pow5mult+0x6a>
 800c048:	4630      	mov	r0, r6
 800c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04e:	bf00      	nop
 800c050:	0800f7b0 	.word	0x0800f7b0
 800c054:	0800f6d7 	.word	0x0800f6d7
 800c058:	0800f757 	.word	0x0800f757

0800c05c <__lshift>:
 800c05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c060:	460c      	mov	r4, r1
 800c062:	6849      	ldr	r1, [r1, #4]
 800c064:	6923      	ldr	r3, [r4, #16]
 800c066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	4607      	mov	r7, r0
 800c06e:	4691      	mov	r9, r2
 800c070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c074:	f108 0601 	add.w	r6, r8, #1
 800c078:	42b3      	cmp	r3, r6
 800c07a:	db0b      	blt.n	800c094 <__lshift+0x38>
 800c07c:	4638      	mov	r0, r7
 800c07e:	f7ff fd95 	bl	800bbac <_Balloc>
 800c082:	4605      	mov	r5, r0
 800c084:	b948      	cbnz	r0, 800c09a <__lshift+0x3e>
 800c086:	4602      	mov	r2, r0
 800c088:	4b28      	ldr	r3, [pc, #160]	@ (800c12c <__lshift+0xd0>)
 800c08a:	4829      	ldr	r0, [pc, #164]	@ (800c130 <__lshift+0xd4>)
 800c08c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c090:	f001 fc7a 	bl	800d988 <__assert_func>
 800c094:	3101      	adds	r1, #1
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	e7ee      	b.n	800c078 <__lshift+0x1c>
 800c09a:	2300      	movs	r3, #0
 800c09c:	f100 0114 	add.w	r1, r0, #20
 800c0a0:	f100 0210 	add.w	r2, r0, #16
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	4553      	cmp	r3, sl
 800c0a8:	db33      	blt.n	800c112 <__lshift+0xb6>
 800c0aa:	6920      	ldr	r0, [r4, #16]
 800c0ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0b0:	f104 0314 	add.w	r3, r4, #20
 800c0b4:	f019 091f 	ands.w	r9, r9, #31
 800c0b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0c0:	d02b      	beq.n	800c11a <__lshift+0xbe>
 800c0c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0c6:	468a      	mov	sl, r1
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c0d0:	4310      	orrs	r0, r2
 800c0d2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0da:	459c      	cmp	ip, r3
 800c0dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0e0:	d8f3      	bhi.n	800c0ca <__lshift+0x6e>
 800c0e2:	ebac 0304 	sub.w	r3, ip, r4
 800c0e6:	3b15      	subs	r3, #21
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	f104 0015 	add.w	r0, r4, #21
 800c0f2:	4584      	cmp	ip, r0
 800c0f4:	bf38      	it	cc
 800c0f6:	2304      	movcc	r3, #4
 800c0f8:	50ca      	str	r2, [r1, r3]
 800c0fa:	b10a      	cbz	r2, 800c100 <__lshift+0xa4>
 800c0fc:	f108 0602 	add.w	r6, r8, #2
 800c100:	3e01      	subs	r6, #1
 800c102:	4638      	mov	r0, r7
 800c104:	612e      	str	r6, [r5, #16]
 800c106:	4621      	mov	r1, r4
 800c108:	f7ff fd90 	bl	800bc2c <_Bfree>
 800c10c:	4628      	mov	r0, r5
 800c10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c112:	f842 0f04 	str.w	r0, [r2, #4]!
 800c116:	3301      	adds	r3, #1
 800c118:	e7c5      	b.n	800c0a6 <__lshift+0x4a>
 800c11a:	3904      	subs	r1, #4
 800c11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c120:	f841 2f04 	str.w	r2, [r1, #4]!
 800c124:	459c      	cmp	ip, r3
 800c126:	d8f9      	bhi.n	800c11c <__lshift+0xc0>
 800c128:	e7ea      	b.n	800c100 <__lshift+0xa4>
 800c12a:	bf00      	nop
 800c12c:	0800f746 	.word	0x0800f746
 800c130:	0800f757 	.word	0x0800f757

0800c134 <__mcmp>:
 800c134:	690a      	ldr	r2, [r1, #16]
 800c136:	4603      	mov	r3, r0
 800c138:	6900      	ldr	r0, [r0, #16]
 800c13a:	1a80      	subs	r0, r0, r2
 800c13c:	b530      	push	{r4, r5, lr}
 800c13e:	d10e      	bne.n	800c15e <__mcmp+0x2a>
 800c140:	3314      	adds	r3, #20
 800c142:	3114      	adds	r1, #20
 800c144:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c148:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c14c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c150:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c154:	4295      	cmp	r5, r2
 800c156:	d003      	beq.n	800c160 <__mcmp+0x2c>
 800c158:	d205      	bcs.n	800c166 <__mcmp+0x32>
 800c15a:	f04f 30ff 	mov.w	r0, #4294967295
 800c15e:	bd30      	pop	{r4, r5, pc}
 800c160:	42a3      	cmp	r3, r4
 800c162:	d3f3      	bcc.n	800c14c <__mcmp+0x18>
 800c164:	e7fb      	b.n	800c15e <__mcmp+0x2a>
 800c166:	2001      	movs	r0, #1
 800c168:	e7f9      	b.n	800c15e <__mcmp+0x2a>
	...

0800c16c <__mdiff>:
 800c16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	4689      	mov	r9, r1
 800c172:	4606      	mov	r6, r0
 800c174:	4611      	mov	r1, r2
 800c176:	4648      	mov	r0, r9
 800c178:	4614      	mov	r4, r2
 800c17a:	f7ff ffdb 	bl	800c134 <__mcmp>
 800c17e:	1e05      	subs	r5, r0, #0
 800c180:	d112      	bne.n	800c1a8 <__mdiff+0x3c>
 800c182:	4629      	mov	r1, r5
 800c184:	4630      	mov	r0, r6
 800c186:	f7ff fd11 	bl	800bbac <_Balloc>
 800c18a:	4602      	mov	r2, r0
 800c18c:	b928      	cbnz	r0, 800c19a <__mdiff+0x2e>
 800c18e:	4b3f      	ldr	r3, [pc, #252]	@ (800c28c <__mdiff+0x120>)
 800c190:	f240 2137 	movw	r1, #567	@ 0x237
 800c194:	483e      	ldr	r0, [pc, #248]	@ (800c290 <__mdiff+0x124>)
 800c196:	f001 fbf7 	bl	800d988 <__assert_func>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	b003      	add	sp, #12
 800c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	bfbc      	itt	lt
 800c1aa:	464b      	movlt	r3, r9
 800c1ac:	46a1      	movlt	r9, r4
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1b4:	bfba      	itte	lt
 800c1b6:	461c      	movlt	r4, r3
 800c1b8:	2501      	movlt	r5, #1
 800c1ba:	2500      	movge	r5, #0
 800c1bc:	f7ff fcf6 	bl	800bbac <_Balloc>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	b918      	cbnz	r0, 800c1cc <__mdiff+0x60>
 800c1c4:	4b31      	ldr	r3, [pc, #196]	@ (800c28c <__mdiff+0x120>)
 800c1c6:	f240 2145 	movw	r1, #581	@ 0x245
 800c1ca:	e7e3      	b.n	800c194 <__mdiff+0x28>
 800c1cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c1d0:	6926      	ldr	r6, [r4, #16]
 800c1d2:	60c5      	str	r5, [r0, #12]
 800c1d4:	f109 0310 	add.w	r3, r9, #16
 800c1d8:	f109 0514 	add.w	r5, r9, #20
 800c1dc:	f104 0e14 	add.w	lr, r4, #20
 800c1e0:	f100 0b14 	add.w	fp, r0, #20
 800c1e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	46d9      	mov	r9, fp
 800c1f0:	f04f 0c00 	mov.w	ip, #0
 800c1f4:	9b01      	ldr	r3, [sp, #4]
 800c1f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	fa1f f38a 	uxth.w	r3, sl
 800c204:	4619      	mov	r1, r3
 800c206:	b283      	uxth	r3, r0
 800c208:	1acb      	subs	r3, r1, r3
 800c20a:	0c00      	lsrs	r0, r0, #16
 800c20c:	4463      	add	r3, ip
 800c20e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c212:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c216:	b29b      	uxth	r3, r3
 800c218:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c21c:	4576      	cmp	r6, lr
 800c21e:	f849 3b04 	str.w	r3, [r9], #4
 800c222:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c226:	d8e5      	bhi.n	800c1f4 <__mdiff+0x88>
 800c228:	1b33      	subs	r3, r6, r4
 800c22a:	3b15      	subs	r3, #21
 800c22c:	f023 0303 	bic.w	r3, r3, #3
 800c230:	3415      	adds	r4, #21
 800c232:	3304      	adds	r3, #4
 800c234:	42a6      	cmp	r6, r4
 800c236:	bf38      	it	cc
 800c238:	2304      	movcc	r3, #4
 800c23a:	441d      	add	r5, r3
 800c23c:	445b      	add	r3, fp
 800c23e:	461e      	mov	r6, r3
 800c240:	462c      	mov	r4, r5
 800c242:	4544      	cmp	r4, r8
 800c244:	d30e      	bcc.n	800c264 <__mdiff+0xf8>
 800c246:	f108 0103 	add.w	r1, r8, #3
 800c24a:	1b49      	subs	r1, r1, r5
 800c24c:	f021 0103 	bic.w	r1, r1, #3
 800c250:	3d03      	subs	r5, #3
 800c252:	45a8      	cmp	r8, r5
 800c254:	bf38      	it	cc
 800c256:	2100      	movcc	r1, #0
 800c258:	440b      	add	r3, r1
 800c25a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c25e:	b191      	cbz	r1, 800c286 <__mdiff+0x11a>
 800c260:	6117      	str	r7, [r2, #16]
 800c262:	e79d      	b.n	800c1a0 <__mdiff+0x34>
 800c264:	f854 1b04 	ldr.w	r1, [r4], #4
 800c268:	46e6      	mov	lr, ip
 800c26a:	0c08      	lsrs	r0, r1, #16
 800c26c:	fa1c fc81 	uxtah	ip, ip, r1
 800c270:	4471      	add	r1, lr
 800c272:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c276:	b289      	uxth	r1, r1
 800c278:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c27c:	f846 1b04 	str.w	r1, [r6], #4
 800c280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c284:	e7dd      	b.n	800c242 <__mdiff+0xd6>
 800c286:	3f01      	subs	r7, #1
 800c288:	e7e7      	b.n	800c25a <__mdiff+0xee>
 800c28a:	bf00      	nop
 800c28c:	0800f746 	.word	0x0800f746
 800c290:	0800f757 	.word	0x0800f757

0800c294 <__ulp>:
 800c294:	b082      	sub	sp, #8
 800c296:	ed8d 0b00 	vstr	d0, [sp]
 800c29a:	9a01      	ldr	r2, [sp, #4]
 800c29c:	4b0f      	ldr	r3, [pc, #60]	@ (800c2dc <__ulp+0x48>)
 800c29e:	4013      	ands	r3, r2
 800c2a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	dc08      	bgt.n	800c2ba <__ulp+0x26>
 800c2a8:	425b      	negs	r3, r3
 800c2aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c2ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c2b2:	da04      	bge.n	800c2be <__ulp+0x2a>
 800c2b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c2b8:	4113      	asrs	r3, r2
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	e008      	b.n	800c2d0 <__ulp+0x3c>
 800c2be:	f1a2 0314 	sub.w	r3, r2, #20
 800c2c2:	2b1e      	cmp	r3, #30
 800c2c4:	bfda      	itte	le
 800c2c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c2ca:	40da      	lsrle	r2, r3
 800c2cc:	2201      	movgt	r2, #1
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4610      	mov	r0, r2
 800c2d4:	ec41 0b10 	vmov	d0, r0, r1
 800c2d8:	b002      	add	sp, #8
 800c2da:	4770      	bx	lr
 800c2dc:	7ff00000 	.word	0x7ff00000

0800c2e0 <__b2d>:
 800c2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e4:	6906      	ldr	r6, [r0, #16]
 800c2e6:	f100 0814 	add.w	r8, r0, #20
 800c2ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c2ee:	1f37      	subs	r7, r6, #4
 800c2f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	f7ff fd4b 	bl	800bd90 <__hi0bits>
 800c2fa:	f1c0 0320 	rsb	r3, r0, #32
 800c2fe:	280a      	cmp	r0, #10
 800c300:	600b      	str	r3, [r1, #0]
 800c302:	491b      	ldr	r1, [pc, #108]	@ (800c370 <__b2d+0x90>)
 800c304:	dc15      	bgt.n	800c332 <__b2d+0x52>
 800c306:	f1c0 0c0b 	rsb	ip, r0, #11
 800c30a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c30e:	45b8      	cmp	r8, r7
 800c310:	ea43 0501 	orr.w	r5, r3, r1
 800c314:	bf34      	ite	cc
 800c316:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c31a:	2300      	movcs	r3, #0
 800c31c:	3015      	adds	r0, #21
 800c31e:	fa02 f000 	lsl.w	r0, r2, r0
 800c322:	fa23 f30c 	lsr.w	r3, r3, ip
 800c326:	4303      	orrs	r3, r0
 800c328:	461c      	mov	r4, r3
 800c32a:	ec45 4b10 	vmov	d0, r4, r5
 800c32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c332:	45b8      	cmp	r8, r7
 800c334:	bf3a      	itte	cc
 800c336:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c33a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c33e:	2300      	movcs	r3, #0
 800c340:	380b      	subs	r0, #11
 800c342:	d012      	beq.n	800c36a <__b2d+0x8a>
 800c344:	f1c0 0120 	rsb	r1, r0, #32
 800c348:	fa23 f401 	lsr.w	r4, r3, r1
 800c34c:	4082      	lsls	r2, r0
 800c34e:	4322      	orrs	r2, r4
 800c350:	4547      	cmp	r7, r8
 800c352:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c356:	bf8c      	ite	hi
 800c358:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c35c:	2200      	movls	r2, #0
 800c35e:	4083      	lsls	r3, r0
 800c360:	40ca      	lsrs	r2, r1
 800c362:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c366:	4313      	orrs	r3, r2
 800c368:	e7de      	b.n	800c328 <__b2d+0x48>
 800c36a:	ea42 0501 	orr.w	r5, r2, r1
 800c36e:	e7db      	b.n	800c328 <__b2d+0x48>
 800c370:	3ff00000 	.word	0x3ff00000

0800c374 <__d2b>:
 800c374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c378:	460f      	mov	r7, r1
 800c37a:	2101      	movs	r1, #1
 800c37c:	ec59 8b10 	vmov	r8, r9, d0
 800c380:	4616      	mov	r6, r2
 800c382:	f7ff fc13 	bl	800bbac <_Balloc>
 800c386:	4604      	mov	r4, r0
 800c388:	b930      	cbnz	r0, 800c398 <__d2b+0x24>
 800c38a:	4602      	mov	r2, r0
 800c38c:	4b23      	ldr	r3, [pc, #140]	@ (800c41c <__d2b+0xa8>)
 800c38e:	4824      	ldr	r0, [pc, #144]	@ (800c420 <__d2b+0xac>)
 800c390:	f240 310f 	movw	r1, #783	@ 0x30f
 800c394:	f001 faf8 	bl	800d988 <__assert_func>
 800c398:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c39c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3a0:	b10d      	cbz	r5, 800c3a6 <__d2b+0x32>
 800c3a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c3ac:	d023      	beq.n	800c3f6 <__d2b+0x82>
 800c3ae:	4668      	mov	r0, sp
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	f7ff fd0c 	bl	800bdce <__lo0bits>
 800c3b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3ba:	b1d0      	cbz	r0, 800c3f2 <__d2b+0x7e>
 800c3bc:	f1c0 0320 	rsb	r3, r0, #32
 800c3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c4:	430b      	orrs	r3, r1
 800c3c6:	40c2      	lsrs	r2, r0
 800c3c8:	6163      	str	r3, [r4, #20]
 800c3ca:	9201      	str	r2, [sp, #4]
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	61a3      	str	r3, [r4, #24]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2201      	moveq	r2, #1
 800c3d6:	2202      	movne	r2, #2
 800c3d8:	6122      	str	r2, [r4, #16]
 800c3da:	b1a5      	cbz	r5, 800c406 <__d2b+0x92>
 800c3dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3e0:	4405      	add	r5, r0
 800c3e2:	603d      	str	r5, [r7, #0]
 800c3e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3e8:	6030      	str	r0, [r6, #0]
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	b003      	add	sp, #12
 800c3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f2:	6161      	str	r1, [r4, #20]
 800c3f4:	e7ea      	b.n	800c3cc <__d2b+0x58>
 800c3f6:	a801      	add	r0, sp, #4
 800c3f8:	f7ff fce9 	bl	800bdce <__lo0bits>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	6163      	str	r3, [r4, #20]
 800c400:	3020      	adds	r0, #32
 800c402:	2201      	movs	r2, #1
 800c404:	e7e8      	b.n	800c3d8 <__d2b+0x64>
 800c406:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c40a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c40e:	6038      	str	r0, [r7, #0]
 800c410:	6918      	ldr	r0, [r3, #16]
 800c412:	f7ff fcbd 	bl	800bd90 <__hi0bits>
 800c416:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c41a:	e7e5      	b.n	800c3e8 <__d2b+0x74>
 800c41c:	0800f746 	.word	0x0800f746
 800c420:	0800f757 	.word	0x0800f757

0800c424 <__ratio>:
 800c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	b085      	sub	sp, #20
 800c42a:	e9cd 1000 	strd	r1, r0, [sp]
 800c42e:	a902      	add	r1, sp, #8
 800c430:	f7ff ff56 	bl	800c2e0 <__b2d>
 800c434:	9800      	ldr	r0, [sp, #0]
 800c436:	a903      	add	r1, sp, #12
 800c438:	ec55 4b10 	vmov	r4, r5, d0
 800c43c:	f7ff ff50 	bl	800c2e0 <__b2d>
 800c440:	9b01      	ldr	r3, [sp, #4]
 800c442:	6919      	ldr	r1, [r3, #16]
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	1ac9      	subs	r1, r1, r3
 800c44a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	ec5b ab10 	vmov	sl, fp, d0
 800c454:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c458:	2b00      	cmp	r3, #0
 800c45a:	bfce      	itee	gt
 800c45c:	462a      	movgt	r2, r5
 800c45e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c462:	465a      	movle	r2, fp
 800c464:	462f      	mov	r7, r5
 800c466:	46d9      	mov	r9, fp
 800c468:	bfcc      	ite	gt
 800c46a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c46e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c472:	464b      	mov	r3, r9
 800c474:	4652      	mov	r2, sl
 800c476:	4620      	mov	r0, r4
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 fa07 	bl	800088c <__aeabi_ddiv>
 800c47e:	ec41 0b10 	vmov	d0, r0, r1
 800c482:	b005      	add	sp, #20
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c488 <__copybits>:
 800c488:	3901      	subs	r1, #1
 800c48a:	b570      	push	{r4, r5, r6, lr}
 800c48c:	1149      	asrs	r1, r1, #5
 800c48e:	6914      	ldr	r4, [r2, #16]
 800c490:	3101      	adds	r1, #1
 800c492:	f102 0314 	add.w	r3, r2, #20
 800c496:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c49a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c49e:	1f05      	subs	r5, r0, #4
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	d30c      	bcc.n	800c4be <__copybits+0x36>
 800c4a4:	1aa3      	subs	r3, r4, r2
 800c4a6:	3b11      	subs	r3, #17
 800c4a8:	f023 0303 	bic.w	r3, r3, #3
 800c4ac:	3211      	adds	r2, #17
 800c4ae:	42a2      	cmp	r2, r4
 800c4b0:	bf88      	it	hi
 800c4b2:	2300      	movhi	r3, #0
 800c4b4:	4418      	add	r0, r3
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	4288      	cmp	r0, r1
 800c4ba:	d305      	bcc.n	800c4c8 <__copybits+0x40>
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
 800c4be:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4c2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4c6:	e7eb      	b.n	800c4a0 <__copybits+0x18>
 800c4c8:	f840 3b04 	str.w	r3, [r0], #4
 800c4cc:	e7f4      	b.n	800c4b8 <__copybits+0x30>

0800c4ce <__any_on>:
 800c4ce:	f100 0214 	add.w	r2, r0, #20
 800c4d2:	6900      	ldr	r0, [r0, #16]
 800c4d4:	114b      	asrs	r3, r1, #5
 800c4d6:	4298      	cmp	r0, r3
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	db11      	blt.n	800c500 <__any_on+0x32>
 800c4dc:	dd0a      	ble.n	800c4f4 <__any_on+0x26>
 800c4de:	f011 011f 	ands.w	r1, r1, #31
 800c4e2:	d007      	beq.n	800c4f4 <__any_on+0x26>
 800c4e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c4e8:	fa24 f001 	lsr.w	r0, r4, r1
 800c4ec:	fa00 f101 	lsl.w	r1, r0, r1
 800c4f0:	428c      	cmp	r4, r1
 800c4f2:	d10b      	bne.n	800c50c <__any_on+0x3e>
 800c4f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d803      	bhi.n	800c504 <__any_on+0x36>
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	bd10      	pop	{r4, pc}
 800c500:	4603      	mov	r3, r0
 800c502:	e7f7      	b.n	800c4f4 <__any_on+0x26>
 800c504:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c508:	2900      	cmp	r1, #0
 800c50a:	d0f5      	beq.n	800c4f8 <__any_on+0x2a>
 800c50c:	2001      	movs	r0, #1
 800c50e:	e7f6      	b.n	800c4fe <__any_on+0x30>

0800c510 <sulp>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	4604      	mov	r4, r0
 800c514:	460d      	mov	r5, r1
 800c516:	ec45 4b10 	vmov	d0, r4, r5
 800c51a:	4616      	mov	r6, r2
 800c51c:	f7ff feba 	bl	800c294 <__ulp>
 800c520:	ec51 0b10 	vmov	r0, r1, d0
 800c524:	b17e      	cbz	r6, 800c546 <sulp+0x36>
 800c526:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c52a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c52e:	2b00      	cmp	r3, #0
 800c530:	dd09      	ble.n	800c546 <sulp+0x36>
 800c532:	051b      	lsls	r3, r3, #20
 800c534:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c538:	2400      	movs	r4, #0
 800c53a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c53e:	4622      	mov	r2, r4
 800c540:	462b      	mov	r3, r5
 800c542:	f7f4 f879 	bl	8000638 <__aeabi_dmul>
 800c546:	ec41 0b10 	vmov	d0, r0, r1
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	0000      	movs	r0, r0
	...

0800c550 <_strtod_l>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	b09f      	sub	sp, #124	@ 0x7c
 800c556:	460c      	mov	r4, r1
 800c558:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c55a:	2200      	movs	r2, #0
 800c55c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c55e:	9005      	str	r0, [sp, #20]
 800c560:	f04f 0a00 	mov.w	sl, #0
 800c564:	f04f 0b00 	mov.w	fp, #0
 800c568:	460a      	mov	r2, r1
 800c56a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c56c:	7811      	ldrb	r1, [r2, #0]
 800c56e:	292b      	cmp	r1, #43	@ 0x2b
 800c570:	d04a      	beq.n	800c608 <_strtod_l+0xb8>
 800c572:	d838      	bhi.n	800c5e6 <_strtod_l+0x96>
 800c574:	290d      	cmp	r1, #13
 800c576:	d832      	bhi.n	800c5de <_strtod_l+0x8e>
 800c578:	2908      	cmp	r1, #8
 800c57a:	d832      	bhi.n	800c5e2 <_strtod_l+0x92>
 800c57c:	2900      	cmp	r1, #0
 800c57e:	d03b      	beq.n	800c5f8 <_strtod_l+0xa8>
 800c580:	2200      	movs	r2, #0
 800c582:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c584:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c586:	782a      	ldrb	r2, [r5, #0]
 800c588:	2a30      	cmp	r2, #48	@ 0x30
 800c58a:	f040 80b3 	bne.w	800c6f4 <_strtod_l+0x1a4>
 800c58e:	786a      	ldrb	r2, [r5, #1]
 800c590:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c594:	2a58      	cmp	r2, #88	@ 0x58
 800c596:	d16e      	bne.n	800c676 <_strtod_l+0x126>
 800c598:	9302      	str	r3, [sp, #8]
 800c59a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	4a8e      	ldr	r2, [pc, #568]	@ (800c7dc <_strtod_l+0x28c>)
 800c5a4:	9805      	ldr	r0, [sp, #20]
 800c5a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c5a8:	a919      	add	r1, sp, #100	@ 0x64
 800c5aa:	f001 fa87 	bl	800dabc <__gethex>
 800c5ae:	f010 060f 	ands.w	r6, r0, #15
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	d005      	beq.n	800c5c2 <_strtod_l+0x72>
 800c5b6:	2e06      	cmp	r6, #6
 800c5b8:	d128      	bne.n	800c60c <_strtod_l+0xbc>
 800c5ba:	3501      	adds	r5, #1
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9519      	str	r5, [sp, #100]	@ 0x64
 800c5c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f040 858e 	bne.w	800d0e6 <_strtod_l+0xb96>
 800c5ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5cc:	b1cb      	cbz	r3, 800c602 <_strtod_l+0xb2>
 800c5ce:	4652      	mov	r2, sl
 800c5d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c5d4:	ec43 2b10 	vmov	d0, r2, r3
 800c5d8:	b01f      	add	sp, #124	@ 0x7c
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	2920      	cmp	r1, #32
 800c5e0:	d1ce      	bne.n	800c580 <_strtod_l+0x30>
 800c5e2:	3201      	adds	r2, #1
 800c5e4:	e7c1      	b.n	800c56a <_strtod_l+0x1a>
 800c5e6:	292d      	cmp	r1, #45	@ 0x2d
 800c5e8:	d1ca      	bne.n	800c580 <_strtod_l+0x30>
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c5ee:	1c51      	adds	r1, r2, #1
 800c5f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c5f2:	7852      	ldrb	r2, [r2, #1]
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	d1c5      	bne.n	800c584 <_strtod_l+0x34>
 800c5f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c5fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f040 8570 	bne.w	800d0e2 <_strtod_l+0xb92>
 800c602:	4652      	mov	r2, sl
 800c604:	465b      	mov	r3, fp
 800c606:	e7e5      	b.n	800c5d4 <_strtod_l+0x84>
 800c608:	2100      	movs	r1, #0
 800c60a:	e7ef      	b.n	800c5ec <_strtod_l+0x9c>
 800c60c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c60e:	b13a      	cbz	r2, 800c620 <_strtod_l+0xd0>
 800c610:	2135      	movs	r1, #53	@ 0x35
 800c612:	a81c      	add	r0, sp, #112	@ 0x70
 800c614:	f7ff ff38 	bl	800c488 <__copybits>
 800c618:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c61a:	9805      	ldr	r0, [sp, #20]
 800c61c:	f7ff fb06 	bl	800bc2c <_Bfree>
 800c620:	3e01      	subs	r6, #1
 800c622:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c624:	2e04      	cmp	r6, #4
 800c626:	d806      	bhi.n	800c636 <_strtod_l+0xe6>
 800c628:	e8df f006 	tbb	[pc, r6]
 800c62c:	201d0314 	.word	0x201d0314
 800c630:	14          	.byte	0x14
 800c631:	00          	.byte	0x00
 800c632:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c636:	05e1      	lsls	r1, r4, #23
 800c638:	bf48      	it	mi
 800c63a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c63e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c642:	0d1b      	lsrs	r3, r3, #20
 800c644:	051b      	lsls	r3, r3, #20
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1bb      	bne.n	800c5c2 <_strtod_l+0x72>
 800c64a:	f7fe fbcf 	bl	800adec <__errno>
 800c64e:	2322      	movs	r3, #34	@ 0x22
 800c650:	6003      	str	r3, [r0, #0]
 800c652:	e7b6      	b.n	800c5c2 <_strtod_l+0x72>
 800c654:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c658:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c65c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c660:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c664:	e7e7      	b.n	800c636 <_strtod_l+0xe6>
 800c666:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c7e4 <_strtod_l+0x294>
 800c66a:	e7e4      	b.n	800c636 <_strtod_l+0xe6>
 800c66c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c670:	f04f 3aff 	mov.w	sl, #4294967295
 800c674:	e7df      	b.n	800c636 <_strtod_l+0xe6>
 800c676:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	2b30      	cmp	r3, #48	@ 0x30
 800c680:	d0f9      	beq.n	800c676 <_strtod_l+0x126>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d09d      	beq.n	800c5c2 <_strtod_l+0x72>
 800c686:	2301      	movs	r3, #1
 800c688:	9309      	str	r3, [sp, #36]	@ 0x24
 800c68a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c68c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c68e:	2300      	movs	r3, #0
 800c690:	9308      	str	r3, [sp, #32]
 800c692:	930a      	str	r3, [sp, #40]	@ 0x28
 800c694:	461f      	mov	r7, r3
 800c696:	220a      	movs	r2, #10
 800c698:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c69a:	7805      	ldrb	r5, [r0, #0]
 800c69c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c6a0:	b2d9      	uxtb	r1, r3
 800c6a2:	2909      	cmp	r1, #9
 800c6a4:	d928      	bls.n	800c6f8 <_strtod_l+0x1a8>
 800c6a6:	494e      	ldr	r1, [pc, #312]	@ (800c7e0 <_strtod_l+0x290>)
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f001 f931 	bl	800d910 <strncmp>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d032      	beq.n	800c718 <_strtod_l+0x1c8>
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	462a      	mov	r2, r5
 800c6b6:	4681      	mov	r9, r0
 800c6b8:	463d      	mov	r5, r7
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2a65      	cmp	r2, #101	@ 0x65
 800c6be:	d001      	beq.n	800c6c4 <_strtod_l+0x174>
 800c6c0:	2a45      	cmp	r2, #69	@ 0x45
 800c6c2:	d114      	bne.n	800c6ee <_strtod_l+0x19e>
 800c6c4:	b91d      	cbnz	r5, 800c6ce <_strtod_l+0x17e>
 800c6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6c8:	4302      	orrs	r2, r0
 800c6ca:	d095      	beq.n	800c5f8 <_strtod_l+0xa8>
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c6d0:	1c62      	adds	r2, r4, #1
 800c6d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6d4:	7862      	ldrb	r2, [r4, #1]
 800c6d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c6d8:	d077      	beq.n	800c7ca <_strtod_l+0x27a>
 800c6da:	2a2d      	cmp	r2, #45	@ 0x2d
 800c6dc:	d07b      	beq.n	800c7d6 <_strtod_l+0x286>
 800c6de:	f04f 0c00 	mov.w	ip, #0
 800c6e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c6e6:	2909      	cmp	r1, #9
 800c6e8:	f240 8082 	bls.w	800c7f0 <_strtod_l+0x2a0>
 800c6ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	e0a2      	b.n	800c83a <_strtod_l+0x2ea>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e7c7      	b.n	800c688 <_strtod_l+0x138>
 800c6f8:	2f08      	cmp	r7, #8
 800c6fa:	bfd5      	itete	le
 800c6fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c6fe:	9908      	ldrgt	r1, [sp, #32]
 800c700:	fb02 3301 	mlale	r3, r2, r1, r3
 800c704:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c708:	f100 0001 	add.w	r0, r0, #1
 800c70c:	bfd4      	ite	le
 800c70e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c710:	9308      	strgt	r3, [sp, #32]
 800c712:	3701      	adds	r7, #1
 800c714:	9019      	str	r0, [sp, #100]	@ 0x64
 800c716:	e7bf      	b.n	800c698 <_strtod_l+0x148>
 800c718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c71e:	785a      	ldrb	r2, [r3, #1]
 800c720:	b37f      	cbz	r7, 800c782 <_strtod_l+0x232>
 800c722:	4681      	mov	r9, r0
 800c724:	463d      	mov	r5, r7
 800c726:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c72a:	2b09      	cmp	r3, #9
 800c72c:	d912      	bls.n	800c754 <_strtod_l+0x204>
 800c72e:	2301      	movs	r3, #1
 800c730:	e7c4      	b.n	800c6bc <_strtod_l+0x16c>
 800c732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c734:	1c5a      	adds	r2, r3, #1
 800c736:	9219      	str	r2, [sp, #100]	@ 0x64
 800c738:	785a      	ldrb	r2, [r3, #1]
 800c73a:	3001      	adds	r0, #1
 800c73c:	2a30      	cmp	r2, #48	@ 0x30
 800c73e:	d0f8      	beq.n	800c732 <_strtod_l+0x1e2>
 800c740:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c744:	2b08      	cmp	r3, #8
 800c746:	f200 84d3 	bhi.w	800d0f0 <_strtod_l+0xba0>
 800c74a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c74c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c74e:	4681      	mov	r9, r0
 800c750:	2000      	movs	r0, #0
 800c752:	4605      	mov	r5, r0
 800c754:	3a30      	subs	r2, #48	@ 0x30
 800c756:	f100 0301 	add.w	r3, r0, #1
 800c75a:	d02a      	beq.n	800c7b2 <_strtod_l+0x262>
 800c75c:	4499      	add	r9, r3
 800c75e:	eb00 0c05 	add.w	ip, r0, r5
 800c762:	462b      	mov	r3, r5
 800c764:	210a      	movs	r1, #10
 800c766:	4563      	cmp	r3, ip
 800c768:	d10d      	bne.n	800c786 <_strtod_l+0x236>
 800c76a:	1c69      	adds	r1, r5, #1
 800c76c:	4401      	add	r1, r0
 800c76e:	4428      	add	r0, r5
 800c770:	2808      	cmp	r0, #8
 800c772:	dc16      	bgt.n	800c7a2 <_strtod_l+0x252>
 800c774:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c776:	230a      	movs	r3, #10
 800c778:	fb03 2300 	mla	r3, r3, r0, r2
 800c77c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c77e:	2300      	movs	r3, #0
 800c780:	e018      	b.n	800c7b4 <_strtod_l+0x264>
 800c782:	4638      	mov	r0, r7
 800c784:	e7da      	b.n	800c73c <_strtod_l+0x1ec>
 800c786:	2b08      	cmp	r3, #8
 800c788:	f103 0301 	add.w	r3, r3, #1
 800c78c:	dc03      	bgt.n	800c796 <_strtod_l+0x246>
 800c78e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c790:	434e      	muls	r6, r1
 800c792:	960a      	str	r6, [sp, #40]	@ 0x28
 800c794:	e7e7      	b.n	800c766 <_strtod_l+0x216>
 800c796:	2b10      	cmp	r3, #16
 800c798:	bfde      	ittt	le
 800c79a:	9e08      	ldrle	r6, [sp, #32]
 800c79c:	434e      	mulle	r6, r1
 800c79e:	9608      	strle	r6, [sp, #32]
 800c7a0:	e7e1      	b.n	800c766 <_strtod_l+0x216>
 800c7a2:	280f      	cmp	r0, #15
 800c7a4:	dceb      	bgt.n	800c77e <_strtod_l+0x22e>
 800c7a6:	9808      	ldr	r0, [sp, #32]
 800c7a8:	230a      	movs	r3, #10
 800c7aa:	fb03 2300 	mla	r3, r3, r0, r2
 800c7ae:	9308      	str	r3, [sp, #32]
 800c7b0:	e7e5      	b.n	800c77e <_strtod_l+0x22e>
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c7b6:	1c50      	adds	r0, r2, #1
 800c7b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800c7ba:	7852      	ldrb	r2, [r2, #1]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	460d      	mov	r5, r1
 800c7c0:	e7b1      	b.n	800c726 <_strtod_l+0x1d6>
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e77d      	b.n	800c6c6 <_strtod_l+0x176>
 800c7ca:	f04f 0c00 	mov.w	ip, #0
 800c7ce:	1ca2      	adds	r2, r4, #2
 800c7d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7d2:	78a2      	ldrb	r2, [r4, #2]
 800c7d4:	e785      	b.n	800c6e2 <_strtod_l+0x192>
 800c7d6:	f04f 0c01 	mov.w	ip, #1
 800c7da:	e7f8      	b.n	800c7ce <_strtod_l+0x27e>
 800c7dc:	0800f8c8 	.word	0x0800f8c8
 800c7e0:	0800f8b0 	.word	0x0800f8b0
 800c7e4:	7ff00000 	.word	0x7ff00000
 800c7e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c7ea:	1c51      	adds	r1, r2, #1
 800c7ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800c7ee:	7852      	ldrb	r2, [r2, #1]
 800c7f0:	2a30      	cmp	r2, #48	@ 0x30
 800c7f2:	d0f9      	beq.n	800c7e8 <_strtod_l+0x298>
 800c7f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c7f8:	2908      	cmp	r1, #8
 800c7fa:	f63f af78 	bhi.w	800c6ee <_strtod_l+0x19e>
 800c7fe:	3a30      	subs	r2, #48	@ 0x30
 800c800:	920e      	str	r2, [sp, #56]	@ 0x38
 800c802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c804:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c806:	f04f 080a 	mov.w	r8, #10
 800c80a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c80c:	1c56      	adds	r6, r2, #1
 800c80e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c810:	7852      	ldrb	r2, [r2, #1]
 800c812:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c816:	f1be 0f09 	cmp.w	lr, #9
 800c81a:	d939      	bls.n	800c890 <_strtod_l+0x340>
 800c81c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c81e:	1a76      	subs	r6, r6, r1
 800c820:	2e08      	cmp	r6, #8
 800c822:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c826:	dc03      	bgt.n	800c830 <_strtod_l+0x2e0>
 800c828:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c82a:	4588      	cmp	r8, r1
 800c82c:	bfa8      	it	ge
 800c82e:	4688      	movge	r8, r1
 800c830:	f1bc 0f00 	cmp.w	ip, #0
 800c834:	d001      	beq.n	800c83a <_strtod_l+0x2ea>
 800c836:	f1c8 0800 	rsb	r8, r8, #0
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	d14e      	bne.n	800c8dc <_strtod_l+0x38c>
 800c83e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c840:	4308      	orrs	r0, r1
 800c842:	f47f aebe 	bne.w	800c5c2 <_strtod_l+0x72>
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f aed6 	bne.w	800c5f8 <_strtod_l+0xa8>
 800c84c:	2a69      	cmp	r2, #105	@ 0x69
 800c84e:	d028      	beq.n	800c8a2 <_strtod_l+0x352>
 800c850:	dc25      	bgt.n	800c89e <_strtod_l+0x34e>
 800c852:	2a49      	cmp	r2, #73	@ 0x49
 800c854:	d025      	beq.n	800c8a2 <_strtod_l+0x352>
 800c856:	2a4e      	cmp	r2, #78	@ 0x4e
 800c858:	f47f aece 	bne.w	800c5f8 <_strtod_l+0xa8>
 800c85c:	499b      	ldr	r1, [pc, #620]	@ (800cacc <_strtod_l+0x57c>)
 800c85e:	a819      	add	r0, sp, #100	@ 0x64
 800c860:	f001 fb4e 	bl	800df00 <__match>
 800c864:	2800      	cmp	r0, #0
 800c866:	f43f aec7 	beq.w	800c5f8 <_strtod_l+0xa8>
 800c86a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b28      	cmp	r3, #40	@ 0x28
 800c870:	d12e      	bne.n	800c8d0 <_strtod_l+0x380>
 800c872:	4997      	ldr	r1, [pc, #604]	@ (800cad0 <_strtod_l+0x580>)
 800c874:	aa1c      	add	r2, sp, #112	@ 0x70
 800c876:	a819      	add	r0, sp, #100	@ 0x64
 800c878:	f001 fb56 	bl	800df28 <__hexnan>
 800c87c:	2805      	cmp	r0, #5
 800c87e:	d127      	bne.n	800c8d0 <_strtod_l+0x380>
 800c880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c882:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c886:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c88a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c88e:	e698      	b.n	800c5c2 <_strtod_l+0x72>
 800c890:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c892:	fb08 2101 	mla	r1, r8, r1, r2
 800c896:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c89a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c89c:	e7b5      	b.n	800c80a <_strtod_l+0x2ba>
 800c89e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c8a0:	e7da      	b.n	800c858 <_strtod_l+0x308>
 800c8a2:	498c      	ldr	r1, [pc, #560]	@ (800cad4 <_strtod_l+0x584>)
 800c8a4:	a819      	add	r0, sp, #100	@ 0x64
 800c8a6:	f001 fb2b 	bl	800df00 <__match>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	f43f aea4 	beq.w	800c5f8 <_strtod_l+0xa8>
 800c8b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8b2:	4989      	ldr	r1, [pc, #548]	@ (800cad8 <_strtod_l+0x588>)
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	a819      	add	r0, sp, #100	@ 0x64
 800c8b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c8ba:	f001 fb21 	bl	800df00 <__match>
 800c8be:	b910      	cbnz	r0, 800c8c6 <_strtod_l+0x376>
 800c8c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c8c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cae8 <_strtod_l+0x598>
 800c8ca:	f04f 0a00 	mov.w	sl, #0
 800c8ce:	e678      	b.n	800c5c2 <_strtod_l+0x72>
 800c8d0:	4882      	ldr	r0, [pc, #520]	@ (800cadc <_strtod_l+0x58c>)
 800c8d2:	f001 f851 	bl	800d978 <nan>
 800c8d6:	ec5b ab10 	vmov	sl, fp, d0
 800c8da:	e672      	b.n	800c5c2 <_strtod_l+0x72>
 800c8dc:	eba8 0309 	sub.w	r3, r8, r9
 800c8e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c8e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8e4:	2f00      	cmp	r7, #0
 800c8e6:	bf08      	it	eq
 800c8e8:	462f      	moveq	r7, r5
 800c8ea:	2d10      	cmp	r5, #16
 800c8ec:	462c      	mov	r4, r5
 800c8ee:	bfa8      	it	ge
 800c8f0:	2410      	movge	r4, #16
 800c8f2:	f7f3 fe27 	bl	8000544 <__aeabi_ui2d>
 800c8f6:	2d09      	cmp	r5, #9
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	468b      	mov	fp, r1
 800c8fc:	dc13      	bgt.n	800c926 <_strtod_l+0x3d6>
 800c8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	f43f ae5e 	beq.w	800c5c2 <_strtod_l+0x72>
 800c906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c908:	dd78      	ble.n	800c9fc <_strtod_l+0x4ac>
 800c90a:	2b16      	cmp	r3, #22
 800c90c:	dc5f      	bgt.n	800c9ce <_strtod_l+0x47e>
 800c90e:	4974      	ldr	r1, [pc, #464]	@ (800cae0 <_strtod_l+0x590>)
 800c910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c914:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c918:	4652      	mov	r2, sl
 800c91a:	465b      	mov	r3, fp
 800c91c:	f7f3 fe8c 	bl	8000638 <__aeabi_dmul>
 800c920:	4682      	mov	sl, r0
 800c922:	468b      	mov	fp, r1
 800c924:	e64d      	b.n	800c5c2 <_strtod_l+0x72>
 800c926:	4b6e      	ldr	r3, [pc, #440]	@ (800cae0 <_strtod_l+0x590>)
 800c928:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c92c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c930:	f7f3 fe82 	bl	8000638 <__aeabi_dmul>
 800c934:	4682      	mov	sl, r0
 800c936:	9808      	ldr	r0, [sp, #32]
 800c938:	468b      	mov	fp, r1
 800c93a:	f7f3 fe03 	bl	8000544 <__aeabi_ui2d>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4650      	mov	r0, sl
 800c944:	4659      	mov	r1, fp
 800c946:	f7f3 fcc1 	bl	80002cc <__adddf3>
 800c94a:	2d0f      	cmp	r5, #15
 800c94c:	4682      	mov	sl, r0
 800c94e:	468b      	mov	fp, r1
 800c950:	ddd5      	ble.n	800c8fe <_strtod_l+0x3ae>
 800c952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c954:	1b2c      	subs	r4, r5, r4
 800c956:	441c      	add	r4, r3
 800c958:	2c00      	cmp	r4, #0
 800c95a:	f340 8096 	ble.w	800ca8a <_strtod_l+0x53a>
 800c95e:	f014 030f 	ands.w	r3, r4, #15
 800c962:	d00a      	beq.n	800c97a <_strtod_l+0x42a>
 800c964:	495e      	ldr	r1, [pc, #376]	@ (800cae0 <_strtod_l+0x590>)
 800c966:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c96a:	4652      	mov	r2, sl
 800c96c:	465b      	mov	r3, fp
 800c96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c972:	f7f3 fe61 	bl	8000638 <__aeabi_dmul>
 800c976:	4682      	mov	sl, r0
 800c978:	468b      	mov	fp, r1
 800c97a:	f034 040f 	bics.w	r4, r4, #15
 800c97e:	d073      	beq.n	800ca68 <_strtod_l+0x518>
 800c980:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c984:	dd48      	ble.n	800ca18 <_strtod_l+0x4c8>
 800c986:	2400      	movs	r4, #0
 800c988:	46a0      	mov	r8, r4
 800c98a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c98c:	46a1      	mov	r9, r4
 800c98e:	9a05      	ldr	r2, [sp, #20]
 800c990:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cae8 <_strtod_l+0x598>
 800c994:	2322      	movs	r3, #34	@ 0x22
 800c996:	6013      	str	r3, [r2, #0]
 800c998:	f04f 0a00 	mov.w	sl, #0
 800c99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f43f ae0f 	beq.w	800c5c2 <_strtod_l+0x72>
 800c9a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9a6:	9805      	ldr	r0, [sp, #20]
 800c9a8:	f7ff f940 	bl	800bc2c <_Bfree>
 800c9ac:	9805      	ldr	r0, [sp, #20]
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	f7ff f93c 	bl	800bc2c <_Bfree>
 800c9b4:	9805      	ldr	r0, [sp, #20]
 800c9b6:	4641      	mov	r1, r8
 800c9b8:	f7ff f938 	bl	800bc2c <_Bfree>
 800c9bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c9be:	9805      	ldr	r0, [sp, #20]
 800c9c0:	f7ff f934 	bl	800bc2c <_Bfree>
 800c9c4:	9805      	ldr	r0, [sp, #20]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	f7ff f930 	bl	800bc2c <_Bfree>
 800c9cc:	e5f9      	b.n	800c5c2 <_strtod_l+0x72>
 800c9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	dbbc      	blt.n	800c952 <_strtod_l+0x402>
 800c9d8:	4c41      	ldr	r4, [pc, #260]	@ (800cae0 <_strtod_l+0x590>)
 800c9da:	f1c5 050f 	rsb	r5, r5, #15
 800c9de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c9e2:	4652      	mov	r2, sl
 800c9e4:	465b      	mov	r3, fp
 800c9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ea:	f7f3 fe25 	bl	8000638 <__aeabi_dmul>
 800c9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f0:	1b5d      	subs	r5, r3, r5
 800c9f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c9f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c9fa:	e78f      	b.n	800c91c <_strtod_l+0x3cc>
 800c9fc:	3316      	adds	r3, #22
 800c9fe:	dba8      	blt.n	800c952 <_strtod_l+0x402>
 800ca00:	4b37      	ldr	r3, [pc, #220]	@ (800cae0 <_strtod_l+0x590>)
 800ca02:	eba9 0808 	sub.w	r8, r9, r8
 800ca06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ca0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ca0e:	4650      	mov	r0, sl
 800ca10:	4659      	mov	r1, fp
 800ca12:	f7f3 ff3b 	bl	800088c <__aeabi_ddiv>
 800ca16:	e783      	b.n	800c920 <_strtod_l+0x3d0>
 800ca18:	4b32      	ldr	r3, [pc, #200]	@ (800cae4 <_strtod_l+0x594>)
 800ca1a:	9308      	str	r3, [sp, #32]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	1124      	asrs	r4, r4, #4
 800ca20:	4650      	mov	r0, sl
 800ca22:	4659      	mov	r1, fp
 800ca24:	461e      	mov	r6, r3
 800ca26:	2c01      	cmp	r4, #1
 800ca28:	dc21      	bgt.n	800ca6e <_strtod_l+0x51e>
 800ca2a:	b10b      	cbz	r3, 800ca30 <_strtod_l+0x4e0>
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	468b      	mov	fp, r1
 800ca30:	492c      	ldr	r1, [pc, #176]	@ (800cae4 <_strtod_l+0x594>)
 800ca32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ca36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca42:	f7f3 fdf9 	bl	8000638 <__aeabi_dmul>
 800ca46:	4b28      	ldr	r3, [pc, #160]	@ (800cae8 <_strtod_l+0x598>)
 800ca48:	460a      	mov	r2, r1
 800ca4a:	400b      	ands	r3, r1
 800ca4c:	4927      	ldr	r1, [pc, #156]	@ (800caec <_strtod_l+0x59c>)
 800ca4e:	428b      	cmp	r3, r1
 800ca50:	4682      	mov	sl, r0
 800ca52:	d898      	bhi.n	800c986 <_strtod_l+0x436>
 800ca54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ca58:	428b      	cmp	r3, r1
 800ca5a:	bf86      	itte	hi
 800ca5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800caf0 <_strtod_l+0x5a0>
 800ca60:	f04f 3aff 	movhi.w	sl, #4294967295
 800ca64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ca68:	2300      	movs	r3, #0
 800ca6a:	9308      	str	r3, [sp, #32]
 800ca6c:	e07a      	b.n	800cb64 <_strtod_l+0x614>
 800ca6e:	07e2      	lsls	r2, r4, #31
 800ca70:	d505      	bpl.n	800ca7e <_strtod_l+0x52e>
 800ca72:	9b08      	ldr	r3, [sp, #32]
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	f7f3 fdde 	bl	8000638 <__aeabi_dmul>
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	9a08      	ldr	r2, [sp, #32]
 800ca80:	3208      	adds	r2, #8
 800ca82:	3601      	adds	r6, #1
 800ca84:	1064      	asrs	r4, r4, #1
 800ca86:	9208      	str	r2, [sp, #32]
 800ca88:	e7cd      	b.n	800ca26 <_strtod_l+0x4d6>
 800ca8a:	d0ed      	beq.n	800ca68 <_strtod_l+0x518>
 800ca8c:	4264      	negs	r4, r4
 800ca8e:	f014 020f 	ands.w	r2, r4, #15
 800ca92:	d00a      	beq.n	800caaa <_strtod_l+0x55a>
 800ca94:	4b12      	ldr	r3, [pc, #72]	@ (800cae0 <_strtod_l+0x590>)
 800ca96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	4659      	mov	r1, fp
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f7f3 fef3 	bl	800088c <__aeabi_ddiv>
 800caa6:	4682      	mov	sl, r0
 800caa8:	468b      	mov	fp, r1
 800caaa:	1124      	asrs	r4, r4, #4
 800caac:	d0dc      	beq.n	800ca68 <_strtod_l+0x518>
 800caae:	2c1f      	cmp	r4, #31
 800cab0:	dd20      	ble.n	800caf4 <_strtod_l+0x5a4>
 800cab2:	2400      	movs	r4, #0
 800cab4:	46a0      	mov	r8, r4
 800cab6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cab8:	46a1      	mov	r9, r4
 800caba:	9a05      	ldr	r2, [sp, #20]
 800cabc:	2322      	movs	r3, #34	@ 0x22
 800cabe:	f04f 0a00 	mov.w	sl, #0
 800cac2:	f04f 0b00 	mov.w	fp, #0
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	e768      	b.n	800c99c <_strtod_l+0x44c>
 800caca:	bf00      	nop
 800cacc:	0800f69e 	.word	0x0800f69e
 800cad0:	0800f8b4 	.word	0x0800f8b4
 800cad4:	0800f696 	.word	0x0800f696
 800cad8:	0800f6cd 	.word	0x0800f6cd
 800cadc:	0800f95c 	.word	0x0800f95c
 800cae0:	0800f7e8 	.word	0x0800f7e8
 800cae4:	0800f7c0 	.word	0x0800f7c0
 800cae8:	7ff00000 	.word	0x7ff00000
 800caec:	7ca00000 	.word	0x7ca00000
 800caf0:	7fefffff 	.word	0x7fefffff
 800caf4:	f014 0310 	ands.w	r3, r4, #16
 800caf8:	bf18      	it	ne
 800cafa:	236a      	movne	r3, #106	@ 0x6a
 800cafc:	4ea9      	ldr	r6, [pc, #676]	@ (800cda4 <_strtod_l+0x854>)
 800cafe:	9308      	str	r3, [sp, #32]
 800cb00:	4650      	mov	r0, sl
 800cb02:	4659      	mov	r1, fp
 800cb04:	2300      	movs	r3, #0
 800cb06:	07e2      	lsls	r2, r4, #31
 800cb08:	d504      	bpl.n	800cb14 <_strtod_l+0x5c4>
 800cb0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb0e:	f7f3 fd93 	bl	8000638 <__aeabi_dmul>
 800cb12:	2301      	movs	r3, #1
 800cb14:	1064      	asrs	r4, r4, #1
 800cb16:	f106 0608 	add.w	r6, r6, #8
 800cb1a:	d1f4      	bne.n	800cb06 <_strtod_l+0x5b6>
 800cb1c:	b10b      	cbz	r3, 800cb22 <_strtod_l+0x5d2>
 800cb1e:	4682      	mov	sl, r0
 800cb20:	468b      	mov	fp, r1
 800cb22:	9b08      	ldr	r3, [sp, #32]
 800cb24:	b1b3      	cbz	r3, 800cb54 <_strtod_l+0x604>
 800cb26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cb2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	4659      	mov	r1, fp
 800cb32:	dd0f      	ble.n	800cb54 <_strtod_l+0x604>
 800cb34:	2b1f      	cmp	r3, #31
 800cb36:	dd55      	ble.n	800cbe4 <_strtod_l+0x694>
 800cb38:	2b34      	cmp	r3, #52	@ 0x34
 800cb3a:	bfde      	ittt	le
 800cb3c:	f04f 33ff 	movle.w	r3, #4294967295
 800cb40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cb44:	4093      	lslle	r3, r2
 800cb46:	f04f 0a00 	mov.w	sl, #0
 800cb4a:	bfcc      	ite	gt
 800cb4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cb50:	ea03 0b01 	andle.w	fp, r3, r1
 800cb54:	2200      	movs	r2, #0
 800cb56:	2300      	movs	r3, #0
 800cb58:	4650      	mov	r0, sl
 800cb5a:	4659      	mov	r1, fp
 800cb5c:	f7f3 ffd4 	bl	8000b08 <__aeabi_dcmpeq>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d1a6      	bne.n	800cab2 <_strtod_l+0x562>
 800cb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cb6a:	9805      	ldr	r0, [sp, #20]
 800cb6c:	462b      	mov	r3, r5
 800cb6e:	463a      	mov	r2, r7
 800cb70:	f7ff f8c4 	bl	800bcfc <__s2b>
 800cb74:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb76:	2800      	cmp	r0, #0
 800cb78:	f43f af05 	beq.w	800c986 <_strtod_l+0x436>
 800cb7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb7e:	2a00      	cmp	r2, #0
 800cb80:	eba9 0308 	sub.w	r3, r9, r8
 800cb84:	bfa8      	it	ge
 800cb86:	2300      	movge	r3, #0
 800cb88:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb8a:	2400      	movs	r4, #0
 800cb8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb90:	9316      	str	r3, [sp, #88]	@ 0x58
 800cb92:	46a0      	mov	r8, r4
 800cb94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb96:	9805      	ldr	r0, [sp, #20]
 800cb98:	6859      	ldr	r1, [r3, #4]
 800cb9a:	f7ff f807 	bl	800bbac <_Balloc>
 800cb9e:	4681      	mov	r9, r0
 800cba0:	2800      	cmp	r0, #0
 800cba2:	f43f aef4 	beq.w	800c98e <_strtod_l+0x43e>
 800cba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cba8:	691a      	ldr	r2, [r3, #16]
 800cbaa:	3202      	adds	r2, #2
 800cbac:	f103 010c 	add.w	r1, r3, #12
 800cbb0:	0092      	lsls	r2, r2, #2
 800cbb2:	300c      	adds	r0, #12
 800cbb4:	f7fe f94f 	bl	800ae56 <memcpy>
 800cbb8:	ec4b ab10 	vmov	d0, sl, fp
 800cbbc:	9805      	ldr	r0, [sp, #20]
 800cbbe:	aa1c      	add	r2, sp, #112	@ 0x70
 800cbc0:	a91b      	add	r1, sp, #108	@ 0x6c
 800cbc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cbc6:	f7ff fbd5 	bl	800c374 <__d2b>
 800cbca:	901a      	str	r0, [sp, #104]	@ 0x68
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f43f aede 	beq.w	800c98e <_strtod_l+0x43e>
 800cbd2:	9805      	ldr	r0, [sp, #20]
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	f7ff f927 	bl	800be28 <__i2b>
 800cbda:	4680      	mov	r8, r0
 800cbdc:	b948      	cbnz	r0, 800cbf2 <_strtod_l+0x6a2>
 800cbde:	f04f 0800 	mov.w	r8, #0
 800cbe2:	e6d4      	b.n	800c98e <_strtod_l+0x43e>
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbec:	ea03 0a0a 	and.w	sl, r3, sl
 800cbf0:	e7b0      	b.n	800cb54 <_strtod_l+0x604>
 800cbf2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cbf4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	bfab      	itete	ge
 800cbfa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cbfc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cbfe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cc00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cc02:	bfac      	ite	ge
 800cc04:	18ef      	addge	r7, r5, r3
 800cc06:	1b5e      	sublt	r6, r3, r5
 800cc08:	9b08      	ldr	r3, [sp, #32]
 800cc0a:	1aed      	subs	r5, r5, r3
 800cc0c:	4415      	add	r5, r2
 800cc0e:	4b66      	ldr	r3, [pc, #408]	@ (800cda8 <_strtod_l+0x858>)
 800cc10:	3d01      	subs	r5, #1
 800cc12:	429d      	cmp	r5, r3
 800cc14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cc18:	da50      	bge.n	800ccbc <_strtod_l+0x76c>
 800cc1a:	1b5b      	subs	r3, r3, r5
 800cc1c:	2b1f      	cmp	r3, #31
 800cc1e:	eba2 0203 	sub.w	r2, r2, r3
 800cc22:	f04f 0101 	mov.w	r1, #1
 800cc26:	dc3d      	bgt.n	800cca4 <_strtod_l+0x754>
 800cc28:	fa01 f303 	lsl.w	r3, r1, r3
 800cc2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc2e:	2300      	movs	r3, #0
 800cc30:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc32:	18bd      	adds	r5, r7, r2
 800cc34:	9b08      	ldr	r3, [sp, #32]
 800cc36:	42af      	cmp	r7, r5
 800cc38:	4416      	add	r6, r2
 800cc3a:	441e      	add	r6, r3
 800cc3c:	463b      	mov	r3, r7
 800cc3e:	bfa8      	it	ge
 800cc40:	462b      	movge	r3, r5
 800cc42:	42b3      	cmp	r3, r6
 800cc44:	bfa8      	it	ge
 800cc46:	4633      	movge	r3, r6
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bfc2      	ittt	gt
 800cc4c:	1aed      	subgt	r5, r5, r3
 800cc4e:	1af6      	subgt	r6, r6, r3
 800cc50:	1aff      	subgt	r7, r7, r3
 800cc52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	dd16      	ble.n	800cc86 <_strtod_l+0x736>
 800cc58:	4641      	mov	r1, r8
 800cc5a:	9805      	ldr	r0, [sp, #20]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	f7ff f9a3 	bl	800bfa8 <__pow5mult>
 800cc62:	4680      	mov	r8, r0
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d0ba      	beq.n	800cbde <_strtod_l+0x68e>
 800cc68:	4601      	mov	r1, r0
 800cc6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cc6c:	9805      	ldr	r0, [sp, #20]
 800cc6e:	f7ff f8f1 	bl	800be54 <__multiply>
 800cc72:	900e      	str	r0, [sp, #56]	@ 0x38
 800cc74:	2800      	cmp	r0, #0
 800cc76:	f43f ae8a 	beq.w	800c98e <_strtod_l+0x43e>
 800cc7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc7c:	9805      	ldr	r0, [sp, #20]
 800cc7e:	f7fe ffd5 	bl	800bc2c <_Bfree>
 800cc82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc84:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	dc1d      	bgt.n	800ccc6 <_strtod_l+0x776>
 800cc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dd23      	ble.n	800ccd8 <_strtod_l+0x788>
 800cc90:	4649      	mov	r1, r9
 800cc92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cc94:	9805      	ldr	r0, [sp, #20]
 800cc96:	f7ff f987 	bl	800bfa8 <__pow5mult>
 800cc9a:	4681      	mov	r9, r0
 800cc9c:	b9e0      	cbnz	r0, 800ccd8 <_strtod_l+0x788>
 800cc9e:	f04f 0900 	mov.w	r9, #0
 800cca2:	e674      	b.n	800c98e <_strtod_l+0x43e>
 800cca4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cca8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ccac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ccb0:	35e2      	adds	r5, #226	@ 0xe2
 800ccb2:	fa01 f305 	lsl.w	r3, r1, r5
 800ccb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ccba:	e7ba      	b.n	800cc32 <_strtod_l+0x6e2>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccc4:	e7b5      	b.n	800cc32 <_strtod_l+0x6e2>
 800ccc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccc8:	9805      	ldr	r0, [sp, #20]
 800ccca:	462a      	mov	r2, r5
 800cccc:	f7ff f9c6 	bl	800c05c <__lshift>
 800ccd0:	901a      	str	r0, [sp, #104]	@ 0x68
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d1d9      	bne.n	800cc8a <_strtod_l+0x73a>
 800ccd6:	e65a      	b.n	800c98e <_strtod_l+0x43e>
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	dd07      	ble.n	800ccec <_strtod_l+0x79c>
 800ccdc:	4649      	mov	r1, r9
 800ccde:	9805      	ldr	r0, [sp, #20]
 800cce0:	4632      	mov	r2, r6
 800cce2:	f7ff f9bb 	bl	800c05c <__lshift>
 800cce6:	4681      	mov	r9, r0
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d0d8      	beq.n	800cc9e <_strtod_l+0x74e>
 800ccec:	2f00      	cmp	r7, #0
 800ccee:	dd08      	ble.n	800cd02 <_strtod_l+0x7b2>
 800ccf0:	4641      	mov	r1, r8
 800ccf2:	9805      	ldr	r0, [sp, #20]
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	f7ff f9b1 	bl	800c05c <__lshift>
 800ccfa:	4680      	mov	r8, r0
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	f43f ae46 	beq.w	800c98e <_strtod_l+0x43e>
 800cd02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd04:	9805      	ldr	r0, [sp, #20]
 800cd06:	464a      	mov	r2, r9
 800cd08:	f7ff fa30 	bl	800c16c <__mdiff>
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f43f ae3d 	beq.w	800c98e <_strtod_l+0x43e>
 800cd14:	68c3      	ldr	r3, [r0, #12]
 800cd16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60c3      	str	r3, [r0, #12]
 800cd1c:	4641      	mov	r1, r8
 800cd1e:	f7ff fa09 	bl	800c134 <__mcmp>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	da46      	bge.n	800cdb4 <_strtod_l+0x864>
 800cd26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd28:	ea53 030a 	orrs.w	r3, r3, sl
 800cd2c:	d16c      	bne.n	800ce08 <_strtod_l+0x8b8>
 800cd2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d168      	bne.n	800ce08 <_strtod_l+0x8b8>
 800cd36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd3a:	0d1b      	lsrs	r3, r3, #20
 800cd3c:	051b      	lsls	r3, r3, #20
 800cd3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd42:	d961      	bls.n	800ce08 <_strtod_l+0x8b8>
 800cd44:	6963      	ldr	r3, [r4, #20]
 800cd46:	b913      	cbnz	r3, 800cd4e <_strtod_l+0x7fe>
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	dd5c      	ble.n	800ce08 <_strtod_l+0x8b8>
 800cd4e:	4621      	mov	r1, r4
 800cd50:	2201      	movs	r2, #1
 800cd52:	9805      	ldr	r0, [sp, #20]
 800cd54:	f7ff f982 	bl	800c05c <__lshift>
 800cd58:	4641      	mov	r1, r8
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	f7ff f9ea 	bl	800c134 <__mcmp>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	dd51      	ble.n	800ce08 <_strtod_l+0x8b8>
 800cd64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd68:	9a08      	ldr	r2, [sp, #32]
 800cd6a:	0d1b      	lsrs	r3, r3, #20
 800cd6c:	051b      	lsls	r3, r3, #20
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	d06b      	beq.n	800ce4a <_strtod_l+0x8fa>
 800cd72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd76:	d868      	bhi.n	800ce4a <_strtod_l+0x8fa>
 800cd78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cd7c:	f67f ae9d 	bls.w	800caba <_strtod_l+0x56a>
 800cd80:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <_strtod_l+0x85c>)
 800cd82:	4650      	mov	r0, sl
 800cd84:	4659      	mov	r1, fp
 800cd86:	2200      	movs	r2, #0
 800cd88:	f7f3 fc56 	bl	8000638 <__aeabi_dmul>
 800cd8c:	4b08      	ldr	r3, [pc, #32]	@ (800cdb0 <_strtod_l+0x860>)
 800cd8e:	400b      	ands	r3, r1
 800cd90:	4682      	mov	sl, r0
 800cd92:	468b      	mov	fp, r1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f ae05 	bne.w	800c9a4 <_strtod_l+0x454>
 800cd9a:	9a05      	ldr	r2, [sp, #20]
 800cd9c:	2322      	movs	r3, #34	@ 0x22
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	e600      	b.n	800c9a4 <_strtod_l+0x454>
 800cda2:	bf00      	nop
 800cda4:	0800f8e0 	.word	0x0800f8e0
 800cda8:	fffffc02 	.word	0xfffffc02
 800cdac:	39500000 	.word	0x39500000
 800cdb0:	7ff00000 	.word	0x7ff00000
 800cdb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cdb8:	d165      	bne.n	800ce86 <_strtod_l+0x936>
 800cdba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cdbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdc0:	b35a      	cbz	r2, 800ce1a <_strtod_l+0x8ca>
 800cdc2:	4a9f      	ldr	r2, [pc, #636]	@ (800d040 <_strtod_l+0xaf0>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d12b      	bne.n	800ce20 <_strtod_l+0x8d0>
 800cdc8:	9b08      	ldr	r3, [sp, #32]
 800cdca:	4651      	mov	r1, sl
 800cdcc:	b303      	cbz	r3, 800ce10 <_strtod_l+0x8c0>
 800cdce:	4b9d      	ldr	r3, [pc, #628]	@ (800d044 <_strtod_l+0xaf4>)
 800cdd0:	465a      	mov	r2, fp
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cddc:	d81b      	bhi.n	800ce16 <_strtod_l+0x8c6>
 800cdde:	0d1b      	lsrs	r3, r3, #20
 800cde0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	4299      	cmp	r1, r3
 800cdea:	d119      	bne.n	800ce20 <_strtod_l+0x8d0>
 800cdec:	4b96      	ldr	r3, [pc, #600]	@ (800d048 <_strtod_l+0xaf8>)
 800cdee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d102      	bne.n	800cdfa <_strtod_l+0x8aa>
 800cdf4:	3101      	adds	r1, #1
 800cdf6:	f43f adca 	beq.w	800c98e <_strtod_l+0x43e>
 800cdfa:	4b92      	ldr	r3, [pc, #584]	@ (800d044 <_strtod_l+0xaf4>)
 800cdfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdfe:	401a      	ands	r2, r3
 800ce00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ce04:	f04f 0a00 	mov.w	sl, #0
 800ce08:	9b08      	ldr	r3, [sp, #32]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1b8      	bne.n	800cd80 <_strtod_l+0x830>
 800ce0e:	e5c9      	b.n	800c9a4 <_strtod_l+0x454>
 800ce10:	f04f 33ff 	mov.w	r3, #4294967295
 800ce14:	e7e8      	b.n	800cde8 <_strtod_l+0x898>
 800ce16:	4613      	mov	r3, r2
 800ce18:	e7e6      	b.n	800cde8 <_strtod_l+0x898>
 800ce1a:	ea53 030a 	orrs.w	r3, r3, sl
 800ce1e:	d0a1      	beq.n	800cd64 <_strtod_l+0x814>
 800ce20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce22:	b1db      	cbz	r3, 800ce5c <_strtod_l+0x90c>
 800ce24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce26:	4213      	tst	r3, r2
 800ce28:	d0ee      	beq.n	800ce08 <_strtod_l+0x8b8>
 800ce2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce2c:	9a08      	ldr	r2, [sp, #32]
 800ce2e:	4650      	mov	r0, sl
 800ce30:	4659      	mov	r1, fp
 800ce32:	b1bb      	cbz	r3, 800ce64 <_strtod_l+0x914>
 800ce34:	f7ff fb6c 	bl	800c510 <sulp>
 800ce38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce3c:	ec53 2b10 	vmov	r2, r3, d0
 800ce40:	f7f3 fa44 	bl	80002cc <__adddf3>
 800ce44:	4682      	mov	sl, r0
 800ce46:	468b      	mov	fp, r1
 800ce48:	e7de      	b.n	800ce08 <_strtod_l+0x8b8>
 800ce4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ce4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ce52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ce56:	f04f 3aff 	mov.w	sl, #4294967295
 800ce5a:	e7d5      	b.n	800ce08 <_strtod_l+0x8b8>
 800ce5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce5e:	ea13 0f0a 	tst.w	r3, sl
 800ce62:	e7e1      	b.n	800ce28 <_strtod_l+0x8d8>
 800ce64:	f7ff fb54 	bl	800c510 <sulp>
 800ce68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce6c:	ec53 2b10 	vmov	r2, r3, d0
 800ce70:	f7f3 fa2a 	bl	80002c8 <__aeabi_dsub>
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	4682      	mov	sl, r0
 800ce7a:	468b      	mov	fp, r1
 800ce7c:	f7f3 fe44 	bl	8000b08 <__aeabi_dcmpeq>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d0c1      	beq.n	800ce08 <_strtod_l+0x8b8>
 800ce84:	e619      	b.n	800caba <_strtod_l+0x56a>
 800ce86:	4641      	mov	r1, r8
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f7ff facb 	bl	800c424 <__ratio>
 800ce8e:	ec57 6b10 	vmov	r6, r7, d0
 800ce92:	2200      	movs	r2, #0
 800ce94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce98:	4630      	mov	r0, r6
 800ce9a:	4639      	mov	r1, r7
 800ce9c:	f7f3 fe48 	bl	8000b30 <__aeabi_dcmple>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d06f      	beq.n	800cf84 <_strtod_l+0xa34>
 800cea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d17a      	bne.n	800cfa0 <_strtod_l+0xa50>
 800ceaa:	f1ba 0f00 	cmp.w	sl, #0
 800ceae:	d158      	bne.n	800cf62 <_strtod_l+0xa12>
 800ceb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d15a      	bne.n	800cf70 <_strtod_l+0xa20>
 800ceba:	4b64      	ldr	r3, [pc, #400]	@ (800d04c <_strtod_l+0xafc>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	4630      	mov	r0, r6
 800cec0:	4639      	mov	r1, r7
 800cec2:	f7f3 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d159      	bne.n	800cf7e <_strtod_l+0xa2e>
 800ceca:	4630      	mov	r0, r6
 800cecc:	4639      	mov	r1, r7
 800cece:	4b60      	ldr	r3, [pc, #384]	@ (800d050 <_strtod_l+0xb00>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	f7f3 fbb1 	bl	8000638 <__aeabi_dmul>
 800ced6:	4606      	mov	r6, r0
 800ced8:	460f      	mov	r7, r1
 800ceda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cede:	9606      	str	r6, [sp, #24]
 800cee0:	9307      	str	r3, [sp, #28]
 800cee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cee6:	4d57      	ldr	r5, [pc, #348]	@ (800d044 <_strtod_l+0xaf4>)
 800cee8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ceec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceee:	401d      	ands	r5, r3
 800cef0:	4b58      	ldr	r3, [pc, #352]	@ (800d054 <_strtod_l+0xb04>)
 800cef2:	429d      	cmp	r5, r3
 800cef4:	f040 80b2 	bne.w	800d05c <_strtod_l+0xb0c>
 800cef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cefa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cefe:	ec4b ab10 	vmov	d0, sl, fp
 800cf02:	f7ff f9c7 	bl	800c294 <__ulp>
 800cf06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf0a:	ec51 0b10 	vmov	r0, r1, d0
 800cf0e:	f7f3 fb93 	bl	8000638 <__aeabi_dmul>
 800cf12:	4652      	mov	r2, sl
 800cf14:	465b      	mov	r3, fp
 800cf16:	f7f3 f9d9 	bl	80002cc <__adddf3>
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4949      	ldr	r1, [pc, #292]	@ (800d044 <_strtod_l+0xaf4>)
 800cf1e:	4a4e      	ldr	r2, [pc, #312]	@ (800d058 <_strtod_l+0xb08>)
 800cf20:	4019      	ands	r1, r3
 800cf22:	4291      	cmp	r1, r2
 800cf24:	4682      	mov	sl, r0
 800cf26:	d942      	bls.n	800cfae <_strtod_l+0xa5e>
 800cf28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf2a:	4b47      	ldr	r3, [pc, #284]	@ (800d048 <_strtod_l+0xaf8>)
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d103      	bne.n	800cf38 <_strtod_l+0x9e8>
 800cf30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf32:	3301      	adds	r3, #1
 800cf34:	f43f ad2b 	beq.w	800c98e <_strtod_l+0x43e>
 800cf38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d048 <_strtod_l+0xaf8>
 800cf3c:	f04f 3aff 	mov.w	sl, #4294967295
 800cf40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf42:	9805      	ldr	r0, [sp, #20]
 800cf44:	f7fe fe72 	bl	800bc2c <_Bfree>
 800cf48:	9805      	ldr	r0, [sp, #20]
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	f7fe fe6e 	bl	800bc2c <_Bfree>
 800cf50:	9805      	ldr	r0, [sp, #20]
 800cf52:	4641      	mov	r1, r8
 800cf54:	f7fe fe6a 	bl	800bc2c <_Bfree>
 800cf58:	9805      	ldr	r0, [sp, #20]
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	f7fe fe66 	bl	800bc2c <_Bfree>
 800cf60:	e618      	b.n	800cb94 <_strtod_l+0x644>
 800cf62:	f1ba 0f01 	cmp.w	sl, #1
 800cf66:	d103      	bne.n	800cf70 <_strtod_l+0xa20>
 800cf68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f43f ada5 	beq.w	800caba <_strtod_l+0x56a>
 800cf70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d020 <_strtod_l+0xad0>
 800cf74:	4f35      	ldr	r7, [pc, #212]	@ (800d04c <_strtod_l+0xafc>)
 800cf76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf7a:	2600      	movs	r6, #0
 800cf7c:	e7b1      	b.n	800cee2 <_strtod_l+0x992>
 800cf7e:	4f34      	ldr	r7, [pc, #208]	@ (800d050 <_strtod_l+0xb00>)
 800cf80:	2600      	movs	r6, #0
 800cf82:	e7aa      	b.n	800ceda <_strtod_l+0x98a>
 800cf84:	4b32      	ldr	r3, [pc, #200]	@ (800d050 <_strtod_l+0xb00>)
 800cf86:	4630      	mov	r0, r6
 800cf88:	4639      	mov	r1, r7
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f7f3 fb54 	bl	8000638 <__aeabi_dmul>
 800cf90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf92:	4606      	mov	r6, r0
 800cf94:	460f      	mov	r7, r1
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d09f      	beq.n	800ceda <_strtod_l+0x98a>
 800cf9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cf9e:	e7a0      	b.n	800cee2 <_strtod_l+0x992>
 800cfa0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d028 <_strtod_l+0xad8>
 800cfa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cfa8:	ec57 6b17 	vmov	r6, r7, d7
 800cfac:	e799      	b.n	800cee2 <_strtod_l+0x992>
 800cfae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cfb2:	9b08      	ldr	r3, [sp, #32]
 800cfb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1c1      	bne.n	800cf40 <_strtod_l+0x9f0>
 800cfbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfc0:	0d1b      	lsrs	r3, r3, #20
 800cfc2:	051b      	lsls	r3, r3, #20
 800cfc4:	429d      	cmp	r5, r3
 800cfc6:	d1bb      	bne.n	800cf40 <_strtod_l+0x9f0>
 800cfc8:	4630      	mov	r0, r6
 800cfca:	4639      	mov	r1, r7
 800cfcc:	f7f3 fe94 	bl	8000cf8 <__aeabi_d2lz>
 800cfd0:	f7f3 fb04 	bl	80005dc <__aeabi_l2d>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7f3 f974 	bl	80002c8 <__aeabi_dsub>
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cfe8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cfec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfee:	ea46 060a 	orr.w	r6, r6, sl
 800cff2:	431e      	orrs	r6, r3
 800cff4:	d06f      	beq.n	800d0d6 <_strtod_l+0xb86>
 800cff6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d030 <_strtod_l+0xae0>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	f7f3 fd8e 	bl	8000b1c <__aeabi_dcmplt>
 800d000:	2800      	cmp	r0, #0
 800d002:	f47f accf 	bne.w	800c9a4 <_strtod_l+0x454>
 800d006:	a30c      	add	r3, pc, #48	@ (adr r3, 800d038 <_strtod_l+0xae8>)
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d010:	f7f3 fda2 	bl	8000b58 <__aeabi_dcmpgt>
 800d014:	2800      	cmp	r0, #0
 800d016:	d093      	beq.n	800cf40 <_strtod_l+0x9f0>
 800d018:	e4c4      	b.n	800c9a4 <_strtod_l+0x454>
 800d01a:	bf00      	nop
 800d01c:	f3af 8000 	nop.w
 800d020:	00000000 	.word	0x00000000
 800d024:	bff00000 	.word	0xbff00000
 800d028:	00000000 	.word	0x00000000
 800d02c:	3ff00000 	.word	0x3ff00000
 800d030:	94a03595 	.word	0x94a03595
 800d034:	3fdfffff 	.word	0x3fdfffff
 800d038:	35afe535 	.word	0x35afe535
 800d03c:	3fe00000 	.word	0x3fe00000
 800d040:	000fffff 	.word	0x000fffff
 800d044:	7ff00000 	.word	0x7ff00000
 800d048:	7fefffff 	.word	0x7fefffff
 800d04c:	3ff00000 	.word	0x3ff00000
 800d050:	3fe00000 	.word	0x3fe00000
 800d054:	7fe00000 	.word	0x7fe00000
 800d058:	7c9fffff 	.word	0x7c9fffff
 800d05c:	9b08      	ldr	r3, [sp, #32]
 800d05e:	b323      	cbz	r3, 800d0aa <_strtod_l+0xb5a>
 800d060:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d064:	d821      	bhi.n	800d0aa <_strtod_l+0xb5a>
 800d066:	a328      	add	r3, pc, #160	@ (adr r3, 800d108 <_strtod_l+0xbb8>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	4630      	mov	r0, r6
 800d06e:	4639      	mov	r1, r7
 800d070:	f7f3 fd5e 	bl	8000b30 <__aeabi_dcmple>
 800d074:	b1a0      	cbz	r0, 800d0a0 <_strtod_l+0xb50>
 800d076:	4639      	mov	r1, r7
 800d078:	4630      	mov	r0, r6
 800d07a:	f7f3 fdb5 	bl	8000be8 <__aeabi_d2uiz>
 800d07e:	2801      	cmp	r0, #1
 800d080:	bf38      	it	cc
 800d082:	2001      	movcc	r0, #1
 800d084:	f7f3 fa5e 	bl	8000544 <__aeabi_ui2d>
 800d088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	b9fb      	cbnz	r3, 800d0d0 <_strtod_l+0xb80>
 800d090:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d094:	9014      	str	r0, [sp, #80]	@ 0x50
 800d096:	9315      	str	r3, [sp, #84]	@ 0x54
 800d098:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d09c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d0a6:	1b5b      	subs	r3, r3, r5
 800d0a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d0ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d0b2:	f7ff f8ef 	bl	800c294 <__ulp>
 800d0b6:	4650      	mov	r0, sl
 800d0b8:	ec53 2b10 	vmov	r2, r3, d0
 800d0bc:	4659      	mov	r1, fp
 800d0be:	f7f3 fabb 	bl	8000638 <__aeabi_dmul>
 800d0c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d0c6:	f7f3 f901 	bl	80002cc <__adddf3>
 800d0ca:	4682      	mov	sl, r0
 800d0cc:	468b      	mov	fp, r1
 800d0ce:	e770      	b.n	800cfb2 <_strtod_l+0xa62>
 800d0d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d0d4:	e7e0      	b.n	800d098 <_strtod_l+0xb48>
 800d0d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d110 <_strtod_l+0xbc0>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	f7f3 fd1e 	bl	8000b1c <__aeabi_dcmplt>
 800d0e0:	e798      	b.n	800d014 <_strtod_l+0xac4>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	f7ff ba6d 	b.w	800c5ca <_strtod_l+0x7a>
 800d0f0:	2a65      	cmp	r2, #101	@ 0x65
 800d0f2:	f43f ab66 	beq.w	800c7c2 <_strtod_l+0x272>
 800d0f6:	2a45      	cmp	r2, #69	@ 0x45
 800d0f8:	f43f ab63 	beq.w	800c7c2 <_strtod_l+0x272>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	f7ff bb9e 	b.w	800c83e <_strtod_l+0x2ee>
 800d102:	bf00      	nop
 800d104:	f3af 8000 	nop.w
 800d108:	ffc00000 	.word	0xffc00000
 800d10c:	41dfffff 	.word	0x41dfffff
 800d110:	94a03595 	.word	0x94a03595
 800d114:	3fcfffff 	.word	0x3fcfffff

0800d118 <_strtod_r>:
 800d118:	4b01      	ldr	r3, [pc, #4]	@ (800d120 <_strtod_r+0x8>)
 800d11a:	f7ff ba19 	b.w	800c550 <_strtod_l>
 800d11e:	bf00      	nop
 800d120:	200005fc 	.word	0x200005fc

0800d124 <__ssputs_r>:
 800d124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d128:	688e      	ldr	r6, [r1, #8]
 800d12a:	461f      	mov	r7, r3
 800d12c:	42be      	cmp	r6, r7
 800d12e:	680b      	ldr	r3, [r1, #0]
 800d130:	4682      	mov	sl, r0
 800d132:	460c      	mov	r4, r1
 800d134:	4690      	mov	r8, r2
 800d136:	d82d      	bhi.n	800d194 <__ssputs_r+0x70>
 800d138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d13c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d140:	d026      	beq.n	800d190 <__ssputs_r+0x6c>
 800d142:	6965      	ldr	r5, [r4, #20]
 800d144:	6909      	ldr	r1, [r1, #16]
 800d146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d14a:	eba3 0901 	sub.w	r9, r3, r1
 800d14e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d152:	1c7b      	adds	r3, r7, #1
 800d154:	444b      	add	r3, r9
 800d156:	106d      	asrs	r5, r5, #1
 800d158:	429d      	cmp	r5, r3
 800d15a:	bf38      	it	cc
 800d15c:	461d      	movcc	r5, r3
 800d15e:	0553      	lsls	r3, r2, #21
 800d160:	d527      	bpl.n	800d1b2 <__ssputs_r+0x8e>
 800d162:	4629      	mov	r1, r5
 800d164:	f7fc fc1c 	bl	80099a0 <_malloc_r>
 800d168:	4606      	mov	r6, r0
 800d16a:	b360      	cbz	r0, 800d1c6 <__ssputs_r+0xa2>
 800d16c:	6921      	ldr	r1, [r4, #16]
 800d16e:	464a      	mov	r2, r9
 800d170:	f7fd fe71 	bl	800ae56 <memcpy>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	6126      	str	r6, [r4, #16]
 800d182:	6165      	str	r5, [r4, #20]
 800d184:	444e      	add	r6, r9
 800d186:	eba5 0509 	sub.w	r5, r5, r9
 800d18a:	6026      	str	r6, [r4, #0]
 800d18c:	60a5      	str	r5, [r4, #8]
 800d18e:	463e      	mov	r6, r7
 800d190:	42be      	cmp	r6, r7
 800d192:	d900      	bls.n	800d196 <__ssputs_r+0x72>
 800d194:	463e      	mov	r6, r7
 800d196:	6820      	ldr	r0, [r4, #0]
 800d198:	4632      	mov	r2, r6
 800d19a:	4641      	mov	r1, r8
 800d19c:	f000 fb9e 	bl	800d8dc <memmove>
 800d1a0:	68a3      	ldr	r3, [r4, #8]
 800d1a2:	1b9b      	subs	r3, r3, r6
 800d1a4:	60a3      	str	r3, [r4, #8]
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	4433      	add	r3, r6
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b2:	462a      	mov	r2, r5
 800d1b4:	f000 ff65 	bl	800e082 <_realloc_r>
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d1e0      	bne.n	800d180 <__ssputs_r+0x5c>
 800d1be:	6921      	ldr	r1, [r4, #16]
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	f7fe fca9 	bl	800bb18 <_free_r>
 800d1c6:	230c      	movs	r3, #12
 800d1c8:	f8ca 3000 	str.w	r3, [sl]
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d8:	e7e9      	b.n	800d1ae <__ssputs_r+0x8a>
	...

0800d1dc <_svfiprintf_r>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	4698      	mov	r8, r3
 800d1e2:	898b      	ldrh	r3, [r1, #12]
 800d1e4:	061b      	lsls	r3, r3, #24
 800d1e6:	b09d      	sub	sp, #116	@ 0x74
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	d510      	bpl.n	800d212 <_svfiprintf_r+0x36>
 800d1f0:	690b      	ldr	r3, [r1, #16]
 800d1f2:	b973      	cbnz	r3, 800d212 <_svfiprintf_r+0x36>
 800d1f4:	2140      	movs	r1, #64	@ 0x40
 800d1f6:	f7fc fbd3 	bl	80099a0 <_malloc_r>
 800d1fa:	6028      	str	r0, [r5, #0]
 800d1fc:	6128      	str	r0, [r5, #16]
 800d1fe:	b930      	cbnz	r0, 800d20e <_svfiprintf_r+0x32>
 800d200:	230c      	movs	r3, #12
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	b01d      	add	sp, #116	@ 0x74
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	2340      	movs	r3, #64	@ 0x40
 800d210:	616b      	str	r3, [r5, #20]
 800d212:	2300      	movs	r3, #0
 800d214:	9309      	str	r3, [sp, #36]	@ 0x24
 800d216:	2320      	movs	r3, #32
 800d218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d21c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d220:	2330      	movs	r3, #48	@ 0x30
 800d222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d3c0 <_svfiprintf_r+0x1e4>
 800d226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d22a:	f04f 0901 	mov.w	r9, #1
 800d22e:	4623      	mov	r3, r4
 800d230:	469a      	mov	sl, r3
 800d232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d236:	b10a      	cbz	r2, 800d23c <_svfiprintf_r+0x60>
 800d238:	2a25      	cmp	r2, #37	@ 0x25
 800d23a:	d1f9      	bne.n	800d230 <_svfiprintf_r+0x54>
 800d23c:	ebba 0b04 	subs.w	fp, sl, r4
 800d240:	d00b      	beq.n	800d25a <_svfiprintf_r+0x7e>
 800d242:	465b      	mov	r3, fp
 800d244:	4622      	mov	r2, r4
 800d246:	4629      	mov	r1, r5
 800d248:	4638      	mov	r0, r7
 800d24a:	f7ff ff6b 	bl	800d124 <__ssputs_r>
 800d24e:	3001      	adds	r0, #1
 800d250:	f000 80a7 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d256:	445a      	add	r2, fp
 800d258:	9209      	str	r2, [sp, #36]	@ 0x24
 800d25a:	f89a 3000 	ldrb.w	r3, [sl]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 809f 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d264:	2300      	movs	r3, #0
 800d266:	f04f 32ff 	mov.w	r2, #4294967295
 800d26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d26e:	f10a 0a01 	add.w	sl, sl, #1
 800d272:	9304      	str	r3, [sp, #16]
 800d274:	9307      	str	r3, [sp, #28]
 800d276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d27a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d27c:	4654      	mov	r4, sl
 800d27e:	2205      	movs	r2, #5
 800d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d284:	484e      	ldr	r0, [pc, #312]	@ (800d3c0 <_svfiprintf_r+0x1e4>)
 800d286:	f7f2 ffc3 	bl	8000210 <memchr>
 800d28a:	9a04      	ldr	r2, [sp, #16]
 800d28c:	b9d8      	cbnz	r0, 800d2c6 <_svfiprintf_r+0xea>
 800d28e:	06d0      	lsls	r0, r2, #27
 800d290:	bf44      	itt	mi
 800d292:	2320      	movmi	r3, #32
 800d294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d298:	0711      	lsls	r1, r2, #28
 800d29a:	bf44      	itt	mi
 800d29c:	232b      	movmi	r3, #43	@ 0x2b
 800d29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2a8:	d015      	beq.n	800d2d6 <_svfiprintf_r+0xfa>
 800d2aa:	9a07      	ldr	r2, [sp, #28]
 800d2ac:	4654      	mov	r4, sl
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f04f 0c0a 	mov.w	ip, #10
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ba:	3b30      	subs	r3, #48	@ 0x30
 800d2bc:	2b09      	cmp	r3, #9
 800d2be:	d94b      	bls.n	800d358 <_svfiprintf_r+0x17c>
 800d2c0:	b1b0      	cbz	r0, 800d2f0 <_svfiprintf_r+0x114>
 800d2c2:	9207      	str	r2, [sp, #28]
 800d2c4:	e014      	b.n	800d2f0 <_svfiprintf_r+0x114>
 800d2c6:	eba0 0308 	sub.w	r3, r0, r8
 800d2ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	9304      	str	r3, [sp, #16]
 800d2d2:	46a2      	mov	sl, r4
 800d2d4:	e7d2      	b.n	800d27c <_svfiprintf_r+0xa0>
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	1d19      	adds	r1, r3, #4
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	9103      	str	r1, [sp, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	bfbb      	ittet	lt
 800d2e2:	425b      	neglt	r3, r3
 800d2e4:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e8:	9307      	strge	r3, [sp, #28]
 800d2ea:	9307      	strlt	r3, [sp, #28]
 800d2ec:	bfb8      	it	lt
 800d2ee:	9204      	strlt	r2, [sp, #16]
 800d2f0:	7823      	ldrb	r3, [r4, #0]
 800d2f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2f4:	d10a      	bne.n	800d30c <_svfiprintf_r+0x130>
 800d2f6:	7863      	ldrb	r3, [r4, #1]
 800d2f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2fa:	d132      	bne.n	800d362 <_svfiprintf_r+0x186>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	1d1a      	adds	r2, r3, #4
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	9203      	str	r2, [sp, #12]
 800d304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d308:	3402      	adds	r4, #2
 800d30a:	9305      	str	r3, [sp, #20]
 800d30c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d3d0 <_svfiprintf_r+0x1f4>
 800d310:	7821      	ldrb	r1, [r4, #0]
 800d312:	2203      	movs	r2, #3
 800d314:	4650      	mov	r0, sl
 800d316:	f7f2 ff7b 	bl	8000210 <memchr>
 800d31a:	b138      	cbz	r0, 800d32c <_svfiprintf_r+0x150>
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	eba0 000a 	sub.w	r0, r0, sl
 800d322:	2240      	movs	r2, #64	@ 0x40
 800d324:	4082      	lsls	r2, r0
 800d326:	4313      	orrs	r3, r2
 800d328:	3401      	adds	r4, #1
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d330:	4824      	ldr	r0, [pc, #144]	@ (800d3c4 <_svfiprintf_r+0x1e8>)
 800d332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d336:	2206      	movs	r2, #6
 800d338:	f7f2 ff6a 	bl	8000210 <memchr>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d036      	beq.n	800d3ae <_svfiprintf_r+0x1d2>
 800d340:	4b21      	ldr	r3, [pc, #132]	@ (800d3c8 <_svfiprintf_r+0x1ec>)
 800d342:	bb1b      	cbnz	r3, 800d38c <_svfiprintf_r+0x1b0>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	3307      	adds	r3, #7
 800d348:	f023 0307 	bic.w	r3, r3, #7
 800d34c:	3308      	adds	r3, #8
 800d34e:	9303      	str	r3, [sp, #12]
 800d350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d352:	4433      	add	r3, r6
 800d354:	9309      	str	r3, [sp, #36]	@ 0x24
 800d356:	e76a      	b.n	800d22e <_svfiprintf_r+0x52>
 800d358:	fb0c 3202 	mla	r2, ip, r2, r3
 800d35c:	460c      	mov	r4, r1
 800d35e:	2001      	movs	r0, #1
 800d360:	e7a8      	b.n	800d2b4 <_svfiprintf_r+0xd8>
 800d362:	2300      	movs	r3, #0
 800d364:	3401      	adds	r4, #1
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	4619      	mov	r1, r3
 800d36a:	f04f 0c0a 	mov.w	ip, #10
 800d36e:	4620      	mov	r0, r4
 800d370:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d374:	3a30      	subs	r2, #48	@ 0x30
 800d376:	2a09      	cmp	r2, #9
 800d378:	d903      	bls.n	800d382 <_svfiprintf_r+0x1a6>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d0c6      	beq.n	800d30c <_svfiprintf_r+0x130>
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	e7c4      	b.n	800d30c <_svfiprintf_r+0x130>
 800d382:	fb0c 2101 	mla	r1, ip, r1, r2
 800d386:	4604      	mov	r4, r0
 800d388:	2301      	movs	r3, #1
 800d38a:	e7f0      	b.n	800d36e <_svfiprintf_r+0x192>
 800d38c:	ab03      	add	r3, sp, #12
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	462a      	mov	r2, r5
 800d392:	4b0e      	ldr	r3, [pc, #56]	@ (800d3cc <_svfiprintf_r+0x1f0>)
 800d394:	a904      	add	r1, sp, #16
 800d396:	4638      	mov	r0, r7
 800d398:	f7fc fcb4 	bl	8009d04 <_printf_float>
 800d39c:	1c42      	adds	r2, r0, #1
 800d39e:	4606      	mov	r6, r0
 800d3a0:	d1d6      	bne.n	800d350 <_svfiprintf_r+0x174>
 800d3a2:	89ab      	ldrh	r3, [r5, #12]
 800d3a4:	065b      	lsls	r3, r3, #25
 800d3a6:	f53f af2d 	bmi.w	800d204 <_svfiprintf_r+0x28>
 800d3aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3ac:	e72c      	b.n	800d208 <_svfiprintf_r+0x2c>
 800d3ae:	ab03      	add	r3, sp, #12
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	462a      	mov	r2, r5
 800d3b4:	4b05      	ldr	r3, [pc, #20]	@ (800d3cc <_svfiprintf_r+0x1f0>)
 800d3b6:	a904      	add	r1, sp, #16
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f7fc ff3b 	bl	800a234 <_printf_i>
 800d3be:	e7ed      	b.n	800d39c <_svfiprintf_r+0x1c0>
 800d3c0:	0800f908 	.word	0x0800f908
 800d3c4:	0800f912 	.word	0x0800f912
 800d3c8:	08009d05 	.word	0x08009d05
 800d3cc:	0800d125 	.word	0x0800d125
 800d3d0:	0800f90e 	.word	0x0800f90e

0800d3d4 <__sfputc_r>:
 800d3d4:	6893      	ldr	r3, [r2, #8]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	b410      	push	{r4}
 800d3dc:	6093      	str	r3, [r2, #8]
 800d3de:	da08      	bge.n	800d3f2 <__sfputc_r+0x1e>
 800d3e0:	6994      	ldr	r4, [r2, #24]
 800d3e2:	42a3      	cmp	r3, r4
 800d3e4:	db01      	blt.n	800d3ea <__sfputc_r+0x16>
 800d3e6:	290a      	cmp	r1, #10
 800d3e8:	d103      	bne.n	800d3f2 <__sfputc_r+0x1e>
 800d3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ee:	f7fd bbf2 	b.w	800abd6 <__swbuf_r>
 800d3f2:	6813      	ldr	r3, [r2, #0]
 800d3f4:	1c58      	adds	r0, r3, #1
 800d3f6:	6010      	str	r0, [r2, #0]
 800d3f8:	7019      	strb	r1, [r3, #0]
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <__sfputs_r>:
 800d402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d404:	4606      	mov	r6, r0
 800d406:	460f      	mov	r7, r1
 800d408:	4614      	mov	r4, r2
 800d40a:	18d5      	adds	r5, r2, r3
 800d40c:	42ac      	cmp	r4, r5
 800d40e:	d101      	bne.n	800d414 <__sfputs_r+0x12>
 800d410:	2000      	movs	r0, #0
 800d412:	e007      	b.n	800d424 <__sfputs_r+0x22>
 800d414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d418:	463a      	mov	r2, r7
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7ff ffda 	bl	800d3d4 <__sfputc_r>
 800d420:	1c43      	adds	r3, r0, #1
 800d422:	d1f3      	bne.n	800d40c <__sfputs_r+0xa>
 800d424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d428 <_vfiprintf_r>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	460d      	mov	r5, r1
 800d42e:	b09d      	sub	sp, #116	@ 0x74
 800d430:	4614      	mov	r4, r2
 800d432:	4698      	mov	r8, r3
 800d434:	4606      	mov	r6, r0
 800d436:	b118      	cbz	r0, 800d440 <_vfiprintf_r+0x18>
 800d438:	6a03      	ldr	r3, [r0, #32]
 800d43a:	b90b      	cbnz	r3, 800d440 <_vfiprintf_r+0x18>
 800d43c:	f7fd faba 	bl	800a9b4 <__sinit>
 800d440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d442:	07d9      	lsls	r1, r3, #31
 800d444:	d405      	bmi.n	800d452 <_vfiprintf_r+0x2a>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_vfiprintf_r+0x2a>
 800d44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d44e:	f7fd fcf8 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	071b      	lsls	r3, r3, #28
 800d456:	d501      	bpl.n	800d45c <_vfiprintf_r+0x34>
 800d458:	692b      	ldr	r3, [r5, #16]
 800d45a:	b99b      	cbnz	r3, 800d484 <_vfiprintf_r+0x5c>
 800d45c:	4629      	mov	r1, r5
 800d45e:	4630      	mov	r0, r6
 800d460:	f7fd fbf8 	bl	800ac54 <__swsetup_r>
 800d464:	b170      	cbz	r0, 800d484 <_vfiprintf_r+0x5c>
 800d466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d468:	07dc      	lsls	r4, r3, #31
 800d46a:	d504      	bpl.n	800d476 <_vfiprintf_r+0x4e>
 800d46c:	f04f 30ff 	mov.w	r0, #4294967295
 800d470:	b01d      	add	sp, #116	@ 0x74
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	89ab      	ldrh	r3, [r5, #12]
 800d478:	0598      	lsls	r0, r3, #22
 800d47a:	d4f7      	bmi.n	800d46c <_vfiprintf_r+0x44>
 800d47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d47e:	f7fd fce1 	bl	800ae44 <__retarget_lock_release_recursive>
 800d482:	e7f3      	b.n	800d46c <_vfiprintf_r+0x44>
 800d484:	2300      	movs	r3, #0
 800d486:	9309      	str	r3, [sp, #36]	@ 0x24
 800d488:	2320      	movs	r3, #32
 800d48a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d492:	2330      	movs	r3, #48	@ 0x30
 800d494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d644 <_vfiprintf_r+0x21c>
 800d498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d49c:	f04f 0901 	mov.w	r9, #1
 800d4a0:	4623      	mov	r3, r4
 800d4a2:	469a      	mov	sl, r3
 800d4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a8:	b10a      	cbz	r2, 800d4ae <_vfiprintf_r+0x86>
 800d4aa:	2a25      	cmp	r2, #37	@ 0x25
 800d4ac:	d1f9      	bne.n	800d4a2 <_vfiprintf_r+0x7a>
 800d4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d4b2:	d00b      	beq.n	800d4cc <_vfiprintf_r+0xa4>
 800d4b4:	465b      	mov	r3, fp
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f7ff ffa1 	bl	800d402 <__sfputs_r>
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	f000 80a7 	beq.w	800d614 <_vfiprintf_r+0x1ec>
 800d4c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4c8:	445a      	add	r2, fp
 800d4ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 809f 	beq.w	800d614 <_vfiprintf_r+0x1ec>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e0:	f10a 0a01 	add.w	sl, sl, #1
 800d4e4:	9304      	str	r3, [sp, #16]
 800d4e6:	9307      	str	r3, [sp, #28]
 800d4e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4ee:	4654      	mov	r4, sl
 800d4f0:	2205      	movs	r2, #5
 800d4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f6:	4853      	ldr	r0, [pc, #332]	@ (800d644 <_vfiprintf_r+0x21c>)
 800d4f8:	f7f2 fe8a 	bl	8000210 <memchr>
 800d4fc:	9a04      	ldr	r2, [sp, #16]
 800d4fe:	b9d8      	cbnz	r0, 800d538 <_vfiprintf_r+0x110>
 800d500:	06d1      	lsls	r1, r2, #27
 800d502:	bf44      	itt	mi
 800d504:	2320      	movmi	r3, #32
 800d506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d50a:	0713      	lsls	r3, r2, #28
 800d50c:	bf44      	itt	mi
 800d50e:	232b      	movmi	r3, #43	@ 0x2b
 800d510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d514:	f89a 3000 	ldrb.w	r3, [sl]
 800d518:	2b2a      	cmp	r3, #42	@ 0x2a
 800d51a:	d015      	beq.n	800d548 <_vfiprintf_r+0x120>
 800d51c:	9a07      	ldr	r2, [sp, #28]
 800d51e:	4654      	mov	r4, sl
 800d520:	2000      	movs	r0, #0
 800d522:	f04f 0c0a 	mov.w	ip, #10
 800d526:	4621      	mov	r1, r4
 800d528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d52c:	3b30      	subs	r3, #48	@ 0x30
 800d52e:	2b09      	cmp	r3, #9
 800d530:	d94b      	bls.n	800d5ca <_vfiprintf_r+0x1a2>
 800d532:	b1b0      	cbz	r0, 800d562 <_vfiprintf_r+0x13a>
 800d534:	9207      	str	r2, [sp, #28]
 800d536:	e014      	b.n	800d562 <_vfiprintf_r+0x13a>
 800d538:	eba0 0308 	sub.w	r3, r0, r8
 800d53c:	fa09 f303 	lsl.w	r3, r9, r3
 800d540:	4313      	orrs	r3, r2
 800d542:	9304      	str	r3, [sp, #16]
 800d544:	46a2      	mov	sl, r4
 800d546:	e7d2      	b.n	800d4ee <_vfiprintf_r+0xc6>
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	1d19      	adds	r1, r3, #4
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	9103      	str	r1, [sp, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	bfbb      	ittet	lt
 800d554:	425b      	neglt	r3, r3
 800d556:	f042 0202 	orrlt.w	r2, r2, #2
 800d55a:	9307      	strge	r3, [sp, #28]
 800d55c:	9307      	strlt	r3, [sp, #28]
 800d55e:	bfb8      	it	lt
 800d560:	9204      	strlt	r2, [sp, #16]
 800d562:	7823      	ldrb	r3, [r4, #0]
 800d564:	2b2e      	cmp	r3, #46	@ 0x2e
 800d566:	d10a      	bne.n	800d57e <_vfiprintf_r+0x156>
 800d568:	7863      	ldrb	r3, [r4, #1]
 800d56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d56c:	d132      	bne.n	800d5d4 <_vfiprintf_r+0x1ac>
 800d56e:	9b03      	ldr	r3, [sp, #12]
 800d570:	1d1a      	adds	r2, r3, #4
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	9203      	str	r2, [sp, #12]
 800d576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d57a:	3402      	adds	r4, #2
 800d57c:	9305      	str	r3, [sp, #20]
 800d57e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d654 <_vfiprintf_r+0x22c>
 800d582:	7821      	ldrb	r1, [r4, #0]
 800d584:	2203      	movs	r2, #3
 800d586:	4650      	mov	r0, sl
 800d588:	f7f2 fe42 	bl	8000210 <memchr>
 800d58c:	b138      	cbz	r0, 800d59e <_vfiprintf_r+0x176>
 800d58e:	9b04      	ldr	r3, [sp, #16]
 800d590:	eba0 000a 	sub.w	r0, r0, sl
 800d594:	2240      	movs	r2, #64	@ 0x40
 800d596:	4082      	lsls	r2, r0
 800d598:	4313      	orrs	r3, r2
 800d59a:	3401      	adds	r4, #1
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a2:	4829      	ldr	r0, [pc, #164]	@ (800d648 <_vfiprintf_r+0x220>)
 800d5a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5a8:	2206      	movs	r2, #6
 800d5aa:	f7f2 fe31 	bl	8000210 <memchr>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d03f      	beq.n	800d632 <_vfiprintf_r+0x20a>
 800d5b2:	4b26      	ldr	r3, [pc, #152]	@ (800d64c <_vfiprintf_r+0x224>)
 800d5b4:	bb1b      	cbnz	r3, 800d5fe <_vfiprintf_r+0x1d6>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	3307      	adds	r3, #7
 800d5ba:	f023 0307 	bic.w	r3, r3, #7
 800d5be:	3308      	adds	r3, #8
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c4:	443b      	add	r3, r7
 800d5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c8:	e76a      	b.n	800d4a0 <_vfiprintf_r+0x78>
 800d5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	e7a8      	b.n	800d526 <_vfiprintf_r+0xfe>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f04f 0c0a 	mov.w	ip, #10
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e6:	3a30      	subs	r2, #48	@ 0x30
 800d5e8:	2a09      	cmp	r2, #9
 800d5ea:	d903      	bls.n	800d5f4 <_vfiprintf_r+0x1cc>
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d0c6      	beq.n	800d57e <_vfiprintf_r+0x156>
 800d5f0:	9105      	str	r1, [sp, #20]
 800d5f2:	e7c4      	b.n	800d57e <_vfiprintf_r+0x156>
 800d5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e7f0      	b.n	800d5e0 <_vfiprintf_r+0x1b8>
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	462a      	mov	r2, r5
 800d604:	4b12      	ldr	r3, [pc, #72]	@ (800d650 <_vfiprintf_r+0x228>)
 800d606:	a904      	add	r1, sp, #16
 800d608:	4630      	mov	r0, r6
 800d60a:	f7fc fb7b 	bl	8009d04 <_printf_float>
 800d60e:	4607      	mov	r7, r0
 800d610:	1c78      	adds	r0, r7, #1
 800d612:	d1d6      	bne.n	800d5c2 <_vfiprintf_r+0x19a>
 800d614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d616:	07d9      	lsls	r1, r3, #31
 800d618:	d405      	bmi.n	800d626 <_vfiprintf_r+0x1fe>
 800d61a:	89ab      	ldrh	r3, [r5, #12]
 800d61c:	059a      	lsls	r2, r3, #22
 800d61e:	d402      	bmi.n	800d626 <_vfiprintf_r+0x1fe>
 800d620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d622:	f7fd fc0f 	bl	800ae44 <__retarget_lock_release_recursive>
 800d626:	89ab      	ldrh	r3, [r5, #12]
 800d628:	065b      	lsls	r3, r3, #25
 800d62a:	f53f af1f 	bmi.w	800d46c <_vfiprintf_r+0x44>
 800d62e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d630:	e71e      	b.n	800d470 <_vfiprintf_r+0x48>
 800d632:	ab03      	add	r3, sp, #12
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	462a      	mov	r2, r5
 800d638:	4b05      	ldr	r3, [pc, #20]	@ (800d650 <_vfiprintf_r+0x228>)
 800d63a:	a904      	add	r1, sp, #16
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7fc fdf9 	bl	800a234 <_printf_i>
 800d642:	e7e4      	b.n	800d60e <_vfiprintf_r+0x1e6>
 800d644:	0800f908 	.word	0x0800f908
 800d648:	0800f912 	.word	0x0800f912
 800d64c:	08009d05 	.word	0x08009d05
 800d650:	0800d403 	.word	0x0800d403
 800d654:	0800f90e 	.word	0x0800f90e

0800d658 <__sflush_r>:
 800d658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	0716      	lsls	r6, r2, #28
 800d662:	4605      	mov	r5, r0
 800d664:	460c      	mov	r4, r1
 800d666:	d454      	bmi.n	800d712 <__sflush_r+0xba>
 800d668:	684b      	ldr	r3, [r1, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dc02      	bgt.n	800d674 <__sflush_r+0x1c>
 800d66e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd48      	ble.n	800d706 <__sflush_r+0xae>
 800d674:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d676:	2e00      	cmp	r6, #0
 800d678:	d045      	beq.n	800d706 <__sflush_r+0xae>
 800d67a:	2300      	movs	r3, #0
 800d67c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d680:	682f      	ldr	r7, [r5, #0]
 800d682:	6a21      	ldr	r1, [r4, #32]
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	d030      	beq.n	800d6ea <__sflush_r+0x92>
 800d688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	0759      	lsls	r1, r3, #29
 800d68e:	d505      	bpl.n	800d69c <__sflush_r+0x44>
 800d690:	6863      	ldr	r3, [r4, #4]
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d696:	b10b      	cbz	r3, 800d69c <__sflush_r+0x44>
 800d698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d69a:	1ad2      	subs	r2, r2, r3
 800d69c:	2300      	movs	r3, #0
 800d69e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6a0:	6a21      	ldr	r1, [r4, #32]
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	47b0      	blx	r6
 800d6a6:	1c43      	adds	r3, r0, #1
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	d106      	bne.n	800d6ba <__sflush_r+0x62>
 800d6ac:	6829      	ldr	r1, [r5, #0]
 800d6ae:	291d      	cmp	r1, #29
 800d6b0:	d82b      	bhi.n	800d70a <__sflush_r+0xb2>
 800d6b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d75c <__sflush_r+0x104>)
 800d6b4:	410a      	asrs	r2, r1
 800d6b6:	07d6      	lsls	r6, r2, #31
 800d6b8:	d427      	bmi.n	800d70a <__sflush_r+0xb2>
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	6062      	str	r2, [r4, #4]
 800d6be:	04d9      	lsls	r1, r3, #19
 800d6c0:	6922      	ldr	r2, [r4, #16]
 800d6c2:	6022      	str	r2, [r4, #0]
 800d6c4:	d504      	bpl.n	800d6d0 <__sflush_r+0x78>
 800d6c6:	1c42      	adds	r2, r0, #1
 800d6c8:	d101      	bne.n	800d6ce <__sflush_r+0x76>
 800d6ca:	682b      	ldr	r3, [r5, #0]
 800d6cc:	b903      	cbnz	r3, 800d6d0 <__sflush_r+0x78>
 800d6ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6d2:	602f      	str	r7, [r5, #0]
 800d6d4:	b1b9      	cbz	r1, 800d706 <__sflush_r+0xae>
 800d6d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6da:	4299      	cmp	r1, r3
 800d6dc:	d002      	beq.n	800d6e4 <__sflush_r+0x8c>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f7fe fa1a 	bl	800bb18 <_free_r>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6e8:	e00d      	b.n	800d706 <__sflush_r+0xae>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	47b0      	blx	r6
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	1c50      	adds	r0, r2, #1
 800d6f4:	d1c9      	bne.n	800d68a <__sflush_r+0x32>
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d0c6      	beq.n	800d68a <__sflush_r+0x32>
 800d6fc:	2b1d      	cmp	r3, #29
 800d6fe:	d001      	beq.n	800d704 <__sflush_r+0xac>
 800d700:	2b16      	cmp	r3, #22
 800d702:	d11e      	bne.n	800d742 <__sflush_r+0xea>
 800d704:	602f      	str	r7, [r5, #0]
 800d706:	2000      	movs	r0, #0
 800d708:	e022      	b.n	800d750 <__sflush_r+0xf8>
 800d70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d70e:	b21b      	sxth	r3, r3
 800d710:	e01b      	b.n	800d74a <__sflush_r+0xf2>
 800d712:	690f      	ldr	r7, [r1, #16]
 800d714:	2f00      	cmp	r7, #0
 800d716:	d0f6      	beq.n	800d706 <__sflush_r+0xae>
 800d718:	0793      	lsls	r3, r2, #30
 800d71a:	680e      	ldr	r6, [r1, #0]
 800d71c:	bf08      	it	eq
 800d71e:	694b      	ldreq	r3, [r1, #20]
 800d720:	600f      	str	r7, [r1, #0]
 800d722:	bf18      	it	ne
 800d724:	2300      	movne	r3, #0
 800d726:	eba6 0807 	sub.w	r8, r6, r7
 800d72a:	608b      	str	r3, [r1, #8]
 800d72c:	f1b8 0f00 	cmp.w	r8, #0
 800d730:	dde9      	ble.n	800d706 <__sflush_r+0xae>
 800d732:	6a21      	ldr	r1, [r4, #32]
 800d734:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d736:	4643      	mov	r3, r8
 800d738:	463a      	mov	r2, r7
 800d73a:	4628      	mov	r0, r5
 800d73c:	47b0      	blx	r6
 800d73e:	2800      	cmp	r0, #0
 800d740:	dc08      	bgt.n	800d754 <__sflush_r+0xfc>
 800d742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d74a:	81a3      	strh	r3, [r4, #12]
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295
 800d750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d754:	4407      	add	r7, r0
 800d756:	eba8 0800 	sub.w	r8, r8, r0
 800d75a:	e7e7      	b.n	800d72c <__sflush_r+0xd4>
 800d75c:	dfbffffe 	.word	0xdfbffffe

0800d760 <_fflush_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	690b      	ldr	r3, [r1, #16]
 800d764:	4605      	mov	r5, r0
 800d766:	460c      	mov	r4, r1
 800d768:	b913      	cbnz	r3, 800d770 <_fflush_r+0x10>
 800d76a:	2500      	movs	r5, #0
 800d76c:	4628      	mov	r0, r5
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	b118      	cbz	r0, 800d77a <_fflush_r+0x1a>
 800d772:	6a03      	ldr	r3, [r0, #32]
 800d774:	b90b      	cbnz	r3, 800d77a <_fflush_r+0x1a>
 800d776:	f7fd f91d 	bl	800a9b4 <__sinit>
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0f3      	beq.n	800d76a <_fflush_r+0xa>
 800d782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d784:	07d0      	lsls	r0, r2, #31
 800d786:	d404      	bmi.n	800d792 <_fflush_r+0x32>
 800d788:	0599      	lsls	r1, r3, #22
 800d78a:	d402      	bmi.n	800d792 <_fflush_r+0x32>
 800d78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d78e:	f7fd fb58 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800d792:	4628      	mov	r0, r5
 800d794:	4621      	mov	r1, r4
 800d796:	f7ff ff5f 	bl	800d658 <__sflush_r>
 800d79a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d79c:	07da      	lsls	r2, r3, #31
 800d79e:	4605      	mov	r5, r0
 800d7a0:	d4e4      	bmi.n	800d76c <_fflush_r+0xc>
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	059b      	lsls	r3, r3, #22
 800d7a6:	d4e1      	bmi.n	800d76c <_fflush_r+0xc>
 800d7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7aa:	f7fd fb4b 	bl	800ae44 <__retarget_lock_release_recursive>
 800d7ae:	e7dd      	b.n	800d76c <_fflush_r+0xc>

0800d7b0 <__swhatbuf_r>:
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b8:	2900      	cmp	r1, #0
 800d7ba:	b096      	sub	sp, #88	@ 0x58
 800d7bc:	4615      	mov	r5, r2
 800d7be:	461e      	mov	r6, r3
 800d7c0:	da0d      	bge.n	800d7de <__swhatbuf_r+0x2e>
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7c8:	f04f 0100 	mov.w	r1, #0
 800d7cc:	bf14      	ite	ne
 800d7ce:	2340      	movne	r3, #64	@ 0x40
 800d7d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	6031      	str	r1, [r6, #0]
 800d7d8:	602b      	str	r3, [r5, #0]
 800d7da:	b016      	add	sp, #88	@ 0x58
 800d7dc:	bd70      	pop	{r4, r5, r6, pc}
 800d7de:	466a      	mov	r2, sp
 800d7e0:	f000 f8a8 	bl	800d934 <_fstat_r>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	dbec      	blt.n	800d7c2 <__swhatbuf_r+0x12>
 800d7e8:	9901      	ldr	r1, [sp, #4]
 800d7ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7f2:	4259      	negs	r1, r3
 800d7f4:	4159      	adcs	r1, r3
 800d7f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7fa:	e7eb      	b.n	800d7d4 <__swhatbuf_r+0x24>

0800d7fc <__smakebuf_r>:
 800d7fc:	898b      	ldrh	r3, [r1, #12]
 800d7fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d800:	079d      	lsls	r5, r3, #30
 800d802:	4606      	mov	r6, r0
 800d804:	460c      	mov	r4, r1
 800d806:	d507      	bpl.n	800d818 <__smakebuf_r+0x1c>
 800d808:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	6123      	str	r3, [r4, #16]
 800d810:	2301      	movs	r3, #1
 800d812:	6163      	str	r3, [r4, #20]
 800d814:	b003      	add	sp, #12
 800d816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d818:	ab01      	add	r3, sp, #4
 800d81a:	466a      	mov	r2, sp
 800d81c:	f7ff ffc8 	bl	800d7b0 <__swhatbuf_r>
 800d820:	9f00      	ldr	r7, [sp, #0]
 800d822:	4605      	mov	r5, r0
 800d824:	4639      	mov	r1, r7
 800d826:	4630      	mov	r0, r6
 800d828:	f7fc f8ba 	bl	80099a0 <_malloc_r>
 800d82c:	b948      	cbnz	r0, 800d842 <__smakebuf_r+0x46>
 800d82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d832:	059a      	lsls	r2, r3, #22
 800d834:	d4ee      	bmi.n	800d814 <__smakebuf_r+0x18>
 800d836:	f023 0303 	bic.w	r3, r3, #3
 800d83a:	f043 0302 	orr.w	r3, r3, #2
 800d83e:	81a3      	strh	r3, [r4, #12]
 800d840:	e7e2      	b.n	800d808 <__smakebuf_r+0xc>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	6020      	str	r0, [r4, #0]
 800d846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d84a:	81a3      	strh	r3, [r4, #12]
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d852:	b15b      	cbz	r3, 800d86c <__smakebuf_r+0x70>
 800d854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d858:	4630      	mov	r0, r6
 800d85a:	f000 f87d 	bl	800d958 <_isatty_r>
 800d85e:	b128      	cbz	r0, 800d86c <__smakebuf_r+0x70>
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	f023 0303 	bic.w	r3, r3, #3
 800d866:	f043 0301 	orr.w	r3, r3, #1
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	89a3      	ldrh	r3, [r4, #12]
 800d86e:	431d      	orrs	r5, r3
 800d870:	81a5      	strh	r5, [r4, #12]
 800d872:	e7cf      	b.n	800d814 <__smakebuf_r+0x18>

0800d874 <_putc_r>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	460d      	mov	r5, r1
 800d878:	4614      	mov	r4, r2
 800d87a:	4606      	mov	r6, r0
 800d87c:	b118      	cbz	r0, 800d886 <_putc_r+0x12>
 800d87e:	6a03      	ldr	r3, [r0, #32]
 800d880:	b90b      	cbnz	r3, 800d886 <_putc_r+0x12>
 800d882:	f7fd f897 	bl	800a9b4 <__sinit>
 800d886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d888:	07d8      	lsls	r0, r3, #31
 800d88a:	d405      	bmi.n	800d898 <_putc_r+0x24>
 800d88c:	89a3      	ldrh	r3, [r4, #12]
 800d88e:	0599      	lsls	r1, r3, #22
 800d890:	d402      	bmi.n	800d898 <_putc_r+0x24>
 800d892:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d894:	f7fd fad5 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800d898:	68a3      	ldr	r3, [r4, #8]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	60a3      	str	r3, [r4, #8]
 800d8a0:	da05      	bge.n	800d8ae <_putc_r+0x3a>
 800d8a2:	69a2      	ldr	r2, [r4, #24]
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	db12      	blt.n	800d8ce <_putc_r+0x5a>
 800d8a8:	b2eb      	uxtb	r3, r5
 800d8aa:	2b0a      	cmp	r3, #10
 800d8ac:	d00f      	beq.n	800d8ce <_putc_r+0x5a>
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	6022      	str	r2, [r4, #0]
 800d8b4:	701d      	strb	r5, [r3, #0]
 800d8b6:	b2ed      	uxtb	r5, r5
 800d8b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8ba:	07da      	lsls	r2, r3, #31
 800d8bc:	d405      	bmi.n	800d8ca <_putc_r+0x56>
 800d8be:	89a3      	ldrh	r3, [r4, #12]
 800d8c0:	059b      	lsls	r3, r3, #22
 800d8c2:	d402      	bmi.n	800d8ca <_putc_r+0x56>
 800d8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8c6:	f7fd fabd 	bl	800ae44 <__retarget_lock_release_recursive>
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	bd70      	pop	{r4, r5, r6, pc}
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7fd f97f 	bl	800abd6 <__swbuf_r>
 800d8d8:	4605      	mov	r5, r0
 800d8da:	e7ed      	b.n	800d8b8 <_putc_r+0x44>

0800d8dc <memmove>:
 800d8dc:	4288      	cmp	r0, r1
 800d8de:	b510      	push	{r4, lr}
 800d8e0:	eb01 0402 	add.w	r4, r1, r2
 800d8e4:	d902      	bls.n	800d8ec <memmove+0x10>
 800d8e6:	4284      	cmp	r4, r0
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	d807      	bhi.n	800d8fc <memmove+0x20>
 800d8ec:	1e43      	subs	r3, r0, #1
 800d8ee:	42a1      	cmp	r1, r4
 800d8f0:	d008      	beq.n	800d904 <memmove+0x28>
 800d8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8fa:	e7f8      	b.n	800d8ee <memmove+0x12>
 800d8fc:	4402      	add	r2, r0
 800d8fe:	4601      	mov	r1, r0
 800d900:	428a      	cmp	r2, r1
 800d902:	d100      	bne.n	800d906 <memmove+0x2a>
 800d904:	bd10      	pop	{r4, pc}
 800d906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d90e:	e7f7      	b.n	800d900 <memmove+0x24>

0800d910 <strncmp>:
 800d910:	b510      	push	{r4, lr}
 800d912:	b16a      	cbz	r2, 800d930 <strncmp+0x20>
 800d914:	3901      	subs	r1, #1
 800d916:	1884      	adds	r4, r0, r2
 800d918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d91c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d920:	429a      	cmp	r2, r3
 800d922:	d103      	bne.n	800d92c <strncmp+0x1c>
 800d924:	42a0      	cmp	r0, r4
 800d926:	d001      	beq.n	800d92c <strncmp+0x1c>
 800d928:	2a00      	cmp	r2, #0
 800d92a:	d1f5      	bne.n	800d918 <strncmp+0x8>
 800d92c:	1ad0      	subs	r0, r2, r3
 800d92e:	bd10      	pop	{r4, pc}
 800d930:	4610      	mov	r0, r2
 800d932:	e7fc      	b.n	800d92e <strncmp+0x1e>

0800d934 <_fstat_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	@ (800d954 <_fstat_r+0x20>)
 800d938:	2300      	movs	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	4608      	mov	r0, r1
 800d93e:	4611      	mov	r1, r2
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	f7f5 fc37 	bl	80031b4 <_fstat>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d102      	bne.n	800d950 <_fstat_r+0x1c>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	b103      	cbz	r3, 800d950 <_fstat_r+0x1c>
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	20000c40 	.word	0x20000c40

0800d958 <_isatty_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_isatty_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f5 fc36 	bl	80031d4 <_isatty>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_isatty_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_isatty_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	20000c40 	.word	0x20000c40

0800d978 <nan>:
 800d978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d980 <nan+0x8>
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	00000000 	.word	0x00000000
 800d984:	7ff80000 	.word	0x7ff80000

0800d988 <__assert_func>:
 800d988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d98a:	4614      	mov	r4, r2
 800d98c:	461a      	mov	r2, r3
 800d98e:	4b09      	ldr	r3, [pc, #36]	@ (800d9b4 <__assert_func+0x2c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4605      	mov	r5, r0
 800d994:	68d8      	ldr	r0, [r3, #12]
 800d996:	b954      	cbnz	r4, 800d9ae <__assert_func+0x26>
 800d998:	4b07      	ldr	r3, [pc, #28]	@ (800d9b8 <__assert_func+0x30>)
 800d99a:	461c      	mov	r4, r3
 800d99c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9a0:	9100      	str	r1, [sp, #0]
 800d9a2:	462b      	mov	r3, r5
 800d9a4:	4905      	ldr	r1, [pc, #20]	@ (800d9bc <__assert_func+0x34>)
 800d9a6:	f000 fba7 	bl	800e0f8 <fiprintf>
 800d9aa:	f000 fbb7 	bl	800e11c <abort>
 800d9ae:	4b04      	ldr	r3, [pc, #16]	@ (800d9c0 <__assert_func+0x38>)
 800d9b0:	e7f4      	b.n	800d99c <__assert_func+0x14>
 800d9b2:	bf00      	nop
 800d9b4:	200005ac 	.word	0x200005ac
 800d9b8:	0800f95c 	.word	0x0800f95c
 800d9bc:	0800f92e 	.word	0x0800f92e
 800d9c0:	0800f921 	.word	0x0800f921

0800d9c4 <_calloc_r>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	fba1 5402 	umull	r5, r4, r1, r2
 800d9ca:	b93c      	cbnz	r4, 800d9dc <_calloc_r+0x18>
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	f7fb ffe7 	bl	80099a0 <_malloc_r>
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	b928      	cbnz	r0, 800d9e2 <_calloc_r+0x1e>
 800d9d6:	2600      	movs	r6, #0
 800d9d8:	4630      	mov	r0, r6
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
 800d9dc:	220c      	movs	r2, #12
 800d9de:	6002      	str	r2, [r0, #0]
 800d9e0:	e7f9      	b.n	800d9d6 <_calloc_r+0x12>
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	f7fd f98b 	bl	800ad00 <memset>
 800d9ea:	e7f5      	b.n	800d9d8 <_calloc_r+0x14>

0800d9ec <rshift>:
 800d9ec:	6903      	ldr	r3, [r0, #16]
 800d9ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9fa:	f100 0414 	add.w	r4, r0, #20
 800d9fe:	dd45      	ble.n	800da8c <rshift+0xa0>
 800da00:	f011 011f 	ands.w	r1, r1, #31
 800da04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da0c:	d10c      	bne.n	800da28 <rshift+0x3c>
 800da0e:	f100 0710 	add.w	r7, r0, #16
 800da12:	4629      	mov	r1, r5
 800da14:	42b1      	cmp	r1, r6
 800da16:	d334      	bcc.n	800da82 <rshift+0x96>
 800da18:	1a9b      	subs	r3, r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	1eea      	subs	r2, r5, #3
 800da1e:	4296      	cmp	r6, r2
 800da20:	bf38      	it	cc
 800da22:	2300      	movcc	r3, #0
 800da24:	4423      	add	r3, r4
 800da26:	e015      	b.n	800da54 <rshift+0x68>
 800da28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da2c:	f1c1 0820 	rsb	r8, r1, #32
 800da30:	40cf      	lsrs	r7, r1
 800da32:	f105 0e04 	add.w	lr, r5, #4
 800da36:	46a1      	mov	r9, r4
 800da38:	4576      	cmp	r6, lr
 800da3a:	46f4      	mov	ip, lr
 800da3c:	d815      	bhi.n	800da6a <rshift+0x7e>
 800da3e:	1a9a      	subs	r2, r3, r2
 800da40:	0092      	lsls	r2, r2, #2
 800da42:	3a04      	subs	r2, #4
 800da44:	3501      	adds	r5, #1
 800da46:	42ae      	cmp	r6, r5
 800da48:	bf38      	it	cc
 800da4a:	2200      	movcc	r2, #0
 800da4c:	18a3      	adds	r3, r4, r2
 800da4e:	50a7      	str	r7, [r4, r2]
 800da50:	b107      	cbz	r7, 800da54 <rshift+0x68>
 800da52:	3304      	adds	r3, #4
 800da54:	1b1a      	subs	r2, r3, r4
 800da56:	42a3      	cmp	r3, r4
 800da58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da5c:	bf08      	it	eq
 800da5e:	2300      	moveq	r3, #0
 800da60:	6102      	str	r2, [r0, #16]
 800da62:	bf08      	it	eq
 800da64:	6143      	streq	r3, [r0, #20]
 800da66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da6a:	f8dc c000 	ldr.w	ip, [ip]
 800da6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800da72:	ea4c 0707 	orr.w	r7, ip, r7
 800da76:	f849 7b04 	str.w	r7, [r9], #4
 800da7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da7e:	40cf      	lsrs	r7, r1
 800da80:	e7da      	b.n	800da38 <rshift+0x4c>
 800da82:	f851 cb04 	ldr.w	ip, [r1], #4
 800da86:	f847 cf04 	str.w	ip, [r7, #4]!
 800da8a:	e7c3      	b.n	800da14 <rshift+0x28>
 800da8c:	4623      	mov	r3, r4
 800da8e:	e7e1      	b.n	800da54 <rshift+0x68>

0800da90 <__hexdig_fun>:
 800da90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da94:	2b09      	cmp	r3, #9
 800da96:	d802      	bhi.n	800da9e <__hexdig_fun+0xe>
 800da98:	3820      	subs	r0, #32
 800da9a:	b2c0      	uxtb	r0, r0
 800da9c:	4770      	bx	lr
 800da9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d801      	bhi.n	800daaa <__hexdig_fun+0x1a>
 800daa6:	3847      	subs	r0, #71	@ 0x47
 800daa8:	e7f7      	b.n	800da9a <__hexdig_fun+0xa>
 800daaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800daae:	2b05      	cmp	r3, #5
 800dab0:	d801      	bhi.n	800dab6 <__hexdig_fun+0x26>
 800dab2:	3827      	subs	r0, #39	@ 0x27
 800dab4:	e7f1      	b.n	800da9a <__hexdig_fun+0xa>
 800dab6:	2000      	movs	r0, #0
 800dab8:	4770      	bx	lr
	...

0800dabc <__gethex>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	b085      	sub	sp, #20
 800dac2:	468a      	mov	sl, r1
 800dac4:	9302      	str	r3, [sp, #8]
 800dac6:	680b      	ldr	r3, [r1, #0]
 800dac8:	9001      	str	r0, [sp, #4]
 800daca:	4690      	mov	r8, r2
 800dacc:	1c9c      	adds	r4, r3, #2
 800dace:	46a1      	mov	r9, r4
 800dad0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dad4:	2830      	cmp	r0, #48	@ 0x30
 800dad6:	d0fa      	beq.n	800dace <__gethex+0x12>
 800dad8:	eba9 0303 	sub.w	r3, r9, r3
 800dadc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dae0:	f7ff ffd6 	bl	800da90 <__hexdig_fun>
 800dae4:	4605      	mov	r5, r0
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d168      	bne.n	800dbbc <__gethex+0x100>
 800daea:	49a0      	ldr	r1, [pc, #640]	@ (800dd6c <__gethex+0x2b0>)
 800daec:	2201      	movs	r2, #1
 800daee:	4648      	mov	r0, r9
 800daf0:	f7ff ff0e 	bl	800d910 <strncmp>
 800daf4:	4607      	mov	r7, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d167      	bne.n	800dbca <__gethex+0x10e>
 800dafa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dafe:	4626      	mov	r6, r4
 800db00:	f7ff ffc6 	bl	800da90 <__hexdig_fun>
 800db04:	2800      	cmp	r0, #0
 800db06:	d062      	beq.n	800dbce <__gethex+0x112>
 800db08:	4623      	mov	r3, r4
 800db0a:	7818      	ldrb	r0, [r3, #0]
 800db0c:	2830      	cmp	r0, #48	@ 0x30
 800db0e:	4699      	mov	r9, r3
 800db10:	f103 0301 	add.w	r3, r3, #1
 800db14:	d0f9      	beq.n	800db0a <__gethex+0x4e>
 800db16:	f7ff ffbb 	bl	800da90 <__hexdig_fun>
 800db1a:	fab0 f580 	clz	r5, r0
 800db1e:	096d      	lsrs	r5, r5, #5
 800db20:	f04f 0b01 	mov.w	fp, #1
 800db24:	464a      	mov	r2, r9
 800db26:	4616      	mov	r6, r2
 800db28:	3201      	adds	r2, #1
 800db2a:	7830      	ldrb	r0, [r6, #0]
 800db2c:	f7ff ffb0 	bl	800da90 <__hexdig_fun>
 800db30:	2800      	cmp	r0, #0
 800db32:	d1f8      	bne.n	800db26 <__gethex+0x6a>
 800db34:	498d      	ldr	r1, [pc, #564]	@ (800dd6c <__gethex+0x2b0>)
 800db36:	2201      	movs	r2, #1
 800db38:	4630      	mov	r0, r6
 800db3a:	f7ff fee9 	bl	800d910 <strncmp>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d13f      	bne.n	800dbc2 <__gethex+0x106>
 800db42:	b944      	cbnz	r4, 800db56 <__gethex+0x9a>
 800db44:	1c74      	adds	r4, r6, #1
 800db46:	4622      	mov	r2, r4
 800db48:	4616      	mov	r6, r2
 800db4a:	3201      	adds	r2, #1
 800db4c:	7830      	ldrb	r0, [r6, #0]
 800db4e:	f7ff ff9f 	bl	800da90 <__hexdig_fun>
 800db52:	2800      	cmp	r0, #0
 800db54:	d1f8      	bne.n	800db48 <__gethex+0x8c>
 800db56:	1ba4      	subs	r4, r4, r6
 800db58:	00a7      	lsls	r7, r4, #2
 800db5a:	7833      	ldrb	r3, [r6, #0]
 800db5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db60:	2b50      	cmp	r3, #80	@ 0x50
 800db62:	d13e      	bne.n	800dbe2 <__gethex+0x126>
 800db64:	7873      	ldrb	r3, [r6, #1]
 800db66:	2b2b      	cmp	r3, #43	@ 0x2b
 800db68:	d033      	beq.n	800dbd2 <__gethex+0x116>
 800db6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800db6c:	d034      	beq.n	800dbd8 <__gethex+0x11c>
 800db6e:	1c71      	adds	r1, r6, #1
 800db70:	2400      	movs	r4, #0
 800db72:	7808      	ldrb	r0, [r1, #0]
 800db74:	f7ff ff8c 	bl	800da90 <__hexdig_fun>
 800db78:	1e43      	subs	r3, r0, #1
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	2b18      	cmp	r3, #24
 800db7e:	d830      	bhi.n	800dbe2 <__gethex+0x126>
 800db80:	f1a0 0210 	sub.w	r2, r0, #16
 800db84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db88:	f7ff ff82 	bl	800da90 <__hexdig_fun>
 800db8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800db90:	fa5f fc8c 	uxtb.w	ip, ip
 800db94:	f1bc 0f18 	cmp.w	ip, #24
 800db98:	f04f 030a 	mov.w	r3, #10
 800db9c:	d91e      	bls.n	800dbdc <__gethex+0x120>
 800db9e:	b104      	cbz	r4, 800dba2 <__gethex+0xe6>
 800dba0:	4252      	negs	r2, r2
 800dba2:	4417      	add	r7, r2
 800dba4:	f8ca 1000 	str.w	r1, [sl]
 800dba8:	b1ed      	cbz	r5, 800dbe6 <__gethex+0x12a>
 800dbaa:	f1bb 0f00 	cmp.w	fp, #0
 800dbae:	bf0c      	ite	eq
 800dbb0:	2506      	moveq	r5, #6
 800dbb2:	2500      	movne	r5, #0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	b005      	add	sp, #20
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	2500      	movs	r5, #0
 800dbbe:	462c      	mov	r4, r5
 800dbc0:	e7b0      	b.n	800db24 <__gethex+0x68>
 800dbc2:	2c00      	cmp	r4, #0
 800dbc4:	d1c7      	bne.n	800db56 <__gethex+0x9a>
 800dbc6:	4627      	mov	r7, r4
 800dbc8:	e7c7      	b.n	800db5a <__gethex+0x9e>
 800dbca:	464e      	mov	r6, r9
 800dbcc:	462f      	mov	r7, r5
 800dbce:	2501      	movs	r5, #1
 800dbd0:	e7c3      	b.n	800db5a <__gethex+0x9e>
 800dbd2:	2400      	movs	r4, #0
 800dbd4:	1cb1      	adds	r1, r6, #2
 800dbd6:	e7cc      	b.n	800db72 <__gethex+0xb6>
 800dbd8:	2401      	movs	r4, #1
 800dbda:	e7fb      	b.n	800dbd4 <__gethex+0x118>
 800dbdc:	fb03 0002 	mla	r0, r3, r2, r0
 800dbe0:	e7ce      	b.n	800db80 <__gethex+0xc4>
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	e7de      	b.n	800dba4 <__gethex+0xe8>
 800dbe6:	eba6 0309 	sub.w	r3, r6, r9
 800dbea:	3b01      	subs	r3, #1
 800dbec:	4629      	mov	r1, r5
 800dbee:	2b07      	cmp	r3, #7
 800dbf0:	dc0a      	bgt.n	800dc08 <__gethex+0x14c>
 800dbf2:	9801      	ldr	r0, [sp, #4]
 800dbf4:	f7fd ffda 	bl	800bbac <_Balloc>
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	b940      	cbnz	r0, 800dc0e <__gethex+0x152>
 800dbfc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd70 <__gethex+0x2b4>)
 800dbfe:	4602      	mov	r2, r0
 800dc00:	21e4      	movs	r1, #228	@ 0xe4
 800dc02:	485c      	ldr	r0, [pc, #368]	@ (800dd74 <__gethex+0x2b8>)
 800dc04:	f7ff fec0 	bl	800d988 <__assert_func>
 800dc08:	3101      	adds	r1, #1
 800dc0a:	105b      	asrs	r3, r3, #1
 800dc0c:	e7ef      	b.n	800dbee <__gethex+0x132>
 800dc0e:	f100 0a14 	add.w	sl, r0, #20
 800dc12:	2300      	movs	r3, #0
 800dc14:	4655      	mov	r5, sl
 800dc16:	469b      	mov	fp, r3
 800dc18:	45b1      	cmp	r9, r6
 800dc1a:	d337      	bcc.n	800dc8c <__gethex+0x1d0>
 800dc1c:	f845 bb04 	str.w	fp, [r5], #4
 800dc20:	eba5 050a 	sub.w	r5, r5, sl
 800dc24:	10ad      	asrs	r5, r5, #2
 800dc26:	6125      	str	r5, [r4, #16]
 800dc28:	4658      	mov	r0, fp
 800dc2a:	f7fe f8b1 	bl	800bd90 <__hi0bits>
 800dc2e:	016d      	lsls	r5, r5, #5
 800dc30:	f8d8 6000 	ldr.w	r6, [r8]
 800dc34:	1a2d      	subs	r5, r5, r0
 800dc36:	42b5      	cmp	r5, r6
 800dc38:	dd54      	ble.n	800dce4 <__gethex+0x228>
 800dc3a:	1bad      	subs	r5, r5, r6
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f7fe fc45 	bl	800c4ce <__any_on>
 800dc44:	4681      	mov	r9, r0
 800dc46:	b178      	cbz	r0, 800dc68 <__gethex+0x1ac>
 800dc48:	1e6b      	subs	r3, r5, #1
 800dc4a:	1159      	asrs	r1, r3, #5
 800dc4c:	f003 021f 	and.w	r2, r3, #31
 800dc50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc54:	f04f 0901 	mov.w	r9, #1
 800dc58:	fa09 f202 	lsl.w	r2, r9, r2
 800dc5c:	420a      	tst	r2, r1
 800dc5e:	d003      	beq.n	800dc68 <__gethex+0x1ac>
 800dc60:	454b      	cmp	r3, r9
 800dc62:	dc36      	bgt.n	800dcd2 <__gethex+0x216>
 800dc64:	f04f 0902 	mov.w	r9, #2
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7ff febe 	bl	800d9ec <rshift>
 800dc70:	442f      	add	r7, r5
 800dc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc76:	42bb      	cmp	r3, r7
 800dc78:	da42      	bge.n	800dd00 <__gethex+0x244>
 800dc7a:	9801      	ldr	r0, [sp, #4]
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	f7fd ffd5 	bl	800bc2c <_Bfree>
 800dc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc84:	2300      	movs	r3, #0
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	25a3      	movs	r5, #163	@ 0xa3
 800dc8a:	e793      	b.n	800dbb4 <__gethex+0xf8>
 800dc8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc90:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc92:	d012      	beq.n	800dcba <__gethex+0x1fe>
 800dc94:	2b20      	cmp	r3, #32
 800dc96:	d104      	bne.n	800dca2 <__gethex+0x1e6>
 800dc98:	f845 bb04 	str.w	fp, [r5], #4
 800dc9c:	f04f 0b00 	mov.w	fp, #0
 800dca0:	465b      	mov	r3, fp
 800dca2:	7830      	ldrb	r0, [r6, #0]
 800dca4:	9303      	str	r3, [sp, #12]
 800dca6:	f7ff fef3 	bl	800da90 <__hexdig_fun>
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	f000 000f 	and.w	r0, r0, #15
 800dcb0:	4098      	lsls	r0, r3
 800dcb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	e7ae      	b.n	800dc18 <__gethex+0x15c>
 800dcba:	45b1      	cmp	r9, r6
 800dcbc:	d8ea      	bhi.n	800dc94 <__gethex+0x1d8>
 800dcbe:	492b      	ldr	r1, [pc, #172]	@ (800dd6c <__gethex+0x2b0>)
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f7ff fe23 	bl	800d910 <strncmp>
 800dcca:	9b03      	ldr	r3, [sp, #12]
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1e1      	bne.n	800dc94 <__gethex+0x1d8>
 800dcd0:	e7a2      	b.n	800dc18 <__gethex+0x15c>
 800dcd2:	1ea9      	subs	r1, r5, #2
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7fe fbfa 	bl	800c4ce <__any_on>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d0c2      	beq.n	800dc64 <__gethex+0x1a8>
 800dcde:	f04f 0903 	mov.w	r9, #3
 800dce2:	e7c1      	b.n	800dc68 <__gethex+0x1ac>
 800dce4:	da09      	bge.n	800dcfa <__gethex+0x23e>
 800dce6:	1b75      	subs	r5, r6, r5
 800dce8:	4621      	mov	r1, r4
 800dcea:	9801      	ldr	r0, [sp, #4]
 800dcec:	462a      	mov	r2, r5
 800dcee:	f7fe f9b5 	bl	800c05c <__lshift>
 800dcf2:	1b7f      	subs	r7, r7, r5
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	f100 0a14 	add.w	sl, r0, #20
 800dcfa:	f04f 0900 	mov.w	r9, #0
 800dcfe:	e7b8      	b.n	800dc72 <__gethex+0x1b6>
 800dd00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd04:	42bd      	cmp	r5, r7
 800dd06:	dd6f      	ble.n	800dde8 <__gethex+0x32c>
 800dd08:	1bed      	subs	r5, r5, r7
 800dd0a:	42ae      	cmp	r6, r5
 800dd0c:	dc34      	bgt.n	800dd78 <__gethex+0x2bc>
 800dd0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d022      	beq.n	800dd5c <__gethex+0x2a0>
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d024      	beq.n	800dd64 <__gethex+0x2a8>
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d115      	bne.n	800dd4a <__gethex+0x28e>
 800dd1e:	42ae      	cmp	r6, r5
 800dd20:	d113      	bne.n	800dd4a <__gethex+0x28e>
 800dd22:	2e01      	cmp	r6, #1
 800dd24:	d10b      	bne.n	800dd3e <__gethex+0x282>
 800dd26:	9a02      	ldr	r2, [sp, #8]
 800dd28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd2c:	6013      	str	r3, [r2, #0]
 800dd2e:	2301      	movs	r3, #1
 800dd30:	6123      	str	r3, [r4, #16]
 800dd32:	f8ca 3000 	str.w	r3, [sl]
 800dd36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd38:	2562      	movs	r5, #98	@ 0x62
 800dd3a:	601c      	str	r4, [r3, #0]
 800dd3c:	e73a      	b.n	800dbb4 <__gethex+0xf8>
 800dd3e:	1e71      	subs	r1, r6, #1
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7fe fbc4 	bl	800c4ce <__any_on>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d1ed      	bne.n	800dd26 <__gethex+0x26a>
 800dd4a:	9801      	ldr	r0, [sp, #4]
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	f7fd ff6d 	bl	800bc2c <_Bfree>
 800dd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd54:	2300      	movs	r3, #0
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	2550      	movs	r5, #80	@ 0x50
 800dd5a:	e72b      	b.n	800dbb4 <__gethex+0xf8>
 800dd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1f3      	bne.n	800dd4a <__gethex+0x28e>
 800dd62:	e7e0      	b.n	800dd26 <__gethex+0x26a>
 800dd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1dd      	bne.n	800dd26 <__gethex+0x26a>
 800dd6a:	e7ee      	b.n	800dd4a <__gethex+0x28e>
 800dd6c:	0800f8b0 	.word	0x0800f8b0
 800dd70:	0800f746 	.word	0x0800f746
 800dd74:	0800f95d 	.word	0x0800f95d
 800dd78:	1e6f      	subs	r7, r5, #1
 800dd7a:	f1b9 0f00 	cmp.w	r9, #0
 800dd7e:	d130      	bne.n	800dde2 <__gethex+0x326>
 800dd80:	b127      	cbz	r7, 800dd8c <__gethex+0x2d0>
 800dd82:	4639      	mov	r1, r7
 800dd84:	4620      	mov	r0, r4
 800dd86:	f7fe fba2 	bl	800c4ce <__any_on>
 800dd8a:	4681      	mov	r9, r0
 800dd8c:	117a      	asrs	r2, r7, #5
 800dd8e:	2301      	movs	r3, #1
 800dd90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd94:	f007 071f 	and.w	r7, r7, #31
 800dd98:	40bb      	lsls	r3, r7
 800dd9a:	4213      	tst	r3, r2
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	4620      	mov	r0, r4
 800dda0:	bf18      	it	ne
 800dda2:	f049 0902 	orrne.w	r9, r9, #2
 800dda6:	f7ff fe21 	bl	800d9ec <rshift>
 800ddaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ddae:	1b76      	subs	r6, r6, r5
 800ddb0:	2502      	movs	r5, #2
 800ddb2:	f1b9 0f00 	cmp.w	r9, #0
 800ddb6:	d047      	beq.n	800de48 <__gethex+0x38c>
 800ddb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d015      	beq.n	800ddec <__gethex+0x330>
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d017      	beq.n	800ddf4 <__gethex+0x338>
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d109      	bne.n	800dddc <__gethex+0x320>
 800ddc8:	f019 0f02 	tst.w	r9, #2
 800ddcc:	d006      	beq.n	800dddc <__gethex+0x320>
 800ddce:	f8da 3000 	ldr.w	r3, [sl]
 800ddd2:	ea49 0903 	orr.w	r9, r9, r3
 800ddd6:	f019 0f01 	tst.w	r9, #1
 800ddda:	d10e      	bne.n	800ddfa <__gethex+0x33e>
 800dddc:	f045 0510 	orr.w	r5, r5, #16
 800dde0:	e032      	b.n	800de48 <__gethex+0x38c>
 800dde2:	f04f 0901 	mov.w	r9, #1
 800dde6:	e7d1      	b.n	800dd8c <__gethex+0x2d0>
 800dde8:	2501      	movs	r5, #1
 800ddea:	e7e2      	b.n	800ddb2 <__gethex+0x2f6>
 800ddec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddee:	f1c3 0301 	rsb	r3, r3, #1
 800ddf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d0f0      	beq.n	800dddc <__gethex+0x320>
 800ddfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddfe:	f104 0314 	add.w	r3, r4, #20
 800de02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de0a:	f04f 0c00 	mov.w	ip, #0
 800de0e:	4618      	mov	r0, r3
 800de10:	f853 2b04 	ldr.w	r2, [r3], #4
 800de14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de18:	d01b      	beq.n	800de52 <__gethex+0x396>
 800de1a:	3201      	adds	r2, #1
 800de1c:	6002      	str	r2, [r0, #0]
 800de1e:	2d02      	cmp	r5, #2
 800de20:	f104 0314 	add.w	r3, r4, #20
 800de24:	d13c      	bne.n	800dea0 <__gethex+0x3e4>
 800de26:	f8d8 2000 	ldr.w	r2, [r8]
 800de2a:	3a01      	subs	r2, #1
 800de2c:	42b2      	cmp	r2, r6
 800de2e:	d109      	bne.n	800de44 <__gethex+0x388>
 800de30:	1171      	asrs	r1, r6, #5
 800de32:	2201      	movs	r2, #1
 800de34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de38:	f006 061f 	and.w	r6, r6, #31
 800de3c:	fa02 f606 	lsl.w	r6, r2, r6
 800de40:	421e      	tst	r6, r3
 800de42:	d13a      	bne.n	800deba <__gethex+0x3fe>
 800de44:	f045 0520 	orr.w	r5, r5, #32
 800de48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4a:	601c      	str	r4, [r3, #0]
 800de4c:	9b02      	ldr	r3, [sp, #8]
 800de4e:	601f      	str	r7, [r3, #0]
 800de50:	e6b0      	b.n	800dbb4 <__gethex+0xf8>
 800de52:	4299      	cmp	r1, r3
 800de54:	f843 cc04 	str.w	ip, [r3, #-4]
 800de58:	d8d9      	bhi.n	800de0e <__gethex+0x352>
 800de5a:	68a3      	ldr	r3, [r4, #8]
 800de5c:	459b      	cmp	fp, r3
 800de5e:	db17      	blt.n	800de90 <__gethex+0x3d4>
 800de60:	6861      	ldr	r1, [r4, #4]
 800de62:	9801      	ldr	r0, [sp, #4]
 800de64:	3101      	adds	r1, #1
 800de66:	f7fd fea1 	bl	800bbac <_Balloc>
 800de6a:	4681      	mov	r9, r0
 800de6c:	b918      	cbnz	r0, 800de76 <__gethex+0x3ba>
 800de6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ded8 <__gethex+0x41c>)
 800de70:	4602      	mov	r2, r0
 800de72:	2184      	movs	r1, #132	@ 0x84
 800de74:	e6c5      	b.n	800dc02 <__gethex+0x146>
 800de76:	6922      	ldr	r2, [r4, #16]
 800de78:	3202      	adds	r2, #2
 800de7a:	f104 010c 	add.w	r1, r4, #12
 800de7e:	0092      	lsls	r2, r2, #2
 800de80:	300c      	adds	r0, #12
 800de82:	f7fc ffe8 	bl	800ae56 <memcpy>
 800de86:	4621      	mov	r1, r4
 800de88:	9801      	ldr	r0, [sp, #4]
 800de8a:	f7fd fecf 	bl	800bc2c <_Bfree>
 800de8e:	464c      	mov	r4, r9
 800de90:	6923      	ldr	r3, [r4, #16]
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de98:	6122      	str	r2, [r4, #16]
 800de9a:	2201      	movs	r2, #1
 800de9c:	615a      	str	r2, [r3, #20]
 800de9e:	e7be      	b.n	800de1e <__gethex+0x362>
 800dea0:	6922      	ldr	r2, [r4, #16]
 800dea2:	455a      	cmp	r2, fp
 800dea4:	dd0b      	ble.n	800debe <__gethex+0x402>
 800dea6:	2101      	movs	r1, #1
 800dea8:	4620      	mov	r0, r4
 800deaa:	f7ff fd9f 	bl	800d9ec <rshift>
 800deae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deb2:	3701      	adds	r7, #1
 800deb4:	42bb      	cmp	r3, r7
 800deb6:	f6ff aee0 	blt.w	800dc7a <__gethex+0x1be>
 800deba:	2501      	movs	r5, #1
 800debc:	e7c2      	b.n	800de44 <__gethex+0x388>
 800debe:	f016 061f 	ands.w	r6, r6, #31
 800dec2:	d0fa      	beq.n	800deba <__gethex+0x3fe>
 800dec4:	4453      	add	r3, sl
 800dec6:	f1c6 0620 	rsb	r6, r6, #32
 800deca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dece:	f7fd ff5f 	bl	800bd90 <__hi0bits>
 800ded2:	42b0      	cmp	r0, r6
 800ded4:	dbe7      	blt.n	800dea6 <__gethex+0x3ea>
 800ded6:	e7f0      	b.n	800deba <__gethex+0x3fe>
 800ded8:	0800f746 	.word	0x0800f746

0800dedc <L_shift>:
 800dedc:	f1c2 0208 	rsb	r2, r2, #8
 800dee0:	0092      	lsls	r2, r2, #2
 800dee2:	b570      	push	{r4, r5, r6, lr}
 800dee4:	f1c2 0620 	rsb	r6, r2, #32
 800dee8:	6843      	ldr	r3, [r0, #4]
 800deea:	6804      	ldr	r4, [r0, #0]
 800deec:	fa03 f506 	lsl.w	r5, r3, r6
 800def0:	432c      	orrs	r4, r5
 800def2:	40d3      	lsrs	r3, r2
 800def4:	6004      	str	r4, [r0, #0]
 800def6:	f840 3f04 	str.w	r3, [r0, #4]!
 800defa:	4288      	cmp	r0, r1
 800defc:	d3f4      	bcc.n	800dee8 <L_shift+0xc>
 800defe:	bd70      	pop	{r4, r5, r6, pc}

0800df00 <__match>:
 800df00:	b530      	push	{r4, r5, lr}
 800df02:	6803      	ldr	r3, [r0, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df0a:	b914      	cbnz	r4, 800df12 <__match+0x12>
 800df0c:	6003      	str	r3, [r0, #0]
 800df0e:	2001      	movs	r0, #1
 800df10:	bd30      	pop	{r4, r5, pc}
 800df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800df1a:	2d19      	cmp	r5, #25
 800df1c:	bf98      	it	ls
 800df1e:	3220      	addls	r2, #32
 800df20:	42a2      	cmp	r2, r4
 800df22:	d0f0      	beq.n	800df06 <__match+0x6>
 800df24:	2000      	movs	r0, #0
 800df26:	e7f3      	b.n	800df10 <__match+0x10>

0800df28 <__hexnan>:
 800df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	680b      	ldr	r3, [r1, #0]
 800df2e:	6801      	ldr	r1, [r0, #0]
 800df30:	115e      	asrs	r6, r3, #5
 800df32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df36:	f013 031f 	ands.w	r3, r3, #31
 800df3a:	b087      	sub	sp, #28
 800df3c:	bf18      	it	ne
 800df3e:	3604      	addne	r6, #4
 800df40:	2500      	movs	r5, #0
 800df42:	1f37      	subs	r7, r6, #4
 800df44:	4682      	mov	sl, r0
 800df46:	4690      	mov	r8, r2
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df4e:	46b9      	mov	r9, r7
 800df50:	463c      	mov	r4, r7
 800df52:	9502      	str	r5, [sp, #8]
 800df54:	46ab      	mov	fp, r5
 800df56:	784a      	ldrb	r2, [r1, #1]
 800df58:	1c4b      	adds	r3, r1, #1
 800df5a:	9303      	str	r3, [sp, #12]
 800df5c:	b342      	cbz	r2, 800dfb0 <__hexnan+0x88>
 800df5e:	4610      	mov	r0, r2
 800df60:	9105      	str	r1, [sp, #20]
 800df62:	9204      	str	r2, [sp, #16]
 800df64:	f7ff fd94 	bl	800da90 <__hexdig_fun>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d151      	bne.n	800e010 <__hexnan+0xe8>
 800df6c:	9a04      	ldr	r2, [sp, #16]
 800df6e:	9905      	ldr	r1, [sp, #20]
 800df70:	2a20      	cmp	r2, #32
 800df72:	d818      	bhi.n	800dfa6 <__hexnan+0x7e>
 800df74:	9b02      	ldr	r3, [sp, #8]
 800df76:	459b      	cmp	fp, r3
 800df78:	dd13      	ble.n	800dfa2 <__hexnan+0x7a>
 800df7a:	454c      	cmp	r4, r9
 800df7c:	d206      	bcs.n	800df8c <__hexnan+0x64>
 800df7e:	2d07      	cmp	r5, #7
 800df80:	dc04      	bgt.n	800df8c <__hexnan+0x64>
 800df82:	462a      	mov	r2, r5
 800df84:	4649      	mov	r1, r9
 800df86:	4620      	mov	r0, r4
 800df88:	f7ff ffa8 	bl	800dedc <L_shift>
 800df8c:	4544      	cmp	r4, r8
 800df8e:	d952      	bls.n	800e036 <__hexnan+0x10e>
 800df90:	2300      	movs	r3, #0
 800df92:	f1a4 0904 	sub.w	r9, r4, #4
 800df96:	f844 3c04 	str.w	r3, [r4, #-4]
 800df9a:	f8cd b008 	str.w	fp, [sp, #8]
 800df9e:	464c      	mov	r4, r9
 800dfa0:	461d      	mov	r5, r3
 800dfa2:	9903      	ldr	r1, [sp, #12]
 800dfa4:	e7d7      	b.n	800df56 <__hexnan+0x2e>
 800dfa6:	2a29      	cmp	r2, #41	@ 0x29
 800dfa8:	d157      	bne.n	800e05a <__hexnan+0x132>
 800dfaa:	3102      	adds	r1, #2
 800dfac:	f8ca 1000 	str.w	r1, [sl]
 800dfb0:	f1bb 0f00 	cmp.w	fp, #0
 800dfb4:	d051      	beq.n	800e05a <__hexnan+0x132>
 800dfb6:	454c      	cmp	r4, r9
 800dfb8:	d206      	bcs.n	800dfc8 <__hexnan+0xa0>
 800dfba:	2d07      	cmp	r5, #7
 800dfbc:	dc04      	bgt.n	800dfc8 <__hexnan+0xa0>
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	4649      	mov	r1, r9
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f7ff ff8a 	bl	800dedc <L_shift>
 800dfc8:	4544      	cmp	r4, r8
 800dfca:	d936      	bls.n	800e03a <__hexnan+0x112>
 800dfcc:	f1a8 0204 	sub.w	r2, r8, #4
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfda:	429f      	cmp	r7, r3
 800dfdc:	d2f9      	bcs.n	800dfd2 <__hexnan+0xaa>
 800dfde:	1b3b      	subs	r3, r7, r4
 800dfe0:	f023 0303 	bic.w	r3, r3, #3
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	3401      	adds	r4, #1
 800dfe8:	3e03      	subs	r6, #3
 800dfea:	42b4      	cmp	r4, r6
 800dfec:	bf88      	it	hi
 800dfee:	2304      	movhi	r3, #4
 800dff0:	4443      	add	r3, r8
 800dff2:	2200      	movs	r2, #0
 800dff4:	f843 2b04 	str.w	r2, [r3], #4
 800dff8:	429f      	cmp	r7, r3
 800dffa:	d2fb      	bcs.n	800dff4 <__hexnan+0xcc>
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	b91b      	cbnz	r3, 800e008 <__hexnan+0xe0>
 800e000:	4547      	cmp	r7, r8
 800e002:	d128      	bne.n	800e056 <__hexnan+0x12e>
 800e004:	2301      	movs	r3, #1
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	2005      	movs	r0, #5
 800e00a:	b007      	add	sp, #28
 800e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e010:	3501      	adds	r5, #1
 800e012:	2d08      	cmp	r5, #8
 800e014:	f10b 0b01 	add.w	fp, fp, #1
 800e018:	dd06      	ble.n	800e028 <__hexnan+0x100>
 800e01a:	4544      	cmp	r4, r8
 800e01c:	d9c1      	bls.n	800dfa2 <__hexnan+0x7a>
 800e01e:	2300      	movs	r3, #0
 800e020:	f844 3c04 	str.w	r3, [r4, #-4]
 800e024:	2501      	movs	r5, #1
 800e026:	3c04      	subs	r4, #4
 800e028:	6822      	ldr	r2, [r4, #0]
 800e02a:	f000 000f 	and.w	r0, r0, #15
 800e02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e032:	6020      	str	r0, [r4, #0]
 800e034:	e7b5      	b.n	800dfa2 <__hexnan+0x7a>
 800e036:	2508      	movs	r5, #8
 800e038:	e7b3      	b.n	800dfa2 <__hexnan+0x7a>
 800e03a:	9b01      	ldr	r3, [sp, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d0dd      	beq.n	800dffc <__hexnan+0xd4>
 800e040:	f1c3 0320 	rsb	r3, r3, #32
 800e044:	f04f 32ff 	mov.w	r2, #4294967295
 800e048:	40da      	lsrs	r2, r3
 800e04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e04e:	4013      	ands	r3, r2
 800e050:	f846 3c04 	str.w	r3, [r6, #-4]
 800e054:	e7d2      	b.n	800dffc <__hexnan+0xd4>
 800e056:	3f04      	subs	r7, #4
 800e058:	e7d0      	b.n	800dffc <__hexnan+0xd4>
 800e05a:	2004      	movs	r0, #4
 800e05c:	e7d5      	b.n	800e00a <__hexnan+0xe2>

0800e05e <__ascii_mbtowc>:
 800e05e:	b082      	sub	sp, #8
 800e060:	b901      	cbnz	r1, 800e064 <__ascii_mbtowc+0x6>
 800e062:	a901      	add	r1, sp, #4
 800e064:	b142      	cbz	r2, 800e078 <__ascii_mbtowc+0x1a>
 800e066:	b14b      	cbz	r3, 800e07c <__ascii_mbtowc+0x1e>
 800e068:	7813      	ldrb	r3, [r2, #0]
 800e06a:	600b      	str	r3, [r1, #0]
 800e06c:	7812      	ldrb	r2, [r2, #0]
 800e06e:	1e10      	subs	r0, r2, #0
 800e070:	bf18      	it	ne
 800e072:	2001      	movne	r0, #1
 800e074:	b002      	add	sp, #8
 800e076:	4770      	bx	lr
 800e078:	4610      	mov	r0, r2
 800e07a:	e7fb      	b.n	800e074 <__ascii_mbtowc+0x16>
 800e07c:	f06f 0001 	mvn.w	r0, #1
 800e080:	e7f8      	b.n	800e074 <__ascii_mbtowc+0x16>

0800e082 <_realloc_r>:
 800e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e086:	4680      	mov	r8, r0
 800e088:	4615      	mov	r5, r2
 800e08a:	460c      	mov	r4, r1
 800e08c:	b921      	cbnz	r1, 800e098 <_realloc_r+0x16>
 800e08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e092:	4611      	mov	r1, r2
 800e094:	f7fb bc84 	b.w	80099a0 <_malloc_r>
 800e098:	b92a      	cbnz	r2, 800e0a6 <_realloc_r+0x24>
 800e09a:	f7fd fd3d 	bl	800bb18 <_free_r>
 800e09e:	2400      	movs	r4, #0
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a6:	f000 f840 	bl	800e12a <_malloc_usable_size_r>
 800e0aa:	4285      	cmp	r5, r0
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	d802      	bhi.n	800e0b6 <_realloc_r+0x34>
 800e0b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0b4:	d8f4      	bhi.n	800e0a0 <_realloc_r+0x1e>
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	4640      	mov	r0, r8
 800e0ba:	f7fb fc71 	bl	80099a0 <_malloc_r>
 800e0be:	4607      	mov	r7, r0
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d0ec      	beq.n	800e09e <_realloc_r+0x1c>
 800e0c4:	42b5      	cmp	r5, r6
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	bf28      	it	cs
 800e0cc:	4632      	movcs	r2, r6
 800e0ce:	f7fc fec2 	bl	800ae56 <memcpy>
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	f7fd fd1f 	bl	800bb18 <_free_r>
 800e0da:	463c      	mov	r4, r7
 800e0dc:	e7e0      	b.n	800e0a0 <_realloc_r+0x1e>

0800e0de <__ascii_wctomb>:
 800e0de:	4603      	mov	r3, r0
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	b141      	cbz	r1, 800e0f6 <__ascii_wctomb+0x18>
 800e0e4:	2aff      	cmp	r2, #255	@ 0xff
 800e0e6:	d904      	bls.n	800e0f2 <__ascii_wctomb+0x14>
 800e0e8:	228a      	movs	r2, #138	@ 0x8a
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f0:	4770      	bx	lr
 800e0f2:	700a      	strb	r2, [r1, #0]
 800e0f4:	2001      	movs	r0, #1
 800e0f6:	4770      	bx	lr

0800e0f8 <fiprintf>:
 800e0f8:	b40e      	push	{r1, r2, r3}
 800e0fa:	b503      	push	{r0, r1, lr}
 800e0fc:	4601      	mov	r1, r0
 800e0fe:	ab03      	add	r3, sp, #12
 800e100:	4805      	ldr	r0, [pc, #20]	@ (800e118 <fiprintf+0x20>)
 800e102:	f853 2b04 	ldr.w	r2, [r3], #4
 800e106:	6800      	ldr	r0, [r0, #0]
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	f7ff f98d 	bl	800d428 <_vfiprintf_r>
 800e10e:	b002      	add	sp, #8
 800e110:	f85d eb04 	ldr.w	lr, [sp], #4
 800e114:	b003      	add	sp, #12
 800e116:	4770      	bx	lr
 800e118:	200005ac 	.word	0x200005ac

0800e11c <abort>:
 800e11c:	b508      	push	{r3, lr}
 800e11e:	2006      	movs	r0, #6
 800e120:	f000 f834 	bl	800e18c <raise>
 800e124:	2001      	movs	r0, #1
 800e126:	f7f4 fff5 	bl	8003114 <_exit>

0800e12a <_malloc_usable_size_r>:
 800e12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e12e:	1f18      	subs	r0, r3, #4
 800e130:	2b00      	cmp	r3, #0
 800e132:	bfbc      	itt	lt
 800e134:	580b      	ldrlt	r3, [r1, r0]
 800e136:	18c0      	addlt	r0, r0, r3
 800e138:	4770      	bx	lr

0800e13a <_raise_r>:
 800e13a:	291f      	cmp	r1, #31
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4605      	mov	r5, r0
 800e140:	460c      	mov	r4, r1
 800e142:	d904      	bls.n	800e14e <_raise_r+0x14>
 800e144:	2316      	movs	r3, #22
 800e146:	6003      	str	r3, [r0, #0]
 800e148:	f04f 30ff 	mov.w	r0, #4294967295
 800e14c:	bd38      	pop	{r3, r4, r5, pc}
 800e14e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e150:	b112      	cbz	r2, 800e158 <_raise_r+0x1e>
 800e152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e156:	b94b      	cbnz	r3, 800e16c <_raise_r+0x32>
 800e158:	4628      	mov	r0, r5
 800e15a:	f000 f831 	bl	800e1c0 <_getpid_r>
 800e15e:	4622      	mov	r2, r4
 800e160:	4601      	mov	r1, r0
 800e162:	4628      	mov	r0, r5
 800e164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e168:	f000 b818 	b.w	800e19c <_kill_r>
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d00a      	beq.n	800e186 <_raise_r+0x4c>
 800e170:	1c59      	adds	r1, r3, #1
 800e172:	d103      	bne.n	800e17c <_raise_r+0x42>
 800e174:	2316      	movs	r3, #22
 800e176:	6003      	str	r3, [r0, #0]
 800e178:	2001      	movs	r0, #1
 800e17a:	e7e7      	b.n	800e14c <_raise_r+0x12>
 800e17c:	2100      	movs	r1, #0
 800e17e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e182:	4620      	mov	r0, r4
 800e184:	4798      	blx	r3
 800e186:	2000      	movs	r0, #0
 800e188:	e7e0      	b.n	800e14c <_raise_r+0x12>
	...

0800e18c <raise>:
 800e18c:	4b02      	ldr	r3, [pc, #8]	@ (800e198 <raise+0xc>)
 800e18e:	4601      	mov	r1, r0
 800e190:	6818      	ldr	r0, [r3, #0]
 800e192:	f7ff bfd2 	b.w	800e13a <_raise_r>
 800e196:	bf00      	nop
 800e198:	200005ac 	.word	0x200005ac

0800e19c <_kill_r>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	4d07      	ldr	r5, [pc, #28]	@ (800e1bc <_kill_r+0x20>)
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	602b      	str	r3, [r5, #0]
 800e1aa:	f7f4 ffa3 	bl	80030f4 <_kill>
 800e1ae:	1c43      	adds	r3, r0, #1
 800e1b0:	d102      	bne.n	800e1b8 <_kill_r+0x1c>
 800e1b2:	682b      	ldr	r3, [r5, #0]
 800e1b4:	b103      	cbz	r3, 800e1b8 <_kill_r+0x1c>
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20000c40 	.word	0x20000c40

0800e1c0 <_getpid_r>:
 800e1c0:	f7f4 bf90 	b.w	80030e4 <_getpid>

0800e1c4 <_init>:
 800e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c6:	bf00      	nop
 800e1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ca:	bc08      	pop	{r3}
 800e1cc:	469e      	mov	lr, r3
 800e1ce:	4770      	bx	lr

0800e1d0 <_fini>:
 800e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d2:	bf00      	nop
 800e1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d6:	bc08      	pop	{r3}
 800e1d8:	469e      	mov	lr, r3
 800e1da:	4770      	bx	lr
